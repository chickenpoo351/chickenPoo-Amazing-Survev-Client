import {v as m, C as K, D as ft, G as O, B as Re, H as $e, a as Xe, l as we, h as Z, u as y, p as St, $ as u, m as k, b as J, c as Me, T as ot, L as as, S as ae, d as X, P as Tt, e as D, E as ve, f as vt, g as U, I as F, i as be, M as ce, j, k as jt, n as Pt, o as os, R as ls, q as ns, r as vi, s as Yt, t as Ei, A as Se, w as le, x as ti, y as Ge, z as Pr, F as di, J as pi, K as rt, N as ge, O as Ri, Q as qt, W as Gt, U as ms, V as Lr, X as hs, Y as cs, Z as us, _ as fi, a0 as Oe, a1 as He, a2 as _i, a3 as Oi, a4 as ds, a5 as ps, a6 as fs, a7 as ws, a8 as Ss} from "./BTiZUX_n.patched.js";
class gs {
    teamAliveCounts = [];
    serialize(e) {
        e.writeArray(this.teamAliveCounts, 8, t => {
            e.writeUint8(t)
        }
        )
    }
    deserialize(e) {
        this.teamAliveCounts = e.readArray(8, () => e.readUint8())
    }
}
class ys {
    reason = "";
    serialize(e) {
        e.writeString(this.reason)
    }
    deserialize(e) {
        this.reason = e.readString()
    }
}
class xs {
    item = "";
    weapIdx = 0;
    serialize(e) {
        e.writeGameType(this.item),
        e.writeUint8(this.weapIdx)
    }
    deserialize(e) {
        this.item = e.readGameType(),
        this.weapIdx = e.readUint8()
    }
}
class Fi {
    pos = m.create(0, 0);
    type = "";
    isPing = !1;
    serialize(e) {
        e.writeVec(this.pos, 0, 0, 1024, 1024, 16),
        e.writeGameType(this.type),
        e.writeBoolean(this.isPing)
    }
    deserialize(e) {
        this.pos = e.readVec(0, 0, 1024, 1024, 16),
        this.type = e.readGameType(),
        this.isPing = e.readBoolean()
    }
}
class wi {
    playerStats = {
        playerId: 0,
        timeAlive: 0,
        kills: 0,
        dead: !1,
        damageDealt: 0,
        damageTaken: 0
    };
    serialize(e) {
        e.writeUint16(this.playerStats.playerId),
        e.writeUint16(this.playerStats.timeAlive),
        e.writeUint8(this.playerStats.kills),
        e.writeUint8(this.playerStats.dead),
        e.writeUint16(Math.round(this.playerStats.damageDealt)),
        e.writeUint16(Math.round(this.playerStats.damageTaken))
    }
    deserialize(e) {
        const t = {};
        t.playerId = e.readUint16(),
        t.timeAlive = e.readUint16(),
        t.kills = e.readUint8(),
        t.dead = e.readUint8(),
        t.damageDealt = e.readUint16(),
        t.damageTaken = e.readUint16(),
        this.playerStats = t
    }
}
class zs {
    teamId = 0;
    teamRank = 0;
    gameOver = !1;
    winningTeamId = 0;
    playerStats = [];
    serialize(e) {
        e.writeUint8(this.teamId),
        e.writeUint8(this.teamRank),
        e.writeUint8(+this.gameOver),
        e.writeUint8(this.winningTeamId),
        e.writeArray(this.playerStats, 8, t => {
            const i = new wi;
            i.playerStats = t,
            i.serialize(e)
        }
        )
    }
    deserialize(e) {
        this.teamId = e.readUint8(),
        this.teamRank = e.readUint8(),
        this.gameOver = e.readUint8(),
        this.winningTeamId = e.readUint8(),
        this.playerStats = e.readArray(8, () => {
            const t = new wi;
            return t.deserialize(e),
            t.playerStats
        }
        )
    }
}
class Gi {
    seq = 0;
    moveLeft = !1;
    moveRight = !1;
    moveUp = !1;
    moveDown = !1;
    shootStart = !1;
    shootHold = !1;
    portrait = !1;
    touchMoveActive = !1;
    touchMoveDir = m.create(1, 0);
    touchMoveLen = 255;
    toMouseDir = m.create(1, 0);
    toMouseLen = 0;
    inputs = [];
    useItem = "";
    addInput(e) {
        this.inputs.length < 7 && !this.inputs.includes(e) && this.inputs.push(e)
    }
    serialize(e) {
        e.writeUint8(this.seq),
        e.writeBoolean(this.moveLeft),
        e.writeBoolean(this.moveRight),
        e.writeBoolean(this.moveUp),
        e.writeBoolean(this.moveDown),
        e.writeBoolean(this.shootStart),
        e.writeBoolean(this.shootHold),
        e.writeBoolean(this.portrait),
        e.writeBoolean(this.touchMoveActive),
        this.touchMoveActive && (e.writeUnitVec(this.touchMoveDir, 8),
        e.writeUint8(this.touchMoveLen)),
        e.writeUnitVec(this.toMouseDir, 10),
        e.writeFloat(this.toMouseLen, 0, K.MouseMaxDist, 8),
        e.writeArray(this.inputs, 4, t => {
            e.writeUint8(t)
        }
        ),
        e.writeGameType(this.useItem)
    }
    deserialize(e) {
        this.seq = e.readUint8(),
        this.moveLeft = e.readBoolean(),
        this.moveRight = e.readBoolean(),
        this.moveUp = e.readBoolean(),
        this.moveDown = e.readBoolean(),
        this.shootStart = e.readBoolean(),
        this.shootHold = e.readBoolean(),
        this.portrait = e.readBoolean(),
        this.touchMoveActive = e.readBoolean(),
        this.touchMoveActive && (this.touchMoveDir = e.readUnitVec(8),
        this.touchMoveLen = e.readUint8()),
        this.toMouseDir = e.readUnitVec(10),
        this.toMouseLen = e.readFloat(0, K.MouseMaxDist, 8),
        this.inputs = e.readArray(4, () => e.readUint8()),
        this.useItem = e.readGameType()
    }
}
class bs {
    teamMode;
    playerId = 0;
    started = !1;
    emotes = [];
    serialize(e) {
        e.writeUint8(this.teamMode),
        e.writeUint16(this.playerId),
        e.writeBoolean(this.started),
        e.writeArray(this.emotes, 8, t => {
            e.writeGameType(t)
        }
        )
    }
    deserialize(e) {
        this.teamMode = e.readUint8(),
        this.playerId = e.readUint16(),
        this.started = e.readBoolean(),
        this.emotes = e.readArray(8, () => e.readGameType())
    }
}
class ks {
    protocol = 0;
    matchPriv = "";
    questPriv = "";
    name = "";
    useTouch = !1;
    isMobile = !1;
    bot = !1;
    loadout = {
        outfit: "",
        melee: "",
        heal: "",
        boost: "",
        emotes: []
    };
    serialize(e) {
        e.writeUint32(this.protocol),
        e.writeString(this.matchPriv),
        e.writeString(this.questPriv),
        e.writeString(this.name, K.PlayerNameMaxLen),
        e.writeBoolean(this.useTouch),
        e.writeBoolean(this.isMobile),
        e.writeBoolean(this.bot),
        e.writeGameType(this.loadout.outfit),
        e.writeGameType(this.loadout.melee),
        e.writeGameType(this.loadout.heal),
        e.writeGameType(this.loadout.boost),
        e.writeArray(this.loadout.emotes, 8, t => {
            e.writeGameType(t)
        }
        )
    }
    deserialize(e) {
        this.protocol = e.readUint32(),
        this.matchPriv = e.readString(),
        this.questPriv = e.readString(),
        this.name = e.readString(K.PlayerNameMaxLen),
        this.useTouch = e.readBoolean(),
        this.isMobile = e.readBoolean(),
        this.bot = e.readBoolean(),
        this.loadout.outfit = e.readGameType(),
        this.loadout.melee = e.readGameType(),
        this.loadout.heal = e.readGameType(),
        this.loadout.boost = e.readGameType(),
        this.loadout.emotes = e.readArray(8, () => e.readGameType())
    }
}
class vs {
    itemSourceType = "";
    mapSourceType = "";
    damageType = ft.Player;
    targetId = 0;
    killerId = 0;
    killCreditId = 0;
    killerKills = 0;
    downed = !1;
    killed = !1;
    serialize(e) {
        e.writeUint8(this.damageType),
        e.writeGameType(this.itemSourceType),
        e.writeMapType(this.mapSourceType),
        e.writeUint16(this.targetId),
        e.writeUint16(this.killerId),
        e.writeUint16(this.killCreditId),
        e.writeUint8(this.killerKills),
        e.writeBoolean(this.downed),
        e.writeBoolean(this.killed)
    }
    deserialize(e) {
        this.damageType = e.readUint8(),
        this.itemSourceType = e.readGameType(),
        this.mapSourceType = e.readMapType(),
        this.targetId = e.readUint16(),
        this.killerId = e.readUint16(),
        this.killCreditId = e.readUint16(),
        this.killerKills = e.readUint8(),
        this.downed = e.readBoolean(),
        this.killed = e.readBoolean()
    }
}
function _s(o, e) {
    o.writeUint8(e.width),
    o.writeUint8(e.looped),
    o.writeArray(e.points, 8, t => {
        o.writeMapPos(t)
    }
    )
}
function Is(o) {
    return {
        width: o.readUint8(),
        looped: !!o.readUint8(),
        points: o.readArray(8, () => o.readMapPos())
    }
}
function Ms(o, e) {
    o.writeString(e.name),
    o.writeVec(e.pos, 0, 0, 1, 1, 16)
}
function Ts(o) {
    return {
        name: o.readString(),
        pos: o.readVec(0, 0, 1, 1, 16)
    }
}
function Cs(o, e) {
    o.writeMapPos(e.min),
    o.writeMapPos(e.max),
    o.writeUint32(e.color),
    o.writeFloat32(e.roughness),
    o.writeFloat32(e.offsetDist),
    o.writeBits(e.order, 7),
    o.writeBoolean(e.useAsMapShape)
}
function Ps(o) {
    return {
        min: o.readMapPos(),
        max: o.readMapPos(),
        color: o.readUint32(),
        roughness: o.readFloat32(),
        offsetDist: o.readFloat32(),
        order: o.readBits(7),
        useAsMapShape: o.readBoolean()
    }
}
function Ls(o, e) {
    o.writeMapPos(e.pos),
    o.writeFloat(e.scale, K.MapObjectMinScale, K.MapObjectMaxScale, 8),
    o.writeMapType(e.type),
    o.writeBits(e.ori, 2),
    o.writeAlignToNextByte()
}
function Ds(o) {
    const e = {
        pos: o.readMapPos(),
        scale: o.readFloat(K.MapObjectMinScale, K.MapObjectMaxScale, 8),
        type: o.readMapType(),
        ori: o.readBits(2)
    };
    return o.readAlignToNextByte(),
    e
}
class As {
    mapName = "";
    seed = 0;
    width = 0;
    height = 0;
    shoreInset = 0;
    grassInset = 0;
    rivers = [];
    places = [];
    objects = [];
    groundPatches = [];
    serialize(e) {
        e.writeString(this.mapName, K.MapNameMaxLen),
        e.writeUint32(this.seed),
        e.writeUint16(this.width),
        e.writeUint16(this.height),
        e.writeUint16(this.shoreInset),
        e.writeUint16(this.grassInset),
        e.writeArray(this.rivers, 8, t => {
            _s(e, t)
        }
        ),
        e.writeArray(this.places, 8, t => {
            Ms(e, t)
        }
        ),
        e.writeArray(this.objects, 16, t => {
            Ls(e, t)
        }
        ),
        e.writeArray(this.groundPatches, 8, t => {
            Cs(e, t)
        }
        )
    }
    deserialize(e) {
        this.mapName = e.readString(K.MapNameMaxLen),
        this.seed = e.readUint32(),
        this.width = e.readUint16(),
        this.height = e.readUint16(),
        this.shoreInset = e.readUint16(),
        this.grassInset = e.readUint16(),
        this.rivers = e.readArray(8, () => Is(e)),
        this.places = e.readArray(8, () => Ts(e)),
        this.objects = e.readArray(16, () => Ds(e)),
        this.groundPatches = e.readArray(8, () => Ps(e))
    }
}
class Bs {
    role = "";
    serialize(e) {
        e.writeGameType(this.role),
        e.writeBits(0, 6)
    }
    deserialize(e) {
        this.role = e.readGameType(),
        e.readBits(6)
    }
}
class Es {
    type = 0;
    item = "";
    count = 0;
    serialize(e) {
        e.writeUint8(this.type),
        e.writeGameType(this.item),
        e.writeUint8(this.count)
    }
    deserialize(e) {
        this.type = e.readUint8(),
        this.item = e.readGameType(),
        this.count = e.readUint8()
    }
}
class Rs {
    playerId = 0;
    killerId = 0;
    role = "";
    assigned = !1;
    killed = !1;
    serialize(e) {
        e.writeUint16(this.playerId),
        e.writeUint16(this.killerId),
        e.writeGameType(this.role),
        e.writeBoolean(this.assigned),
        e.writeBoolean(this.killed)
    }
    deserialize(e) {
        this.playerId = e.readUint16(),
        this.killerId = e.readUint16(),
        this.role = e.readGameType(),
        this.assigned = e.readBoolean(),
        this.killed = e.readBoolean()
    }
}
class Os {
    specBegin = !1;
    specNext = !1;
    specPrev = !1;
    specForce = !1;
    serialize(e) {
        e.writeBoolean(this.specBegin),
        e.writeBoolean(this.specNext),
        e.writeBoolean(this.specPrev),
        e.writeBoolean(this.specForce)
    }
    deserialize(e) {
        this.specBegin = e.readBoolean(),
        this.specNext = e.readBoolean(),
        this.specPrev = e.readBoolean(),
        this.specForce = e.readBoolean()
    }
}
var ye = (o => (o[o.Invalid = 0] = "Invalid",
o[o.Player = 1] = "Player",
o[o.Obstacle = 2] = "Obstacle",
o[o.Loot = 3] = "Loot",
o[o.LootSpawner = 4] = "LootSpawner",
o[o.DeadBody = 5] = "DeadBody",
o[o.Building = 6] = "Building",
o[o.Structure = 7] = "Structure",
o[o.Decal = 8] = "Decal",
o[o.Projectile = 9] = "Projectile",
o[o.Smoke = 10] = "Smoke",
o[o.Airdrop = 11] = "Airdrop",
o))(ye || {});
const ii = {
    1: {
        serializedFullSize: 32,
        serializePart: (o, e) => {
            o.writeMapPos(e.pos),
            o.writeUnitVec(e.dir, 8)
        }
        ,
        serializeFull: (o, e) => {
            o.writeGameType(e.outfit),
            o.writeGameType(e.backpack),
            o.writeGameType(e.helmet),
            o.writeGameType(e.chest),
            o.writeGameType(e.activeWeapon),
            o.writeBits(e.layer, 2),
            o.writeBoolean(e.dead),
            o.writeBoolean(e.downed),
            o.writeBits(e.animType, Re.Anim),
            o.writeBits(e.animSeq, 3),
            o.writeBits(e.actionType, Re.Action),
            o.writeBits(e.actionSeq, 3),
            o.writeBoolean(e.wearingPan),
            o.writeBoolean(e.healEffect),
            o.writeBoolean(e.frozen),
            e.frozen && o.writeBits(e.frozenOri, 2),
            o.writeBoolean(e.hasteType !== $e.None),
            e.hasteType !== $e.None && (o.writeBits(e.hasteType, Re.Haste),
            o.writeBits(e.hasteSeq, 3)),
            o.writeBoolean(e.actionItem !== ""),
            e.actionItem !== "" && o.writeGameType(e.actionItem);
            const t = e.scale !== 1;
            o.writeBoolean(t),
            t && o.writeFloat(e.scale, K.PlayerMinScale, K.PlayerMaxScale, 8);
            const i = e.role !== "";
            o.writeBoolean(i),
            i && o.writeGameType(e.role);
            const r = e.perks.length > 0;
            o.writeBoolean(r),
            r && o.writeArray(e.perks, Re.Perks, s => {
                o.writeGameType(s.type),
                o.writeBoolean(s.droppable)
            }
            )
        }
        ,
        deserializePart: (o, e) => {
            e.pos = o.readMapPos(),
            e.dir = o.readUnitVec(8)
        }
        ,
        deserializeFull: (o, e) => {
            e.outfit = o.readGameType(),
            e.backpack = o.readGameType(),
            e.helmet = o.readGameType(),
            e.chest = o.readGameType(),
            e.activeWeapon = o.readGameType(),
            e.layer = o.readBits(2),
            e.dead = o.readBoolean(),
            e.downed = o.readBoolean(),
            e.animType = o.readBits(Re.Anim),
            e.animSeq = o.readBits(3),
            e.actionType = o.readBits(Re.Action),
            e.actionSeq = o.readBits(3),
            e.wearingPan = o.readBoolean(),
            e.healEffect = o.readBoolean(),
            e.frozen = o.readBoolean(),
            e.frozenOri = e.frozen ? o.readBits(2) : 0,
            e.hasteType = $e.None,
            e.hasteSeq = -1,
            o.readBoolean() && (e.hasteType = o.readBits(Re.Haste),
            e.hasteSeq = o.readBits(3));
            const i = o.readBoolean();
            e.actionItem = i ? o.readGameType() : "";
            const r = o.readBoolean();
            e.scale = r ? o.readFloat(K.PlayerMinScale, K.PlayerMaxScale, 8) : 1;
            const s = o.readBoolean();
            e.role = s ? o.readGameType() : "",
            e.perks = [],
            o.readBoolean() && (e.perks = o.readArray(Re.Perks, () => ({
                type: o.readGameType(),
                droppable: o.readBoolean()
            })))
        }
    },
    2: {
        serializedFullSize: 0,
        serializePart: (o, e) => {
            o.writeMapPos(e.pos),
            o.writeBits(e.ori, 2),
            o.writeFloat(e.scale, K.MapObjectMinScale, K.MapObjectMaxScale, 8)
        }
        ,
        serializeFull: (o, e) => {
            o.writeFloat(e.healthT, 0, 1, 8),
            o.writeMapType(e.type),
            o.writeBits(e.layer, 2),
            o.writeBoolean(e.dead),
            o.writeBoolean(e.isDoor),
            e.isDoor && (o.writeBoolean(e.door.open),
            o.writeBoolean(e.door.canUse),
            o.writeBoolean(e.door.locked),
            o.writeBits(e.door.seq, 5)),
            o.writeBoolean(e.isButton),
            e.isButton && (o.writeBoolean(e.button.onOff),
            o.writeBoolean(e.button.canUse),
            o.writeBits(e.button.seq, 6)),
            o.writeBoolean(e.isPuzzlePiece),
            e.isPuzzlePiece && o.writeUint16(e.parentBuildingId),
            o.writeBoolean(e.isSkin),
            e.isSkin && o.writeUint16(e.skinPlayerId)
        }
        ,
        deserializePart: (o, e) => {
            e.pos = o.readMapPos(),
            e.ori = o.readBits(2),
            e.scale = o.readFloat(K.MapObjectMinScale, K.MapObjectMaxScale, 8)
        }
        ,
        deserializeFull: (o, e) => {
            e.healthT = o.readFloat(0, 1, 8),
            e.type = o.readMapType(),
            e.layer = o.readBits(2),
            e.dead = o.readBoolean(),
            e.isDoor = o.readBoolean(),
            e.isDoor && (e.door = {},
            e.door.open = o.readBoolean(),
            e.door.canUse = o.readBoolean(),
            e.door.locked = o.readBoolean(),
            e.door.seq = o.readBits(5)),
            e.isButton = o.readBoolean(),
            e.isButton && (e.button = {},
            e.button.onOff = o.readBoolean(),
            e.button.canUse = o.readBoolean(),
            e.button.seq = o.readBits(6)),
            e.isPuzzlePiece = o.readBoolean(),
            e.isPuzzlePiece && (e.parentBuildingId = o.readUint16()),
            e.isSkin = o.readBoolean(),
            e.isSkin && (e.skinPlayerId = o.readUint16())
        }
    },
    6: {
        serializedFullSize: 0,
        serializePart: (o, e) => {
            o.writeBoolean(e.ceilingDead),
            o.writeBoolean(e.occupied),
            o.writeBoolean(e.ceilingDamaged),
            o.writeBoolean(e.hasPuzzle),
            e.hasPuzzle && (o.writeBoolean(e.puzzleSolved),
            o.writeBits(e.puzzleErrSeq, 7))
        }
        ,
        serializeFull: (o, e) => {
            o.writeMapPos(e.pos),
            o.writeMapType(e.type),
            o.writeBits(e.ori, 2),
            o.writeBits(e.layer, 2)
        }
        ,
        deserializePart: (o, e) => {
            e.ceilingDead = o.readBoolean(),
            e.occupied = o.readBoolean(),
            e.ceilingDamaged = o.readBoolean(),
            e.hasPuzzle = o.readBoolean(),
            e.hasPuzzle && (e.puzzleSolved = o.readBoolean(),
            e.puzzleErrSeq = o.readBits(7))
        }
        ,
        deserializeFull: (o, e) => {
            e.pos = o.readMapPos(),
            e.type = o.readMapType(),
            e.ori = o.readBits(2),
            e.layer = o.readBits(2)
        }
    },
    7: {
        serializedFullSize: 0,
        serializePart: () => {}
        ,
        serializeFull: (o, e) => {
            o.writeMapPos(e.pos),
            o.writeMapType(e.type),
            o.writeBits(e.ori, 2),
            o.writeBoolean(e.interiorSoundEnabled),
            o.writeBoolean(e.interiorSoundAlt);
            for (let t = 0; t < O.structureLayerCount; t++)
                o.writeUint16(e.layerObjIds[t])
        }
        ,
        deserializePart: () => {}
        ,
        deserializeFull: (o, e) => {
            e.pos = o.readMapPos(),
            e.type = o.readMapType(),
            e.ori = o.readBits(2),
            e.interiorSoundEnabled = o.readBoolean(),
            e.interiorSoundAlt = o.readBoolean(),
            e.layerObjIds = [];
            for (let t = 0; t < O.structureLayerCount; t++) {
                const i = o.readUint16();
                e.layerObjIds.push(i)
            }
        }
    },
    4: {
        serializedFullSize: 0,
        serializePart: (o, e) => {
            o.writeMapPos(e.pos),
            o.writeMapType(e.type),
            o.writeBits(e.layer, 2)
        }
        ,
        serializeFull: () => {}
        ,
        deserializePart: (o, e) => {
            e.pos = o.readMapPos(),
            e.type = o.readMapType(),
            e.layer = o.readBits(2)
        }
        ,
        deserializeFull: () => {}
    },
    3: {
        serializedFullSize: 5,
        serializePart: (o, e) => {
            o.writeMapPos(e.pos)
        }
        ,
        serializeFull: (o, e) => {
            o.writeGameType(e.type),
            o.writeUint8(e.count),
            o.writeBits(e.layer, 2),
            o.writeBoolean(e.isOld),
            o.writeBoolean(e.isPreloadedGun),
            o.writeBoolean(e.ownerId != 0),
            e.ownerId != 0 && o.writeUint16(e.ownerId)
        }
        ,
        deserializePart: (o, e) => {
            e.pos = o.readMapPos()
        }
        ,
        deserializeFull: (o, e) => {
            e.type = o.readGameType(),
            e.count = o.readUint8(),
            e.layer = o.readBits(2),
            e.isOld = o.readBoolean(),
            e.isPreloadedGun = o.readBoolean(),
            e.hasOwner = o.readBoolean(),
            e.hasOwner && (e.ownerId = o.readUint16())
        }
    },
    5: {
        serializedFullSize: 0,
        serializePart: (o, e) => {
            o.writeMapPos(e.pos)
        }
        ,
        serializeFull: (o, e) => {
            o.writeUint8(e.layer),
            o.writeUint16(e.playerId)
        }
        ,
        deserializePart: (o, e) => {
            e.pos = o.readMapPos()
        }
        ,
        deserializeFull: (o, e) => {
            e.layer = o.readUint8(),
            e.playerId = o.readUint16()
        }
    },
    8: {
        serializedFullSize: 0,
        serializePart: () => {}
        ,
        serializeFull: (o, e) => {
            o.writeMapPos(e.pos),
            o.writeFloat(e.scale, K.MapObjectMinScale, K.MapObjectMaxScale, 8),
            o.writeMapType(e.type),
            o.writeBits(e.ori, 2),
            o.writeBits(e.layer, 2),
            o.writeUint8(e.goreKills)
        }
        ,
        deserializePart: () => {}
        ,
        deserializeFull: (o, e) => {
            e.pos = o.readMapPos(),
            e.scale = o.readFloat(K.MapObjectMinScale, K.MapObjectMaxScale, 8),
            e.type = o.readMapType(),
            e.ori = o.readBits(2),
            e.layer = o.readBits(2),
            e.goreKills = o.readUint8()
        }
    },
    9: {
        serializedFullSize: 0,
        serializePart: (o, e) => {
            o.writeMapPos(e.pos),
            o.writeFloat(e.posZ, 0, O.projectile.maxHeight, 10),
            o.writeUnitVec(e.dir, 7)
        }
        ,
        serializeFull: (o, e) => {
            o.writeGameType(e.type),
            o.writeBits(e.layer, 2)
        }
        ,
        deserializePart: (o, e) => {
            e.pos = o.readMapPos(),
            e.posZ = o.readFloat(0, O.projectile.maxHeight, 10),
            e.dir = o.readUnitVec(7)
        }
        ,
        deserializeFull: (o, e) => {
            e.type = o.readGameType(),
            e.layer = o.readBits(2)
        }
    },
    10: {
        serializedFullSize: 0,
        serializePart: (o, e) => {
            o.writeMapPos(e.pos),
            o.writeFloat(e.rad, 0, K.SmokeMaxRad, 8)
        }
        ,
        serializeFull: (o, e) => {
            o.writeBits(e.layer, 2),
            o.writeBits(e.interior, 6)
        }
        ,
        deserializePart: (o, e) => {
            e.pos = o.readMapPos(),
            e.rad = o.readFloat(0, K.SmokeMaxRad, 8)
        }
        ,
        deserializeFull: (o, e) => {
            e.layer = o.readBits(2),
            e.interior = o.readBits(6)
        }
    },
    11: {
        serializedFullSize: 0,
        serializePart: (o, e) => {
            o.writeFloat(e.fallT, 0, 1, 7),
            o.writeBoolean(e.landed)
        }
        ,
        serializeFull: (o, e) => {
            o.writeMapPos(e.pos)
        }
        ,
        deserializePart: (o, e) => {
            e.fallT = o.readFloat(0, 1, 7),
            e.landed = o.readBoolean()
        }
        ,
        deserializeFull: (o, e) => {
            e.pos = o.readMapPos()
        }
    },
    0: {
        serializedFullSize: 0,
        deserializeFull: () => {}
        ,
        deserializePart: () => {}
        ,
        serializeFull: () => {}
        ,
        serializePart: () => {}
    }
};
function Fs(o, e) {
    if (o.writeBoolean(e.healthDirty),
    e.healthDirty && o.writeFloat(e.health, 0, 100, 8),
    o.writeBoolean(e.boostDirty),
    e.boostDirty && o.writeFloat(e.boost, 0, 100, 8),
    o.writeBoolean(e.zoomDirty),
    e.zoomDirty && o.writeUint8(e.zoom),
    o.writeBoolean(e.actionDirty),
    e.actionDirty && (o.writeFloat(e.action.time, 0, K.ActionMaxDuration, 8),
    o.writeFloat(e.action.duration, 0, K.ActionMaxDuration, 8),
    o.writeUint16(e.action.targetId)),
    o.writeBoolean(e.inventoryDirty),
    e.inventoryDirty) {
        o.writeGameType(e.scope);
        for (const t of Object.keys(O.bagSizes)) {
            const i = e.inventory[t] > 0;
            o.writeBoolean(i),
            i && o.writeBits(e.inventory[t], 9)
        }
    }
    if (o.writeBoolean(e.weapsDirty),
    e.weapsDirty) {
        o.writeBits(e.curWeapIdx, 2);
        for (let t = 0; t < O.WeaponSlot.Count; t++)
            o.writeGameType(e.weapons[t].type),
            o.writeUint8(e.weapons[t].ammo)
    }
    o.writeBoolean(e.spectatorCountDirty),
    e.spectatorCountDirty && o.writeUint8(e.spectatorCount),
    o.writeAlignToNextByte()
}
function Gs(o, e) {
    if (e.healthDirty = o.readBoolean(),
    e.healthDirty && (e.health = o.readFloat(0, 100, 8)),
    e.boostDirty = o.readBoolean(),
    e.boostDirty && (e.boost = o.readFloat(0, 100, 8)),
    e.zoomDirty = o.readBoolean(),
    e.zoomDirty && (e.zoom = o.readUint8()),
    e.actionDirty = o.readBoolean(),
    e.actionDirty && (e.action = {},
    e.action.time = o.readFloat(0, K.ActionMaxDuration, 8),
    e.action.duration = o.readFloat(0, K.ActionMaxDuration, 8),
    e.action.targetId = o.readUint16()),
    e.inventoryDirty = o.readBoolean(),
    e.inventoryDirty) {
        e.scope = o.readGameType(),
        e.inventory = {};
        const t = Object.keys(O.bagSizes);
        for (let i = 0; i < t.length; i++) {
            const r = t[i];
            let s = 0;
            o.readBoolean() && (s = o.readBits(9)),
            e.inventory[r] = s
        }
    }
    if (e.weapsDirty = o.readBoolean(),
    e.weapsDirty) {
        e.curWeapIdx = o.readBits(2),
        e.weapons = [];
        for (let t = 0; t < O.WeaponSlot.Count; t++)
            e.weapons.push({
                type: o.readGameType(),
                ammo: o.readUint8()
            })
    }
    e.spectatorCountDirty = o.readBoolean(),
    e.spectatorCountDirty && (e.spectatorCount = o.readUint8()),
    o.readAlignToNextByte()
}
function Ns(o, e) {
    o.writeArray(e, 8, t => {
        o.writeBoolean(t.hasData),
        t.hasData && (o.writeMapPos(t.pos, 11),
        o.writeBoolean(t.visible),
        o.writeBoolean(t.dead),
        o.writeBoolean(t.downed),
        o.writeBoolean(t.role !== ""),
        t.role !== "" && o.writeGameType(t.role))
    }
    ),
    o.writeAlignToNextByte()
}
function Ws(o) {
    const e = o.readArray(8, () => {
        const t = {
            hasData: o.readBoolean()
        };
        return t.hasData && (t.pos = o.readMapPos(11),
        t.visible = o.readBoolean(),
        t.dead = o.readBoolean(),
        t.downed = o.readBoolean(),
        t.role = "",
        o.readBoolean() && (t.role = o.readGameType())),
        t
    }
    );
    return o.readAlignToNextByte(),
    e
}
function Us(o, e) {
    o.writeArray(e, 8, t => {
        o.writeFloat(t.health, 0, 100, 7),
        o.writeBoolean(t.disconnected)
    }
    )
}
function qs(o) {
    return o.readArray(8, () => ({
        health: o.readFloat(0, 100, 7),
        disconnected: o.readBoolean()
    }))
}
function Vs(o, e) {
    o.writeUint16(e.playerId),
    o.writeUint8(e.teamId),
    o.writeUint8(e.groupId),
    o.writeString(e.name),
    o.writeGameType(e.loadout.heal),
    o.writeGameType(e.loadout.boost),
    o.writeAlignToNextByte()
}
function js(o, e) {
    e.playerId = o.readUint16(),
    e.teamId = o.readUint8(),
    e.groupId = o.readUint8(),
    e.name = o.readString(),
    e.loadout = {},
    e.loadout.heal = o.readGameType(),
    e.loadout.boost = o.readGameType(),
    o.readAlignToNextByte()
}
function Ys(o, e) {
    o.writeUint8(e.mode),
    o.writeFloat32(e.duration),
    o.writeMapPos(e.posOld),
    o.writeMapPos(e.posNew),
    o.writeFloat(e.radOld, 0, 2048, 16),
    o.writeFloat(e.radNew, 0, 2048, 16)
}
function Hs(o, e) {
    e.mode = o.readUint8(),
    e.duration = o.readFloat32(),
    e.posOld = o.readMapPos(),
    e.posNew = o.readMapPos(),
    e.radOld = o.readFloat(0, 2048, 16),
    e.radNew = o.readFloat(0, 2048, 16)
}
const se = {
    DeletedObjects: 1,
    FullObjects: 2,
    ActivePlayerId: 4,
    Gas: 8,
    GasCircle: 16,
    PlayerInfos: 32,
    DeletePlayerIds: 64,
    PlayerStatus: 128,
    GroupStatus: 256,
    Bullets: 512,
    Explosions: 1024,
    Emotes: 2048,
    Planes: 4096,
    AirstrikeZones: 8192,
    MapIndicators: 16384,
    KillLeader: 32768
};
class $s {
    delObjIds = [];
    fullObjects = [];
    partObjects = [];
    activePlayerId = 0;
    activePlayerIdDirty = !1;
    activePlayerData;
    gasData;
    gasDirty = !1;
    gasT = 0;
    gasTDirty = !1;
    playerInfos = [];
    deletedPlayerIds = [];
    playerStatus = [];
    playerStatusDirty = !1;
    groupStatus = [];
    groupStatusDirty = !1;
    bullets = [];
    explosions = [];
    emotes = [];
    planes = [];
    airstrikeZones = [];
    mapIndicators = [];
    killLeaderId = 0;
    killLeaderKills = 0;
    killLeaderDirty = !1;
    ack = 0;
    serialize(e) {
        let t = 0;
        const i = e.byteIndex;
        e.writeUint16(t),
        this.delObjIds.length && (e.writeArray(this.delObjIds, 16, s => {
            e.writeUint16(s)
        }
        ),
        t |= se.DeletedObjects),
        this.fullObjects.length && (e.writeArray(this.fullObjects, 16, s => {
            e.writeUint8(s.__type),
            e.writeBytes(s.partialStream, 0, s.partialStream.byteIndex),
            e.writeBytes(s.fullStream, 0, s.fullStream.byteIndex)
        }
        ),
        t |= se.FullObjects),
        e.writeArray(this.partObjects, 16, s => {
            e.writeBytes(s.partialStream, 0, s.partialStream.byteIndex)
        }
        ),
        this.activePlayerIdDirty && (e.writeUint16(this.activePlayerId),
        t |= se.ActivePlayerId),
        Fs(e, this.activePlayerData),
        this.gasDirty && (Ys(e, this.gasData),
        t |= se.Gas),
        this.gasTDirty && (e.writeFloat(this.gasT, 0, 1, 16),
        t |= se.GasCircle),
        this.playerInfos.length && (e.writeArray(this.playerInfos, 8, s => {
            Vs(e, s)
        }
        ),
        t |= se.PlayerInfos),
        this.deletedPlayerIds.length && (e.writeArray(this.deletedPlayerIds, 8, s => {
            e.writeUint16(s)
        }
        ),
        t |= se.DeletePlayerIds),
        this.playerStatusDirty && (Ns(e, this.playerStatus),
        t |= se.PlayerStatus),
        this.groupStatusDirty && (Us(e, this.groupStatus),
        t |= se.GroupStatus),
        this.bullets.length && (e.writeArray(this.bullets, 8, s => {
            e.writeUint16(s.playerId),
            e.writeMapPos(s.startPos),
            e.writeUnitVec(s.dir, 8),
            e.writeGameType(s.bulletType),
            e.writeBits(s.layer, 2),
            e.writeFloat(s.varianceT, 0, 1, 4),
            e.writeBits(s.distAdjIdx, 4),
            e.writeBoolean(s.clipDistance),
            s.clipDistance && e.writeFloat(s.distance, 0, K.MaxPosition, 16),
            e.writeBoolean(s.shotFx),
            s.shotFx && (e.writeGameType(s.shotSourceType),
            e.writeBoolean(s.shotOffhand),
            e.writeBoolean(s.lastShot)),
            e.writeBoolean(s.reflectCount > 0),
            s.reflectCount > 0 && (e.writeBits(s.reflectCount, 2),
            e.writeUint16(s.reflectObjId)),
            e.writeBoolean(s.hasSpecialFx),
            s.hasSpecialFx && (e.writeBoolean(s.shotAlt),
            e.writeBoolean(s.splinter),
            e.writeBoolean(s.trailSaturated),
            e.writeBoolean(s.apRounds),
            e.writeBoolean(s.trailSmall),
            e.writeBoolean(s.trailThick))
        }
        ),
        e.writeAlignToNextByte(),
        t |= se.Bullets),
        this.explosions.length && (e.writeArray(this.explosions, 8, s => {
            e.writeMapPos(s.pos),
            e.writeGameType(s.type),
            e.writeBits(s.layer, 2),
            e.writeAlignToNextByte()
        }
        ),
        t |= se.Explosions),
        this.emotes.length && (e.writeArray(this.emotes, 8, s => {
            e.writeUint16(s.playerId),
            e.writeGameType(s.type),
            e.writeGameType(s.itemType),
            e.writeBoolean(s.isPing),
            s.isPing && e.writeMapPos(s.pos),
            e.writeAlignToNextByte()
        }
        ),
        t |= se.Emotes),
        this.planes.length && (e.writeArray(this.planes, 8, s => {
            e.writeUint8(s.id),
            e.writeVec(m.add(s.pos, m.create(512, 512)), 0, 0, 2048, 2048, 10),
            e.writeUnitVec(s.planeDir, 8),
            e.writeBoolean(s.actionComplete),
            e.writeBits(s.action, 3)
        }
        ),
        t |= se.Planes),
        this.airstrikeZones.length && (e.writeArray(this.airstrikeZones, 8, s => {
            e.writeMapPos(s.pos, 12),
            e.writeFloat(s.rad, 0, K.AirstrikeZoneMaxRad, 8),
            e.writeFloat(s.duration, 0, K.AirstrikeZoneMaxDuration, 8)
        }
        ),
        e.writeAlignToNextByte(),
        t |= se.AirstrikeZones),
        this.mapIndicators.length && (e.writeArray(this.mapIndicators, Re.MapIndicators, s => {
            e.writeBits(s.id, Re.MapIndicators),
            e.writeBoolean(s.dead),
            e.writeBoolean(s.equipped),
            e.writeGameType(s.type),
            e.writeMapPos(s.pos)
        }
        ),
        e.writeAlignToNextByte(),
        t |= se.MapIndicators),
        this.killLeaderDirty && (e.writeUint16(this.killLeaderId),
        e.writeUint8(this.killLeaderKills),
        t |= se.KillLeader),
        e.writeUint8(this.ack);
        const r = e.byteIndex;
        e.byteIndex = i,
        e.writeUint16(t),
        e.byteIndex = r
    }
    deserialize(e, t) {
        const i = e.readUint16();
        (i & se.DeletedObjects) != 0 && (this.delObjIds = e.readArray(16, () => e.readUint16())),
        (i & se.FullObjects) != 0 && (this.fullObjects = e.readArray(16, () => {
            const s = {};
            return s.__type = e.readUint8(),
            s.__id = e.readUint16(),
            ii[s.__type].deserializePart(e, s),
            e.readAlignToNextByte(),
            ii[s.__type].deserializeFull(e, s),
            e.readAlignToNextByte(),
            s
        }
        )),
        this.partObjects = e.readArray(16, () => {
            const s = {};
            s.__id = e.readUint16();
            const a = t.viyvFp(s.__id, e);
            return ii[a].deserializePart(e, s),
            e.readAlignToNextByte(),
            s
        }
        ),
        (i & se.ActivePlayerId) != 0 && (this.activePlayerId = e.readUint16(),
        this.activePlayerIdDirty = !0);
        const r = {};
        if (Gs(e, r),
        this.activePlayerData = r,
        (i & se.Gas) != 0) {
            const s = {};
            Hs(e, s),
            this.gasData = s,
            this.gasDirty = !0
        }
        (i & se.GasCircle) != 0 && (this.gasT = e.readFloat(0, 1, 16),
        this.gasTDirty = !0),
        (i & se.PlayerInfos) != 0 && (this.playerInfos = e.readArray(8, () => {
            const s = {};
            return js(e, s),
            s
        }
        )),
        (i & se.DeletePlayerIds) != 0 && (this.deletedPlayerIds = e.readArray(8, () => e.readUint16())),
        (i & se.PlayerStatus) != 0 && (this.playerStatus = Ws(e),
        this.playerStatusDirty = !0),
        (i & se.GroupStatus) != 0 && (this.groupStatus = qs(e),
        this.groupStatusDirty = !0),
        (i & se.Bullets) != 0 && (this.bullets = e.readArray(8, () => {
            const s = {};
            return s.playerId = e.readUint16(),
            s.pos = e.readMapPos(),
            s.dir = e.readUnitVec(8),
            s.bulletType = e.readGameType(),
            s.layer = e.readBits(2),
            s.varianceT = e.readFloat(0, 1, 4),
            s.distAdjIdx = e.readBits(4),
            s.clipDistance = e.readBoolean(),
            s.clipDistance && (s.distance = e.readFloat(0, K.MaxPosition, 16)),
            s.shotFx = e.readBoolean(),
            s.shotFx && (s.shotSourceType = e.readGameType(),
            s.shotOffhand = e.readBoolean(),
            s.lastShot = e.readBoolean()),
            s.reflectCount = 0,
            s.reflectObjId = 0,
            e.readBoolean() && (s.reflectCount = e.readBits(2),
            s.reflectObjId = e.readUint16()),
            s.hasSpecialFx = e.readBoolean(),
            s.hasSpecialFx && (s.shotAlt = e.readBoolean(),
            s.splinter = e.readBoolean(),
            s.trailSaturated = e.readBoolean(),
            s.apRounds = e.readBoolean(),
            s.trailSmall = e.readBoolean(),
            s.trailThick = e.readBoolean()),
            s
        }
        ),
        e.readAlignToNextByte()),
        (i & se.Explosions) != 0 && (this.explosions = e.readArray(8, () => {
            const s = {};
            return s.pos = e.readMapPos(),
            s.type = e.readGameType(),
            s.layer = e.readBits(2),
            e.readAlignToNextByte(),
            s
        }
        )),
        (i & se.Emotes) != 0 && (this.emotes = e.readArray(8, () => {
            const s = {};
            return s.playerId = e.readUint16(),
            s.type = e.readGameType(),
            s.itemType = e.readGameType(),
            s.isPing = e.readBoolean(),
            s.isPing && (s.pos = e.readMapPos()),
            e.readAlignToNextByte(),
            s
        }
        )),
        (i & se.Planes) != 0 && (this.planes = e.readArray(8, () => {
            const s = {};
            s.id = e.readUint8();
            const a = e.readVec(0, 0, 2048, 2048, 10);
            return s.pos = m.create(a.x - 512, a.y - 512),
            s.planeDir = e.readUnitVec(8),
            s.actionComplete = e.readBoolean(),
            s.action = e.readBits(3),
            s
        }
        )),
        (i & se.AirstrikeZones) != 0 && (this.airstrikeZones = e.readArray(8, () => {
            const s = {};
            return s.pos = e.readMapPos(12),
            s.rad = e.readFloat(0, K.AirstrikeZoneMaxRad, 8),
            s.duration = e.readFloat(0, K.AirstrikeZoneMaxDuration, 8),
            s
        }
        ),
        e.readAlignToNextByte()),
        (i & se.MapIndicators) != 0 && (this.mapIndicators = e.readArray(Re.MapIndicators, () => {
            const s = {};
            return s.id = e.readBits(Re.MapIndicators),
            s.dead = e.readBoolean(),
            s.equipped = e.readBoolean(),
            s.type = e.readGameType(),
            s.pos = e.readMapPos(),
            s
        }
        ),
        e.readAlignToNextByte()),
        (i & se.KillLeader) != 0 && (this.killLeaderId = e.readUint16(),
        this.killLeaderKills = e.readUint8(),
        this.killLeaderDirty = !0),
        this.ack = e.readUint8()
    }
}
function Xs(o) {
    return o ? .5 : .25
}
class Zs {
    requests = 0;
    enabled = !0;
    throttle = !1;
    throttleTimeout = 0;
    errorLogCount = 0;
    update() {
        const e = new Date().getTime();
        this.throttle ? e > this.throttleTimeout && (this.throttle = !1,
        this.requests = 0) : this.requests = Math.max(this.requests - 1, 0)
    }
    sample() {
        return Math.random() <= .01
    }
    store(e, t) {
        if (this.enabled) {
            if (this.requests++,
            this.requests > 5) {
                this.throttleTimeout = new Date().getTime() + 180 * 1e3,
                this.throttle = !0;
                return
            }
            fetch(Xe.resolveUrl("/api/report_error"), {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({
                    loc: e,
                    ...t
                })
            })
        }
    }
    storeGeneric(e, t) {
        this.sample() && this.store("storeGeneric", {
            parent: e,
            child: t
        })
    }
    logWindowOnError(e) {
        this.errorLogCount < 2 && (this.store("windowOnError", {
            error: JSON.stringify(e)
        }),
        this.errorLogCount++)
    }
    logError(e) {
        this.store("errorLog", {
            error: e
        })
    }
}
const xe = new Zs;
setInterval( () => {
    xe.update()
}
, 1e3);
function Qs(o, e, t) {
    typeof e == "function" && (t = e,
    e = null);
    const i = {
        url: Xe.resolveUrl(o),
        type: "POST",
        timeout: 10 * 1e3,
        xhrFields: {
            withCredentials: St.anyLoginSupported()
        },
        headers: {
            "X-Requested-With": "XMLHttpRequest"
        }
    };
    e && (i.contentType = "application/json; charset=utf-8",
    i.data = JSON.stringify(e)),
    u.ajax(i).done(r => {
        t(null, r)
    }
    ).fail(r => {
        t(r)
    }
    )
}
class Ks {
    constructor(e) {
        this.config = e
    }
    events = {};
    requestsInFlight = 0;
    loggingIn = !1;
    loggedIn = !1;
    profile = {
        linkedGoogle: !1,
        linkedTwitch: !1,
        linkedDiscord: !1,
        usernameSet: !1,
        username: "",
        slug: "",
        usernameChangeTime: 0
    };
    loadout = we.defaultLoadout();
    items = [];
    quests = [];
    questPriv = "";
    pass = {};
    ajaxRequest(e, t, i) {
        typeof t == "function" && (i = t,
        t = null),
        this.requestsInFlight++,
        this.emit("request", this),
        Qs(e, t, (r, s) => {
            i(r, s),
            this.requestsInFlight--,
            this.emit("request", this),
            this.requestsInFlight == 0 && this.emit("requestsComplete")
        }
        )
    }
    addEventListener(e, t) {
        this.events[e] = this.events[e] || [],
        this.events[e].push(t)
    }
    removeEventListener(e, t) {
        const i = this.events[e] || [];
        for (let r = i.length - 1; r >= 0; r--)
            i[r] == t && i.splice(r, 1)
    }
    emit(e, ...t) {
        const i = (this.events[e] || []).slice(0);
        for (let r = 0; r < i.length; r++)
            i[r](...t)
    }
    init() {
        if (this.config.get("sessionCookie") && this.setSessionCookies(),
        Z.getCookie("app-data")) {
            this.login();
            return
        }
        this.emit("request", this),
        this.emit("items", []);
        const e = this.config.get("loadout");
        this.loadout = y.mergeDeep({}, we.defaultLoadout(), e),
        this.emit("loadout", this.loadout)
    }
    setSessionCookies() {
        this.clearSessionCookies(),
        document.cookie = this.config.get("sessionCookie"),
        document.cookie = `app-data=${Date.now()}`
    }
    clearSessionCookies() {
        document.cookie = "app-sid=;expires=Thu, 01 Jan 1970 00:00:01 GMT;",
        document.cookie = "app-data=;expires=Thu, 01 Jan 1970 00:00:01 GMT;"
    }
    loginWithAccessToken(e, t, i) {
        t( (r, s) => {
            if (r) {
                this.emit("error", "login_failed");
                return
            }
            const a = i(s);
            this.ajaxRequest(`${e}?access_token=${a}`, (l, h) => {
                l ? this.emit("error", "login_failed") : (this.config.set("sessionCookie", h.cookie),
                this.setSessionCookies(),
                this.login())
            }
            )
        }
        )
    }
    login() {
        Z.getCookie("app-data") && (this.loadProfile(),
        this.getPass(!0))
    }
    logout() {
        this.config.set("profile", null),
        this.config.set("sessionCookie", null),
        this.config.set("loadout", we.defaultLoadout()),
        this.ajaxRequest("/api/user/logout", () => {
            window.location.reload()
        }
        )
    }
    loadProfile() {
        this.loggingIn = !this.loggedIn,
        this.ajaxRequest("/api/user/profile", (e, t) => {
            const i = this.loggingIn;
            if (this.loggingIn = !1,
            this.loggedIn = !1,
            this.profile = {},
            this.items = [],
            e)
                xe.storeGeneric("account", "load_profile_error");
            else if (t.banned)
                this.emit("error", "account_banned", t.reason);
            else if (t.success) {
                this.loggedIn = !0,
                this.profile = t.profile,
                this.items = t.items,
                this.loadout = t.loadout;
                const r = this.config.get("profile") || {
                    slug: ""
                };
                r.slug = t.profile.slug,
                this.config.set("profile", r)
            }
            this.loggedIn || this.config.set("sessionCookie", null),
            i && this.loggedIn && this.emit("login", this),
            this.emit("items", this.items),
            this.emit("loadout", this.loadout)
        }
        )
    }
    resetStats() {
        this.ajaxRequest("/api/user/reset_stats", e => {
            e && (xe.storeGeneric("account", "reset_stats_error"),
            this.emit("error", "server_error"))
        }
        )
    }
    deleteAccount() {
        this.ajaxRequest("/api/user/delete", e => {
            if (e) {
                xe.storeGeneric("account", "delete_error"),
                this.emit("error", "server_error");
                return
            }
            this.config.set("profile", null),
            this.config.set("sessionCookie", null),
            window.location.reload()
        }
        )
    }
    setUsername(e, t) {
        const i = {
            username: e
        };
        this.ajaxRequest("/api/user/username", i, (r, s) => {
            if (r) {
                xe.storeGeneric("account", "set_username_error"),
                t(r);
                return
            }
            s.result == "success" ? (this.loadProfile(),
            t()) : t(s.result)
        }
        )
    }
    setLoadout(e) {
        const t = this.loadout;
        if (this.loadout = e,
        this.emit("loadout", this.loadout),
        this.config.set("loadout", e),
        !Z.getCookie("app-data"))
            return;
        const i = {
            loadout: e
        };
        this.ajaxRequest("/api/user/loadout", i, (r, s) => {
            r && (xe.storeGeneric("account", "set_loadout_error"),
            this.emit("error", "server_error")),
            r || !s.loadout ? this.loadout = t : this.loadout = s.loadout,
            this.emit("loadout", this.loadout)
        }
        )
    }
    setItemStatus(e, t) {
        if (t.length != 0) {
            for (let r = 0; r < t.length; r++) {
                const s = this.items.find(a => a.type == t[r]);
                s && (s.status = Math.max(s.status, e))
            }
            const i = {
                status: e,
                itemTypes: t
            };
            this.emit("items", this.items),
            this.ajaxRequest("/api/user/set_item_status", i, r => {
                r && xe.storeGeneric("account", "set_item_status_error")
            }
            )
        }
    }
    setQuest(e) {
        this.ajaxRequest("/api/user/set_quest", e, () => {
            this.getPass(!1)
        }
        )
    }
    getPass(e) {}
    setPassUnlock(e) {
        const t = {
            unlockType: e
        };
        this.ajaxRequest("/api/user/set_pass_unlock", t, (i, r) => {
            i || !r.success ? xe.storeGeneric("account", "set_pass_unlock_error") : this.getPass(!1)
        }
        )
    }
    refreshQuest(e) {
        const t = {
            idx: e
        };
        this.ajaxRequest("/api/user/refresh_quest", t, (i, r) => {
            if (i) {
                xe.storeGeneric("account", "refresh_quest_error");
                return
            }
            r.success ? this.getPass(!1) : this.emit("pass", this.pass, this.quests, !1)
        }
        )
    }
}
class Js {
    introMusic = !0;
    soundUpdateThrottle = 0;
    tracks;
    trackToIdx;
    initTime;
    constructor() {
        this.tracks = [],
        this.trackToIdx = {};
        const e = (t, i, r, s) => {
            this.tracks.push({
                name: t,
                sound: i,
                channel: r,
                immediateMode: s,
                inst: null,
                instSound: "",
                filter: "",
                weight: 0,
                volume: 0
            }),
            this.trackToIdx[t] = this.tracks.length - 1
        }
        ;
        e("music", "menu_music", "music", !1),
        e("wind", "ambient_wind_01", "ambient", !1),
        e("river", "ambient_stream_01", "ambient", !1),
        e("waves", "ambient_waves_01", "ambient", !1),
        e("interior_0", "", "ambient", !0),
        e("interior_1", "", "ambient", !0),
        this.initTime = Date.now()
    }
    getTrack(e) {
        return this.tracks[this.trackToIdx[e]]
    }
    onGameStart() {
        this.introMusic = !1;
        for (let e = 0; e < this.tracks.length; e++)
            this.tracks[e].weight = 0;
        this.getTrack("wind").weight = 1,
        this.soundUpdateThrottle = 0
    }
    onGameComplete(e) {
        for (let t = 0; t < this.tracks.length; t++) {
            const i = this.tracks[t];
            i.immediateMode && (i.weight = 0)
        }
        this.getTrack("river").weight = 0
    }
    update(e, t, i) {
        let r = !1;
        this.soundUpdateThrottle -= e,
        this.soundUpdateThrottle <= 0 && (this.soundUpdateThrottle = .2,
        r = !0);
        let s = 0;
        for (let a = this.tracks.length - 1; a >= 0; a--) {
            const l = this.tracks[a];
            if (!l.inst && l.sound && t.isSoundLoaded(l.sound, l.channel) && (l.inst = t.playSound(l.sound, {
                channel: l.channel,
                startSilent: !0,
                loop: l.channel == "ambient",
                forceStart: !0,
                filter: l.filter,
                forceFilter: !0
            }),
            l.instSound = l.sound),
            l.inst && r) {
                const h = l.weight * (1 - s);
                s += h,
                l.volume = h;
                const p = t.getSoundDefVolume(l.sound, l.channel);
                t.setVolume(l.inst, h * p, l.channel)
            }
            l.inst && (!l.sound && k.eqAbs(t.getVolume(l.inst), 0) || l.sound && l.sound != l.instSound) && (console.log("Stop track", l.name, l.channel),
            t.stopSound(l.inst),
            l.inst = null,
            l.instSound = ""),
            l.immediateMode && (l.sound = "",
            l.weight = 0)
        }
        if (this.introMusic) {
            const a = this.getTrack("music");
            a.inst && (a.weight = k.min(a.weight + e, 1));
            const l = this.getTrack("wind");
            a.inst && !t.isSoundPlaying(a.inst) && (l.weight = k.min(l.weight + e, 1))
        }
    }
}
const Lt = window.navigator.userAgent.includes("iPod") || window.navigator.userAgent.includes("iPhone") || window.navigator.userAgent.includes("iPad");
let Dr = null
  , Ar = !1;
function ea(o) {
    try {
        return o.createGain().disconnect(o.destination),
        !1
    } catch {
        return !0
    }
}
const ut = 128;
class Ni {
    constructor(e) {
        this.ctx = e,
        this.volumeOld = this.volume,
        this.panOld = this.pan,
        this.gainNode = this.ctx.createGain(),
        this.pannerNode = this.ctx.createPanner(),
        this.pannerNode.panningModel = "equalpower",
        this.gainNode.connect(this.pannerNode)
    }
    sound = null;
    id = 0;
    volume = 1;
    volumeOld;
    pan = 0;
    panOld;
    ambient;
    sourceNode = null;
    destination = null;
    paramEvents = 0;
    gainNode;
    pannerNode;
    stopTime = 0;
    stopping = !1;
    playState = "playFinished";
    setGain(e) {
        this.stopping || (Lt ? this.gainNode.gain.value = e : (this.gainNode.gain.setTargetAtTime(e, this.ctx.currentTime, .02),
        ++this.paramEvents))
    }
    setPan(e) {
        this.stopping || (this.pannerNode.setPosition(e, 0, -.5),
        this.paramEvents += 3)
    }
    start(e, t, i, r, s, a, l, h, p) {
        this.volume = this.volumeOld = i,
        this.pan = this.panOld = r,
        this.ambient = h,
        this.stopping = !1,
        this.destination = e,
        this.sourceNode = this.ctx.createBufferSource(),
        this.sourceNode.buffer = t,
        this.sourceNode.connect(this.gainNode),
        this.pannerNode.connect(this.destination),
        this.sourceNode.loop = s,
        Lt ? this.gainNode.gain.value = i : (this.gainNode.gain.setValueAtTime(i, this.ctx.currentTime),
        ++this.paramEvents),
        this.setPan(r),
        this.sourceNode.detune && (this.sourceNode.detune.value = p),
        this.sourceNode.start(this.ctx.currentTime + a, l),
        this.stopTime = s ? 1e100 : this.ctx.currentTime + a + t.duration - l,
        this.playState = "playSucceeded"
    }
    stop() {
        this.stopping || (this.setGain(0),
        this.stopTime = this.ctx.currentTime + .1,
        this.stopping = !0,
        this.playState = "playInterrupted")
    }
    disconnect() {
        if (this.sound?.instances.splice(this.sound?.instances.indexOf(this), 1),
        this.sound = null,
        this.sourceNode?.stop(0),
        this.sourceNode?.disconnect(this.gainNode),
        this.pannerNode?.disconnect(this.destination),
        Lt)
            try {
                this.sourceNode.buffer = Dr
            } catch {}
        this.destination = null,
        this.sourceNode = null,
        this.playState = "playFinished"
    }
    reallocNodes() {
        this.gainNode.disconnect(this.pannerNode),
        this.gainNode = this.ctx.createGain(),
        this.pannerNode = this.ctx.createPanner(),
        this.pannerNode.panningModel = "equalpower",
        this.gainNode.connect(this.pannerNode),
        this.paramEvents = 0
    }
}
let Vt = null;
class Wi {
    constructor(e) {
        this.instance = e,
        this.id = e.id
    }
    id;
    check(e) {
        this.id != this.instance.id && (this.instance = Vt,
        this.id = Vt?.id)
    }
    stop() {
        this.check(),
        this.instance.stop()
    }
    get volume() {
        return this.check(),
        this.instance.volume
    }
    set volume(e) {
        this.check(!0),
        this.instance.volume = e
    }
    get pan() {
        return this.check(),
        this.instance.pan
    }
    set pan(e) {
        this.check(!0),
        this.instance.pan = e
    }
    get playState() {
        return this.check(),
        this.instance.playState
    }
}
let it = null;
class ta {
    constructor(e, t, i, r, s) {
        if (this.ctx = e,
        this.inNode = t,
        this.outNode = i,
        this.name = r,
        this.params = s,
        this.volume = s.volume != null ? s.volume : 1,
        this.echoVolume = s.echoVolume || 0,
        this.echoDelay = s.echoDelay || 0,
        this.echoLowPass = s.echoLowPass || 3e3,
        this.stereoSpread = s.stereoSpread || 0,
        !Ar) {
            const a = this.ctx.createGain();
            this.inNode.connect(a),
            this.inNode = a
        }
        this.convolverNode = this.ctx.createConvolver(),
        this.echoVolume && (this.echoLowPassNode = this.ctx.createBiquadFilter(),
        this.echoLowPassNode.type = "lowpass",
        this.echoLowPassNode.frequency.setValueAtTime(this.echoLowPass, 0),
        this.echoLowPassNode.Q.setValueAtTime(-3.0102999566398125, 0),
        this.echoDelayNode = this.ctx.createDelay(this.echoDelay || .01),
        this.echoDelayNode.delayTime.setValueAtTime(this.echoDelay, 0)),
        this.stereoSpread && (this.stereoDelayNode = this.ctx.createDelay(this.stereoSpread),
        this.stereoDelayNode.delayTime.setValueAtTime(this.stereoSpread, 0),
        this.mergerNode = this.ctx.createChannelMerger(2))
    }
    volume;
    echoVolume;
    echoDelay;
    echoLowPass;
    stereoSpread;
    gainNode = null;
    convolverNode = null;
    echoGainNode = null;
    echoLowPassNode = null;
    echoDelayNode = null;
    stereoDelayNode = null;
    mergerNode = null;
    targetLevel = 0;
    gain = 0;
    drainEndTime = 0;
    active = !1;
    isConnected() {
        return this.gainNode != null
    }
    connect() {
        if (this.gainNode = this.ctx.createGain(),
        this.gainNode.channelCount = 1,
        this.gainNode.channelCountMode = "explicit",
        this.gainNode.gain.setValueAtTime(0, 0),
        this.echoVolume && (this.echoGainNode = this.ctx.createGain(),
        this.echoGainNode.channelCount = 1,
        this.echoGainNode.channelCountMode = "explicit",
        this.echoGainNode.gain.setValueAtTime(this.echoVolume, 0)),
        this.inNode.connect(this.gainNode),
        this.gainNode.connect(this.convolverNode),
        this.echoVolume && (this.convolverNode?.connect(this.echoGainNode),
        this.echoGainNode?.connect(this.echoLowPassNode),
        this.echoLowPassNode?.connect(this.echoDelayNode),
        this.echoDelayNode?.connect(this.convolverNode)),
        this.stereoSpread) {
            const {buffer: e} = this.convolverNode;
            e && e.numberOfChannels != 1 && console.error("stereoSpread can only be applied to mono IRs"),
            this.convolverNode?.connect(this.stereoDelayNode),
            this.convolverNode?.connect(this.mergerNode, 0, 0),
            this.stereoDelayNode?.connect(this.mergerNode, 0, 1),
            this.mergerNode?.connect(this.outNode)
        } else
            this.convolverNode?.connect(this.outNode)
    }
    disconnect() {
        this.inNode.disconnect(this.gainNode),
        this.gainNode?.disconnect(this.convolverNode),
        this.echoVolume && (this.convolverNode?.disconnect(this.echoGainNode),
        this.echoGainNode?.disconnect(this.echoLowPassNode),
        this.echoLowPassNode?.disconnect(this.echoDelayNode),
        this.echoDelayNode?.disconnect(this.convolverNode)),
        this.stereoSpread ? (this.convolverNode?.disconnect(this.stereoDelayNode),
        this.convolverNode?.disconnect(this.mergerNode, 0, 0),
        this.stereoDelayNode?.disconnect(this.mergerNode, 0, 1),
        this.mergerNode?.disconnect(this.outNode)) : this.convolverNode?.disconnect(this.outNode),
        this.gainNode = null,
        this.echoGainNode = null
    }
    setGain(e, t, i) {
        if (e *= this.volume,
        this.gain != e) {
            if (e != 0 && !this.gainNode && this.connect(),
            e == 0) {
                this.echoGainNode && this.echoGainNode.gain.setValueAtTime(0, i);
                const {buffer: r} = this.convolverNode
                  , s = r ? r.duration : 0;
                this.drainEndTime = i + s + this.echoDelay + this.stereoSpread
            }
            this.gain == 0 && this.echoGainNode && this.echoGainNode.gain.setValueAtTime(this.echoVolume, t),
            this.gainNode?.gain.setValueAtTime(this.gain, t),
            this.gainNode?.gain.linearRampToValueAtTime(e, i),
            this.gain = e
        }
    }
}
class ia {
    ctx = new (window.AudioContext || window.webkitAudioContext);
    masterGainNode;
    compressorNode;
    reverbNode;
    eqNodes = {};
    files = {};
    sounds = {};
    instances = [];
    instanceId = 0;
    playingInstances = [];
    reverbs = {};
    activeReverbs = [];
    reverbFadeEndTime = 0;
    volume = 1;
    volumeOld;
    muted = !1;
    mutedOld;
    runningOfflineTest;
    offlineCtx;
    startTime;
    onfileload = function(...e) {}
    ;
    PLAY_INITED = "playInited";
    PLAY_SUCCEEDED = "playSucceeded";
    PLAY_INTERRUPTED = "playInterrupted";
    PLAY_FINISHED = "playFinished";
    PLAY_FAILED = "playFailed";
    constructor() {
        if (Lt) {
            const t = this.ctx.createBuffer(1, 1, 44100)
              , i = this.ctx.createBufferSource();
            i.buffer = t,
            i.connect(this.ctx.destination),
            i.start(),
            i.disconnect(this.ctx.destination),
            this.ctx.close(),
            this.ctx = new (window.AudioContext || window.webkitAudioContext)
        }
        Ar = ea(this.ctx),
        window.audioEngine = this,
        this.masterGainNode = this.ctx.createGain(),
        this.compressorNode = this.ctx.createDynamicsCompressor(),
        this.masterGainNode.connect(this.compressorNode),
        this.compressorNode.connect(this.ctx.destination),
        this.reverbNode = this.ctx.createGain(),
        this.reverbNode.connect(this.masterGainNode);
        const e = {
            muffled: [[20, 2.8284 / 2, -6, "peaking"], [40, 2.8284 / 2, -7, "peaking"], [80, 2.8284 / 2, -10, "peaking"], [160, 2.8284 / 2, -13, "peaking"], [320, 2.8284 / 2, -22, "peaking"], [640, 2.8284 / 2, -18, "peaking"], [1280, 2.8284 / 2, -25, "peaking"], [2560, 2.8284 / 2, -10, "peaking"], [5120, 2.8284 / 2, -30, "peaking"], [10240, 2.8284 / 2, -25, "peaking"]],
            club: [[20, 2.8284 / 2, -6, "lowshelf"], [63, 2.8284 / 2, -3, "lowshelf"], [125, 2.8284 / 2, -3, "lowshelf"], [250, 2.8284 / 2, -6, "lowshelf"], [500, 2.8284 / 2, -18, "peaking"], [1e3, 2.8284 / 2, -36, "peaking"], [2e3, 2.8284 / 2, -48, "peaking"], [4e3, 2.8284 / 2, -50, "highshelf"], [8e3, 2.8284 / 2, -50, "highshelf"], [16e3, 2.8284 / 2, -50, "highshelf"]]
        };
        Object.keys(e).forEach(t => {
            const i = this.ctx.createGain();
            i.gain.setValueAtTime(16, 0);
            const r = e[t];
            let s = i;
            for (let a = 0; a < r.length; a++) {
                const l = this.ctx.createBiquadFilter();
                s.connect(l),
                s = l,
                l.frequency.setValueAtTime(r[a][0], 0),
                l.Q.setValueAtTime(r[a][1], 0),
                l.gain.setValueAtTime(r[a][2], 0),
                l.type = r[a][3]
            }
            s.connect(this.reverbNode),
            this.eqNodes[t] = i
        }
        );
        for (let t = 0; t < ut; t++) {
            const i = new Ni(this.ctx);
            this.instances[t] = i
        }
        if (Vt = new Ni(this.ctx),
        it = new Wi(Vt),
        this.volumeOld = this.volume,
        this.mutedOld = this.muted,
        this.ctx.state == "suspended") {
            const t = () => {
                this.ctx.resume();
                const i = this.ctx.createBufferSource();
                i.buffer = this.ctx.createBuffer(1, 1, 22050),
                i.connect(this.ctx.destination),
                i.start(),
                setTimeout( () => {
                    this.ctx.state == "running" && (document.body.removeEventListener("mousedown", t, !1),
                    document.body.removeEventListener("touchend", t, !1))
                }
                , 0)
            }
            ;
            document.body.addEventListener("mousedown", t, !1),
            document.body.addEventListener("touchend", t, !1)
        }
        Lt && (Dr = this.ctx.createBuffer(1, 1, 22050))
    }
    loadFile(e, t) {
        if (this.files[e] != null)
            return t(e),
            this.files[e];
        this.files[e] = {
            buffer: null
        };
        const i = new XMLHttpRequest;
        i.open("GET", e),
        i.responseType = "arraybuffer";
        const r = function(a) {
            console.error(`Failed loading sound file: ${e}`)
        };
        return i.addEventListener("load", s => {
            const a = i.response;
            if (!a) {
                r();
                return
            }
            this.ctx.decodeAudioData(a, l => {
                this.files[e].buffer = l,
                t(e)
            }
            , () => {
                console.error(`Failed decoding sound: ${e}`)
            }
            )
        }
        ),
        i.addEventListener("abort", r),
        i.addEventListener("error", r),
        i.addEventListener("timeout", r),
        i.send(),
        this.files[e]
    }
    registerSound(e, t, i) {
        const s = {
            file: this.loadFile(e, this.onfileload.bind(this)),
            canCoalesce: !!i.canCoalesce,
            maxInstances: i.channels || 16,
            volume: i.volume || 1,
            instances: []
        };
        this.sounds[t] = s
    }
    play(e, t) {
        const i = this.sounds[e];
        if (!i)
            return console.error(`No sound named: ${e}`),
            it;
        const r = t.filter || "none";
        let s = t.volume != null ? t.volume : 1;
        s *= i.volume,
        s = this.muted ? 0 : s;
        const a = t.pan || 0
          , l = !!t.loop
          , h = t.delay ? t.delay * .001 : 0
          , p = t.offset ? t.offset : 0
          , c = t.ambient || !1
          , d = t.detune || 0;
        if (!i.file.buffer || this.muted && !t.loop)
            return it;
        if (r !== "none" && r !== "reverb" && r !== "muffled" && r !== "club")
            return console.error(`Invalid filter: ${r}. Only valid filters are 'none', 'reverb', 'muffled' and 'club'.`),
            it;
        if (i.canCoalesce) {
            const C = this.ctx.currentTime + i.file.buffer.duration;
            for (let v = 0; v < i.instances.length; v++) {
                const b = i.instances[v];
                if (Math.abs(C - b.stopTime) > .03)
                    continue;
                const M = b.volume * b.volume + s * s
                  , I = b.volume * b.pan + s * a
                  , B = b.volume + s;
                return b.volume = Math.sqrt(M),
                b.pan = I / Math.max(.001, B),
                it
            }
        }
        for (let x = 0; x < ut && (++this.instanceId,
        !!this.instances[this.instanceId % ut].sound); x++)
            ;
        const w = this.instances[this.instanceId % ut];
        if (w.sound)
            return console.error(`All ${ut} sound instances in use. You are using way too many sounds!`),
            it;
        w.id = this.instanceId;
        const f = w.paramEvents > 150
          , S = w.paramEvents > 20 && !(this.instanceId % 7);
        for ((f || S) && w.reallocNodes(); i.instances.length >= i.maxInstances; ) {
            let x = i.instances[0];
            for (let C = 1; C < i.instances.length; C++)
                x.stopTime > i.instances[C].stopTime && (x = i.instances[C]);
            x.disconnect()
        }
        w.sound = i,
        i.instances.push(w);
        const g = r === "none" ? this.masterGainNode : r === "reverb" ? this.reverbNode : this.eqNodes[r];
        return w.start(g, i.file.buffer, s, a, l, h, p, c, d),
        this.playingInstances.includes(w) || this.playingInstances.push(w),
        new Wi(w)
    }
    registerReverb(e, t, i) {
        const r = new ta(this.ctx,this.reverbNode,this.masterGainNode,t,i);
        this.loadFile(e, s => {
            r.convolverNode.buffer = this.files[s].buffer,
            this.onfileload(s)
        }
        ),
        this.reverbs[t] = r
    }
    setReverbs(e) {
        for (let t = 0; t < this.activeReverbs.length; t++) {
            const i = this.activeReverbs[t];
            e[i.name] || (i.targetLevel = 0)
        }
        for (const t in e) {
            if (!e[t])
                continue;
            const i = this.reverbs[t];
            if (!i) {
                console.error(`No reverb named ${t}`);
                continue
            }
            this.reverbs[t].active || (this.activeReverbs.push(i),
            i.active = !0),
            i.targetLevel = e[t]
        }
    }
    stop(e=!0) {
        for (let t = 0; t < ut; t++) {
            const i = this.instances[t];
            e && i.ambient || i.sound && i.stop()
        }
    }
    update(e) {
        this.ctx.state == "suspended" && this.ctx.resume();
        const t = this.muted ? 0 : this.volume
          , i = this.mutedOld ? 0 : this.volumeOld;
        this.volumeOld = this.volume,
        this.mutedOld = this.muted,
        t != i && this.masterGainNode.gain.setTargetAtTime(t, this.ctx.currentTime, .02);
        for (let r = this.playingInstances.length - 1; r >= 0; r--) {
            const s = this.playingInstances[r];
            s.volumeOld != s.volume && (s.volumeOld = s.volume,
            s.setGain(s.volume)),
            s.panOld != s.pan && (s.panOld = s.pan,
            s.setPan(s.pan)),
            s.sound && this.ctx.currentTime > s.stopTime && s.disconnect(),
            s.sound || this.playingInstances.splice(r, 1)
        }
        if (this.ctx.currentTime > this.reverbFadeEndTime) {
            const r = this.ctx.currentTime + .006
              , s = .025;
            this.reverbFadeEndTime = r + s;
            let a = 0;
            for (let h = 0; h < this.activeReverbs.length; h++) {
                const p = this.activeReverbs[h];
                a += p.targetLevel
            }
            const l = a > 1 ? 1 / a : 1;
            for (let h = 0; h < this.activeReverbs.length; h++) {
                const p = this.activeReverbs[h]
                  , c = Math.sqrt(l * p.targetLevel);
                p.setGain(c, r, this.reverbFadeEndTime)
            }
            for (let h = this.activeReverbs.length - 1; h >= 0; h--) {
                const p = this.activeReverbs[h]
                  , c = this.ctx.currentTime > p.drainEndTime;
                p.gain == 0 && c && (p.isConnected() && p.disconnect(),
                p.active = !1,
                this.activeReverbs.splice(h, 1))
            }
        }
    }
    setMute(e) {
        this.muted = e
    }
    on(e, t, i) {
        if (e != "fileload") {
            console.error('Only "fileload" event supported');
            return
        }
        this.onfileload = t.bind(i)
    }
    updatePerformanceTest() {
        if (this.runningOfflineTest = this.runningOfflineTest != null ? this.runningOfflineTest : !1,
        this.runningOfflineTest)
            return;
        this.runningOfflineTest = !0;
        const e = 10;
        this.offlineCtx = new OfflineAudioContext(2,e * this.ctx.sampleRate,this.ctx.sampleRate);
        const t = this.offlineCtx.createBuffer(2, e * this.ctx.sampleRate, this.ctx.sampleRate);
        for (let h = 0; h < t.numberOfChannels; h++) {
            const p = t.getChannelData(h);
            for (let c = 0; c < p.length; c++)
                p[c] = Math.sin(c / 2333) * Math.sin(c / 5741) * 2 * Math.random() - 1
        }
        const i = this.offlineCtx.createBufferSource();
        i.buffer = t;
        const r = this.offlineCtx.createConvolver()
          , a = this.offlineCtx.createBuffer(1, 4 * this.ctx.sampleRate, this.ctx.sampleRate);
        for (let h = 0; h < a.numberOfChannels; h++) {
            const p = a.getChannelData(h);
            for (let c = 0; c < p.length; c++)
                p[c] = 2 * Math.random() - 1
        }
        r.buffer = a;
        const l = {
            echoVolume: .5,
            echoLowPass: 800,
            echoDelay: .25,
            stereoSpread: .004
        };
        l.convolverNode = r,
        l.echoLowPassNode = this.offlineCtx.createBiquadFilter(),
        l.echoLowPassNode.type = "lowpass",
        l.echoLowPassNode.frequency.setValueAtTime(l.echoLowPass, 0),
        l.echoLowPassNode.Q.setValueAtTime(-3.0102999566398125, 0),
        l.echoDelayNode = this.offlineCtx.createDelay(l.echoDelay),
        l.echoDelayNode.delayTime.setValueAtTime(l.echoDelay, 0),
        l.stereoDelayNode = this.offlineCtx.createDelay(l.stereoSpread),
        l.stereoDelayNode.delayTime.setValueAtTime(l.stereoSpread, 0),
        l.mergerNode = this.offlineCtx.createChannelMerger(2),
        l.gainNode = this.offlineCtx.createGain(),
        l.gainNode.channelCount = 1,
        l.gainNode.channelCountMode = "explicit",
        l.gainNode.gain.setValueAtTime(1, 0),
        l.echoGainNode = this.offlineCtx.createGain(),
        l.echoGainNode.channelCount = 1,
        l.echoGainNode.channelCountMode = "explicit",
        l.echoGainNode.gain.setValueAtTime(l.echoVolume, 0),
        l.outNode = this.offlineCtx.createGain(),
        l.gainNode.connect(l.convolverNode);
        {
            const {buffer: h} = l.convolverNode;
            h && h.numberOfChannels != 1 && console.error("stereoSpread can only be applied to mono IRs"),
            l.convolverNode.connect(l.stereoDelayNode),
            l.convolverNode.connect(l.mergerNode, 0, 0),
            l.stereoDelayNode?.connect(l.mergerNode, 0, 1),
            l.mergerNode?.connect(l.outNode)
        }
        console.log("starting convolver"),
        i.connect(l.gainNode),
        l.outNode.connect(this.offlineCtx.destination),
        i.start(),
        this.startTime = performance.now(),
        this.offlineCtx.oncomplete = h => {
            const p = performance.now();
            console.log("Offline render time: ", p - this.startTime),
            this.runningOfflineTest = !1
        }
        ,
        this.offlineCtx.startRendering()
    }
}
const Be = {
    Sound: new ia
}
  , ra = {
    players: {
        m9_01: {
            path: "audio/guns/m9_01.mp3",
            volume: 1,
            maxInstances: 5
        },
        m9_reload_01: {
            path: "audio/guns/m9_reload_01.mp3",
            volume: 1
        },
        m9_reload_02: {
            path: "audio/guns/m9_reload_02.mp3",
            volume: 1
        },
        m9_switch_01: {
            path: "audio/guns/m9_switch_01.mp3",
            volume: 1
        },
        m93r_01: {
            path: "audio/guns/m93r_01.mp3",
            volume: 1,
            maxInstances: 5
        },
        m93r_reload_01: {
            path: "audio/guns/m93r_reload_01.mp3",
            volume: 1
        },
        m93r_reload_02: {
            path: "audio/guns/m93r_reload_02.mp3",
            volume: 1
        },
        m93r_switch_01: {
            path: "audio/guns/m93r_switch_01.mp3",
            volume: 1
        },
        glock_01: {
            path: "audio/guns/glock_01.mp3",
            volume: 1,
            maxInstances: 5
        },
        glock_reload_01: {
            path: "audio/guns/glock_reload_01.mp3",
            volume: 1
        },
        glock_reload_02: {
            path: "audio/guns/glock_reload_02.mp3",
            volume: 1
        },
        glock_switch_01: {
            path: "audio/guns/glock_switch_01.mp3",
            volume: 1
        },
        p30l_01: {
            path: "audio/guns/p30l_01.mp3",
            volume: 1.2,
            maxInstances: 5
        },
        p30l_reload_01: {
            path: "audio/guns/p30l_reload_01.mp3",
            volume: 1.4
        },
        p30l_reload_02: {
            path: "audio/guns/p30l_reload_02.mp3",
            volume: 1.4
        },
        p30l_switch_01: {
            path: "audio/guns/p30l_switch_01.mp3",
            volume: 1.5
        },
        m1911_01: {
            path: "audio/guns/m1911_01.mp3",
            volume: 1,
            maxInstances: 5
        },
        m1911_reload_01: {
            path: "audio/guns/m1911_reload_01.mp3",
            volume: 1
        },
        m1911_reload_02: {
            path: "audio/guns/m1911_reload_02.mp3",
            volume: 1
        },
        m1911_switch_01: {
            path: "audio/guns/m1911_switch_01.mp3",
            volume: 1
        },
        ot38_01: {
            path: "audio/guns/ot38_01.mp3",
            volume: 1,
            maxInstances: 5
        },
        ot38_reload_01: {
            path: "audio/guns/ot38_reload_01.mp3",
            volume: 1
        },
        ot38_reload_02: {
            path: "audio/guns/ot38_reload_02.mp3",
            volume: 1
        },
        ot38_switch_01: {
            path: "audio/guns/ot38_switch_01.mp3",
            volume: 1
        },
        ots38_01: {
            path: "audio/guns/ots38_01.mp3",
            volume: 1,
            maxInstances: 5
        },
        colt45_01: {
            path: "audio/guns/colt45_01.mp3",
            volume: 1
        },
        colt45_reload_01: {
            path: "audio/guns/colt45_reload_01.mp3",
            volume: 1
        },
        colt45_reload_02: {
            path: "audio/guns/colt45_reload_02.mp3",
            volume: 1
        },
        colt45_switch_01: {
            path: "audio/guns/colt45_switch_01.mp3",
            volume: 1
        },
        deagle_01: {
            path: "audio/guns/deagle_01.mp3",
            volume: 1,
            maxInstances: 5
        },
        deagle_reload_01: {
            path: "audio/guns/deagle_reload_01.mp3",
            volume: 1
        },
        deagle_reload_02: {
            path: "audio/guns/deagle_reload_02.mp3",
            volume: 1
        },
        deagle_switch_01: {
            path: "audio/guns/deagle_switch_01.mp3",
            volume: 1
        },
        flare_gun_01: {
            path: "audio/guns/flare_gun_01.mp3",
            volume: 1,
            maxInstances: 5
        },
        flare_gun_reload_01: {
            path: "audio/guns/flare_gun_reload_01.mp3",
            volume: 1
        },
        flare_gun_reload_02: {
            path: "audio/guns/flare_gun_reload_02.mp3",
            volume: 1
        },
        ak47_01: {
            path: "audio/guns/ak47_01.mp3",
            volume: 1,
            maxInstances: 5
        },
        ak47_reload_01: {
            path: "audio/guns/ak47_reload_01.mp3",
            volume: 1
        },
        ak47_switch_01: {
            path: "audio/guns/ak47_switch_01.mp3",
            volume: 1
        },
        an94_01: {
            path: "audio/guns/an94_01.mp3",
            volume: 1,
            maxInstances: 5
        },
        an94_reload_01: {
            path: "audio/guns/an94_reload_01.mp3",
            volume: 1
        },
        an94_switch_01: {
            path: "audio/guns/an94_switch_01.mp3",
            volume: 1
        },
        groza_01: {
            path: "audio/guns/groza_01.mp3",
            volume: .95,
            maxInstances: 5
        },
        groza_reload_01: {
            path: "audio/guns/groza_reload_01.mp3",
            volume: 1.1
        },
        groza_switch_01: {
            path: "audio/guns/groza_switch_01.mp3",
            volume: 1.1
        },
        grozas_01: {
            path: "audio/guns/grozas_01.mp3",
            volume: .95,
            maxInstances: 5
        },
        scar_01: {
            path: "audio/guns/scar_01.mp3",
            volume: 1,
            maxInstances: 5
        },
        scar_reload_01: {
            path: "audio/guns/scar_reload_01.mp3",
            volume: 1
        },
        scar_switch_01: {
            path: "audio/guns/scar_switch_01.mp3",
            volume: 1
        },
        scarssr_01: {
            path: "audio/guns/scarssr_01.mp3",
            volume: 1,
            maxInstances: 5
        },
        dp28_01: {
            path: "audio/guns/dp28_01.mp3",
            volume: 1,
            maxInstances: 5
        },
        dp28_reload_01: {
            path: "audio/guns/dp28_reload_01.mp3",
            volume: 1
        },
        dp28_switch_01: {
            path: "audio/guns/dp28_switch_01.mp3",
            volume: 1
        },
        bar_01: {
            path: "audio/guns/bar_01.mp3",
            volume: 1,
            maxInstances: 5
        },
        bar_reload_01: {
            path: "audio/guns/bar_reload_01.mp3",
            volume: 1
        },
        bar_switch_01: {
            path: "audio/guns/bar_switch_01.mp3",
            volume: 1
        },
        pkp_01: {
            path: "audio/guns/pkp_01.mp3",
            volume: 1,
            maxInstances: 5
        },
        pkp_reload_01: {
            path: "audio/guns/pkp_reload_01.mp3",
            volume: 1
        },
        pkp_switch_01: {
            path: "audio/guns/pkp_switch_01.mp3",
            volume: 1
        },
        m870_01: {
            path: "audio/guns/m870_01.mp3",
            volume: 1,
            maxInstances: 5
        },
        m870_reload_01: {
            path: "audio/guns/m870_reload_01.mp3",
            volume: 1
        },
        m870_cycle_01: {
            path: "audio/guns/m870_cycle_01.mp3",
            volume: 1
        },
        m870_pull_01: {
            path: "audio/guns/m870_pull_01.mp3",
            volume: 1
        },
        spas12_01: {
            path: "audio/guns/spas12_01.mp3",
            volume: 1,
            maxInstances: 5
        },
        spas12_reload_01: {
            path: "audio/guns/spas12_reload_01.mp3",
            volume: 1
        },
        spas12_cycle_01: {
            path: "audio/guns/spas12_cycle_01.mp3",
            volume: 1
        },
        spas12_pull_01: {
            path: "audio/guns/spas12_pull_01.mp3",
            volume: 1
        },
        mp220_01: {
            path: "audio/guns/mp220_01.mp3",
            volume: 1,
            maxInstances: 5
        },
        mp220_reload_01: {
            path: "audio/guns/mp220_reload_01.mp3",
            volume: 1
        },
        mp220_deploy_01: {
            path: "audio/guns/mp220_deploy_01.mp3",
            volume: 1
        },
        saiga_01: {
            path: "audio/guns/saiga_01.mp3",
            volume: 1,
            maxInstances: 5
        },
        saiga_reload_01: {
            path: "audio/guns/saiga_reload_01.mp3",
            volume: 1
        },
        saiga_switch_01: {
            path: "audio/guns/saiga_switch_01.mp3",
            volume: 1
        },
        usas_01: {
            path: "audio/guns/usas_01.mp3",
            volume: 1,
            maxInstances: 5
        },
        usas_reload_01: {
            path: "audio/guns/usas_reload_01.mp3",
            volume: 1
        },
        usas_switch_01: {
            path: "audio/guns/usas_switch_01.mp3",
            volume: 1
        },
        m1100_01: {
            path: "audio/guns/m1100_01.mp3",
            volume: 1,
            maxInstances: 5
        },
        m1100_reload_01: {
            path: "audio/guns/m1100_reload_01.mp3",
            volume: 1
        },
        m1100_deploy_01: {
            path: "audio/guns/m1100_deploy_01.mp3",
            volume: 1
        },
        m1014_01: {
            path: "audio/guns/m1014_01.mp3",
            volume: 1,
            maxInstances: 5
        },
        m1014_reload_01: {
            path: "audio/guns/m1014_reload_01.mp3",
            volume: 1
        },
        m1014_deploy_01: {
            path: "audio/guns/m1014_deploy_01.mp3",
            volume: 1
        },
        m39_01: {
            path: "audio/guns/m39_01.mp3",
            volume: 1,
            maxInstances: 5
        },
        m39_reload_01: {
            path: "audio/guns/m39_reload_01.mp3",
            volume: 1
        },
        m39_switch_01: {
            path: "audio/guns/m39_switch_01.mp3",
            volume: 1
        },
        svd_01: {
            path: "audio/guns/svd_01.mp3",
            volume: 1,
            maxInstances: 5
        },
        svd_reload_01: {
            path: "audio/guns/svd_reload_01.mp3",
            volume: 1
        },
        svd_switch_01: {
            path: "audio/guns/svd_switch_01.mp3",
            volume: 1
        },
        garand_01: {
            path: "audio/guns/garand_01.mp3",
            volume: 1,
            maxInstances: 5
        },
        garand_02: {
            path: "audio/guns/garand_02.mp3",
            volume: 1,
            maxInstances: 5
        },
        garand_reload_01: {
            path: "audio/guns/garand_reload_01.mp3",
            volume: 1
        },
        garand_switch_01: {
            path: "audio/guns/garand_switch_01.mp3",
            volume: 1
        },
        m1a1_01: {
            path: "audio/guns/m1a1_01.mp3",
            volume: 1,
            maxInstances: 5
        },
        m1a1_reload_01: {
            path: "audio/guns/m1a1_reload_01.mp3",
            volume: 1
        },
        m1a1_switch_01: {
            path: "audio/guns/m1a1_switch_01.mp3",
            volume: 1
        },
        mp5_01: {
            path: "audio/guns/mp5_01.mp3",
            volume: 1,
            maxInstances: 5
        },
        mp5_reload_01: {
            path: "audio/guns/mp5_reload_01.mp3",
            volume: 1
        },
        mp5_switch_01: {
            path: "audio/guns/mp5_switch_01.mp3",
            volume: 1
        },
        mac10_01: {
            path: "audio/guns/mac10_01.mp3",
            volume: 1,
            maxInstances: 5
        },
        mac10_reload_01: {
            path: "audio/guns/mac10_reload_01.mp3",
            volume: 1
        },
        mac10_switch_01: {
            path: "audio/guns/mac10_switch_01.mp3",
            volume: 1
        },
        ump9_01: {
            path: "audio/guns/ump9_01.mp3",
            volume: 1,
            maxInstances: 5
        },
        ump9_reload_01: {
            path: "audio/guns/ump9_reload_01.mp3",
            volume: 1
        },
        ump9_switch_01: {
            path: "audio/guns/ump9_switch_01.mp3",
            volume: 1
        },
        vector_01: {
            path: "audio/guns/vector_01.mp3",
            volume: 1,
            maxInstances: 5
        },
        vector_02: {
            path: "audio/guns/vector_02.mp3",
            volume: 1,
            maxInstances: 5
        },
        vector_reload_01: {
            path: "audio/guns/vector_reload_01.mp3",
            volume: 1
        },
        vector_switch_01: {
            path: "audio/guns/vector_switch_01.mp3",
            volume: 1
        },
        scorpion_01: {
            path: "audio/guns/scorpion_01.mp3",
            volume: 1,
            maxInstances: 5
        },
        scorpion_reload_01: {
            path: "audio/guns/scorpion_reload_01.mp3",
            volume: 1
        },
        scorpion_switch_01: {
            path: "audio/guns/scorpion_switch_01.mp3",
            volume: 1
        },
        vss_01: {
            path: "audio/guns/vss_01.mp3",
            volume: 1,
            maxInstances: 5
        },
        vss_reload_01: {
            path: "audio/guns/vss_reload_01.mp3",
            volume: 1
        },
        vss_switch_01: {
            path: "audio/guns/vss_switch_01.mp3",
            volume: 1
        },
        famas_01: {
            path: "audio/guns/famas_01.mp3",
            volume: 1,
            maxInstances: 5
        },
        famas_reload_01: {
            path: "audio/guns/famas_reload_01.mp3",
            volume: 1
        },
        famas_switch_01: {
            path: "audio/guns/famas_switch_01.mp3",
            volume: 1
        },
        hk416_01: {
            path: "audio/guns/hk416_01.mp3",
            volume: 1,
            maxInstances: 5
        },
        hk416_reload_01: {
            path: "audio/guns/hk416_reload_01.mp3",
            volume: 1
        },
        hk416_switch_01: {
            path: "audio/guns/hk416_switch_01.mp3",
            volume: 1
        },
        m4a1_01: {
            path: "audio/guns/m4a1_01.mp3",
            volume: 1,
            maxInstances: 5
        },
        m4a1_reload_01: {
            path: "audio/guns/m4a1_reload_01.mp3",
            volume: 1
        },
        m4a1_switch_01: {
            path: "audio/guns/m4a1_switch_01.mp3",
            volume: 1
        },
        mk12_01: {
            path: "audio/guns/mk12_01.mp3",
            volume: 1,
            maxInstances: 5
        },
        mk12_reload_01: {
            path: "audio/guns/mk12_reload_01.mp3",
            volume: 1
        },
        mk12_switch_01: {
            path: "audio/guns/mk12_switch_01.mp3",
            volume: 1
        },
        l86_01: {
            path: "audio/guns/l86_01.mp3",
            volume: 1,
            maxInstances: 5
        },
        l86_reload_01: {
            path: "audio/guns/l86_reload_01.mp3",
            volume: 1
        },
        l86_switch_01: {
            path: "audio/guns/l86_switch_01.mp3",
            volume: 1
        },
        m249_01: {
            path: "audio/guns/m249_01.mp3",
            volume: 1,
            maxInstances: 5
        },
        m249_reload_01: {
            path: "audio/guns/m249_reload_01.mp3",
            volume: 1.5
        },
        m249_switch_01: {
            path: "audio/guns/m249_switch_01.mp3",
            volume: 1.5
        },
        qbb97_01: {
            path: "audio/guns/qbb97_01.mp3",
            volume: 1,
            maxInstances: 5
        },
        qbb97_reload_01: {
            path: "audio/guns/qbb97_reload_01.mp3",
            volume: 1
        },
        qbb97_switch_01: {
            path: "audio/guns/qbb97_switch_01.mp3",
            volume: 1
        },
        scout_01: {
            path: "audio/guns/scout_01.mp3",
            volume: 2,
            maxInstances: 5
        },
        scout_reload_01: {
            path: "audio/guns/scout_reload_01.mp3",
            volume: 1.2
        },
        scout_cycle_01: {
            path: "audio/guns/scout_cycle_01.mp3",
            volume: 1.2
        },
        scout_pull_01: {
            path: "audio/guns/scout_pull_01.mp3",
            volume: 1.2
        },
        model94_01: {
            path: "audio/guns/model94_01.mp3",
            volume: 1,
            maxInstances: 5
        },
        model94_reload_01: {
            path: "audio/guns/model94_reload_01.mp3",
            volume: 1
        },
        model94_cycle_01: {
            path: "audio/guns/model94_cycle_01.mp3",
            volume: 1
        },
        mkg45_01: {
            path: "audio/guns/mkg45_01.mp3",
            volume: 1,
            maxInstances: 5
        },
        mkg45_reload_01: {
            path: "audio/guns/mkg45_reload_01.mp3",
            volume: 1.25
        },
        mkg45_switch_01: {
            path: "audio/guns/mkg45_switch_01.mp3",
            volume: 1.25
        },
        blr_01: {
            path: "audio/guns/blr_01.mp3",
            volume: 1.5,
            maxInstances: 5
        },
        blr_reload_01: {
            path: "audio/guns/blr_reload_01.mp3",
            volume: 1
        },
        blr_cycle_01: {
            path: "audio/guns/blr_cycle_01.mp3",
            volume: 1
        },
        mosin_01: {
            path: "audio/guns/mosin_01.mp3",
            volume: 1,
            maxInstances: 5
        },
        mosin_reload_01: {
            path: "audio/guns/mosin_reload_01.mp3",
            volume: 1
        },
        mosin_reload_02: {
            path: "audio/guns/mosin_reload_02.mp3",
            volume: 1
        },
        mosin_cycle_01: {
            path: "audio/guns/mosin_cycle_01.mp3",
            volume: 1
        },
        mosin_pull_01: {
            path: "audio/guns/mosin_pull_01.mp3",
            volume: 1
        },
        sv98_01: {
            path: "audio/guns/sv98_01.mp3",
            volume: 1,
            maxInstances: 5
        },
        sv98_reload_01: {
            path: "audio/guns/sv98_reload_01.mp3",
            volume: 1
        },
        sv98_cycle_01: {
            path: "audio/guns/sv98_cycle_01.mp3",
            volume: 1
        },
        sv98_pull_01: {
            path: "audio/guns/sv98_pull_01.mp3",
            volume: 1
        },
        awc_01: {
            path: "audio/guns/awc_01.mp3",
            volume: 1,
            maxInstances: 5
        },
        awc_reload_01: {
            path: "audio/guns/awc_reload_01.mp3",
            volume: 1
        },
        awc_cycle_01: {
            path: "audio/guns/awc_cycle_01.mp3",
            volume: 1
        },
        awc_pull_01: {
            path: "audio/guns/awc_pull_01.mp3",
            volume: 1
        },
        potato_cannon_01: {
            path: "audio/guns/potato_cannon_01.mp3",
            volume: 1,
            maxInstances: 5
        },
        potato_cannon_reload_01: {
            path: "audio/guns/potato_cannon_reload_01.mp3",
            volume: 1
        },
        potato_cannon_switch_01: {
            path: "audio/guns/potato_cannon_switch_01.mp3",
            volume: 1
        },
        potato_smg_01: {
            path: "audio/guns/potato_smg_01.mp3",
            volume: 1,
            maxInstances: 5
        },
        potato_smg_reload_01: {
            path: "audio/guns/potato_smg_reload_01.mp3",
            volume: 1
        },
        potato_smg_switch_01: {
            path: "audio/guns/potato_smg_switch_01.mp3",
            volume: 1
        },
        bugle_01: {
            path: "audio/guns/bugle_01.mp3",
            volume: 1.5,
            maxInstances: 3,
            preload: !1
        },
        bugle_02: {
            path: "audio/guns/bugle_02.mp3",
            volume: 1.5,
            maxInstances: 3,
            preload: !1
        },
        bugle_03: {
            path: "audio/guns/bugle_03.mp3",
            volume: 1.5,
            maxInstances: 3,
            preload: !1
        },
        empty_fire_01: {
            path: "audio/guns/empty_fire_01.mp3",
            volume: .9
        },
        empty_fire_02: {
            path: "audio/guns/empty_fire_02.mp3",
            volume: .9
        },
        gun_switch_01: {
            path: "audio/guns/gun_switch_01.mp3",
            volume: 1
        },
        bandage_use_01: {
            path: "audio/ui/bandage_use_01.mp3",
            volume: 1
        },
        healthkit_use_01: {
            path: "audio/ui/healthkit_use_01.mp3",
            volume: 1
        },
        soda_use_01: {
            path: "audio/ui/soda_use_01.mp3",
            volume: 1
        },
        pills_use_01: {
            path: "audio/ui/pills_use_01.mp3",
            volume: 1
        },
        stow_weapon_01: {
            path: "audio/ui/stow_weapon_01.mp3",
            volume: 1
        }
    },
    hits: {
        stone_bullet_hit_01: {
            path: "audio/hits/stone_bullet_hit_01.mp3",
            volume: 1,
            canCoalesce: !0,
            maxInstances: 3
        },
        wood_bullet_hit_01: {
            path: "audio/hits/wood_bullet_hit_01.mp3",
            volume: 1,
            canCoalesce: !0,
            maxInstances: 3
        },
        wood_bullet_hit_02: {
            path: "audio/hits/wood_bullet_hit_02.mp3",
            volume: 1,
            canCoalesce: !0,
            maxInstances: 3
        },
        wood_bullet_hit_03: {
            path: "audio/hits/wood_bullet_hit_03.mp3",
            volume: 1,
            canCoalesce: !0,
            maxInstances: 3
        },
        wood_bullet_hit_04: {
            path: "audio/hits/wood_bullet_hit_04.mp3",
            volume: 1,
            canCoalesce: !0,
            maxInstances: 3
        },
        bush_bullet_hit_01: {
            path: "audio/hits/bush_bullet_hit_01.mp3",
            volume: 1,
            canCoalesce: !0,
            maxInstances: 3
        },
        metal_bullet_hit_01: {
            path: "audio/hits/metal_bullet_hit_01.mp3",
            volume: 1,
            canCoalesce: !0,
            maxInstances: 3
        },
        metal_bullet_hit_02: {
            path: "audio/hits/metal_bullet_hit_02.mp3",
            volume: 1,
            canCoalesce: !0,
            maxInstances: 3
        },
        metal_bullet_hit_03: {
            path: "audio/hits/metal_bullet_hit_03.mp3",
            volume: 1,
            canCoalesce: !0,
            maxInstances: 3
        },
        metal_bullet_hit_04: {
            path: "audio/hits/metal_bullet_hit_04.mp3",
            volume: 1,
            canCoalesce: !0,
            maxInstances: 6
        },
        pan_bullet_hit_01: {
            path: "audio/hits/pan_bullet_hit_01.mp3",
            volume: 1,
            canCoalesce: !0,
            maxInstances: 6
        },
        brick_bullet_hit_01: {
            path: "audio/hits/brick_bullet_hit_01.mp3",
            volume: 1,
            canCoalesce: !0,
            maxInstances: 3
        },
        punch_hit_01: {
            path: "audio/hits/punch_hit_01.mp3",
            volume: 1
        },
        knife_hit_01: {
            path: "audio/hits/knife_hit_01.mp3",
            volume: 1
        },
        pan_hit_01: {
            path: "audio/hits/pan_hit_01.mp3",
            volume: 1
        },
        axe_hit_01: {
            path: "audio/hits/axe_hit_01.mp3",
            volume: 1
        },
        hook_hit_01: {
            path: "audio/hits/hook_hit_01.mp3",
            volume: 1
        },
        saw_hit_01: {
            path: "audio/hits/saw_hit_01.mp3",
            volume: 2.5
        },
        crowbar_hit_01: {
            path: "audio/hits/crowbar_hit_01.mp3",
            volume: 1
        },
        spade_hit_01: {
            path: "audio/hits/spade_hit_01.mp3",
            volume: 1
        },
        hammer_hit_01: {
            path: "audio/hits/hammer_hit_01.mp3",
            volume: 1
        },
        metal_punch_hit_01: {
            path: "audio/hits/metal_punch_hit_01.mp3",
            volume: 1
        },
        metal_punch_hit_02: {
            path: "audio/hits/metal_punch_hit_02.mp3",
            volume: 1
        },
        egg_hit_01: {
            path: "audio/hits/egg_hit_01.mp3",
            volume: 1,
            preload: !1
        },
        player_bullet_hit_01: {
            path: "audio/hits/player_bullet_hit_01.mp3",
            volume: 1,
            canCoalesce: !0,
            maxInstances: 3
        },
        player_bullet_hit_02: {
            path: "audio/hits/player_bullet_hit_02.mp3",
            volume: 1,
            canCoalesce: !0
        },
        plastic_bullet_hit_01: {
            path: "audio/hits/plastic_bullet_hit_01.mp3",
            volume: 1,
            canCoalesce: !0,
            maxInstances: 3
        },
        toilet_bullet_hit_01: {
            path: "audio/hits/toilet_bullet_hit_01.mp3",
            volume: 1,
            canCoalesce: !0,
            maxInstances: 3
        },
        toilet_bullet_hit_02: {
            path: "audio/hits/toilet_bullet_hit_02.mp3",
            volume: 1,
            canCoalesce: !0,
            maxInstances: 3
        },
        glass_bullet_hit_01: {
            path: "audio/hits/glass_bullet_hit_01.mp3",
            volume: 1,
            canCoalesce: !0,
            maxInstances: 3
        },
        concrete_hit_01: {
            path: "audio/hits/concrete_hit_01.mp3",
            volume: 1,
            canCoalesce: !0,
            maxInstances: 3
        },
        frag_grass_01: {
            path: "audio/hits/frag_grass_01.mp3",
            volume: 1,
            canCoalesce: !0,
            maxInstances: 3
        },
        frag_sand_01: {
            path: "audio/hits/frag_sand_01.mp3",
            volume: 1,
            canCoalesce: !0,
            maxInstances: 3
        },
        frag_water_01: {
            path: "audio/hits/frag_water_01.mp3",
            volume: 1,
            canCoalesce: !0,
            maxInstances: 3
        },
        cloth_hit_01: {
            path: "audio/hits/cloth_hit_01.mp3",
            volume: 1,
            canCoalesce: !0,
            maxInstances: 3
        },
        cloth_hit_02: {
            path: "audio/hits/cloth_hit_02.mp3",
            volume: 1,
            canCoalesce: !0,
            maxInstances: 3
        },
        organic_hit_01: {
            path: "audio/hits/organic_hit_01.mp3",
            volume: 1,
            canCoalesce: !0,
            maxInstances: 3
        },
        piano_hit_01: {
            path: "audio/hits/piano_hit_01.mp3",
            volume: 1,
            canCoalesce: !0,
            maxInstances: 3
        },
        piano_hit_02: {
            path: "audio/hits/piano_hit_02.mp3",
            volume: 1,
            canCoalesce: !0,
            maxInstances: 3
        }
    },
    sfx: {
        crate_break_01: {
            path: "audio/sfx/crate_break_01.mp3",
            volume: 1
        },
        crate_break_02: {
            path: "audio/sfx/crate_break_02.mp3",
            volume: 1
        },
        tree_break_01: {
            path: "audio/sfx/tree_break_01.mp3",
            volume: 1
        },
        bush_break_01: {
            path: "audio/sfx/bush_break_01.mp3",
            volume: 1
        },
        bush_enter_01: {
            path: "audio/sfx/bush_enter_01.mp3",
            volume: 1,
            canCoalesce: !0
        },
        bush_enter_02: {
            path: "audio/sfx/bush_enter_02.mp3",
            volume: 1,
            canCoalesce: !0
        },
        barrel_break_01: {
            path: "audio/sfx/barrel_break_01.mp3",
            volume: 1
        },
        barrel_break_02: {
            path: "audio/sfx/barrel_break_02.mp3",
            volume: 1
        },
        stone_break_01: {
            path: "audio/sfx/stone_break_01.mp3",
            volume: 1
        },
        wall_break_01: {
            path: "audio/sfx/wall_break_01.mp3",
            volume: 1
        },
        ceiling_break_01: {
            path: "audio/sfx/ceiling_break_01.mp3",
            volume: 1
        },
        ceiling_break_02: {
            path: "audio/sfx/ceiling_break_02.mp3",
            volume: 1
        },
        toilet_break_01: {
            path: "audio/sfx/toilet_break_01.mp3",
            volume: 1
        },
        toilet_break_02: {
            path: "audio/sfx/toilet_break_02.mp3",
            volume: 1
        },
        vending_break_01: {
            path: "audio/sfx/vending_break_01.mp3",
            volume: 1
        },
        window_break_01: {
            path: "audio/sfx/window_break_01.mp3",
            volume: 1
        },
        window_break_02: {
            path: "audio/sfx/window_break_02.mp3",
            volume: 1
        },
        drawers_break_01: {
            path: "audio/sfx/drawers_break_01.mp3",
            volume: 1
        },
        oven_break_01: {
            path: "audio/sfx/oven_break_01.mp3",
            volume: 1
        },
        deposit_box_break_01: {
            path: "audio/sfx/deposit_box_break_01.mp3",
            volume: 1
        },
        cloth_break_01: {
            path: "audio/sfx/cloth_break_01.mp3",
            volume: 1
        },
        screen_break_01: {
            path: "audio/sfx/screen_break_01.mp3",
            volume: 1
        },
        pumpkin_break_01: {
            path: "audio/sfx/pumpkin_break_01.mp3",
            volume: 1,
            preload: !1
        },
        ceramic_break_01: {
            path: "audio/sfx/ceramic_break_01.mp3",
            volume: 1
        },
        egg_break_01: {
            path: "audio/sfx/egg_break_01.mp3",
            volume: 1,
            preload: !1
        },
        footstep_grass_01: {
            path: "audio/sfx/footstep_grass_01.mp3",
            volume: 1
        },
        footstep_grass_02: {
            path: "audio/sfx/footstep_grass_02.mp3",
            volume: 1
        },
        footstep_metal_01: {
            path: "audio/sfx/footstep_metal_01.mp3",
            volume: 1
        },
        footstep_metal_02: {
            path: "audio/sfx/footstep_metal_02.mp3",
            volume: 1
        },
        footstep_metal_03: {
            path: "audio/sfx/footstep_metal_03.mp3",
            volume: 1
        },
        footstep_metal_04: {
            path: "audio/sfx/footstep_metal_04.mp3",
            volume: 1
        },
        footstep_metal_05: {
            path: "audio/sfx/footstep_metal_05.mp3",
            volume: 1
        },
        footstep_wood_01: {
            path: "audio/sfx/footstep_wood_01.mp3",
            volume: 1
        },
        footstep_wood_02: {
            path: "audio/sfx/footstep_wood_02.mp3",
            volume: 1
        },
        footstep_wood_03: {
            path: "audio/sfx/footstep_wood_03.mp3",
            volume: 1
        },
        footstep_sand_01: {
            path: "audio/sfx/footstep_sand_01.mp3",
            volume: 1
        },
        footstep_sand_02: {
            path: "audio/sfx/footstep_sand_02.mp3",
            volume: 1
        },
        footstep_water_01: {
            path: "audio/sfx/footstep_water_01.mp3",
            volume: 1
        },
        footstep_water_02: {
            path: "audio/sfx/footstep_water_02.mp3",
            volume: 1
        },
        footstep_tile_01: {
            path: "audio/sfx/footstep_tile_01.mp3",
            volume: 1
        },
        footstep_tile_02: {
            path: "audio/sfx/footstep_tile_02.mp3",
            volume: 1
        },
        footstep_asphalt_01: {
            path: "audio/sfx/footstep_asphalt_01.mp3",
            volume: 1
        },
        footstep_asphalt_02: {
            path: "audio/sfx/footstep_asphalt_02.mp3",
            volume: 1
        },
        footstep_brick_01: {
            path: "audio/sfx/footstep_brick_01.mp3",
            volume: 1
        },
        footstep_stone_01: {
            path: "audio/sfx/footstep_stone_01.mp3",
            volume: .8
        },
        footstep_carpet_01: {
            path: "audio/sfx/footstep_carpet_01.mp3",
            volume: 1
        },
        punch_swing_01: {
            path: "audio/sfx/punch_swing_01.mp3",
            volume: 1
        },
        knife_swing_01: {
            path: "audio/sfx/knife_swing_01.mp3",
            volume: 1
        },
        medium_swing_01: {
            path: "audio/sfx/medium_swing_01.mp3",
            volume: 1
        },
        heavy_swing_01: {
            path: "audio/sfx/heavy_swing_01.mp3",
            volume: 1
        },
        bullet_whiz_01: {
            path: "audio/sfx/bullet_whiz_01.mp3",
            volume: 1
        },
        bullet_whiz_02: {
            path: "audio/sfx/bullet_whiz_02.mp3",
            volume: 1
        },
        bullet_whiz_03: {
            path: "audio/sfx/bullet_whiz_03.mp3",
            volume: 1
        },
        frag_throw_01: {
            path: "audio/sfx/frag_throw_01.mp3",
            volume: 1
        },
        frag_pin_01: {
            path: "audio/sfx/frag_pin_01.mp3",
            volume: 1
        },
        frag_deploy_01: {
            path: "audio/ui/frag_pickup_01.mp3",
            volume: 1
        },
        frag_water_01: {
            path: "audio/hits/frag_water_01.mp3",
            volume: 1
        },
        strobe_click_01: {
            path: "audio/sfx/strobe_click_01.mp3",
            volume: 1
        },
        explosion_01: {
            path: "audio/sfx/explosion_01.mp3",
            volume: 1
        },
        explosion_02: {
            path: "audio/sfx/explosion_02.mp3",
            volume: 1
        },
        explosion_03: {
            path: "audio/sfx/explosion_03.mp3",
            volume: 1
        },
        explosion_04: {
            path: "audio/sfx/explosion_04.mp3",
            volume: 1,
            maxInstances: 4
        },
        explosion_05: {
            path: "audio/sfx/explosion_05.mp3",
            volume: 1
        },
        explosion_smoke_01: {
            path: "audio/sfx/explosion_smoke_01.mp3",
            volume: 1
        },
        snowball_01: {
            path: "audio/sfx/snowball_01.mp3",
            volume: 1,
            preload: !1
        },
        snowball_02: {
            path: "audio/sfx/snowball_02.mp3",
            volume: 1,
            preload: !1
        },
        potato_01: {
            path: "audio/sfx/potato_01.mp3",
            volume: 1,
            preload: !1
        },
        potato_02: {
            path: "audio/sfx/potato_02.mp3",
            volume: 1,
            preload: !1
        },
        stow_weapon_01: {
            path: "audio/ui/stow_weapon_01.mp3",
            volume: 1
        },
        knife_deploy_01: {
            path: "audio/ui/knife_deploy_01.mp3",
            volume: 1
        },
        pan_pickup_01: {
            path: "audio/ui/pan_pickup_01.mp3",
            volume: 1
        },
        knuckles_deploy_01: {
            path: "audio/ui/knuckles_deploy_01.mp3",
            volume: 1
        },
        door_open_01: {
            path: "audio/sfx/door_open_01.mp3",
            volume: 1
        },
        door_close_01: {
            path: "audio/sfx/door_close_01.mp3",
            volume: 1
        },
        door_open_02: {
            path: "audio/sfx/door_open_02.mp3",
            volume: 1
        },
        door_close_02: {
            path: "audio/sfx/door_close_02.mp3",
            volume: 1
        },
        door_open_03: {
            path: "audio/sfx/door_open_03.mp3",
            volume: 1
        },
        door_close_03: {
            path: "audio/sfx/door_close_03.mp3",
            volume: 1
        },
        door_open_04: {
            path: "audio/sfx/door_open_04.mp3",
            volume: .8
        },
        door_error_01: {
            path: "audio/sfx/door_error_01.mp3",
            volume: 1
        },
        vault_change_01: {
            path: "audio/sfx/vault_change_01.mp3",
            volume: 1
        },
        vault_change_02: {
            path: "audio/sfx/vault_change_02.mp3",
            volume: 1,
            preload: !1
        },
        vault_change_03: {
            path: "audio/sfx/vault_change_03.mp3",
            volume: 1,
            preload: !1
        },
        cell_control_01: {
            path: "audio/sfx/cell_control_01.mp3",
            volume: 1
        },
        cell_control_02: {
            path: "audio/sfx/cell_control_02.mp3",
            volume: 1
        },
        plane_01: {
            path: "audio/sfx/plane_01.mp3",
            volume: 1
        },
        plane_02: {
            path: "audio/sfx/plane_02.mp3",
            volume: 1,
            preload: !1
        },
        fighter_01: {
            path: "audio/sfx/fighter_01.mp3",
            volume: 1
        },
        airdrop_chute_01: {
            path: "audio/sfx/airdrop_chute_01.mp3",
            volume: 1
        },
        airdrop_fall_01: {
            path: "audio/sfx/airdrop_fall_01.mp3",
            volume: 1
        },
        airdrop_crash_01: {
            path: "audio/sfx/airdrop_crash_01.mp3",
            volume: 1
        },
        airdrop_crash_02: {
            path: "audio/sfx/airdrop_crash_02.mp3",
            volume: 1
        },
        airdrop_open_01: {
            path: "audio/sfx/airdrop_open_01.mp3",
            volume: 1
        },
        airdrop_open_02: {
            path: "audio/sfx/airdrop_open_02.mp3",
            volume: 1
        },
        button_press_01: {
            path: "audio/sfx/button_press_01.mp3",
            volume: 1,
            maxInstances: 3
        },
        watering_01: {
            path: "audio/sfx/watering_01.mp3",
            volume: 1,
            maxInstances: 3,
            preload: !1
        },
        piano_02: {
            path: "audio/sfx/piano_02.mp3",
            volume: 1,
            preload: !1
        },
        footstep_08: {
            path: "audio/sfx/footstep_08.mp3",
            volume: 1,
            preload: !1
        },
        footstep_09: {
            path: "audio/sfx/footstep_09.mp3",
            volume: 1,
            preload: !1
        },
        howl_01: {
            path: "audio/sfx/howl_01.mp3",
            volume: 1,
            preload: !1
        },
        wheel_control_01: {
            path: "audio/sfx/wheel_control_01.mp3",
            volume: 1,
            preload: !1
        },
        log_01: {
            path: "audio/sfx/log_01.mp3",
            volume: 1,
            preload: !1
        },
        log_02: {
            path: "audio/sfx/log_02.mp3",
            volume: 1,
            preload: !1
        },
        log_03: {
            path: "audio/sfx/log_03.mp3",
            volume: 1,
            preload: !1
        },
        log_04: {
            path: "audio/sfx/log_04.mp3",
            volume: 1,
            preload: !1
        },
        log_05: {
            path: "audio/sfx/log_05.mp3",
            volume: 1,
            preload: !1
        },
        log_06: {
            path: "audio/sfx/log_06.mp3",
            volume: 1,
            preload: !1
        },
        log_11: {
            path: "audio/sfx/log_11.mp3",
            volume: 4,
            preload: !1
        },
        log_12: {
            path: "audio/sfx/log_12.mp3",
            volume: 4,
            preload: !1
        },
        log_13: {
            path: "audio/sfx/log_13.mp3",
            volume: 2,
            preload: !1
        },
        log_14: {
            path: "audio/sfx/log_14.mp3",
            volume: 2,
            preload: !1
        },
        ability_stim_01: {
            path: "audio/sfx/ability_stim_01.mp3",
            volume: 4
        },
        xp_drop_01: {
            path: "audio/sfx/xp_drop_01.mp3",
            volume: 1.25,
            preload: !1
        },
        xp_drop_02: {
            path: "audio/sfx/xp_drop_02.mp3",
            volume: 1.25,
            preload: !1
        },
        cluck_01: {
            path: "audio/sfx/cluck_01.mp3",
            volume: 1,
            preload: !1
        },
        cluck_02: {
            path: "audio/sfx/cluck_02.mp3",
            volume: 1,
            preload: !1
        },
        feather_01: {
            path: "audio/sfx/feather_01.mp3",
            volume: 1,
            preload: !1
        }
    },
    ambient: {
        ambient_wind_01: {
            path: "audio/ambient/ambient_wind_01.mp3",
            volume: 1,
            loadPriority: 1
        },
        ambient_waves_01: {
            path: "audio/ambient/ambient_waves_01.mp3",
            volume: 1,
            loadPriority: 1
        },
        ambient_stream_01: {
            path: "audio/ambient/ambient_stream_01.mp3",
            volume: 1,
            loadPriority: 1
        },
        piano_music_01: {
            path: "audio/ambient/piano_music_01.mp3",
            volume: 1,
            preload: !1
        },
        ambient_wind_02: {
            path: "audio/ambient/ambient_wind_02.mp3",
            volume: 1,
            preload: !1
        },
        ambient_steam_01: {
            path: "audio/ambient/ambient_steam_01.mp3",
            volume: 1,
            preload: !1
        },
        club_music_01: {
            path: "audio/ambient/club_music_01.mp3",
            volume: 1,
            preload: !1
        },
        club_music_02: {
            path: "audio/ambient/club_music_02.mp3",
            volume: 1,
            preload: !1
        },
        ambient_lab_01: {
            path: "audio/ambient/ambient_lab_01.mp3",
            volume: .2,
            preload: !1
        }
    },
    ui: {
        ammo_pickup_01: {
            path: "audio/ui/ammo_pickup_01.mp3",
            volume: 1
        },
        clothes_pickup_01: {
            path: "audio/ui/clothes_pickup_01.mp3",
            volume: 1
        },
        bells_01: {
            path: "audio/sfx/plane_02.mp3",
            volume: 1,
            preload: !1
        },
        helmet_pickup_01: {
            path: "audio/ui/helmet_pickup_01.mp3",
            volume: 1
        },
        chest_pickup_01: {
            path: "audio/ui/chest_pickup_01.mp3",
            volume: 1
        },
        gun_pickup_01: {
            path: "audio/ui/gun_pickup_01.mp3",
            volume: 1
        },
        scope_pickup_01: {
            path: "audio/ui/scope_pickup_01.mp3",
            volume: 1
        },
        pack_pickup_01: {
            path: "audio/ui/pack_pickup_01.mp3",
            volume: 1
        },
        soda_pickup_01: {
            path: "audio/ui/soda_pickup_01.mp3",
            volume: 1
        },
        pills_pickup_01: {
            path: "audio/ui/pills_pickup_01.mp3",
            volume: 1
        },
        bandage_pickup_01: {
            path: "audio/ui/bandage_pickup_01.mp3",
            volume: 1
        },
        healthkit_pickup_01: {
            path: "audio/ui/healthkit_pickup_01.mp3",
            volume: 1
        },
        frag_pickup_01: {
            path: "audio/ui/frag_pickup_01.mp3",
            volume: 1
        },
        snowball_pickup_01: {
            path: "audio/ui/snowball_pickup_01.mp3",
            volume: 1,
            preload: !1
        },
        potato_pickup_01: {
            path: "audio/ui/potato_pickup_01.mp3",
            volume: 1,
            preload: !1
        },
        heavy_pickup_01: {
            path: "audio/ui/heavy_pickup_01.mp3",
            volume: 1
        },
        pan_pickup_01: {
            path: "audio/ui/pan_pickup_01.mp3",
            volume: 1
        },
        perk_pickup_01: {
            path: "audio/ui/perk_pickup_01.mp3",
            volume: 1
        },
        xp_pickup_01: {
            path: "audio/ui/xp_pickup_01.mp3",
            volume: 1.5,
            preload: !1
        },
        xp_pickup_02: {
            path: "audio/ui/xp_pickup_02.mp3",
            volume: 1.5,
            preload: !1
        },
        ping_danger_01: {
            path: "audio/ui/ping_danger_01.mp3",
            volume: 1
        },
        ping_coming_01: {
            path: "audio/ui/ping_coming_01.mp3",
            volume: 1
        },
        ping_help_01: {
            path: "audio/ui/ping_help_01.mp3",
            volume: 1
        },
        ping_leader_01: {
            path: "audio/ui/ping_leader_01.mp3",
            volume: 1,
            preload: !1
        },
        ping_airdrop_01: {
            path: "audio/ui/ping_airdrop_01.mp3",
            volume: 1
        },
        ping_airstrike_01: {
            path: "audio/ui/ping_airstrike_01.mp3",
            volume: 1
        },
        ping_unlock_01: {
            path: "audio/ui/ping_unlock_01.mp3",
            volume: 1,
            preload: !1
        },
        emote_01: {
            path: "audio/ui/emote_01.mp3",
            volume: 1
        },
        trick_01: {
            path: "audio/ui/trick_01.mp3",
            volume: 1.5,
            preload: !1
        },
        trick_02: {
            path: "audio/ui/trick_02.mp3",
            volume: 1.5,
            preload: !1
        },
        trick_03: {
            path: "audio/ui/trick_03.mp3",
            volume: 1.5,
            preload: !1
        },
        treat_01: {
            path: "audio/ui/treat_01.mp3",
            volume: 1,
            preload: !1
        },
        loot_drop_01: {
            path: "audio/ui/loot_drop_01.mp3",
            volume: 1
        },
        notification_start_01: {
            path: "audio/ui/notification_start_01.mp3",
            volume: 1
        },
        notification_join_01: {
            path: "audio/ui/notification_join_01.mp3",
            volume: 1
        },
        leader_assigned_01: {
            path: "audio/ui/leader_assigned_01.mp3",
            volume: 1,
            maxInstances: 1
        },
        leader_dead_01: {
            path: "audio/ui/leader_dead_01.mp3",
            volume: 1.75,
            maxInstances: 1
        },
        captain_assigned_01: {
            path: "audio/ui/captain_assigned_01.mp3",
            volume: 2,
            preload: !1,
            maxInstances: 1
        },
        lt_assigned_01: {
            path: "audio/ui/lt_assigned_01.mp3",
            volume: 1,
            preload: !1,
            maxInstances: 1
        },
        medic_assigned_01: {
            path: "audio/ui/medic_assigned_01.mp3",
            volume: 2,
            preload: !1,
            maxInstances: 1
        },
        marksman_assigned_01: {
            path: "audio/ui/marksman_assigned_01.mp3",
            volume: 2,
            preload: !1,
            maxInstances: 1
        },
        recon_assigned_01: {
            path: "audio/ui/recon_assigned_01.mp3",
            volume: 1.5,
            preload: !1,
            maxInstances: 1
        },
        grenadier_assigned_01: {
            path: "audio/ui/grenadier_assigned_01.mp3",
            volume: 2.5,
            preload: !1,
            maxInstances: 1
        },
        bugler_assigned_01: {
            path: "audio/ui/bugler_assigned_01.mp3",
            volume: 2.5,
            preload: !1,
            maxInstances: 1
        },
        last_man_assigned_01: {
            path: "audio/ui/last_man_assigned_01.mp3",
            volume: 1.75,
            preload: !1,
            maxInstances: 1
        },
        helmet03_forest_pickup_01: {
            path: "audio/ui/helmet03_forest_pickup_01.mp3",
            volume: 1,
            maxInstances: 1,
            preload: !1
        },
        kill_leader_assigned_01: {
            path: "audio/ui/kill_leader_assigned_01.mp3",
            volume: 1.5,
            maxInstances: 1,
            preload: !1
        },
        kill_leader_assigned_02: {
            path: "audio/ui/kill_leader_assigned_02.mp3",
            volume: 1.5,
            maxInstances: 1,
            preload: !1
        },
        kill_leader_dead_01: {
            path: "audio/ui/kill_leader_dead_01.mp3",
            volume: 1.5,
            maxInstances: 1,
            preload: !1
        },
        kill_leader_dead_02: {
            path: "audio/ui/kill_leader_dead_02.mp3",
            volume: 1.5,
            maxInstances: 1,
            preload: !1
        },
        spawn_01: {
            path: "audio/ui/spawn_01.mp3",
            volume: 3,
            preload: !1
        }
    },
    music: {
        menu_music: {
            path: "audio/ambient/menu_music_01.mp3",
            volume: 1,
            loadPriority: 2
        }
    }
}
  , sa = {
    footstep_grass: {
        channel: "sfx",
        sounds: ["footstep_grass_01", "footstep_grass_02"]
    },
    footstep_container: {
        channel: "sfx",
        sounds: ["footstep_metal_03"]
    },
    footstep_warehouse: {
        channel: "sfx",
        sounds: ["footstep_metal_01", "footstep_metal_02"]
    },
    footstep_house: {
        channel: "sfx",
        sounds: ["footstep_wood_02", "footstep_wood_03"]
    },
    footstep_shack: {
        channel: "sfx",
        sounds: ["footstep_wood_01"]
    },
    footstep_sand: {
        channel: "sfx",
        sounds: ["footstep_sand_01", "footstep_sand_02"]
    },
    footstep_water: {
        channel: "sfx",
        sounds: ["footstep_water_01", "footstep_water_02"]
    },
    footstep_tile: {
        channel: "sfx",
        sounds: ["footstep_tile_01", "footstep_tile_02"]
    },
    footstep_asphalt: {
        channel: "sfx",
        sounds: ["footstep_asphalt_01", "footstep_asphalt_02"]
    },
    footstep_brick: {
        channel: "sfx",
        sounds: ["footstep_brick_01"]
    },
    footstep_bunker: {
        channel: "sfx",
        sounds: ["footstep_metal_04", "footstep_metal_05"]
    },
    footstep_stone: {
        channel: "sfx",
        sounds: ["footstep_stone_01"]
    },
    footstep_carpet: {
        channel: "sfx",
        sounds: ["footstep_carpet_01"]
    },
    player_bullet_hit: {
        channel: "hits",
        sounds: ["player_bullet_hit_01"]
    },
    metal_punch: {
        channel: "hits",
        sounds: ["metal_punch_hit_01", "metal_punch_hit_02"]
    },
    cloth_punch: {
        channel: "hits",
        sounds: ["cloth_hit_01"]
    },
    cloth_bullet: {
        channel: "hits",
        sounds: ["cloth_hit_02"]
    },
    organic_hit: {
        channel: "hits",
        sounds: ["organic_hit_01"]
    },
    piano_hit: {
        channel: "hits",
        sounds: ["piano_hit_01", "piano_hit_02"]
    },
    wall_bullet: {
        channel: "hits",
        sounds: ["metal_bullet_hit_01"]
    },
    wall_wood_bullet: {
        channel: "hits",
        sounds: ["wood_bullet_hit_02"]
    },
    wall_brick_bullet: {
        channel: "hits",
        sounds: ["brick_bullet_hit_01"]
    },
    stone_bullet: {
        channel: "hits",
        sounds: ["stone_bullet_hit_01"]
    },
    barrel_bullet: {
        channel: "hits",
        sounds: ["metal_bullet_hit_03"]
    },
    pan_bullet: {
        channel: "hits",
        sounds: ["pan_bullet_hit_01"]
    },
    silo_bullet: {
        channel: "hits",
        sounds: ["metal_bullet_hit_04"]
    },
    toilet_porc_bullet: {
        channel: "hits",
        sounds: ["toilet_bullet_hit_01"]
    },
    toilet_metal_bullet: {
        channel: "hits",
        sounds: ["toilet_bullet_hit_02"]
    },
    glass_bullet: {
        channel: "hits",
        sounds: ["glass_bullet_hit_01"]
    },
    cobalt_bullet: {
        channel: "hits",
        sounds: ["metal_bullet_hit_02"]
    },
    concrete_hit: {
        channel: "hits",
        sounds: ["concrete_hit_01"]
    },
    wood_prop_bullet: {
        channel: "hits",
        sounds: ["wood_bullet_hit_03"]
    },
    wood_crate_bullet: {
        channel: "hits",
        sounds: ["wood_bullet_hit_04"]
    },
    ammo_crate_bullet: {
        channel: "hits",
        sounds: ["plastic_bullet_hit_01"]
    },
    bush_bullet: {
        channel: "hits",
        sounds: ["bush_bullet_hit_01"]
    },
    tree_bullet: {
        channel: "hits",
        sounds: ["wood_bullet_hit_01"]
    },
    egg_hit: {
        channel: "hits",
        sounds: ["egg_hit_01"]
    },
    player_bullet_grunt: {
        channel: "hits",
        sounds: ["player_bullet_hit_02"]
    },
    bullet_whiz: {
        channel: "sfx",
        sounds: ["bullet_whiz_01", "bullet_whiz_02", "bullet_whiz_03"]
    },
    frag_grass: {
        channel: "hits",
        sounds: ["frag_grass_01"]
    },
    frag_sand: {
        channel: "hits",
        sounds: ["frag_sand_01"]
    },
    frag_water: {
        channel: "hits",
        sounds: ["frag_water_01"]
    },
    kill_leader_assigned: {
        channel: "ui",
        sounds: ["kill_leader_assigned_01", "kill_leader_assigned_02"]
    },
    kill_leader_dead: {
        channel: "ui",
        sounds: ["kill_leader_dead_01", "kill_leader_dead_02"]
    },
    cluck: {
        channel: "sfx",
        sounds: ["cluck_01", "cluck_02"]
    }
}
  , aa = {
    activePlayer: {
        volume: .5,
        maxRange: 48,
        list: "players",
        type: "sound"
    },
    otherPlayers: {
        volume: .5,
        maxRange: 48,
        list: "players",
        type: "sound"
    },
    hits: {
        volume: .4,
        maxRange: 48,
        list: "hits",
        type: "sound"
    },
    sfx: {
        volume: 1,
        maxRange: 48,
        list: "sfx",
        type: "sound"
    },
    ambient: {
        volume: 1,
        maxRange: 1,
        list: "ambient",
        type: "sound"
    },
    ui: {
        volume: .75,
        maxRange: 48,
        list: "ui",
        type: "sound"
    },
    music: {
        volume: 1,
        maxRange: 1,
        list: "music",
        type: "music"
    }
}
  , oa = {
    cathedral: {
        path: "audio/reverb/cathedral_01.mp3",
        volume: .7,
        stereoSpread: .004
    },
    cave: {
        path: "audio/reverb/cave_mono_01.mp3",
        volume: .7,
        echoVolume: .5,
        echoDelay: .25,
        echoLowPass: 800,
        stereoSpread: .004
    }
}
  , De = {
    Sounds: ra,
    Groups: sa,
    Channels: aa,
    Reverbs: oa
}
  , Ui = .003
  , ri = .5;
class la {
    mute = !1;
    forcedMute = !1;
    masterVolume = 1;
    soundVolume = 1;
    musicVolume = 1;
    baseVolume = .5;
    sounds = {};
    loadedFiles = {};
    preloadedSounds = !1;
    cameraPos = m.create(0, 0);
    activeLayer = 0;
    underground = !1;
    soundInstances = [];
    constructor() {
        Be.Sound.volume = .5,
        Be.Sound.on("fileload", this.loadHandler, this)
    }
    preloadSounds() {
        if (!this.preloadedSounds) {
            this.preloadedSounds = !0;
            const e = {}
              , t = Object.keys(De.Sounds);
            for (let l = 0; l < t.length; l++) {
                const h = t[l]
                  , p = De.Sounds[h]
                  , c = Object.keys(p);
                for (let d = 0; d < c.length; d++) {
                    const w = c[d];
                    e[w] !== void 0 && console.log(`Sound ${w} defined multiple times!`),
                    e[w] = !0
                }
            }
            const i = []
              , r = Object.keys(De.Channels);
            for (let l = 0; l < r.length; l++) {
                const h = r[l]
                  , p = De.Channels[h]
                  , c = De.Sounds[p.list]
                  , d = Object.keys(c);
                for (let w = 0; w < d.length; w++) {
                    const f = d[w]
                      , S = c[f];
                    if (S.preload === void 0 || S.preload) {
                        const g = {
                            canCoalesce: S.canCoalesce,
                            channels: S.maxInstances,
                            volume: S.volume
                        };
                        i.push({
                            name: f,
                            channel: h,
                            path: S.path,
                            options: g,
                            priority: S.loadPriority || 0
                        })
                    }
                }
            }
            i.sort( (l, h) => h.priority - l.priority);
            for (let l = 0; l < i.length; l++) {
                const h = i[l];
                this.loadSound(h)
            }
            const s = De.Reverbs
              , a = Object.keys(s);
            for (let l = 0; l < a.length; l++) {
                const h = a[l]
                  , p = s[h];
                Be.Sound.registerReverb(p.path, h, p)
            }
        }
    }
    loadSound(e) {
        const t = e.name + e.channel;
        this.sounds[t] || (Be.Sound.registerSound(e.path, t, e.options),
        this.sounds[t] = {
            path: e.path,
            name: e.name,
            channel: e.channel
        })
    }
    loadHandler(e) {
        this.loadedFiles[e] = !0
    }
    update(e) {
        for (let r = this.soundInstances.length - 1; r >= 0; r--) {
            const s = this.soundInstances[r];
            (s.instance.playState == "playFinished" || s.instance.playState == "playInterrupted" || s.instance.playState == "playFailed") && this.soundInstances.splice(r, 1)
        }
        const t = [0, 1, 1 / 3, 2 / 3]
          , i = this.underground ? t[this.activeLayer] : 0;
        Be.Sound.setReverbs({
            cathedral: i
        }),
        Be.Sound.update(e)
    }
    playSound(e, t={}) {
        if (!e || e == "none")
            return null;
        t.channel = t.channel || "activePlayer",
        t.startSilent = t.startSilent || !1,
        t.forceStart = t.forceStart || !1,
        t.loop = t.loop || !1,
        t.soundPos = t.soundPos || null,
        t.fallOff = t.fallOff || 0,
        t.filter = t.filter || "",
        t.delay = t.delay || 0,
        t.ignoreMinAllowable = t.ignoreMinAllowable || !1,
        t.rangeMult = t.rangeMult || 1,
        t.offset = t.offset || 0,
        t.ambient = t.channel == "ambient" || t.channel == "music",
        t.detune = t.detune || 0,
        t.volumeScale = t.volumeScale || 1;
        let i = null;
        const r = De.Channels[t.channel];
        if (this.forcedMute)
            return null;
        if (r && (!this.mute || t.forceStart)) {
            const s = this.baseVolume * 1 * this.getTypeVolume(r.type) * t.volumeScale
              , a = t.layer !== void 0 && !y.sameAudioLayer(t.layer, this.activeLayer)
              , l = t.filter ? a || t.forceFilter ? t.filter : "reverb" : "none";
            if (t.channel != "activePlayer" && t.soundPos) {
                const h = m.sub(this.cameraPos, t.soundPos)
                  , p = m.length(h);
                let c = r.maxRange * t.rangeMult;
                k.eqAbs(c, 0) && (c = 1);
                const d = k.clamp(Math.abs(p / c), 0, 1)
                  , w = Math.pow(1 - d, 1 + t.fallOff * 2);
                let f = r.volume * w * s;
                if (f = a ? f * ri : f,
                f > Ui || t.ignoreMinAllowable) {
                    const S = k.clamp(h.x / c * -1, -1, 1);
                    i = Be.Sound.play(e + t.channel, {
                        filter: l,
                        loop: t.loop ? -1 : 0,
                        volume: t.startSilent ? 0 : f,
                        pan: S,
                        delay: t.delay,
                        offset: t.offset,
                        ambient: t.ambient,
                        detune: t.detune
                    })
                }
            } else {
                let h = r.volume * s;
                h = a ? h * ri : h,
                i = Be.Sound.play(e + t.channel, {
                    filter: l,
                    loop: t.loop ? -1 : 0,
                    volume: t.startSilent ? 0 : h,
                    delay: t.delay,
                    offset: t.offset,
                    ambient: t.ambient,
                    detune: t.detune
                })
            }
            if (i && (t.loop || t.channel == "music")) {
                const h = t.channel == "music" ? "music" : "sound";
                this.soundInstances.push({
                    instance: i,
                    type: h
                })
            }
        }
        return i
    }
    playGroup(e, t={}) {
        const i = De.Groups[e];
        if (i) {
            const r = i.sounds
              , s = Math.floor(y.random(0, r.length));
            return t.channel = i.channel,
            this.playSound(r[s], t)
        }
        return null
    }
    updateSound(e, t, i, r={}) {
        r.fallOff = r.fallOff || 0,
        r.rangeMult = r.rangeMult || 1,
        r.ignoreMinAllowable = r.ignoreMinAllowable || !1,
        r.volumeScale = r.volumeScale || 1;
        const s = De.Channels[t];
        if (e && s) {
            const a = this.baseVolume * 1 * this.getTypeVolume(s.type) * r.volumeScale
              , l = m.sub(this.cameraPos, i)
              , h = m.length(l);
            let p = s.maxRange * r.rangeMult;
            k.eqAbs(p, 0) && (p = 1);
            const c = k.clamp(Math.abs(h / p), 0, 1)
              , d = Math.pow(1 - c, 1 + r.fallOff * 2);
            let w = s.volume * d * a;
            if (w = r.layer === void 0 || y.sameAudioLayer(r.layer, this.activeLayer) ? w : w * ri,
            w > Ui || r.ignoreMinAllowable) {
                const S = k.clamp(l.x / p * -1, -1, 1);
                e.volume = w,
                e.pan = S
            }
        }
    }
    setMasterVolume(e) {
        e = k.clamp(e, 0, 1),
        Be.Sound.volume = e
    }
    _setInstanceTypeVolume(e, t) {
        t = k.clamp(t, 0, 1);
        const i = this.getTypeVolume(e)
          , r = i > 1e-4 ? t / i : 0;
        for (let s = 0; s < this.soundInstances.length; s++) {
            const a = this.soundInstances[s];
            a.type == e && (a.instance.volume *= r)
        }
    }
    setSoundVolume(e) {
        this._setInstanceTypeVolume("sound", e),
        this.soundVolume = e
    }
    setMusicVolume(e) {
        this._setInstanceTypeVolume("music", e),
        this.musicVolume = e
    }
    setVolume(e, t, i) {
        if (e) {
            i = i || "sound";
            const r = this.getTypeVolume(i);
            e.volume = t * r
        }
    }
    getVolume(e) {
        return e ? e.volume : 0
    }
    setMute(e) {
        return this.mute = e,
        Be.Sound.setMute(this.mute || this.forcedMute),
        this.mute
    }
    setForcedMute(e) {
        return this.forcedMute = e,
        this.forcedMute && this.stopAll(),
        Be.Sound.setMute(this.mute || this.forcedMute),
        this.forcedMute
    }
    muteToggle() {
        return this.setMute(!this.mute)
    }
    stopSound(e) {
        e?.stop()
    }
    stopAll() {
        Be.Sound.stop()
    }
    allLoaded() {
        const e = Object.keys(this.sounds);
        for (let t = 0; t < e.length; t++) {
            const i = this.sounds[e[t]];
            if (!this.isSoundLoaded(i.name, i.channel))
                return !1
        }
        return !0
    }
    isSoundLoaded(e, t) {
        const i = this.sounds[e + t];
        return i && this.loadedFiles[i.path]
    }
    isSoundPlaying(e) {
        return !!e && e.playState == Be.Sound.PLAY_SUCCEEDED
    }
    getSoundDefVolume(e, t) {
        const i = De.Sounds[t][e]
          , r = De.Channels[t];
        return i && r ? i.volume * r.volume : 1
    }
    getTypeVolume(e) {
        switch (e) {
        case "music":
            return this.musicVolume;
        case "sound":
            return this.soundVolume;
        default:
            return this.soundVolume
        }
    }
}
class Br {
    CYoYrL = m.create(0, 0);
    oPtaok = 16;
    abrnAk = 1.5;
    SWly = 1.5;
    eXqeW = 1;
    rkdRrQ = 1;
    neDvK = !0;
    DxNoF = 0;
    RXZ = !0;
    gbzsC = !1;
    BYJsJa = 0;
    YLH() {
        return this.oPtaok * this.abrnAk
    }
    zEsq(e) {
        return {
            x: this.eXqeW * .5 + (e.x - this.CYoYrL.x) * this.YLH(),
            y: this.rkdRrQ * .5 - (e.y - this.CYoYrL.y) * this.YLH()
        }
    }
    igoa(e) {
        return {
            x: this.CYoYrL.x + (e.x - this.eXqeW * .5) / this.YLH(),
            y: this.CYoYrL.y + (this.rkdRrQ * .5 - e.y) / this.YLH()
        }
    }
    ZaMxGM(e) {
        return e * this.abrnAk
    }
    pTKJ(e) {
        return e * this.YLH()
    }
    fns(e) {
        this.neDvK = e
    }
    Kozelh(e) {
        this.RXZ = e
    }
    BrlY(e) {
        this.gbzsC = e
    }
    Wso(e, t) {
        const i = m.length(m.sub(this.CYoYrL, e))
          , r = k.delerp(i, 40, 10) * t;
        this.DxNoF = Math.max(this.DxNoF, r)
    }
    PTwQy() {
        this.neDvK && (this.CYoYrL = m.add(this.CYoYrL, m.mul(m.randomUnit(), this.DxNoF))),
        this.DxNoF = 0
    }
}
const Ii = {
    fontFamily: "monospace",
    fill: "white",
    fontSize: 13,
    dropShadow: !0,
    dropShadowAlpha: .5,
    dropShadowAngle: 0,
    dropShadowBlur: 5,
    dropShadowColor: "black",
    dropShadowDistance: 0
}
  , na = {
    width: 350,
    height: 100,
    x: 0,
    y: 0,
    maxHistory: 150,
    fill: "rgba(255, 0, 0, 0.1)",
    stroke: "red",
    background: {
        fill: "rgba(0, 0, 0, 0.2)",
        stroke: "rgba(0, 0, 0, 0)"
    },
    titleTextStyle: {
        ...Ii,
        fontSize: 16
    }
};
class ma {
    key;
    container = new J;
    gfx = new Me;
    fill;
    stroke;
    background;
    _graphEnabled = !0;
    _labelsEnabled = !0;
    get visible() {
        return this._graphEnabled || this._labelsEnabled
    }
    toggleGraph(e) {
        this._graphEnabled = e,
        this.gfx.visible = e,
        this.container.visible = this._graphEnabled || this._labelsEnabled,
        this.updateLabels()
    }
    toggleLabels(e) {
        this._labelsEnabled = e;
        for (const t of this.labels)
            t.text.visible = e;
        this.container.visible = this._graphEnabled || this._labelsEnabled,
        this.updateLabels()
    }
    _labels = [];
    get labels() {
        return this._labels
    }
    get x() {
        return this.container.x
    }
    set x(e) {
        this.container.x = e
    }
    get y() {
        return this.container.y
    }
    set y(e) {
        this.container.y = e
    }
    _width;
    get width() {
        return this._width
    }
    set width(e) {
        this._width = e,
        this.update()
    }
    _height;
    get height() {
        return this._height
    }
    set height(e) {
        this._height = e,
        this.update()
    }
    _history = [];
    get history() {
        return this._history
    }
    _maxHistory;
    set maxHistory(e) {
        this._maxHistory = e,
        this.update()
    }
    get maxHistory() {
        return this._maxHistory
    }
    _maxValue = 0;
    get maxValue() {
        return this._maxValue
    }
    _minValue = 0;
    get minValue() {
        return this._minValue
    }
    _sum = 0;
    get sum() {
        return this._sum
    }
    _averageValue = 0;
    get averageValue() {
        return this._averageValue
    }
    constructor(e, t={}) {
        this.key = e;
        const i = y.mergeDeep({}, na, t);
        this._width = i.width,
        this._height = i.height,
        this.x = i.x,
        this.y = i.y,
        this._maxHistory = i.maxHistory,
        this.fill = i.fill,
        this.stroke = i.stroke,
        this.background = i.background,
        this.container.addChild(this.gfx),
        this.update()
    }
    addEntry(e) {
        if (!(!this._graphEnabled && !this._labelsEnabled)) {
            this._history.push(e),
            this._history.length > this.maxHistory && this._history.shift(),
            this._maxValue = -Number.MAX_VALUE,
            this._minValue = Number.MAX_VALUE,
            this._sum = 0;
            for (let t = 0; t < this._history.length; t++) {
                const i = this._history[t];
                this._maxValue = this._maxValue > i ? this._maxValue : i,
                this._minValue = this._minValue < i ? this._minValue : i,
                this._sum += i
            }
            this._averageValue = Math.round(this._sum / this._history.length),
            this.update()
        }
    }
    addLabel(e, t={}) {
        const i = new ot;
        return i.style = y.mergeDeep({}, Ii, t),
        this.container.addChild(i),
        this._labels.push({
            text: i,
            updateText: e
        }),
        this
    }
    update() {
        this.updateLabels(),
        this.renderGraph()
    }
    updateLabels() {
        if (this._labelsEnabled)
            for (let e = 0, t = 0; e < this._labels.length; e++) {
                const i = this._labels[e];
                i.text.text = i.updateText(this),
                i.text.x = t,
                i.text.y = this.gfx.visible ? this.gfx.height : 0,
                t += i.text.width + parseInt(i.text.style.fontSize)
            }
    }
    renderGraph() {
        if (!this._graphEnabled)
            return;
        this.gfx.clear().beginFill(this.background.fill).lineStyle(2, this.background.stroke).drawRect(0, 0, this.width, this.height).endFill().beginFill(this.fill).lineStyle({
            width: 2,
            color: this.stroke,
            join: as.ROUND
        }).moveTo(0, this.height);
        const e = this.width / (this.maxHistory - 1);
        let t = 0;
        for (let i = 0; i < this._history.length; i++) {
            const r = this._history[i] / this._maxValue * this.height;
            t = e * i,
            this.gfx.lineTo(t, this.height - r)
        }
        this.gfx.lineTo(t, this.height).closePath().endFill()
    }
}
const dt = 6;
class ha {
    container = new J;
    background = new ae(X.WHITE);
    contentContainer = new J;
    graphsContainer = new J;
    graphs = [];
    fpsGraph;
    frames = [];
    fpsTicker = 0;
    pingGraph;
    netInGraph;
    linesContainer = new J;
    infoLines = [];
    config;
    topLeftDiv;
    hudConfig() {
        return this.config.get("debugHUD")
    }
    constructor(e) {
        this.config = e,
        this.container.position.set(dt, dt),
        this.container.addChild(this.background, this.contentContainer),
        this.contentContainer.position.set(dt, dt),
        this.contentContainer.addChild(this.linesContainer, this.graphsContainer),
        this.background.tint = 0,
        this.background.alpha = .5,
        this.fpsGraph = this.addGraph("fps", {
            fill: "rgba(255, 0, 0, 0.2)",
            stroke: "red"
        }),
        this.topLeftDiv = document.getElementById("ui-top-left");
        const t = 6;
        this.fpsGraph.addLabel(r => {
            const s = `${Math.round(r.minValue)}`.padEnd(t)
              , a = `${Math.round(r.maxValue)}`.padEnd(t)
              , l = `${Math.round(r.averageValue)}`.padEnd(t);
            return `FPS:     Min: ${s} Max: ${a} Avg: ${l}`
        }
        ),
        this.pingGraph = this.addGraph("ping", {
            fill: "rgba(255, 0, 255, 0.2)",
            stroke: "magenta"
        }),
        this.pingGraph.addLabel(r => {
            const s = `${Math.round(r.minValue)}ms`.padEnd(t)
              , a = `${Math.round(r.maxValue)}ms`.padEnd(t)
              , l = `${Math.round(r.averageValue)}ms`.padEnd(t);
            return `Ping:    Min: ${s} Max: ${a} Avg: ${l}`
        }
        ),
        this.netInGraph = this.addGraph("netIn", {
            fill: "rgba(255, 255, 0, 0.2)",
            stroke: "yellow"
        });
        const i = r => r > 1e3 ? `${(r / 1e3).toFixed(1)}kB`.padEnd(t) : `${Math.round(r)}B`.padEnd(t);
        this.netInGraph.addLabel(r => {
            const s = i(r.minValue)
              , a = i(r.maxValue)
              , l = i(r.averageValue);
            return `Net In:  Min: ${s} Max: ${a} Avg: ${l}`
        }
        ),
        this.onConfigModified()
    }
    onConfigModified() {
        const e = this.hudConfig();
        this.container.visible = e.enabled;
        for (const t of this.graphs) {
            const i = e[t.key];
            t.toggleLabels(e.enabled && i.show),
            t.toggleGraph(e.enabled && i.showGraph)
        }
    }
    pprlB(e, t) {
        if (!this.container.visible)
            return;
        const i = this.hudConfig();
        if ((i.fps.show || i.fps.showGraph) && (this.frames.push(e),
        this.fpsTicker += e,
        this.fpsTicker > .1)) {
            const r = this.frames.reduce( (s, a) => s + a, 0);
            this.fpsGraph.addEntry(1 / (r / this.frames.length)),
            this.frames.length = 0,
            this.fpsTicker = 0
        }
        for (let r = 0; r < this.infoLines.length; r++)
            this.infoLines[r].visible = !1;
        if (i.position) {
            const r = t.rLi;
            this.addLine(`Pos:     X: ${r.CYoYrL.x.toFixed(2)}   Y: ${r.CYoYrL.y.toFixed(2)}`)
        }
        if (i.objectPools) {
            this.addLine("-- Objects     (Active / Allocated)");
            const r = (c, d, w) => {
                const f = 20 - c.length;
                this.addLine(`${c}: ${d.toString().padStart(f)} / ${w.toString().padStart(4)}`)
            }
              , s = (c, d) => {
                r(c, d.IjD, d.MrrhcR().length)
            }
            ;
            s("Players", t.noEG.playerPool),
            s("Loot", t.HxBh.lootPool),
            s("Projectiles", t.xwICl.projectilePool),
            s("Obstacles", t.kWDFmW.WUiyA),
            s("Buildings", t.kWDFmW.nnNJE),
            s("Structures", t.kWDFmW.ZIeX),
            s("Decals", t.WOy.decalPool),
            s("Dead Bodies", t.aRbBqf.deadBodyPool),
            s("Smoke", t.mFT.zSaLA),
            s("Airdrops", t.ntGiOh.airdropPool);
            const a = t.Wnrg.particles.filter(c => c.active).length;
            r("Particles", a, t.Wnrg.particles.length);
            const l = t.bvNL.bullets.filter(c => c.alive).length;
            r("Bullets", l, t.bvNL.bullets.length);
            const h = t.awaD.explosions.filter(c => c.active).length;
            r("Explosions", h, t.awaD.explosions.length);
            const p = t.QaR.planes.filter(c => c.active).length;
            r("Planes", p, t.QaR.planes.length)
        }
        this.updateLayout()
    }
    updateLayout() {
        let e = 0;
        for (let r = 0; r < this.infoLines.length; r++) {
            const s = this.infoLines[r];
            s.visible && (s.y = e,
            e += s.height + 2)
        }
        this.graphsContainer.y = e;
        for (let r = 0, s = 0; r < this.graphs.length; r++) {
            const a = this.graphs[r];
            if (!a.visible)
                continue;
            const l = a.container.getLocalBounds();
            a.y = s - l.top,
            s += l.height - l.top + 2
        }
        const t = this.contentContainer.getLocalBounds();
        this.background.width = t.width + dt * 2,
        this.background.height = t.height + dt * 2;
        const i = this.topLeftDiv.getBoundingClientRect();
        this.container.y = i.bottom,
        this.container.x = i.left
    }
    addGraph(e, t) {
        const i = new ma(e,t);
        return this.graphsContainer.addChild(i.container),
        this.graphs.push(i),
        i
    }
    addLine(e) {
        let t = this.infoLines.find(i => !i.visible);
        t || (t = new ot,
        t.style = Ii,
        this.infoLines.push(t),
        this.linesContainer.addChild(t)),
        t.visible = !0,
        t.text = e
    }
}
class ca {
    shapes = [];
    addLine(e, t, i, r=0) {}
    addRay(e, t, i, r, s=0) {}
    addCircle(e, t, i, r) {}
    addAabb(e, t, i, r) {}
    addCollider(e, t, i) {}
    YOuM(e, t) {}
    flush() {
        this.shapes = []
    }
}
const Si = new ca
  , qi = 4
  , Vi = 5
  , ua = 10;
function ji(o) {
    return o.displayCloseIcon ? "img/gui/close.svg" : Z.getSvgFromGameType(o.ping || o.emote)
}
function _t(o) {
    let e = Math.atan2(o.y, o.x) * 180 / Math.PI;
    return e < 0 && (e += 360),
    e
}
function da(o, e, t) {
    return e <= t ? t - e <= 180 ? e <= o && o <= t : t <= o || o <= e : e - t <= 180 ? t <= o && o <= e : e <= o || o <= t
}
class pa {
    constructor(e, t, i, r, s) {
        this.audioManager = e,
        this.uiManager = t,
        this.playerBarn = i,
        this.camera = r,
        this.map = s,
        this.triggerPing = () => {
            if (this.activePlayer) {
                let h;
                this.emoteSelector.ping && !this.emoteWheelsGreyed ? Tt[this.emoteSelector.ping]?.pingMap && (h = this.uiManager.getWorldPosFromMapPos(this.bigmapPingPos || this.emoteScreenPos, this.map, this.camera),
                h ||= this.camera.igoa(this.emoteScreenPos),
                h.x = k.clamp(h.x, 0, this.map.width),
                h.y = k.clamp(h.y, 0, this.map.height),
                this.sendPing({
                    type: this.emoteSelector.ping,
                    pos: h
                })) : this.emoteSelector.emote && !this.emoteWheelsGreyed && (h = this.activePlayer.CYoYrL,
                this.sendEmote({
                    type: this.emoteSelector.emote,
                    pos: h
                }),
                this.uiManager.displayMapLarge(!0)),
                this.inputReset(),
                this.pingKeyTriggered = this.pingKeyDown
            }
        }
        ,
        this.triggerEmote = () => {
            if (this.activePlayer) {
                let h;
                this.emoteSelector.emote && !this.emoteWheelsGreyed && (h = this.activePlayer.CYoYrL,
                this.sendEmote({
                    type: this.emoteSelector.emote,
                    pos: h
                })),
                this.inputReset()
            }
        }
        ,
        this.onTouchStart = h => {
            this.wheelDisplayed && (h.stopPropagation(),
            this.inputReset())
        }
        ,
        D.touch && (this.emoteElems.css("pointer-events", "auto"),
        this.bigmapCollision.on("touchend", h => {
            h.stopPropagation(),
            this.bigmapPingPos = {
                x: h.originalEvent?.changedTouches[0].pageX,
                y: h.originalEvent?.changedTouches[0].pageY
            },
            this.emoteScreenPos = m.create(this.camera.eXqeW / 2, this.camera.rkdRrQ / 2),
            this.pingMouseTriggered = !0
        }
        ),
        this.emoteButtonElem.css("pointer-events", "auto"),
        this.emoteButtonElem.on("touchstart", h => {
            h.stopPropagation(),
            this.emoteScreenPos = m.create(this.camera.eXqeW / 2, this.camera.rkdRrQ / 2),
            this.emoteMouseTriggered = !0
        }
        ),
        this.emoteElems.on("touchstart", h => {
            h.stopPropagation(),
            this.emoteTouchedPos = {
                x: h.originalEvent?.changedTouches[0].pageX,
                y: h.originalEvent?.changedTouches[0].pageY
            }
        }
        ),
        u(document).on("touchstart", this.onTouchStart)),
        this.emoteWheelData = {
            middle: {
                parent: u("#ui-emote-middle"),
                vA: m.create(-1, 1),
                vC: m.create(1, 1),
                ping: "",
                emote: "",
                displayCloseIcon: !0
            },
            top: {
                parent: u("#ui-emote-top"),
                vA: m.create(-1, 1),
                vC: m.create(1, 1),
                ping: "",
                emote: "",
                emoteSlot: ve.Top
            },
            right: {
                parent: u("#ui-emote-right"),
                vA: m.create(1, 1),
                vC: m.create(1, -1),
                ping: "",
                emote: "",
                emoteSlot: ve.Right
            },
            bottom: {
                parent: u("#ui-emote-bottom"),
                vA: m.create(1, -1),
                vC: m.create(-1, -1),
                ping: "",
                emote: "",
                emoteSlot: ve.Bottom
            },
            left: {
                parent: u("#ui-emote-left"),
                vA: m.create(-1, -1),
                vC: m.create(-1, 1),
                ping: "",
                emote: "",
                emoteSlot: ve.Left
            }
        };
        const a = {
            middle: {
                parent: u("#ui-team-ping-middle"),
                vA: m.create(-1, 1),
                vC: m.create(1, 1),
                ping: "",
                emote: "",
                displayCloseIcon: !0
            },
            top: {
                parent: u("#ui-team-ping-top"),
                vA: m.create(-1, 1),
                vC: m.create(1, 1),
                ping: "ping_danger",
                emote: ""
            },
            right: {
                parent: u("#ui-team-ping-right"),
                vA: m.create(1, 1),
                vC: m.create(1, -1),
                ping: "ping_coming",
                emote: ""
            },
            bottom: {
                parent: u("#ui-team-ping-bottom"),
                vA: m.create(1, -1),
                vC: m.create(-1, -1),
                ping: "ping_help",
                emote: ""
            },
            "bottom-left": {
                parent: u("#ui-team-ping-bottom-left"),
                vA: m.create(-1, -1),
                vC: m.create(-1, 0),
                ping: "",
                emote: "emote_medical"
            },
            "top-left": {
                parent: u("#ui-team-ping-top-left"),
                vA: m.create(-1, 0),
                vC: m.create(-1, 1),
                ping: "",
                emote: "emote_ammo",
                ammoEmote: !0
            }
        };
        for (const h in a)
            if (a.hasOwnProperty(h)) {
                const p = a[h]
                  , c = _t(p.vA)
                  , d = _t(p.vC);
                this.teamPingSelectors.push({
                    parent: p.parent,
                    angleA: c,
                    angleC: d,
                    highlight: p.parent.find(".ui-emote-hl"),
                    highlightDisplayed: !1,
                    ping: p.ping,
                    emote: p.emote,
                    ammoEmote: p?.ammoEmote,
                    displayCloseIcon: p?.displayCloseIcon
                })
            }
        this.displayedSelectors = this.teamPingSelectors,
        this.container.scale.set(this.baseScale, this.baseScale),
        this.container.addChild(this.pingContainer);
        const l = function(h, p=16777215) {
            const c = new J
              , d = new J
              , w = O.groupColors[h] || p
              , f = ae.from("ping-border.img");
            f.scale.set(.4, .4),
            f.anchor.set(.5, .5),
            f.tint = w,
            f.alpha = 0,
            f.visible = !0,
            c.addChild(f);
            const S = ae.from("ping-team-danger.img");
            S.scale.set(.4, .4),
            S.anchor.set(.5, .5),
            S.tint = w,
            S.alpha = 0,
            S.visible = !0,
            c.addChild(S);
            const g = ae.from("ping-team-danger.img");
            g.scale.set(.5, .5),
            g.anchor.set(.5, .5),
            g.tint = w,
            g.alpha = 0,
            g.visible = !0,
            d.addChild(g);
            const x = ae.from("ping-indicator.img");
            return x.scale.set(.5, .5),
            x.anchor.set(.5, 0),
            x.alpha = 0,
            x.visible = !0,
            d.addChild(x),
            {
                elem: u("#ui-team-indicators").find(`.ui-indicator-ping[data-id=${h}]`),
                borderElem: u("#ui-team-indicators").find(`.ui-indicator-ping-border[data-id=${h}]`),
                pingContainer: c,
                indContainer: d,
                borderSprite: {
                    sprite: f,
                    baseScale: .4
                },
                pingSprite: {
                    sprite: S,
                    baseScale: .4
                },
                indSpriteOuter: {
                    sprite: x,
                    baseScale: .5,
                    baseTint: Number(x.tint)
                },
                indSpriteInner: {
                    sprite: g,
                    baseScale: .5,
                    baseTint: Number(g.tint)
                },
                displayed: !1,
                fadeIn: 0,
                life: 0,
                fadeOut: 0,
                pos: m.create(0, 0)
            }
        };
        for (let h = 0; h < 4; h++) {
            const p = l(h);
            this.pingContainer.addChild(p.pingContainer),
            this.indContainer.addChild(p.indContainer),
            this.pingIndicators.push({
                ping: p
            })
        }
        this.airdropIndicator = l(qi, Tt.ping_airdrop.tint),
        this.pingContainer.addChild(this.airdropIndicator.pingContainer),
        this.indContainer.addChild(this.airdropIndicator.indContainer),
        this.pingIndicators.push({
            ping: this.airdropIndicator
        }),
        this.airstrikeIndicator = l(Vi, Tt.ping_airstrike.tint),
        this.pingContainer.addChild(this.airstrikeIndicator.pingContainer),
        this.indContainer.addChild(this.airstrikeIndicator.indContainer),
        this.pingIndicators.push({
            ping: this.airstrikeIndicator
        })
    }
    gameElem = u("#ui-game");
    disable = !1;
    activePlayer = null;
    worldPos = m.create(0, 0);
    zIdxNext = 0;
    emoteSelector = {
        ping: "",
        emote: ""
    };
    emoteSoftTicker = 0;
    emoteHardTicker = 0;
    emoteCounter = 0;
    emoteWheelsGreyed = !1;
    teamEmotesGreyed = !1;
    wheelKeyTriggered = !1;
    emoteTimeoutTicker = 0;
    pingKeyTriggered = !1;
    pingKeyDown = !1;
    pingMouseTriggered = !1;
    wheelDisplayed = !1;
    emoteMouseTriggered = !1;
    emoteScreenPos = m.create(0, 0);
    triggerPing;
    triggerEmote;
    emoteTouchedPos = null;
    bigmapPingPos = null;
    onTouchStart;
    emoteElems = u(".ui-emote");
    bigmapCollision = u("#big-map-collision");
    emoteButtonElem = u("#ui-emote-button");
    emoteWheels = u("#ui-emotes, #ui-team-pings");
    teamEmotes = u(".ui-emote-bottom-left, .ui-emote-top-left");
    emoteWheel = u("#ui-emotes");
    emoteWheelData;
    teamPingWheel = u("#ui-team-pings");
    teamPingSelectors = [];
    displayedSelectors;
    baseScale = 1;
    container = new J;
    pingContainer = new J;
    indContainer = new J;
    pingIndicators = [];
    airdropIndicator;
    airstrikeIndicator;
    emoteLifeIn = .75;
    emoteLife = 1;
    emoteLifeOut = .1;
    pingFadeIn = .5;
    pingLife = 4.25;
    pingFadeOut = .1;
    wedgeOpacityReset = D.touch ? 1 : .75;
    teamEmoteOpacityReset = .2;
    emotes = [];
    newPings = [];
    newEmotes = [];
    emoteLoadout = [];
    unlockTypes = {};
    socialUnlocked = !1;
    emoteWheelSelectors;
    parentDisplayed;
    TNCQd() {
        D.touch && (u(document).off("touchstart", this.onTouchStart),
        this.emoteButtonElem.off("touchstart"),
        this.emoteElems.off("touchstart"),
        this.bigmapCollision.off("touchend")),
        this.init()
    }
    init() {
        this.emoteWheelsGreyed = !1,
        this.emoteWheels.css("opacity", 1),
        this.teamEmotesGreyed = !1,
        this.teamEmotes.css("opacity", 1),
        this.disable = !1,
        this.inputReset()
    }
    inputReset() {
        this.pingMouseTriggered = !1,
        this.pingKeyTriggered = !1,
        this.emoteMouseTriggered = !1,
        this.wheelDisplayed = !1,
        this.displayWheel(this.teamPingWheel, !1),
        this.displayWheel(this.emoteWheel, !1),
        this.emoteTouchedPos = null,
        this.bigmapPingPos = null,
        this.emoteTimeoutTicker = 0;
        for (let e = 0; e < this.displayedSelectors.length; e++) {
            const t = this.displayedSelectors[e]
              , r = vt[t.emote]?.teamOnly;
            this.teamEmotesGreyed && r ? t.parent.css("opacity", this.teamEmoteOpacityReset) : t.parent.css("opacity", this.wedgeOpacityReset),
            t.highlight.css("display", "none"),
            t.highlightDisplayed = !1
        }
    }
    sendPing(e) {
        this.newPings.push({
            type: e.type,
            pos: e.pos
        }),
        this.incrementEmote()
    }
    addPing(e, t) {
        if (this.activePlayer) {
            const i = Tt[e.type];
            if (i) {
                this.uiManager.createPing(e.type, e.pos, e.playerId, this.activePlayer.__id, this.playerBarn, t);
                let r = null
                  , s = i.sound;
                if (e.type == "ping_airdrop")
                    r = this.pingIndicators[qi].ping;
                else if (e.type == "ping_airstrike")
                    r = this.pingIndicators[Vi].ping;
                else {
                    const a = this.playerBarn.getPlayerInfo(e.playerId);
                    if (a) {
                        const h = this.playerBarn.getPlayerInfo(this.activePlayer.__id).groupId
                          , p = a.groupId;
                        if (h == p) {
                            const d = this.playerBarn.getGroupInfo(p).playerIds.indexOf(e.playerId);
                            d !== -1 && (r = this.pingIndicators[d].ping)
                        }
                    }
                    const l = this.playerBarn.getPlayerStatus(e.playerId);
                    l && (l.role == "leader" || l.role == "captain") && (s = i.soundLeader)
                }
                t || e.type != "ping_airstrike" ? this.audioManager.playSound(s, {
                    channel: "ui"
                }) : this.audioManager.playSound(s, {
                    channel: "ui",
                    fallOff: 1,
                    soundPos: e.pos,
                    rangeMult: 20
                }),
                r && (r.pos = e.pos,
                r.pingSprite.sprite.texture = X.from(i.texture),
                r.indSpriteInner.sprite.texture = X.from(i.texture),
                r.indSpriteInner.sprite.tint = i.mapEvent ? i.tint : r.indSpriteInner.baseTint,
                r.indSpriteOuter.sprite.tint = i.mapEvent ? i.tint : r.indSpriteOuter.baseTint,
                r.fadeIn = this.pingFadeIn,
                r.life = this.pingLife,
                r.fadeOut = this.pingFadeOut,
                r.mapEvent = i.mapEvent,
                r.worldDisplay = i.worldDisplay)
            }
        }
    }
    sendEmote(e) {
        this.newEmotes.push({
            type: e.type,
            pos: e.pos
        }),
        this.incrementEmote()
    }
    addEmote(e) {
        const t = vt[e.type];
        if (t) {
            let i = null;
            for (let r = 0; r < this.emotes.length; r++)
                this.emotes[r].alive || i ? this.emotes[r].alive && this.emotes[r].playerId == e.playerId && (this.emotes[r].alive = !1) : i = this.emotes[r];
            if (i || (i = {},
            i.alive = !1,
            i.pos = m.create(0, 0),
            i.container = new J,
            i.circleOuter = ae.from("emote-circle-outer.img"),
            i.circleOuter.anchor.set(.5, .5),
            i.baseScale = .55,
            i.circleOuter.scale.set(i.baseScale * .8, i.baseScale * .8),
            i.circleOuter.tint = 0,
            i.circleOuter.visible = !0,
            i.container.addChild(i.circleOuter),
            i.sprite = new ae,
            i.sprite.anchor.set(.5, .5),
            i.container.addChild(i.sprite),
            i.sprite.scale.set(i.baseScale, i.baseScale),
            i.posOffset = m.create(0, 4),
            i.container.scale.set(1, 1),
            i.container.visible = !1,
            this.emotes.push(i)),
            i.alive = !0,
            i.isNew = !0,
            i.type = e.type,
            i.playerId = e.playerId,
            i.pos = m.create(0, 0),
            i.lifeIn = this.emoteLifeIn,
            i.life = this.emoteLife,
            i.lifeOut = this.emoteLifeOut,
            i.zIdx = this.zIdxNext++,
            t.texture && (i.sprite.texture = X.from(t.texture)),
            i.container.visible = !1,
            i.baseScale = .55,
            i.sound = t.sound,
            i.channel = t.channel,
            e.type == "emote_loot") {
                const r = U[e.itemType];
                if (r?.lootImg) {
                    i.sprite.texture = X.from(r.lootImg.sprite);
                    const s = U[r.ammo];
                    i.circleOuter.tint = s ? s.lootImg.tintDark : 0,
                    r.lootImg.rot ? i.sprite.rotation = r.lootImg.rot : i.sprite.rotation = 0,
                    r.lootImg.mirror ? i.sprite.scale.set(i.baseScale * -1, i.baseScale) : i.sprite.scale.set(i.baseScale, i.baseScale),
                    r.sound?.deploy && (r.type == "gun" ? (i.sound = r.sound.deploy,
                    i.channel = "activePlayer") : i.sound = "")
                }
            } else
                i.circleOuter.tint = 0,
                i.sprite.rotation = 0,
                i.sprite.scale.set(i.baseScale, i.baseScale)
        }
    }
    incrementEmote() {
        this.emoteCounter++,
        this.emoteCounter >= O.player.emoteThreshold && (this.emoteHardTicker = this.emoteHardTicker > 0 ? this.emoteHardTicker : O.player.emoteHardCooldown * 1.5)
    }
    pprlB(e, t, i, r, s, a, l, h, p, c) {
        const d = this.playerBarn
          , w = this.camera;
        let f = m.create(h.mousePos.x, h.mousePos.y);
        h.lostFocus && this.inputReset(),
        p.isBindPressed(F.TeamPingMenu) && !this.pingKeyDown && !c && (this.pingKeyDown = !0,
        this.pingKeyTriggered = !0),
        p.isBindReleased(F.TeamPingMenu) && this.pingKeyDown && (this.pingKeyDown = !1,
        this.pingKeyTriggered = this.wheelDisplayed),
        p.isBindPressed(F.TeamPingSingle) && !this.pingMouseTriggered && !this.emoteMouseTriggered && (this.emoteScreenPos = m.copy(f),
        this.pingMouseTriggered = !0),
        p.isBindReleased(F.TeamPingSingle) && this.pingMouseTriggered && this.triggerPing(),
        p.isBindPressed(F.EmoteMenu) && (!this.pingMouseTriggered && !this.emoteMouseTriggered && this.pingKeyDown && (this.emoteScreenPos = m.copy(f),
        this.pingMouseTriggered = !0),
        this.pingMouseTriggered || (this.emoteScreenPos = m.copy(f),
        this.emoteMouseTriggered = !0)),
        p.isBindReleased(F.EmoteMenu) && (this.pingKeyTriggered && this.pingMouseTriggered && this.triggerPing(),
        this.emoteMouseTriggered && this.triggerEmote()),
        this.activePlayer = i,
        (t != i.__id || i.GoI.mSk) && !this.disable && (this.TNCQd(),
        this.disable = !0);
        const S = a.perkMode && !i.GoI.bbI;
        if (!this.disable && !S && (this.wheelKeyTriggered = this.pingKeyTriggered || this.emoteMouseTriggered,
        this.emoteSoftTicker -= e,
        this.emoteCounter >= O.player.emoteThreshold && this.emoteHardTicker > 0 ? (this.emoteHardTicker -= e,
        this.emoteHardTicker < 0 && (this.emoteCounter = 0)) : this.emoteSoftTicker < 0 && this.emoteCounter > 0 && (this.emoteCounter--,
        this.emoteSoftTicker = O.player.emoteSoftCooldown * 1.5),
        (this.pingMouseTriggered || this.emoteMouseTriggered) && !this.wheelDisplayed && (this.parentDisplayed = this.pingMouseTriggered ? this.teamPingWheel : this.emoteWheel,
        this.parentDisplayed.css({
            display: "block",
            left: this.emoteScreenPos.x,
            top: this.emoteScreenPos.y
        }),
        this.displayWheel(this.parentDisplayed, !0),
        this.wheelDisplayed = !0,
        this.displayedSelectors = this.pingMouseTriggered ? this.teamPingSelectors : this.emoteWheelSelectors,
        this.worldPos = w.igoa(this.emoteScreenPos)),
        this.wheelDisplayed))
            if (this.emoteTimeoutTicker += e,
            this.emoteTimeoutTicker > ua)
                this.inputReset();
            else {
                this.emoteHardTicker > 0 && !this.emoteWheelsGreyed ? (this.emoteWheels.css("opacity", .5),
                this.emoteWheelsGreyed = !0) : this.emoteHardTicker <= 0 && this.emoteWheelsGreyed && (this.emoteWheels.css("opacity", 1),
                this.emoteWheelsGreyed = !1),
                !this.teamEmotesGreyed && r == 1 && (this.teamEmotes.css("opacity", this.teamEmoteOpacityReset),
                this.teamEmotesGreyed = !0);
                let b = null;
                if (D.touch && (f = this.emoteTouchedPos),
                f) {
                    const M = m.sub(f, this.emoteScreenPos);
                    M.y *= -1;
                    const I = m.length(M)
                      , B = _t(M)
                      , z = 35
                      , P = i.TVKb.BAgcK[i.TVKb.kTJ]
                      , _ = U[P.type];
                    let T = "";
                    _ && _.ammo && (T = _.ammo);
                    for (let N = 0; N < this.displayedSelectors.length; N++) {
                        const A = this.displayedSelectors[N];
                        if (A.ammoEmote) {
                            const Y = {
                                "9mm": "emote_ammo9mm",
                                "12gauge": "emote_ammo12gauge",
                                "762mm": "emote_ammo762mm",
                                "556mm": "emote_ammo556mm",
                                "50AE": "emote_ammo50ae",
                                "308sub": "emote_ammo308sub",
                                flare: "emote_ammoflare",
                                "45acp": "emote_ammo45acp"
                            }
                              , Q = A.emote;
                            if (A.emote = Y[T] || "emote_ammo",
                            A.texture = vt[A.emote].texture,
                            Q != A.emote) {
                                const ne = A.parent.find(".ui-emote-image")
                                  , Ce = ji(A);
                                ne.css("background-image", `url(${Ce})`)
                            }
                        }
                        const G = A.ping || A.emote
                          , W = vt[A.emote]
                          , R = W && W.teamOnly && r == 1;
                        if (I <= z && !G && this.emoteHardTicker <= 0 && !R) {
                            b = A;
                            continue
                        }
                        if (da(B, A.angleC, A.angleA) && I > z && G && this.emoteHardTicker <= 0 && !R) {
                            b = A;
                            continue
                        }
                        A.highlightDisplayed && (A.parent.css("opacity", this.wedgeOpacityReset),
                        A.highlight.css("display", "none"),
                        A.highlightDisplayed = !1)
                    }
                }
                b && (this.emoteSelector = b,
                b.highlightDisplayed || (b.parent.css("opacity", 1),
                b.highlight.css("display", "block"),
                b.highlightDisplayed = !0),
                D.touch && this.emoteTouchedPos && (this.pingMouseTriggered ? this.triggerPing() : this.triggerEmote()))
            }
        for (let b = 0; b < this.emotes.length; b++) {
            const M = this.emotes[b];
            if (M.alive) {
                let I = !1
                  , B = m.create(0, 0)
                  , z = 0;
                const P = d.getPlayerById(M.playerId);
                if (P && !P.GoI.mSk && (B = m.copy(P.WVGtr),
                z = P.layer,
                I = !0),
                !I) {
                    const _ = s.getDeadBodyById(M.playerId);
                    _ && (B = m.copy(_.pos),
                    z = _.layer,
                    I = !0)
                }
                if (I) {
                    M.isNew && this.audioManager.playSound(M.sound, {
                        channel: M.channel,
                        soundPos: B,
                        layer: z
                    }),
                    M.isNew = !1,
                    M.pos = B,
                    M.lifeIn > 0 ? M.lifeIn -= e : M.life > 0 ? M.life -= e : M.lifeOut > 0 && (M.lifeOut -= e);
                    const _ = y.sameLayer(z, this.activePlayer.layer) ? 3 : z;
                    l.addPIXIObj(M.container, _, 5e4, M.zIdx),
                    M.alive = M.alive && M.lifeOut > 0
                } else
                    M.alive = !1
            }
        }
        const g = m.create(w.eXqeW * .5 / w.YLH(), w.rkdRrQ * .5 / w.YLH())
          , x = {
            min: m.sub(w.CYoYrL, g),
            max: m.add(w.CYoYrL, g)
        }
          , C = d.getPlayerInfo(i.__id).groupId
          , v = d.getGroupInfo(C);
        for (let b = 0; b < this.pingIndicators.length; b++) {
            const M = this.pingIndicators[b].ping
              , I = v.playerIds[b]
              , B = M.indContainer
              , z = M.pingContainer;
            if (I != null || M.mapEvent) {
                d.getPlayerInfo(I);
                const P = I == this.activePlayer.__id
                  , _ = d.getPlayerStatus(I)
                  , T = M.borderSprite.sprite
                  , N = M.pingSprite.sprite
                  , A = M.indSpriteOuter.sprite
                  , G = M.indSpriteInner.sprite;
                let W = !0;
                if (M.fadeIn -= e,
                M.life -= e,
                M.fadeOut -= M.life > 0 ? 0 : e,
                M.fadeOut > 0) {
                    const E = M.pos
                      , R = m.normalizeSafe(m.sub(E, w.CYoYrL), m.create(1, 0))
                      , Y = be.intersectRayAabb(w.CYoYrL, R, x.min, x.max)
                      , Q = Math.atan2(R.y, -R.x) + Math.PI * .5
                      , ne = w.zEsq(Y)
                      , Ce = be.testCircleAabb(E, O.player.radius, x.min, x.max)
                      , We = w.ZaMxGM(M.borderSprite.baseScale)
                      , Ue = w.ZaMxGM(M.pingSprite.baseScale);
                    if (T.scale.set(We, We),
                    N.scale.set(Ue, Ue),
                    _?.dead)
                        continue;
                    const Ke = 64;
                    W = M.fadeOut < 0;
                    const lt = Ce ? w.zEsq(E).x : k.clamp(ne.x, Ke, w.eXqeW - Ke)
                      , nt = Ce ? w.zEsq(E).y : k.clamp(ne.y, Ke, w.rkdRrQ - Ke)
                      , mt = w.zEsq(E).x
                      , Ee = w.zEsq(E).y;
                    N.position.x = mt,
                    N.position.y = Ee,
                    T.position.x = mt,
                    T.position.y = Ee,
                    A.position.x = lt,
                    A.position.y = nt,
                    A.rotation = Q,
                    G.position.x = lt,
                    G.position.y = nt;
                    const je = T.alpha <= 0 ? 1 : T.alpha - e;
                    T.alpha = je;
                    const Je = w.ZaMxGM(M.borderSprite.baseScale * (2 - je));
                    if (T.scale.set(Je, Je),
                    G.alpha = Ce ? 0 : je,
                    M.fadeIn > 0) {
                        const ht = 1 - M.fadeIn / this.pingFadeIn;
                        z.alpha = 1,
                        B.alpha = 1,
                        N.alpha = 1,
                        A.alpha = Ce ? 0 : ht
                    } else
                        A.alpha = Ce ? 0 : 1;
                    if (M.life < 0) {
                        const ht = M.fadeOut / this.pingFadeOut;
                        z.alpha = ht,
                        B.alpha = ht
                    }
                    M.displayed || (z.visible = M.worldDisplay,
                    B.visible = !P || M.mapEvent,
                    M.displayed = !0)
                }
                W && M.displayed && (z.visible = !1,
                B.visible = !1,
                M.displayed = !1)
            } else
                z.visible = !1,
                B.visible = !1,
                M.displayed = !1
        }
    }
    displayWheel(e, t) {
        e.css("display", t ? "block" : "none")
    }
    updateEmoteWheel(e) {
        this.emoteLoadout = e;
        const t = {
            top: e[ve.Top],
            right: e[ve.Right],
            bottom: e[ve.Bottom],
            left: e[ve.Left]
        };
        for (const i in t)
            if (t.hasOwnProperty(i)) {
                const r = t[i];
                vt[r] && this.emoteWheelData[i] && (this.emoteWheelData[i].emote = r)
            }
        this.emoteWheelSelectors = [];
        for (const i in this.emoteWheelData)
            if (this.emoteWheelData.hasOwnProperty(i)) {
                const r = this.emoteWheelData[i]
                  , s = _t(r.vA)
                  , a = _t(r.vC);
                this.emoteWheelSelectors.push(Object.assign({
                    angleA: s,
                    angleC: a,
                    highlight: r.parent.find(".ui-emote-hl"),
                    highlightDisplayed: !1
                }, r));
                const l = r.parent.find(".ui-emote-image")
                  , h = ji(r);
                l.css("background-image", `url(${h})`)
            }
    }
    YOuM(e) {
        for (let t = 0; t < this.emotes.length; t++) {
            const i = this.emotes[t];
            if (i.container.visible = i.alive,
            i.alive) {
                let r = 0;
                if (i.lifeIn > 0) {
                    const h = 1 - i.lifeIn / this.emoteLifeIn;
                    r = k.easeOutElastic(h)
                } else
                    i.life > 0 ? r = 1 : i.lifeOut > 0 && (r = i.lifeOut / this.emoteLifeOut);
                const s = m.add(i.pos, m.mul(i.posOffset, 1 / k.clamp(e.abrnAk, .75, 1)))
                  , a = e.zEsq(s)
                  , l = r * i.baseScale * k.clamp(e.abrnAk, .9, 1.75);
                i.container.position.set(a.x, a.y),
                i.container.scale.set(l, l)
            }
        }
    }
}
const si = O.GasMode
  , Ve = 100 * 1e3
  , Yi = 512;
class Er {
    constructor(e, t) {
        if (this.canvasMode = e,
        this.gasColor = t,
        e)
            this.canvas = document.createElement("canvas"),
            this.canvas.width = window.innerWidth,
            this.canvas.height = window.innerHeight,
            this.display = new ae(X.from(this.canvas)),
            this.gasColorDOMString = Z.colorToDOMString(t, .6);
        else {
            this.display = new Me;
            const i = this.display;
            i.clear(),
            i.beginFill(t, .6),
            i.moveTo(-Ve, -Ve),
            i.lineTo(Ve, -Ve),
            i.lineTo(Ve, Ve),
            i.lineTo(-Ve, Ve),
            i.closePath(),
            i.beginHole(),
            i.moveTo(0, 1);
            for (let r = 1; r < Yi; r++) {
                const s = r / Yi
                  , a = Math.sin(Math.PI * 2 * s)
                  , l = Math.cos(Math.PI * 2 * s);
                i.lineTo(a, l)
            }
            i.endHole(),
            i.closePath()
        }
        this.display.visible = !1
    }
    gasColorDOMString = "";
    display = null;
    canvas = null;
    free() {
        this.display.destroy(!0)
    }
    resize() {
        this.canvas != null && (this.canvas.width = window.innerWidth,
        this.canvas.height = window.innerHeight,
        this.display.texture.update())
    }
    render(e, t, i) {
        if (this.canvas != null) {
            const r = this.canvas
              , s = r.getContext("2d");
            s.clearRect(0, 0, r.width, r.height),
            s.beginPath(),
            s.fillStyle = this.gasColorDOMString,
            s.rect(0, 0, r.width, r.height),
            s.arc(e.x, e.y, t, 0, Math.PI * 2, !0),
            s.fill()
        } else {
            const r = m.copy(e);
            let s = t;
            s < .1 && (s = 1,
            r.x += Ve * .5);
            const a = this.display;
            a.position.set(r.x, r.y),
            a.scale.set(s, s)
        }
        this.display.visible = i
    }
}
class fa {
    display = new J;
    circleGfx = new Me;
    lineGfx = new Me;
    safePos = m.create(0, 0);
    safeRad = 0;
    playerPos = m.create(0, 0);
    constructor() {
        this.display.addChild(this.circleGfx),
        this.display.addChild(this.lineGfx),
        this.circleGfx.visible = !1,
        this.lineGfx.visible = !1
    }
    render(e, t, i, r, s) {
        if (this.circleGfx.visible = r,
        this.lineGfx.visible = s,
        r || s) {
            const a = !m.eq(this.safePos, e, 1e-4)
              , l = Math.abs(this.safeRad - t) > 1e-4
              , h = !m.eq(this.playerPos, i, 1e-4);
            if (a && (this.safePos.x = e.x,
            this.safePos.y = e.y),
            l && (this.safeRad = t),
            h && (this.playerPos.x = i.x,
            this.playerPos.y = i.y),
            a && this.circleGfx.position.set(this.safePos.x, this.safePos.y),
            l && (this.circleGfx.clear(),
            this.circleGfx.lineStyle(1.5, 16777215),
            this.circleGfx.drawCircle(0, 0, t)),
            a || l || h) {
                const c = m.length(m.sub(i, e)) < t ? .5 : 1;
                this.lineGfx.clear(),
                this.lineGfx.lineStyle(2, 65280, c),
                this.lineGfx.moveTo(i.x, i.y),
                this.lineGfx.lineTo(e.x, e.y)
            }
        }
    }
}
class wa {
    mode = si.Inactive;
    circleT = 0;
    circleTOld = 0;
    duration = 0;
    interpolationT = 0;
    gasRenderer;
    circleOld;
    circleNew;
    constructor(e) {
        const t = (Math.sqrt(2) + .01) * K.MaxPosition;
        this.circleOld = {
            pos: m.create(0, 0),
            rad: t
        },
        this.circleNew = {
            pos: m.create(0, 0),
            rad: t
        },
        this.gasRenderer = new Er(e,16711680)
    }
    TNCQd() {
        this.gasRenderer.free()
    }
    resize() {
        this.gasRenderer.resize()
    }
    isActive() {
        return this.mode != si.Inactive
    }
    getCircle(e) {
        const t = this.mode == si.Moving ? k.lerp(e, this.circleTOld, this.circleT) : 0;
        return {
            pos: m.lerp(t, this.circleOld.pos, this.circleNew.pos),
            rad: k.lerp(t, this.circleOld.rad, this.circleNew.rad)
        }
    }
    setProgress(e) {
        this.circleTOld = this.circleT,
        this.circleT = e,
        this.interpolationT = 0
    }
    setFullState(e, t, i) {
        if (t.mode != this.mode) {
            const r = Math.ceil(t.duration * (1 - e));
            i.setWaitingForPlayers(!1),
            i.displayGasAnnouncement(t.mode, r)
        }
        this.mode = t.mode,
        this.duration = t.duration,
        this.setProgress(e),
        this.circleOld.pos = m.copy(t.posOld),
        this.circleOld.rad = t.radOld,
        this.circleNew.pos = m.copy(t.posNew),
        this.circleNew.rad = t.radNew
    }
    YOuM(e, t) {
        this.interpolationT += e;
        let i = 1;
        t.RXZ && (i = k.clamp(this.interpolationT / t.BYJsJa, 0, 1));
        const r = this.getCircle(i)
          , s = t.zEsq(r.pos)
          , a = t.pTKJ(r.rad);
        this.gasRenderer.render(s, a, this.isActive())
    }
}
let Sa = class {
    id = 0;
    pos = {
        x: 0,
        y: 0
    };
    posOld = {
        x: 0,
        y: 0
    };
    posDown = {
        x: 0,
        y: 0
    };
    startTime = 0;
    lastUpdateTime = 0;
    isNew = !0;
    isDead = !1;
    osId = 0
}
;
class ga {
    constructor(e) {
        this.touchElem = e,
        window.addEventListener("focus", this.onWindowFocus.bind(this), !1),
        window.addEventListener("blur", this.onWindowFocus.bind(this), !1),
        window.addEventListener("keydown", this.onKeyDown.bind(this), !1),
        window.addEventListener("keyup", this.onKeyUp.bind(this), !1),
        window.addEventListener("mousemove", this.onMouseMove.bind(this), !1),
        window.addEventListener("mousedown", this.onMouseDown.bind(this), !1),
        window.addEventListener("mouseup", this.onMouseUp.bind(this), !1),
        window.addEventListener("wheel", this.onMouseWheel.bind(this), {
            capture: !1,
            passive: !0
        }),
        window.addEventListener("touchmove", this.onTouchMove.bind(this), !1),
        window.addEventListener("touchstart", this.onTouchStart.bind(this), !1),
        window.addEventListener("touchend", this.onTouchEnd.bind(this), !1),
        window.addEventListener("touchcancel", this.onTouchCancel.bind(this), !1),
        this.touchElem.addEventListener("touchstart", t => {
            t.preventDefault()
        }
        , !1)
    }
    keys = {};
    keysOld = {};
    mousePos = m.create(0, 0);
    mouseButtons = {};
    mouseButtonsOld = {};
    mouseWheelState = 0;
    touches = [];
    touchIdCounter = 0;
    lostFocus = !1;
    captureNextInputCb = null;
    TNCQd() {
        this.touches = [],
        this.touchIdCounter = 0
    }
    onWindowFocus() {
        this.keys = {},
        this.keysOld = {},
        this.mouseButtons = {},
        this.mouseButtonsOld = {},
        this.mouseWheelState = 0,
        this.touches.length = 0,
        this.lostFocus = !0
    }
    flush() {
        this.keysOld = Object.assign({}, this.keys),
        this.mouseButtonsOld = Object.assign({}, this.mouseButtons),
        this.mouseWheelState = 0;
        for (let e = 0; e < this.touches.length; e++)
            this.touches[e].posOld.x = this.touches[e].pos.x,
            this.touches[e].posOld.y = this.touches[e].pos.y,
            this.touches[e].isNew = !1,
            this.touches[e].isDead && (this.touches.splice(e, 1),
            --e);
        this.lostFocus = !1
    }
    captureNextInput(e) {
        this.captureNextInputCb = e
    }
    checkCaptureInput(e, t, i) {
        return !!this.captureNextInputCb?.(e, new At(t,i)) && (this.captureNextInputCb = null,
        !0)
    }
    isInputValuePressed(e) {
        switch (e.type) {
        case 1:
            return this.keyPressed(e.code);
        case 2:
            return this.mousePressed(e.code);
        case 3:
            return this.mouseWheel() == e.code;
        default:
            return !1
        }
    }
    isInputValueReleased(e) {
        switch (e.type) {
        case 1:
            return this.keyReleased(e.code);
        case 2:
            return this.mouseReleased(e.code);
        case 3:
            return this.mouseWheel() == e.code;
        default:
            return !1
        }
    }
    isInputValueDown(e) {
        switch (e.type) {
        case 1:
            return this.keyDown(e.code);
        case 2:
            return this.mouseDown(e.code);
        case 3:
            return this.mouseWheel() == e.code;
        default:
            return !1
        }
    }
    onKeyDown(e) {
        const t = e.keyCode;
        t == 9 && e.preventDefault(),
        !this.checkCaptureInput(e, 1, t) && (this.keys[t] = !0)
    }
    onKeyUp(e) {
        this.keys[e.keyCode] = !1
    }
    keyDown(e) {
        return !!this.keys[e]
    }
    keyPressed(e) {
        return !this.keysOld[e] && !!this.keys[e]
    }
    keyReleased(e) {
        return !!this.keysOld[e] && !this.keys[e]
    }
    onMouseMove(e) {
        this.mousePos.x = e.clientX,
        this.mousePos.y = e.clientY
    }
    onMouseDown(e) {
        const t = e.button;
        this.checkCaptureInput(e, 2, t) || (this.mouseButtons[t] = !0)
    }
    onMouseUp(e) {
        const t = e.button;
        this.mouseButtons[t] = !1,
        (t == 3 || t == 4) && e.preventDefault()
    }
    onMouseWheel(e) {
        const t = e.deltaY < 0 ? 1 : 2;
        this.checkCaptureInput(e, 3, t) || (this.mouseWheelState = t)
    }
    mouseDown(e) {
        return !!this.mouseButtons[e]
    }
    mousePressed(e) {
        return !this.mouseButtonsOld[e] && !!this.mouseButtons[e]
    }
    mouseReleased(e) {
        return !!this.mouseButtonsOld[e] && !this.mouseButtons[e]
    }
    mouseWheel() {
        return this.mouseWheelState
    }
    onTouchShared(e, t) {
        if (e.target == this.touchElem || t != 1) {
            const i = e.timeStamp || performance.now();
            for (let r = 0; r < e.changedTouches.length; r++) {
                const s = e.changedTouches[r]
                  , a = s.identifier
                  , l = s.clientX
                  , h = s.clientY;
                let p = null;
                for (let c = 0; c < this.touches.length; c++)
                    if (this.touches[c].osId == a && !this.touches[c].isDead) {
                        p = this.touches[c];
                        break
                    }
                t == 1 && !p && (p = new Sa,
                this.touches.push(p),
                ++this.touchIdCounter,
                p.id = this.touchIdCounter,
                p.osId = a,
                p.posOld.x = l,
                p.posOld.y = h,
                p.posDown.x = l,
                p.posDown.y = h,
                p.startTime = i,
                p.isNew = !0,
                p.isDead = !1),
                (t == 2 || t == 3) && p && (p.isDead = !0),
                p && (p.pos.x = l,
                p.pos.y = h,
                p.lastUpdateTime = i)
            }
        }
    }
    onTouchMove(e) {
        this.onTouchShared(e, 0)
    }
    onTouchStart(e) {
        this.onTouchShared(e, 1)
    }
    onTouchEnd(e) {
        this.onTouchShared(e, 2)
    }
    onTouchCancel(e) {
        this.onTouchShared(e, 3)
    }
    getTouchById(e) {
        for (let t = 0; t < this.touches.length; t++)
            if (this.touches[t].id == e)
                return this.touches[t];
        return null
    }
}
var H = (o => (o[o.Backspace = 8] = "Backspace",
o[o.Enter = 13] = "Enter",
o[o.Shift = 16] = "Shift",
o[o.Control = 17] = "Control",
o[o.Alt = 18] = "Alt",
o[o.Escape = 27] = "Escape",
o[o.Space = 32] = "Space",
o[o.Left = 37] = "Left",
o[o.Up = 38] = "Up",
o[o.Right = 39] = "Right",
o[o.Down = 40] = "Down",
o[o.Zero = 48] = "Zero",
o[o.One = 49] = "One",
o[o.Two = 50] = "Two",
o[o.Three = 51] = "Three",
o[o.Four = 52] = "Four",
o[o.Five = 53] = "Five",
o[o.Six = 54] = "Six",
o[o.Seven = 55] = "Seven",
o[o.Eight = 56] = "Eight",
o[o.Nine = 57] = "Nine",
o[o.A = 65] = "A",
o[o.B = 66] = "B",
o[o.C = 67] = "C",
o[o.D = 68] = "D",
o[o.E = 69] = "E",
o[o.F = 70] = "F",
o[o.G = 71] = "G",
o[o.L = 76] = "L",
o[o.M = 77] = "M",
o[o.N = 78] = "N",
o[o.P = 80] = "P",
o[o.Q = 81] = "Q",
o[o.R = 82] = "R",
o[o.S = 83] = "S",
o[o.T = 84] = "T",
o[o.V = 86] = "V",
o[o.W = 87] = "W",
o[o.X = 88] = "X",
o[o.Windows = 91] = "Windows",
o[o.ContextMenu = 93] = "ContextMenu",
o[o.F1 = 112] = "F1",
o[o.F2 = 113] = "F2",
o[o.F3 = 114] = "F3",
o[o.F4 = 115] = "F4",
o[o.F5 = 116] = "F5",
o[o.F6 = 117] = "F6",
o[o.F7 = 118] = "F7",
o[o.F8 = 119] = "F8",
o[o.F9 = 120] = "F9",
o[o.F10 = 121] = "F10",
o[o.F11 = 122] = "F11",
o[o.F12 = 123] = "F12",
o[o.Plus = 187] = "Plus",
o[o.Minus = 189] = "Minus",
o[o.FwdSlash = 191] = "FwdSlash",
o[o.Tilde = 192] = "Tilde",
o))(H || {})
  , gi = (o => (o[o.Left = 0] = "Left",
o[o.Middle = 1] = "Middle",
o[o.Right = 2] = "Right",
o[o.Thumb1 = 3] = "Thumb1",
o[o.Thumb2 = 4] = "Thumb2",
o))(gi || {})
  , yi = (o => (o[o.None = 0] = "None",
o[o.Up = 1] = "Up",
o[o.Down = 2] = "Down",
o))(yi || {})
  , Ze = (o => (o[o.None = 0] = "None",
o[o.Key = 1] = "Key",
o[o.MouseButton = 2] = "MouseButton",
o[o.MouseWheel = 3] = "MouseWheel",
o))(Ze || {});
const ya = ["", "", "", "Cancel", "", "", "Help", "", "Backspace", "Tab", "", "", "Clear", "Enter", "Enter", "", "Shift", "Control", "Alt", "Pause", "Capslock", "Kana", "Eisu", "Junja", "Final", "Hanja", "", "ESC", "Convert", "Nonconvert", "Accept", "Modechange", "Space", "Page Up", "Page Down", "End", "Home", "←", "↑", "→", "↓", "Select", "Print", "Execute", "Printscreen", "Insert", "Delete", "", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", ":", ";", "<", "=", ">", "?", "@", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "Windows Key", "", "Context Menu", "", "Sleep", "Numpad 0", "Numpad 1", "Numpad 2", "Numpad 3", "Numpad 4", "Numpad 5", "Numpad 6", "Numpad 7", "Numpad 8", "Numpad 9", "*", "+", "Separator", "-", ".", "/", "F1", "F2", "F3", "F4", "F5", "F6", "F7", "F8", "F9", "F10", "F11", "F12", "F13", "F14", "F15", "F16", "F17", "F18", "F19", "F20", "F21", "F22", "F23", "F24", "", "", "", "", "", "", "", "", "Num Lock", "Scroll Lock", "WIN_OEM_FJ_JISHO", "WIN_OEM_FJ_MASSHOU", "WIN_OEM_FJ_TOUROKU", "WIN_OEM_FJ_LOYA", "WIN_OEM_FJ_ROYA", "", "", "", "", "", "", "", "", "", "Circumflex", "!", '"', "#", "$", "%", "&", "_", "(", ")", "*", "+", "|", "Hyphen Minus", "{", "}", "~", "", "", "", "", "Volume Mute", "Volume Down", "Volume Up", "", "", ";", "=", ",", "-", ".", "/", "Backquote", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "[", "\\", "]", "'", "", "Meta", "ALTGR", "", "WIN_ICO_HELP", "WIN_ICO_00", "", "WIN_ICO_CLEAR", "", "", "WIN_OEM_RESET", "WIN_OEM_JUMP", "WIN_OEM_PA1", "WIN_OEM_PA2", "WIN_OEM_PA3", "WIN_OECTRL", "WIN_OEM_CUSEL", "WIN_OEM_ATTN", "WIN_OEM_FINISH", "WIN_OEM_COPY", "WIN_OEM_AUTO", "WIN_OEM_ENLW", "WIN_OEM_BACKTAB", "ATTN", "CRSEL", "EXSEL", "EREOF", "PLAY", "ZOOM", "", "PA1", "WIN_OEM_CLEAR", ""]
  , xa = ["Left Mouse", "Middle Mouse", "Right Mouse", "Thumb Mouse 1", "Thumb Mouse 2"]
  , za = ["", "Mouse Wheel Up", "Mouse Wheel Down"];
class At {
    constructor(e, t) {
        this.type = e,
        this.code = t,
        this.type = e,
        this.code = t
    }
    equals(e) {
        return this.type == e.type && this.code == e.code
    }
    toString() {
        return this.type == 0 ? "" : this.type == 1 ? ya[this.code] || `Key ${this.code}` : this.type == 2 ? xa[this.code] || `Mouse ${this.code}` : za[this.code] || `Mouse Wheel ${this.code}`
    }
}
const ai = {};
function ba(o) {
    const e = ce[o];
    if (e.type === "structure") {
        const t = [];
        for (let s = 0; s < e.layers.length; s++) {
            const a = e.layers[s]
              , l = k.oriToRad(a.ori)
              , h = j.transform(Qe.getBoundingCollider(a.type), a.pos, l, 1);
            t.push(j.toAabb(h))
        }
        for (let s = 0; s < e.stairs.length; s++)
            t.push(e.stairs[s].collision);
        const i = be.boundingAabb(t)
          , r = m.create(1, 1);
        return i.min = m.sub(i.min, r),
        i.max = m.add(i.max, r),
        j.createAabb(i.min, i.max)
    }
    if (e.type === "building") {
        const t = [];
        for (let r = 0; r < e.floor.surfaces.length; r++) {
            const s = e.floor.surfaces[r].collision;
            for (let a = 0; a < s.length; a++)
                t.push(s[a])
        }
        for (let r = 0; r < e.ceiling.zoomRegions.length; r++) {
            const s = e.ceiling.zoomRegions[r];
            s.zoomIn && t.push(s.zoomIn),
            s.zoomOut && t.push(s.zoomOut)
        }
        for (let r = 0; r < e.mapObjects.length; r++) {
            const s = e.mapObjects[r];
            let a = s.type;
            if (typeof a == "object" && (a = y.weightedRandomObject(a)),
            a !== "") {
                const l = k.oriToRad(s.ori)
                  , h = j.transform(Qe.getBoundingCollider(a), s.pos, l, s.scale);
                t.push(j.toAabb(h))
            }
        }
        const i = be.boundingAabb(t);
        return j.createAabb(i.min, i.max)
    }
    return e.type === "decal" ? j.toAabb(e.collision) : e.type === "loot_spawner" ? j.createCircle(m.create(0, 0), 3) : (jt(e.collision !== void 0),
    e.collision)
}
const Qe = {
    getBoundingCollider(o) {
        if (ai[o])
            return ai[o];
        const e = ba(o);
        return ai[o] = e,
        e
    },
    getBridgeDims(o) {
        const e = Qe.getBoundingCollider(o)
          , t = j.toAabb(e)
          , i = m.mul(m.sub(t.max, t.min), .5)
          , r = i.x > i.y
          , s = m.create(r ? 1 : 0, r ? 0 : 1)
          , a = m.dot(s, i) * 2
          , l = m.dot(m.perp(s), i) * 2;
        return {
            length: a,
            width: l
        }
    },
    getBridgeOverlapCollider(o, e, t, i) {
        const r = ce[o]
          , s = Qe.getBridgeDims(o)
          , a = m.create(1, 0)
          , l = m.add(m.mul(a, s.length * 1.5), m.mul(m.perp(a), s.width * r.terrain.bridge.nearbyWidthMult))
          , h = j.createAabbExtents(m.create(0, 0), m.mul(l, .5));
        return j.transform(h, e, t, i)
    }
};
function Hi(o, e, t) {
    const i = e.length;
    let r, s, a, l, h;
    return t ? (o = k.fmod(o, 1),
    r = ~~(o * (i - 1)),
    a = r,
    l = (a + 1) % (i - 1),
    s = a > 0 ? a - 1 : i - 2,
    h = (l + 1) % (i - 1)) : (o = k.clamp(o, 0, 1),
    r = ~~(o * (i - 1)),
    a = r === i - 1 ? r - 1 : r,
    l = a + 1,
    s = a > 0 ? a - 1 : a,
    h = l < i - 1 ? l + 1 : l),
    {
        pt: o * (i - 1) - a,
        p0: e[s],
        p1: e[a],
        p2: e[l],
        p3: e[h]
    }
}
function $i(o, e, t, i, r) {
    return .5 * (2 * t + o * (-e + i) + o * o * (2 * e - 5 * t + 4 * i - r) + o * o * o * (-e + 3 * t - 3 * i + r))
}
function Xi(o, e, t, i, r) {
    return .5 * (-e + i + 2 * o * (2 * e - 5 * t + 4 * i - r) + 3 * o * o * (-e + 3 * t - 3 * i + r))
}
class ka {
    points = [];
    arcLens = [];
    totalArcLen;
    looped;
    constructor(e, t) {
        jt(e.length > 1),
        this.totalArcLen = 0,
        this.looped = t;
        for (let s = 0; s < e.length; s++)
            this.points.push(m.copy(e[s]));
        const i = e.length * 4;
        let r = this.points[0];
        for (let s = 0; s <= i; s++) {
            const a = s / i
              , l = this.getPos(a)
              , h = s === 0 ? 0 : this.arcLens[s - 1];
            this.arcLens[s] = h + m.length(m.sub(l, r)),
            r = m.copy(l)
        }
        this.totalArcLen = this.arcLens[this.arcLens.length - 1]
    }
    getPos(e) {
        const t = Hi(e, this.points, this.looped)
          , {pt: i} = t
          , {p0: r} = t
          , {p1: s} = t
          , {p2: a} = t
          , {p3: l} = t;
        return m.create($i(i, r.x, s.x, a.x, l.x), $i(i, r.y, s.y, a.y, l.y))
    }
    getTangent(e) {
        const t = Hi(e, this.points, this.looped)
          , {pt: i} = t
          , {p0: r} = t
          , {p1: s} = t
          , {p2: a} = t
          , {p3: l} = t;
        return m.create(Xi(i, r.x, s.x, a.x, l.x), Xi(i, r.y, s.y, a.y, l.y))
    }
    getNormal(e) {
        const t = this.getTangent(e);
        return m.perp(m.normalizeSafe(t, m.create(1, 0)))
    }
    getClosestTtoPoint(e) {
        let t = Number.MAX_VALUE
          , i = 0;
        for (let v = 0; v < this.points.length - 1; v++) {
            const b = k.distToSegmentSq(e, this.points[v], this.points[v + 1]);
            b < t && (t = b,
            i = v)
        }
        const r = i
          , s = r + 1
          , a = this.points[r]
          , l = this.points[s]
          , h = m.sub(l, a)
          , p = k.clamp(m.dot(m.sub(e, a), h) / m.dot(h, h), 0, 1)
          , c = this.points.length - 1
          , d = k.clamp((r + p - .1) / c, 0, 1)
          , w = k.clamp((r + p + .1) / c, 0, 1);
        let f = (r + p) / c
          , S = Number.MAX_VALUE;
        const g = 8;
        for (let v = 0; v <= g; v++) {
            const b = k.lerp(v / g, d, w)
              , M = this.getPos(b)
              , I = m.lengthSqr(m.sub(M, e));
            I < S && (f = b,
            S = I)
        }
        const x = this.getTangent(f)
          , C = m.length(x);
        if (C > 0) {
            const v = this.getPos(f)
              , b = m.dot(x, m.sub(e, v)) / C
              , M = f + b / (C * c);
            m.lengthSqr(m.sub(e, this.getPos(M))) < m.lengthSqr(m.sub(e, v)) && (f = M)
        }
        return f
    }
    getTfromArcLen(e) {
        e = k.clamp(e, 0, this.totalArcLen);
        let t = 0;
        for (; e > this.arcLens[t]; )
            t++;
        if (t === 0)
            return 0;
        const i = k.delerp(e, this.arcLens[t - 1], this.arcLens[t])
          , r = this.arcLens.length - 1
          , s = (t - 1) / r
          , a = t / r;
        return k.lerp(i, s, a)
    }
    getArcLen(e) {
        e = k.clamp(e, 0, 1);
        const t = this.arcLens.length - 1
          , i = Math.floor(e * t)
          , r = i < t - 1 ? i + 1 : i
          , s = k.fmod(e, 1 / t) / (1 / t);
        return k.lerp(s, this.arcLens[i], this.arcLens[r])
    }
}
class va {
    spline;
    waterWidth;
    shoreWidth;
    looped;
    center;
    waterPoly;
    shorePoly;
    waterWidths;
    shoreWidths;
    aabb;
    constructor(e, t, i, r, s) {
        this.spline = new ka(e,i),
        this.waterWidth = t,
        this.shoreWidth = k.clamp(t * .75, 4, 8),
        this.looped = i,
        this.center = m.create(0, 0);
        for (let d = 0; d < this.spline.points.length; d++)
            this.center = m.add(this.center, this.spline.points[d]);
        this.center = m.div(this.center, this.spline.points.length);
        let a = 0;
        for (let d = 0; d < this.spline.points.length; d++) {
            const w = m.length(m.sub(this.spline.points[d], this.center));
            a += w
        }
        a /= this.spline.points.length;
        const l = m.mul(m.sub(s.max, s.min), .5)
          , h = m.add(s.min, l);
        this.waterPoly = [],
        this.shorePoly = [],
        this.waterWidths = [],
        this.shoreWidths = [];
        for (let d = 0; d < e.length; d++) {
            const w = e[d];
            let f = this.spline.getNormal(d / (e.length - 1))
              , S = !1;
            if (!this.looped && (d === 0 || d === e.length - 1)) {
                const z = m.sub(w, h);
                let P = m.create(0, 0)
                  , _ = m.create(1, 0);
                if (Math.abs(z.x) > Math.abs(z.y) ? (P = m.create(z.x > 0 ? s.max.x : s.min.x, w.y),
                _ = m.create(z.x > 0 ? 1 : -1, 0)) : (P = m.create(w.x, z.y > 0 ? s.max.y : s.min.y),
                _ = m.create(0, z.y > 0 ? 1 : -1)),
                m.lengthSqr(m.sub(P, w)) < 1) {
                    let T = m.perp(_);
                    m.dot(f, T) < 0 && (T = m.neg(T)),
                    f = T,
                    S = !0
                }
            }
            let {waterWidth: g} = this;
            if (!this.looped) {
                const z = e.length;
                g = (1 + (2 * (Math.max(1 - d / z, d / z) - .5)) ** 3 * 1.5) * this.waterWidth
            }
            this.waterWidths.push(g);
            let {shoreWidth: x} = this
              , C = null;
            for (let z = 0; z < r.length; z++) {
                const P = r[z]
                  , _ = P.spline.getClosestTtoPoint(w)
                  , T = P.spline.getPos(_)
                  , N = m.length(m.sub(T, w));
                N < P.waterWidth * 2 && (x = k.max(x, P.shoreWidth)),
                (d === 0 || d === e.length - 1) && N < 1.5 && !S && (C = P)
            }
            d > 0 && (x = (this.shoreWidths[d - 1] + x) / 2),
            this.shoreWidths.push(x),
            x += g;
            const v = function(P, _, T) {
                const N = m.add(P, _);
                if (!k.pointInsidePolygon(N, T)) {
                    const A = k.rayPolygonIntersect(P, _, T);
                    if (A)
                        return m.mul(_, A)
                }
                return _
            };
            let b, M, I, B;
            if (this.looped) {
                let z = m.sub(w, this.center);
                const P = m.length(z);
                z = P > 1e-4 ? m.div(z, P) : m.create(1, 0);
                const _ = k.lerp(k.min(g / a, 1) ** .5, g, (1 - (a - g) / P) * P)
                  , T = k.lerp(k.min(x / a, 1) ** .5, x, (1 - (a - x) / P) * P);
                b = m.add(w, m.mul(z, g)),
                M = m.add(w, m.mul(z, -_)),
                I = m.add(w, m.mul(z, x)),
                B = m.add(w, m.mul(z, -T))
            } else {
                let z = m.mul(f, g)
                  , P = m.mul(f, -g)
                  , _ = m.mul(f, x)
                  , T = m.mul(f, -x);
                C && (z = v(w, z, C.waterPoly),
                P = v(w, P, C.waterPoly),
                _ = v(w, _, C.shorePoly),
                T = v(w, T, C.shorePoly)),
                b = m.add(w, z),
                M = m.add(w, P),
                I = m.add(w, _),
                B = m.add(w, T)
            }
            b = be.clampPosToAabb(b, s),
            M = be.clampPosToAabb(M, s),
            I = be.clampPosToAabb(I, s),
            B = be.clampPosToAabb(B, s),
            this.waterPoly.splice(d, 0, b),
            this.waterPoly.splice(this.waterPoly.length - d, 0, M),
            this.shorePoly.splice(d, 0, I),
            this.shorePoly.splice(this.shorePoly.length - d, 0, B)
        }
        let p = m.create(Number.MAX_VALUE, Number.MAX_VALUE)
          , c = m.create(-Number.MAX_VALUE, -Number.MAX_VALUE);
        for (let d = 0; d < this.shorePoly.length; d++)
            p = m.minElems(p, this.shorePoly[d]),
            c = m.maxElems(c, this.shorePoly[d]);
        this.aabb = j.createAabb(p, c)
    }
    distanceToShore(e) {
        const t = this.spline.getClosestTtoPoint(e)
          , i = m.length(m.sub(e, this.spline.getPos(t)));
        return k.max(this.waterWidth - i, 0)
    }
    getWaterWidth(e) {
        const t = this.spline.points.length
          , i = k.clamp(Math.floor(e * t), 0, t);
        return this.waterWidths[i]
    }
}
function Rr(o, e, t, i, r) {
    const s = m.create(o.min.x, o.min.y)
      , a = m.create(o.max.x, o.min.y)
      , l = m.create(o.min.x, o.max.y)
      , h = m.create(o.max.x, o.max.y)
      , p = a.x - s.x
      , c = l.y - s.y
      , d = p / (e + 1)
      , w = c / (t + 1)
      , f = [];
    f.push(m.copy(s));
    for (let S = 1; S <= e; ++S)
        f.push(m.create(s.x + d * S, s.y + r(-i, i)));
    f.push(m.copy(a));
    for (let S = 1; S <= t; ++S)
        f.push(m.create(a.x + r(-i, i), a.y + w * S));
    f.push(m.copy(h));
    for (let S = 1; S <= e; ++S)
        f.push(m.create(h.x - d * S, h.y + r(-i, i)));
    f.push(m.copy(l));
    for (let S = 1; S <= t; ++S)
        f.push(m.create(l.x + r(-i, i), l.y - w * S));
    return f
}
function _a(o, e, t, i, r, s) {
    const {shoreVariation: l} = O.map
      , {grassVariation: h} = O.map
      , p = y.seededRand(s)
      , c = m.create(t, t)
      , d = m.create(o - t, e - t)
      , w = m.create(c.x, c.y)
      , f = m.create(d.x, d.y)
      , S = j.createAabb(w, f)
      , g = Rr(S, 64, 64, l, p)
      , x = m.create(o * .5, e * .5)
      , C = g.map(M => {
        const I = m.normalize(m.sub(x, M))
          , B = p(-h, h)
          , z = i + B;
        return m.add(M, m.mul(I, z))
    }
    )
      , v = j.createAabb(m.create(0, 0), m.create(o, e))
      , b = [];
    for (let M = 0; M < r.length; M++) {
        const I = r[M]
          , B = new va(I.points,I.width,I.looped,b,v);
        b.push(B)
    }
    return {
        shore: g,
        grass: C,
        rivers: b
    }
}
function Zi(o, e, t, i, r, s) {
    const a = o;
    return a.dead || !a.collidable || a.isWindow || a.height < i || !y.sameLayer(a.layer, r) || s && r & 2 && a.layer == 0 ? null : j.intersectSegment(a.collider, e, t)
}
function Qi(o, e, t, i, r) {
    const s = gt.intersectSegmentDist(o, e, t, i, 0, r, !1);
    return m.add(e, m.mul(t, s))
}
const gt = {
    intersectSegment(o, e, t, i, r, s, a) {
        const l = m.add(e, m.mul(t, i))
          , h = [];
        for (let p = 0; p < o.length; p++) {
            const c = o[p]
              , d = Zi(c, e, l, r, s, a);
            if (d) {
                const w = m.length(m.sub(d.point, e));
                h.push({
                    id: c.__id,
                    dist: w
                })
            }
        }
        return h.sort( (p, c) => p.dist - c.dist),
        h.length > 0 ? h[0] : null
    },
    intersectSegmentDist(o, e, t, i, r, s, a) {
        let l = i;
        const h = m.add(e, m.mul(t, i));
        for (let p = 0; p < o.length; p++) {
            const c = o[p]
              , d = Zi(c, e, h, r, s, a);
            d && (l = k.min(l, m.length(m.sub(d.point, e))))
        }
        return l
    },
    scanCollider(o, e, t, i, r, s, a, l, h, p) {
        const c = j.intersectCircle(o, t, a);
        if (!c)
            return null;
        if (c.pen >= a)
            return {
                dist: 0
            };
        const d = m.perp(c.dir)
          , w = Qi(e, t, m.neg(d), .5 * s, i)
          , f = Qi(e, t, d, .5 * s, i);
        let S = m.sub(f, w);
        const g = m.length(S);
        S = g > 1e-4 ? m.div(S, g) : m.create(1, 0);
        const x = [];
        for (let v = 0; v < l; v++) {
            const b = v / k.max(l - 1, 1);
            x.push(m.add(w, m.mul(S, g * b)))
        }
        const C = r;
        for (let v = 0; v < x.length; v++) {
            const b = x[v]
              , M = j.intersectCircle(o, b, a);
            if (!M)
                continue;
            const I = m.neg(M.dir)
              , B = gt.intersectSegmentDist(e, b, I, a, C, i, !0)
              , z = j.intersectSegment(o, b, m.add(b, m.mul(I, a)))
              , P = z ? m.length(m.sub(z.point, b)) : 0
              , _ = z && P <= B;
            if (h) {
                const T = _ ? 65280 : 16711680;
                p?.addRay(b, I, a, T)
            }
            if (_)
                return {
                    dist: P
                }
        }
        return null
    }
};
function Ia(o, e, t) {
    const i = e - o
      , r = i * t;
    return Math.abs(r) < .001 ? i : r
}
class Ma {
    __id;
    __type;
    active;
    sprites = [];
    particleEmitters = [];
    soundEmitters = [];
    isNew;
    residue;
    ceilingDead;
    ceilingDamaged;
    playedCeilingDeadFx;
    playedSolvedPuzzleFx;
    hasPuzzle;
    puzzleErrSeqModified;
    puzzleErrSeq;
    puzzleSolved;
    soundEmitterTicker;
    type;
    pos;
    ori;
    rot;
    scale;
    layer;
    occupied;
    imgs = [];
    zIdx;
    bounds;
    ceiling;
    surfaces;
    RVRwlj() {
        this.isNew = !1,
        this.residue = null,
        this.ceilingDead = !1,
        this.ceilingDamaged = !1,
        this.playedCeilingDeadFx = !1,
        this.playedSolvedPuzzleFx = !1,
        this.hasPuzzle = !1,
        this.puzzleErrSeqModified = !1,
        this.puzzleErrSeq = 0,
        this.puzzleSolved = !1,
        this.soundEmitterTicker = 0
    }
    TNCQd() {
        for (let e = 0; e < this.sprites.length; e++) {
            const t = this.sprites[e];
            t.active = !1,
            t.sprite.visible = !1,
            t.sprite.parent?.removeChild(t.sprite),
            t.sprite.removeChildren()
        }
        for (let e = 0; e < this.particleEmitters.length; e++)
            this.particleEmitters[e].stop();
        this.particleEmitters = [];
        for (let e = 0; e < this.soundEmitters.length; e++)
            this.soundEmitters[e].instance?.stop();
        this.soundEmitters = []
    }
    allocSprite() {
        for (let t = 0; t < this.sprites.length; t++) {
            const i = this.sprites[t];
            if (!i.active)
                return i.active = !0,
                i.sprite
        }
        const e = new ae;
        return e.anchor.set(.5, .5),
        this.sprites.push({
            active: !0,
            sprite: e
        }),
        e
    }
    cmyLn(e, t, i, r) {
        t && (this.type = e.type,
        this.pos = m.copy(e.pos),
        this.ori = e.ori,
        this.rot = k.oriToRad(e.ori),
        this.scale = 1,
        this.layer = e.layer),
        this.ceilingDead = e.ceilingDead,
        this.ceilingDamaged = e.ceilingDamaged,
        this.occupied = e.occupied,
        this.hasPuzzle = e.hasPuzzle,
        this.hasPuzzle && (this.puzzleErrSeqModified = e.puzzleErrSeq != this.puzzleErrSeq,
        this.puzzleSolved = e.puzzleSolved,
        this.puzzleErrSeq = e.puzzleErrSeq);
        const s = ce[this.type];
        if (i) {
            this.isNew = !0,
            this.playedCeilingDeadFx = s.ceiling.destroy !== void 0 && r.map.deadCeilingIds.includes(this.__id),
            this.playedSolvedPuzzleFx = this.hasPuzzle && r.map.solvedPuzzleIds.includes(this.__id);
            const a = c => {
                const d = c.pos || m.create(0, 0)
                  , w = k.oriToRad(c.rot || 0)
                  , f = this.allocSprite();
                c.sprite && c.sprite != "none" ? f.texture = X.from(c.sprite) : f.texture = X.EMPTY,
                f.tint = c.tint;
                const S = r.map.getMapDef().biome.valueAdjust;
                return S < 1 && (f.tint = y.adjustValue(f.tint, S)),
                f.posOffset = m.rotate(d, this.rot),
                f.rotOffset = w,
                f.imgAlpha = c.alpha,
                f.alpha = f.imgAlpha,
                f.defScale = c.scale,
                f.mirrorY = !!c.mirrorY,
                f.mirrorX = !!c.mirrorX,
                f.visible = !0,
                f
            }
            ;
            this.bounds = j.transform(Qe.getBoundingCollider(this.type), this.pos, this.rot, this.scale),
            this.zIdx = s.zIdx || 0,
            this.surfaces = [];
            for (let c = 0; c < s.floor.surfaces.length; c++) {
                const d = s.floor.surfaces[c]
                  , w = {
                    type: d.type,
                    data: d.data || {},
                    colliders: []
                };
                for (let f = 0; f < d.collision.length; f++)
                    w.colliders.push(j.transform(d.collision[f], this.pos, this.rot, this.scale));
                this.surfaces.push(w)
            }
            const l = Object.assign({
                dist: 5.5,
                width: 2.75,
                linger: 0,
                fadeRate: 12
            }, s.ceiling.vision);
            this.ceiling = {
                zoomRegions: [],
                vision: l,
                visionTicker: 0,
                fadeAlpha: 1
            };
            for (let c = 0; c < s.ceiling.zoomRegions.length; c++) {
                const d = s.ceiling.zoomRegions[c];
                this.ceiling.zoomRegions?.push({
                    zoomIn: d.zoomIn ? j.transform(d.zoomIn, this.pos, this.rot, this.scale) : null,
                    zoomOut: d.zoomOut ? j.transform(d.zoomOut, this.pos, this.rot, this.scale) : null
                })
            }
            this.imgs = [];
            for (let c = 0; c < s.floor.imgs.length; c++)
                this.imgs.push({
                    sprite: a(s.floor.imgs[c]),
                    isCeiling: !1,
                    zOrd: this.zIdx,
                    zIdx: this.__id * 100 + c
                });
            for (let c = 0; c < s.ceiling.imgs.length; c++) {
                const d = s.ceiling.imgs[c];
                this.imgs.push({
                    sprite: a(d),
                    isCeiling: !0,
                    removeOnDamaged: !!d.removeOnDamaged,
                    zOrd: 750 - this.zIdx,
                    zIdx: this.__id * 100 + c
                })
            }
            const h = s.occupiedEmitters || [];
            for (let c = 0; c < h.length; c++) {
                const d = h[c]
                  , w = d.rot !== void 0 ? d.rot : 0
                  , f = this.rot + w;
                let S = m.add(this.pos, m.rotate(d.pos, f));
                const g = d.dir || m.create(1, 0);
                let x = m.rotate(g, f)
                  , C = d.scale
                  , v = null;
                if (d.parentToCeiling) {
                    let M = -1;
                    for (let I = 0; I < this.imgs.length; I++)
                        this.imgs[I].isCeiling && (M = I);
                    if (M >= 0) {
                        const I = this.imgs[M];
                        v = I.sprite,
                        S = m.mul(d.pos, 32),
                        S.y *= -1,
                        x = m.rotate(m.create(1, 0), d.rot),
                        C = 1 / I.sprite.defScale
                    }
                }
                const b = r.particleBarn.addEmitter(d.type, {
                    pos: S,
                    dir: x,
                    scale: C,
                    layer: d.layer,
                    parent: v
                });
                this.particleEmitters.push(b)
            }
            const p = s.soundEmitters || [];
            for (let c = 0; c < p.length; c++) {
                const d = p[c]
                  , w = m.add(this.pos, m.rotate(d.pos, this.rot));
                this.soundEmitters.push({
                    instance: null,
                    sound: d.sound,
                    channel: d.channel,
                    pos: w,
                    range: d.range,
                    falloff: d.falloff,
                    volume: d.volume
                })
            }
        }
    }
    pprlB(e, t, i, r, s, a, l, h) {
        if (this.hasPuzzle) {
            const f = ce[this.type];
            if (this.puzzleErrSeqModified && (this.puzzleErrSeqModified = !1,
            !this.isNew)) {
                let S = this
                  , g = m.length(m.sub(s.CYoYrL, S.pos));
                const x = t.WUiyA.MrrhcR();
                for (let C = 0; C < x.length; C++) {
                    const v = x[C];
                    if (v.active && v.isPuzzlePiece && v.parentBuildingId == this.__id) {
                        const b = m.length(m.sub(s.CYoYrL, v.pos));
                        b < g && (S = v,
                        g = b)
                    }
                }
                r.playSound(f.puzzle?.sound.fail, {
                    channel: "sfx",
                    soundPos: S.pos,
                    layer: S.layer,
                    filter: "muffled"
                })
            }
            this.puzzleSolved && !this.playedSolvedPuzzleFx && (t.solvedPuzzleIds.push(this.__id),
            this.playedSolvedPuzzleFx = !0,
            !this.isNew && f.puzzle?.sound.complete != "none" && r.playSound(f.puzzle?.sound.complete, {
                channel: "sfx",
                soundPos: this.pos,
                layer: this.layer,
                filter: "muffled"
            }))
        }
        if (this.ceilingDead && !this.playedCeilingDeadFx && (t.deadCeilingIds.push(this.__id),
        this.playedCeilingDeadFx = !0,
        this.isNew || this.destroyCeilingFx(i, r)),
        this.isNew = !1,
        this.ceilingDead && !this.residue) {
            const f = ce[this.type];
            if (f.ceiling.destroy?.residue) {
                const S = this.allocSprite();
                S.texture = X.from(f.ceiling.destroy.residue),
                S.position.set(0, 0),
                S.scale.set(1, 1),
                S.rotation = 0,
                S.tint = 16777215,
                S.visible = !0,
                this.imgs[0].sprite.addChild(S),
                this.residue = S
            }
        }
        this.ceiling.visionTicker -= e;
        const p = this.ceiling.vision;
        let c = !1;
        for (let f = 0; f < this.ceiling.zoomRegions.length; f++) {
            const S = this.ceiling.zoomRegions[f].zoomIn;
            if (S && (this.layer == s.layer || s.layer & 2) && gt.scanCollider(S, t.WUiyA.MrrhcR(), s.CYoYrL, s.layer, .5, p.width * 2, p.dist, 5, h.buildings?.ceiling, Si)) {
                c = !0;
                break
            }
        }
        this.ceilingDead && (c = !0),
        c && (this.ceiling.visionTicker = p.linger + 1e-4),
        s.noCeilingRevealTicker > 0 && !this.ceilingDead && (this.ceiling.visionTicker = 0);
        const d = this.ceiling.visionTicker > 0
          , w = Ia(this.ceiling.fadeAlpha, d ? 0 : 1, e * (d ? 12 : p?.fadeRate));
        this.ceiling.fadeAlpha += w,
        c && s.noCeilingRevealTicker <= 0 && s.layer & 2 && !y.sameLayer(s.layer, this.layer) && (this.ceiling.fadeAlpha = 0);
        for (let f = 0; f < this.particleEmitters.length; f++)
            this.particleEmitters[f].enabled = this.occupied;
        if (this.soundEmitterTicker += e,
        this.soundEmitterTicker > .1) {
            this.soundEmitterTicker = 0;
            for (let f = 0; f < this.soundEmitters.length; f++) {
                const S = this.soundEmitters[f];
                if (!S.instance && r.isSoundLoaded(S.sound, S.channel) && (S.instance = r.playSound(S.sound, {
                    channel: S.channel,
                    loop: !0,
                    forceStart: !0,
                    startSilent: !0
                })),
                S.instance) {
                    const g = m.sub(l.CYoYrL, S.pos)
                      , x = m.length(g)
                      , C = k.remap(x, S.range.min, S.range.max, 1, 0)
                      , v = Math.pow(C, S.falloff)
                      , b = k.lerp(this.ceiling.fadeAlpha, 1, .25);
                    let M = r.baseVolume * r.getTypeVolume("sound") * S.volume * v * b;
                    y.sameAudioLayer(this.layer, s.layer) || (M = 0),
                    M < .003 && (M = 0),
                    S.instance.volume = M
                }
            }
        }
        for (let f = 0; f < this.imgs.length; f++) {
            const S = this.imgs[f]
              , g = S.isCeiling ? this.ceiling.fadeAlpha : 1;
            this.positionSprite(S.sprite, g, l),
            S.removeOnDamaged && this.ceilingDamaged && (S.sprite.visible = !this.ceilingDamaged);
            let x = this.layer;
            S.isCeiling && (this.layer == s.layer || s.layer & 2 && this.layer == 1) && (x |= 2),
            a.addPIXIObj(S.sprite, x, S.zOrd, S.zIdx)
        }
    }
    isInsideCeiling(e) {
        for (let t = 0; t < this.ceiling.zoomRegions.length; t++) {
            const i = this.ceiling.zoomRegions[t].zoomIn;
            if (i && j.intersect(i, e))
                return !0
        }
        return !1
    }
    getDistanceToBuilding(e, t) {
        let i = t;
        for (let r = 0; r < this.ceiling.zoomRegions.length; r++) {
            const s = this.ceiling.zoomRegions[r].zoomIn;
            if (s) {
                const a = j.intersectCircle(s, e, t);
                a && (i = k.clamp(t - a.pen, 0, i))
            }
        }
        return i
    }
    destroyCeilingFx(e, t) {
        const i = ce[this.type].ceiling.destroy
          , r = this.surfaces[0];
        for (let s = 0; s < r.colliders.length; s++) {
            const a = j.toAabb(r.colliders[s]);
            for (let l = 0; l < i.particleCount; l++) {
                const h = m.create(y.random(a.min.x, a.max.x), y.random(a.min.y, a.max.y))
                  , p = m.mul(m.randomUnit(), y.random(0, 15));
                e.addParticle(i.particle, this.layer, h, p)
            }
            break
        }
        t.playSound(i.sound || "ceiling_break_01", {
            channel: "sfx",
            soundPos: this.pos
        })
    }
    positionSprite(e, t, i) {
        const r = i.zEsq(m.add(this.pos, e.posOffset))
          , s = i.ZaMxGM(this.scale * e.defScale);
        e.position.set(r.x, r.y),
        e.scale.set(s, s),
        e.mirrorY && (e.scale.y *= -1),
        e.mirrorX && (e.scale.x *= -1),
        e.rotation = -this.rot + e.rotOffset,
        e.alpha = e.imgAlpha * t
    }
    render(e, t, i) {}
}
class Ne {
    kXX = [];
    IjD = 0;
    uZZv;
    constructor(e) {
        this.uZZv = {
            type: e
        },
        jt(e !== void 0)
    }
    HDV() {
        let e = null;
        for (let t = 0; t < this.kXX.length; t++)
            if (!this.kXX[t].active) {
                e = this.kXX[t];
                break
            }
        return e || (e = new this.uZZv.type,
        this.kXX.push(e)),
        e.active = !0,
        e.RVRwlj(),
        this.IjD++,
        e
    }
    TNCQd(e) {
        if (e.TNCQd(),
        e.active = !1,
        this.IjD--,
        this.kXX.length > 128 && this.IjD < this.kXX.length / 2) {
            const t = [];
            for (let i = 0; i < this.kXX.length; i++)
                this.kXX[i].active && t.push(this.kXX[i]);
            this.kXX = t
        }
    }
    MrrhcR() {
        return this.kXX
    }
}
class Or {
    aMkt = {};
    DidvnY = {};
    CegKP = 0;
    zOgn(e, t) {
        this.DidvnY[e] = t
    }
    xgp(e) {
        return this.aMkt[e]
    }
    viyvFp(e, t) {
        const i = this.xgp(e);
        if (!i) {
            const r = {
                id: e,
                ids: Object.keys(this.aMkt),
                stream: t.view.view
            };
            return xe.logError(`getTypeById${JSON.stringify(r)}`),
            xe.storeGeneric("objectPoolErr", "getTypeById"),
            ye.Invalid
        }
        return i.__type
    }
    XRD(e, t, i, r) {
        let s = this.xgp(t)
          , a = !1;
        return s === void 0 && (s = this.DidvnY[e].HDV(),
        s.__id = t,
        s.__type = e,
        this.aMkt[t] = s,
        this.CegKP++,
        a = !0),
        s.cmyLn(i, !0, a, r),
        s
    }
    FxLc(e, t, i) {
        const r = this.xgp(e);
        r ? r.cmyLn(t, !1, !1, i) : (xe.storeGeneric("objectPoolErr", "updateObjPart"),
        console.error("updateObjPart, missing object", e))
    }
    tISqH(e) {
        const t = this.xgp(e);
        t === void 0 ? (console.error("deleteObj, missing object", e),
        xe.storeGeneric("objectPoolErr", "deleteObj")) : (this.DidvnY[t.__type].TNCQd(t),
        delete this.aMkt[e])
    }
}
class Ta {
    __id;
    __type;
    active;
    sprite = new ae;
    isNew;
    smokeEmitter;
    img;
    type;
    layer;
    healthT;
    dead;
    isSkin;
    rot;
    scale;
    pos;
    imgMirrorX;
    imgMirrorY;
    exploded;
    collidable;
    destructible;
    height;
    isWall;
    isWindow;
    isBush;
    isDoor;
    isButton;
    isPuzzlePiece;
    parentBuildingId;
    button;
    door;
    imgScale;
    explodeParticle;
    skinPlayerId;
    visualPosOld;
    posInterpTicker;
    collider;
    constructor() {
        this.sprite.anchor.set(.5, .5),
        this.sprite.visible = !1
    }
    RVRwlj() {
        this.isNew = !1,
        this.smokeEmitter = null,
        this.sprite.visible = !1,
        this.img = "",
        this.visualPosOld = m.create(0, 0)
    }
    TNCQd() {
        this.sprite.visible = !1,
        this.sprite.parent?.removeChild(this.sprite),
        this.door?.casingSprite && (this.door.casingSprite.destroy(),
        this.door.casingSprite = null),
        this.smokeEmitter && (this.smokeEmitter.stop(),
        this.smokeEmitter = null)
    }
    cmyLn(e, t, i, r) {
        t && (this.type = e.type,
        this.layer = e.layer,
        this.healthT = e.healthT,
        this.dead = e.dead,
        this.isSkin = e.isSkin,
        this.isSkin && (this.skinPlayerId = e.skinPlayerId));
        const s = ce[this.type];
        if (m.eq(e.pos, this.visualPosOld) || (this.visualPosOld = m.copy(i ? e.pos : this.pos),
        this.posInterpTicker = 0),
        this.pos = m.copy(e.pos),
        this.rot = k.oriToRad(e.ori),
        this.scale = e.scale,
        this.imgScale = s.img.scale,
        this.imgMirrorY = s.img.mirrorY,
        this.imgMirrorX = s.img.mirrorX,
        this.collider = j.transform(s.collision, this.pos, this.rot, this.scale),
        i) {
            if (this.isNew = !0,
            this.exploded = r.map.deadObstacleIds.includes(this.__id),
            this.explodeParticle = s.explodeParticle,
            this.collidable = s.collidable && !this.isSkin,
            this.destructible = s.destructible,
            this.height = s.height,
            this.isWall = !!s.isWall,
            this.isWindow = !!s.isWindow,
            this.isBush = !!s.isBush,
            this.isDoor = s.door !== void 0,
            this.isDoor) {
                this.door = {
                    openOneWay: s.door?.openOneWay,
                    closedPos: m.copy(e.pos),
                    autoOpen: s.door?.autoOpen,
                    interactionRad: s.door?.interactionRad,
                    interpSpeed: s.door?.openSpeed,
                    interpPos: m.copy(e.pos),
                    interpRot: k.oriToRad(e.ori),
                    seq: e.door?.seq,
                    seqOld: e.door?.seq,
                    open: e.door?.open,
                    wasOpen: e.door?.open,
                    locked: e.door?.locked,
                    casingSprite: null
                };
                const p = s.door?.casingImg;
                if (p !== void 0) {
                    let c = p.pos || m.create(0, 0);
                    c = m.rotate(c, this.rot + Math.PI * .5);
                    const d = new ae;
                    d.texture = X.from(p.sprite),
                    d.anchor.set(.5, .5),
                    d.posOffset = c,
                    d.imgScale = p.scale,
                    d.tint = p.tint,
                    d.alpha = p.alpha,
                    d.visible = !0,
                    this.door.casingSprite = d
                }
            }
            this.isButton = s.button !== void 0,
            this.isButton && (this.button = {
                interactionRad: s.button?.interactionRad,
                interactionText: s.button?.interactionText || "game-use",
                seq: e.button?.seq,
                seqOld: e.button?.seq
            }),
            this.isPuzzlePiece = e.isPuzzlePiece,
            this.parentBuildingId = this.isPuzzlePiece ? e.parentBuildingId : 0
        }
        if (this.isDoor && t) {
            this.door.canUse = e.door?.canUse,
            this.door.open = e.door?.open,
            this.door.seq = e.door?.seq;
            const p = m.rotate(m.create(s.door?.slideOffset, 0), this.rot + Math.PI * .5);
            this.door.closedPos = e.door?.open ? m.add(e.pos, p) : m.copy(e.pos)
        }
        if (this.isButton && t && (this.button.onOff = e.button?.onOff,
        this.button.canUse = e.button?.canUse,
        this.button.seq = e.button?.seq),
        s.explosion !== void 0 && !this.smokeEmitter && e.healthT < .5 && !e.dead) {
            const p = m.normalize(m.create(1, 1));
            this.smokeEmitter = r.particleBarn.addEmitter("smoke_barrel", {
                pos: this.pos,
                dir: p,
                layer: this.layer
            })
        }
        let a = !1
          , l = this.dead ? s.img.residue : s.img.sprite;
        if (this.isButton && this.button.onOff && !this.dead && s.button?.useImg ? l = s.button.useImg : this.isButton && !this.button.canUse && s.button?.offImg && (l = s.button.offImg),
        l != this.img) {
            let p = m.create(.5, .5);
            this.isDoor && (p = s.door?.spriteAnchor);
            const c = l !== void 0;
            c || this.sprite.parent?.removeChild(this.sprite),
            c && (this.sprite.texture = l == "none" || !l ? X.EMPTY : X.from(l),
            this.sprite.anchor.set(p.x, p.y),
            this.sprite.tint = s.img.tint,
            this.sprite.imgAlpha = this.dead ? .75 : s.img.alpha,
            this.sprite.zOrd = s.img.zIdx,
            this.sprite.zIdx = Math.floor(this.scale * 1e3) * 65535 + this.__id,
            this.sprite.alpha = this.sprite.imgAlpha,
            a = !0),
            this.sprite.visible = c,
            this.img = l
        }
        const h = r.map.getMapDef().biome.valueAdjust;
        a && h < 1 && (this.sprite.tint = y.adjustValue(this.sprite.tint, h))
    }
    getInteraction() {
        return this.isButton && this.button.canUse ? {
            rad: this.button.interactionRad,
            action: this.button.interactionText,
            object: `game-${this.type}`
        } : this.isDoor && this.door.canUse && !this.door.autoOpen ? {
            rad: this.door.interactionRad,
            action: this.door.open ? "game-close-door" : "game-open-door",
            object: ""
        } : null
    }
    update(e, t, i, r, s, a, l) {
        if (this.isButton) {
            const h = this.button;
            if (h.seq != h.seqOld) {
                const p = ce[this.type];
                if (p.button?.useParticle) {
                    const d = j.toAabb(this.collider)
                      , w = m.mul(m.sub(d.max, d.min), .5)
                      , f = m.add(d.min, w)
                      , S = m.mul(m.randomUnit(), y.random(5, 15));
                    r.addParticle(p.button.useParticle, this.layer, f, S)
                }
                const c = this.button.onOff ? p.button?.sound.on : p.button?.sound.off;
                c && s.playSound(c, {
                    channel: "sfx",
                    soundPos: this.pos,
                    layer: this.layer,
                    filter: "muffled"
                })
            }
            h.seqOld = h.seq
        }
        if (this.isDoor) {
            const h = this.door
              , p = h.interpSpeed
              , c = m.sub(this.pos, h.interpPos)
              , d = m.length(c);
            let w = p * e;
            d < w && (w = d);
            const f = d > 1e-4 ? m.div(c, d) : m.create(1, 0);
            h.interpPos = m.add(h.interpPos, m.mul(f, w));
            const S = Math.PI * h.interpSpeed
              , g = k.angleDiff(h.interpRot, this.rot);
            let x = k.sign(g) * S * e;
            if (Math.abs(g) < Math.abs(x) && (x = g),
            h.interpRot += x,
            h.seq != h.seqOld) {
                const v = ce[this.type].door?.sound.change || "";
                v != "" && s.playSound(v, {
                    channel: "sfx",
                    soundPos: this.pos,
                    layer: this.layer,
                    filter: "muffled"
                }),
                h.seqOld = h.seq
            }
            if (h.open != h.wasOpen) {
                const C = ce[this.type]
                  , v = h.open ? C.door?.sound.open : C.door?.sound.close;
                s.playSound(v, {
                    channel: "sfx",
                    soundPos: this.pos,
                    layer: this.layer,
                    filter: "muffled"
                }),
                h.wasOpen = h.open
            }
        }
        if (this.dead && !this.exploded && (t.deadObstacleIds.push(this.__id),
        this.exploded = !0,
        this.smokeEmitter && (this.smokeEmitter.stop(),
        this.smokeEmitter = null),
        !this.isNew)) {
            const h = ce[this.type]
              , p = j.toAabb(this.collider)
              , c = m.mul(m.sub(p.max, p.min), .5)
              , d = m.add(p.min, c)
              , w = Math.floor(y.random(5, 11));
            for (let f = 0; f < w; f++) {
                const S = m.mul(m.randomUnit(), y.random(5, 15))
                  , g = Array.isArray(this.explodeParticle) ? this.explodeParticle[Math.floor(Math.random() * this.explodeParticle.length)] : this.explodeParticle;
                r.addParticle(g, this.layer, d, S)
            }
            s.playSound(h.sound?.explode, {
                channel: "sfx",
                soundPos: d,
                layer: this.layer,
                filter: "muffled"
            })
        }
        if (this.smokeEmitter) {
            const h = this.isSkin ? .3 : .5;
            this.smokeEmitter.pos = m.copy(this.pos),
            this.smokeEmitter.enabled = !this.dead && this.healthT < h
        }
        if (this.sprite.visible && this.img) {
            let h = this.dead ? 5 : this.sprite.zOrd
              , p = this.sprite.zIdx
              , c = this.layer;
            if (!this.dead && h >= 50 && this.layer == 0 && a.layer == 0 && (h += 100,
            c |= 2),
            !this.dead && this.isSkin) {
                const d = i.getPlayerById(this.skinPlayerId);
                d && (h = k.max(k.max(h, d.renderZOrd), 21),
                d.renderLayer != 0 && (c = d.renderLayer,
                h = d.renderZOrd),
                p = d.renderZIdx + 262144)
            }
            l.addPIXIObj(this.sprite, c, h, p),
            this.isDoor && this.door.casingSprite && l.addPIXIObj(this.door.casingSprite, c, h + 1, p)
        }
        this.isNew = !1
    }
    render(e, t, i, r) {
        let s = this.isDoor ? this.door.interpPos : this.pos;
        if (this.isSkin && t.RXZ) {
            this.posInterpTicker += e;
            const c = k.clamp(this.posInterpTicker / t.BYJsJa, 0, 1);
            s = m.lerp(c, this.visualPosOld, this.pos)
        }
        const a = this.isDoor ? this.door.interpRot : this.rot
          , l = this.scale
          , h = t.zEsq(s)
          , p = t.ZaMxGM(l * this.imgScale);
        if (this.sprite.position.set(h.x, h.y),
        this.sprite.scale.set(p, p),
        this.imgMirrorY && (this.sprite.scale.y *= -1),
        this.imgMirrorX && (this.sprite.scale.x *= -1),
        this.sprite.rotation = -a,
        this.isDoor && this.door?.casingSprite) {
            const c = t.zEsq(m.add(this.door.closedPos, this.door.casingSprite.posOffset))
              , d = t.ZaMxGM(l * this.door.casingSprite.imgScale);
            this.door.casingSprite.position.set(c.x, c.y),
            this.door.casingSprite.scale.set(d, d),
            this.door.casingSprite.rotation = -a,
            this.door.casingSprite.visible = !this.dead
        }
    }
}
class Ca {
    __id;
    __type;
    active;
    soundTransitionT;
    soundEnabledT;
    type;
    layer;
    pos;
    rot;
    scale;
    interiorSoundAlt;
    interiorSoundEnabled;
    aabb;
    layers;
    stairs;
    mask;
    RVRwlj() {
        this.soundTransitionT = 0
    }
    TNCQd() {}
    cmyLn(e, t, i, r) {
        if (t) {
            this.type = e.type,
            this.layer = 0,
            this.pos = m.copy(e.pos),
            this.rot = k.oriToRad(e.ori),
            this.scale = 1,
            this.interiorSoundAlt = e.interiorSoundAlt,
            this.interiorSoundEnabled = e.interiorSoundEnabled,
            i && (this.soundTransitionT = this.interiorSoundAlt ? 1 : 0,
            this.soundEnabledT = this.interiorSoundEnabled ? 1 : 0),
            this.aabb = j.transform(Qe.getBoundingCollider(this.type), this.pos, this.rot, this.scale);
            const s = ce[this.type];
            this.layers = [];
            for (let a = 0; a < s.layers.length; a++) {
                const l = s.layers[a]
                  , h = e.layerObjIds[a]
                  , p = l?.inheritOri === void 0 || l.inheritOri
                  , c = l.underground !== void 0 ? l.underground : a == 1
                  , d = m.add(this.pos, l.pos)
                  , w = k.oriToRad(p ? e.ori + l.ori : l.ori)
                  , f = j.transform(Qe.getBoundingCollider(l.type), d, w, 1);
                this.layers.push({
                    objId: h,
                    collision: f,
                    underground: c
                })
            }
            this.stairs = [];
            for (let a = 0; a < s.stairs.length; a++) {
                const l = s.stairs[a]
                  , h = j.transform(l.collision, this.pos, this.rot, this.scale)
                  , p = m.rotate(l.downDir, this.rot)
                  , c = be.splitAabb(h, p);
                this.stairs.push({
                    collision: h,
                    center: m.add(h.min, m.mul(m.sub(h.max, h.min), .5)),
                    downDir: p,
                    downAabb: j.createAabb(c[0].min, c[0].max),
                    upAabb: j.createAabb(c[1].min, c[1].max),
                    noCeilingReveal: !!l.noCeilingReveal,
                    lootOnly: !!l.lootOnly
                })
            }
            this.mask = [];
            for (let a = 0; a < s.mask.length; a++)
                this.mask.push(j.transform(s.mask[a], this.pos, this.rot, this.scale));
            r.renderer.layerMaskDirty = !0
        }
    }
    update(e, t, i, r) {
        ce[this.type].interiorSound && this.updateInteriorSounds(e, t, i, r)
    }
    updateInteriorSounds(e, t, i, r) {
        const s = ce[this.type];
        j.createCircle(i.CYoYrL, .001),
        t.nnNJE.MrrhcR();
        const a = this.layers.length > 0 ? t.getBuildingById(this.layers[0].objId) : null
          , l = this.layers.length > 1 ? t.getBuildingById(this.layers[1].objId) : null
          , h = s.interiorSound?.outsideMaxDist !== void 0 ? s.interiorSound.outsideMaxDist : 10
          , p = s.interiorSound?.outsideVolume !== void 0 ? s.interiorSound.outsideVolume : 0
          , c = s.interiorSound?.undergroundVolume !== void 0 ? s.interiorSound.undergroundVolume : 1;
        let d = 0
          , w = 0;
        if (i.layer != 1) {
            if (a) {
                const v = a.getDistanceToBuilding(i.CYoYrL, h)
                  , b = k.remap(v, h, 0, 0, 1)
                  , M = i.layer & 2
                  , I = a.ceiling.fadeAlpha;
                d = b * (1 - I),
                w = b * I * (M ? c : p)
            }
        } else if (l) {
            const v = l.getDistanceToBuilding(i.CYoYrL, h)
              , b = k.remap(v, h, 0, 0, 1);
            d = 0,
            w = b * c
        }
        const f = s.interiorSound?.transitionTime !== void 0 ? s.interiorSound.transitionTime : 1;
        this.interiorSoundAlt && (this.soundTransitionT = k.clamp(this.soundTransitionT + e / f, 0, 1));
        const S = Math.abs(this.soundTransitionT - .5) * 2;
        this.interiorSoundEnabled || (this.soundEnabledT = k.clamp(this.soundEnabledT - e * .5, 0, 1));
        const g = this.soundTransitionT > .5 ? s.interiorSound?.soundAlt : s.interiorSound?.sound
          , x = r.getTrack("interior_0");
        x.sound = g,
        x.filter = "",
        x.weight = g ? d * S * this.soundEnabledT : 0;
        const C = r.getTrack("interior_1");
        C.sound = g,
        C.filter = s.interiorSound?.filter,
        C.weight = g ? w * S * this.soundEnabledT : 0
    }
    render(e, t, i) {}
    insideStairs(e) {
        for (let t = 0; t < this.stairs.length; t++)
            if (j.intersect(this.stairs[t]?.collision, e))
                return !0;
        return !1
    }
    insideMask(e) {
        for (let t = 0; t < this.mask.length; t++)
            if (j.intersect(this.mask[t], e))
                return !0;
        return !1
    }
}
function pt(o, e, t) {
    o.moveTo(e.x, e.y),
    o.lineTo(t.x, t.y)
}
function st(o, e) {
    let t = e[0];
    o.moveTo(t.x, t.y);
    for (let i = 1; i < e.length; ++i)
        t = e[i],
        o.lineTo(t.x, t.y);
    o.closePath()
}
function Ki(o, e, t) {
    const i = e.max.x - e.min.x
      , r = e.max.y - e.min.y
      , s = k.max(e.offsetDist, .001)
      , a = e.roughness
      , l = Math.round(i * a / s)
      , h = Math.round(r * a / s)
      , p = y.seededRand(t);
    st(o, Rr(e, l, h, s, p))
}
class Fr {
    constructor(e) {
        this.decalBarn = e
    }
    display = {
        ground: new Me
    };
    mapName = "";
    mapDef = {};
    factionMode = !1;
    perkMode = !1;
    turkeyMode = !1;
    seed = 0;
    width = 0;
    height = 0;
    mapData = {
        places: [],
        objects: [],
        groundPatches: []
    };
    mapLoaded = !1;
    mapTexture = null;
    WUiyA = new Ne(Ta);
    nnNJE = new Ne(Ma);
    ZIeX = new Ne(Ca);
    deadObstacleIds = [];
    deadCeilingIds = [];
    solvedPuzzleIds = [];
    lootDropSfxIds = [];
    terrain = null;
    cameraEmitter = null;
    TNCQd() {
        const e = this.nnNJE.MrrhcR();
        for (let t = 0; t < e.length; t++)
            e[t].TNCQd();
        this.mapTexture?.destroy(!0),
        this.display.ground.destroy({
            children: !0
        }),
        this.cameraEmitter?.stop(),
        this.cameraEmitter = null
    }
    resize(e, t) {
        this.renderMap(e, t)
    }
    loadMap(e, t, i, r) {
        this.mapName = e.mapName;
        const s = Pt[this.mapName];
        if (!s)
            throw new Error(`Failed loading mapDef ${this.mapName}`);
        this.mapDef = y.cloneDeep(s),
        this.factionMode = !!this.mapDef.gameMode.factionMode,
        this.perkMode = !!this.mapDef.gameMode.perkMode,
        this.turkeyMode = !!this.mapDef.gameMode.turkeyMode,
        this.seed = e.seed,
        this.width = e.width,
        this.height = e.height,
        this.terrain = _a(this.width, this.height, e.shoreInset, e.grassInset, e.rivers, this.seed),
        this.mapData = {
            places: e.places,
            objects: e.objects,
            groundPatches: e.groundPatches
        },
        this.mapLoaded = !0;
        const a = this.mapDef.biome.particles.camera;
        if (a) {
            const l = m.normalize(m.create(1, -1));
            this.cameraEmitter?.stop(),
            this.cameraEmitter = r.addEmitter(a, {
                pos: m.create(0, 0),
                dir: l,
                layer: 99999
            })
        }
        this.display.ground.clear(),
        this.renderTerrain(this.display.ground, 2 / t.oPtaok, i, !1)
    }
    getMapDef() {
        if (!this.mapLoaded)
            throw new Error("Map not loaded!");
        return this.mapDef
    }
    getMapTexture() {
        return this.mapTexture
    }
    pprlB(e, t, i, r, s, a, l, h, p, c) {
        const d = this.WUiyA.MrrhcR();
        for (let f = 0; f < d.length; f++) {
            const S = d[f];
            S.active && (S.update(e, this, i, r, s, t, l),
            S.render(e, h, c, t.layer))
        }
        const w = this.nnNJE.MrrhcR();
        for (let f = 0; f < w.length; f++) {
            const S = w[f];
            S.active && (S.pprlB(e, this, r, s, t, l, h, c),
            S.render(h, c, t.layer))
        }
        for (let f = this.ZIeX.MrrhcR(), S = 0; S < f.length; S++) {
            const g = f[S];
            g.active && (g.update(e, this, t, a),
            g.render(h, c, t.layer))
        }
        if (this.cameraEmitter) {
            this.cameraEmitter.pos = m.copy(h.CYoYrL),
            this.cameraEmitter.enabled = !0;
            const f = 120
              , S = t.eWzz() * 2.5;
            this.cameraEmitter.radius = k.min(S, f);
            const g = this.cameraEmitter.radius
              , x = g * g / (f * f);
            this.cameraEmitter.rateMult = 1 / x;
            const C = t.layer == 0 ? 1 : 0;
            this.cameraEmitter.alpha = k.lerp(e * 6, this.cameraEmitter.alpha, C)
        }
    }
    renderTerrain(e, t, i, r) {
        const s = this.width
          , a = this.height
          , l = this.terrain
          , h = {
            x: 0,
            y: 0
        }
          , p = {
            x: s,
            y: 0
        }
          , c = {
            x: 0,
            y: a
        }
          , d = {
            x: s,
            y: a
        }
          , w = this.mapDef.biome.colors
          , f = this.mapData.groundPatches;
        e.beginFill(w.background),
        e.drawRect(-120, -120, s + 240, 120),
        e.drawRect(-120, a, s + 240, 120),
        e.drawRect(-120, -120, 120, a + 240),
        e.drawRect(s, -120, 120, a + 240),
        e.endFill(),
        e.beginFill(w.beach),
        st(e, l?.shore),
        e.beginHole(),
        st(e, l?.grass),
        e.endHole(),
        e.endFill(),
        i && (e.beginFill(w.grass),
        st(e, l?.grass),
        e.endFill());
        for (let g = 0; g < f.length; g++) {
            const x = f[g];
            x.order == 0 && (!r || x.useAsMapShape) && (e.beginFill(x.color),
            Ki(e, x, this.seed),
            e.endFill())
        }
        e.beginFill(w.riverbank);
        for (let g = 0; g < l.rivers.length; g++)
            st(e, l.rivers[g].shorePoly);
        e.endFill(),
        e.beginFill(w.water);
        for (let g = 0; g < l.rivers.length; g++)
            st(e, l.rivers[g].waterPoly);
        e.endFill(),
        e.beginFill(w.water),
        e.moveTo(c.x, c.y),
        e.lineTo(d.x, d.y),
        e.lineTo(p.x, p.y),
        e.lineTo(h.x, h.y),
        e.beginHole(),
        st(e, l.shore),
        e.endHole(),
        e.closePath(),
        e.endFill();
        const S = e;
        S.lineStyle(t, 0, .15);
        for (let g = 0; g <= s; g += O.map.gridSize)
            pt(S, {
                x: g,
                y: 0
            }, {
                x: g,
                y: a
            });
        for (let g = 0; g <= a; g += O.map.gridSize)
            pt(S, {
                x: 0,
                y: g
            }, {
                x: s,
                y: g
            });
        S.lineStyle(t, 0, 0);
        for (let g = 0; g < f.length; g++) {
            const x = f[g];
            x.order == 1 && (!r || x.useAsMapShape) && (e.beginFill(x.color),
            Ki(e, x, this.seed),
            e.endFill())
        }
    }
    YOuM(e) {
        const t = e.zEsq(m.create(0, 0))
          , i = e.zEsq(m.create(1, 1))
          , r = m.sub(i, t);
        this.display.ground.position.set(t.x, t.y),
        this.display.ground.scale.set(r.x, r.y)
    }
    getMinimapRender(e) {
        const t = ce[e.type]
          , i = t.type == "building" ? 750 + (t.zIdx || 0) : t.img.zIdx || 0;
        let r = [];
        if (t.map?.shapes !== void 0)
            r = t.map?.shapes;
        else {
            let s = null;
            (s = t.type == "obstacle" ? t.collision : t.ceiling.zoomRegions.length > 0 && t.ceiling.zoomRegions[0].zoomIn ? t.ceiling.zoomRegions[0].zoomIn : Qe.getBoundingCollider(e.type)) && r.push({
                collider: j.copy(s),
                scale: t.map?.scale || 1,
                color: t.map?.color
            })
        }
        return {
            obj: e,
            zIdx: i,
            shapes: r
        }
    }
    renderMap(e, t) {
        if (this.mapLoaded) {
            const i = new J
              , r = new J
              , s = this.mapDef.biome.colors
              , a = this.mapData.places
              , l = this.mapData.objects;
            let h = D.screenHeight;
            D.mobile && (D.isLandscape || (h = D.screenWidth),
            h *= k.min(D.pixelRatio, 2));
            const p = this.height / h
              , c = new Me;
            c.beginFill(s.grass),
            c.drawRect(0, 0, this.width, this.height),
            c.endFill(),
            this.renderTerrain(c, p, t, !0);
            const d = {
                x: 0,
                y: 0
            }
              , w = {
                x: this.width,
                y: 0
            }
              , f = {
                x: 0,
                y: this.height
            }
              , S = {
                x: this.width,
                y: this.height
            };
            c.lineStyle(p * 2, 0, 1),
            pt(c, d, f),
            pt(c, f, S),
            pt(c, S, w),
            pt(c, w, d),
            c.position.y = this.height,
            c.scale.y = -1,
            i.addChild(c);
            const g = [];
            for (let v = 0; v < l.length; v++) {
                const b = l[v];
                g.push(this.getMinimapRender(b))
            }
            g.sort( (v, b) => v.zIdx - b.zIdx);
            const x = new Me;
            for (let v = 0; v < g.length; v++) {
                const b = g[v]
                  , M = b.obj;
                for (let I = 0; I < b.shapes.length; I++) {
                    const B = b.shapes[I]
                      , z = j.transform(B.collider, M.pos, k.oriToRad(M.ori), M.scale)
                      , P = B.scale !== void 0 ? B.scale : 1;
                    switch (x.beginFill(B.color, 1),
                    z.type) {
                    case j.Type.Circle:
                        x.drawCircle(z.pos.x, this.height - z.pos.y, z.rad * P);
                        break;
                    case j.Type.Aabb:
                        {
                            let _ = m.mul(m.sub(z.max, z.min), .5);
                            const T = m.add(z.min, _);
                            _ = m.mul(_, P),
                            x.drawRect(T.x - _.x, this.height - T.y - _.y, _.x * 2, _.y * 2),
                            x.endFill()
                        }
                    }
                }
            }
            i.addChild(x);
            const C = new J;
            for (let v = 0; v < a.length; v++) {
                const b = a[v]
                  , M = new os({
                    fontFamily: "Arial",
                    fontSize: D.mobile ? 20 : 22,
                    fontWeight: "bold",
                    fill: ["#ffffff"],
                    stroke: "#000000",
                    strokeThickness: 1,
                    dropShadow: !0,
                    dropShadowColor: "#000000",
                    dropShadowBlur: 1,
                    dropShadowAngle: Math.PI / 3,
                    dropShadowDistance: 1,
                    wordWrap: !1,
                    align: "center"
                })
                  , I = new ot(b.name,M);
                I.anchor.set(.5, .5),
                I.x = b.pos.x * this.height / p,
                I.y = b.pos.y * this.height / p,
                I.alpha = .75,
                C.addChild(I)
            }
            r.addChild(C),
            this.mapTexture ? this.mapTexture.resize(h, h) : this.mapTexture = ls.create({
                width: h,
                height: h,
                scaleMode: ns.LINEAR,
                resolution: 1
            }),
            i.scale = new vi(h / this.height,h / this.height),
            e.render(i, {
                renderTexture: this.mapTexture,
                clear: !0
            }),
            e.render(r, {
                renderTexture: this.mapTexture,
                clear: !1
            }),
            i.destroy({
                children: !0,
                texture: !0,
                baseTexture: !0
            }),
            r.destroy({
                children: !0,
                texture: !0,
                baseTexture: !0
            })
        }
    }
    getGroundSurface(e, t) {
        const i = (c, d={}) => {
            if (c == "water") {
                const w = this.getMapDef().biome.colors;
                d.waterColor = d.waterColor !== void 0 ? d.waterColor : w.water,
                d.rippleColor = d.rippleColor !== void 0 ? d.rippleColor : w.waterRipple
            }
            return {
                type: c,
                data: d
            }
        }
          , r = this.decalBarn.decalPool.MrrhcR();
        for (let c = 0; c < r.length; c++) {
            const d = r[c];
            if (d.active && d.surface && y.sameLayer(d.layer, t) && j.intersectCircle(d.collider, e, 1e-4))
                return i(d.surface.type, d.surface.data)
        }
        let s = null
          , a = 0;
        const l = t & 2
          , h = this.nnNJE.MrrhcR();
        for (let c = 0; c < h.length; c++) {
            const d = h[c];
            if (d.active && d.zIdx >= a && (d.layer == t || l) && (d.layer != 1 || !l))
                for (let w = 0; w < d.surfaces.length; w++) {
                    const f = d.surfaces[w];
                    for (let S = 0; S < f.colliders.length; S++)
                        if (j.intersectCircle(f.colliders[S], e, 1e-4)) {
                            a = d.zIdx,
                            s = f;
                            break
                        }
                }
        }
        if (s)
            return i(s.type, s.data);
        let p = !1;
        if (t != 1) {
            const c = this.terrain?.rivers;
            for (let d = 0; d < c.length; d++) {
                const w = c[d];
                if (be.testPointAabb(e, w.aabb.min, w.aabb.max) && k.pointInsidePolygon(e, w.shorePoly) && (p = !0,
                k.pointInsidePolygon(e, w.waterPoly)))
                    return i("water", {
                        river: w
                    })
            }
        }
        return i(k.pointInsidePolygon(e, this.terrain?.grass) ? p ? this.mapDef.biome.sound.riverShore : "grass" : k.pointInsidePolygon(e, this.terrain?.shore) ? "sand" : "water")
    }
    isInOcean(e) {
        return !k.pointInsidePolygon(e, this.terrain?.shore)
    }
    distanceToShore(e) {
        return k.distToPolygon(e, this.terrain?.shore)
    }
    insideStructureStairs(e) {
        const t = this.ZIeX.MrrhcR();
        for (let i = 0; i < t.length; i++) {
            const r = t[i];
            if (r.active && r.insideStairs(e))
                return !0
        }
        return !1
    }
    getBuildingById(e) {
        const t = this.nnNJE.MrrhcR();
        for (let i = 0; i < t.length; i++) {
            const r = t[i];
            if (r.active && r.__id == e)
                return r
        }
        return null
    }
    insideStructureMask(e) {
        const t = this.ZIeX.MrrhcR();
        for (let i = 0; i < t.length; i++) {
            const r = t[i];
            if (r.active && r.insideMask(e))
                return !0
        }
        return !1
    }
    insideBuildingCeiling(e, t) {
        const i = this.nnNJE.MrrhcR();
        for (let r = 0; r < i.length; r++) {
            const s = i[r];
            if (s.active && (!t || s.ceiling.visionTicker > 0 && !s.ceilingDead) && s.isInsideCeiling(e))
                return !0
        }
        return !1
    }
}
class Pa {
    __id;
    __type;
    active;
    sprite = new ae;
    playedLandFx;
    landed;
    fallInstance;
    chuteDeployed;
    soundUpdateThrottle;
    pos;
    isNew;
    fallTicker;
    rad;
    constructor() {
        this.sprite.anchor.set(.5, .5),
        this.sprite.visible = !1
    }
    RVRwlj() {
        this.playedLandFx = !1,
        this.landed = !1,
        this.fallInstance = null,
        this.chuteDeployed = !1,
        this.soundUpdateThrottle = 0,
        this.pos = m.create(0, 0),
        this.isNew = !1,
        this.fallTicker = 0
    }
    TNCQd() {
        this.fallInstance?.stop(),
        this.fallInstance = null,
        this.sprite.visible = !1
    }
    cmyLn(e, t, i, r) {
        if (i) {
            this.isNew = !0,
            this.fallTicker = e.fallT * O.airdrop.fallTime;
            const s = r.map.getMapDef().biome.airdrop.airdropImg;
            this.sprite.texture = X.from(s)
        }
        t && (this.pos = m.copy(e.pos)),
        this.landed = e.landed
    }
}
class La {
    airdropPool = new Ne(Pa);
    TNCQd() {
        const e = this.airdropPool.MrrhcR();
        for (let t = 0; t < e.length; t++)
            e[t].TNCQd()
    }
    pprlB(e, t, i, r, s, a, l) {
        const h = this.airdropPool.MrrhcR();
        for (let p = 0; p < h.length; p++) {
            const c = h[p];
            if (!c.active)
                continue;
            c.fallTicker += e;
            const d = k.clamp(c.fallTicker / O.airdrop.fallTime, 0, 1);
            let w = 0;
            if ((y.sameLayer(w, t.layer) || t.layer & 2) && (!(t.layer & 2) || !r.insideStructureMask(j.createCircle(c.pos, 1))) && (w |= 2),
            c.landed && !c.playedLandFx && (c.playedLandFx = !0,
            !c.isNew)) {
                for (let C = 0; C < 10; C++) {
                    const v = m.randomUnit();
                    s.addParticle("airdropSmoke", w, c.pos, v)
                }
                const g = r.getGroundSurface(c.pos, w);
                if (g.type == "water")
                    for (let C = 0; C < 12; C++) {
                        const v = m.add(c.pos, m.mul(m.randomUnit(), y.random(4.5, 6)));
                        s.addRippleParticle(v, w, g.data.rippleColor).setDelay(C * .075)
                    }
                const x = g.type == "water" ? "airdrop_crash_02" : "airdrop_crash_01";
                l.playSound(x, {
                    channel: "sfx",
                    soundPos: c.pos,
                    layer: w,
                    filter: "muffled"
                }),
                l.stopSound(c.fallInstance),
                c.fallInstance = null
            }
            !c.chuteDeployed && d <= .1 && (l.playSound("airdrop_chute_01", {
                channel: "sfx",
                soundPos: c.pos,
                layer: w,
                rangeMult: 1.75
            }),
            c.chuteDeployed = !0),
            !c.landed && !c.fallInstance && (c.fallInstance = l.playSound("airdrop_fall_01", {
                channel: "sfx",
                soundPos: c.pos,
                layer: w,
                rangeMult: 1.75,
                ignoreMinAllowable: !0,
                offset: c.fallTicker
            })),
            c.fallInstance && c.soundUpdateThrottle < 0 ? (c.soundUpdateThrottle = .1,
            l.updateSound(c.fallInstance, "sfx", c.pos, {
                layer: w,
                rangeMult: 1.75,
                ignoreMinAllowable: !0
            })) : c.soundUpdateThrottle -= e,
            c.rad = k.lerp((1 - d) ** 1.1, 5, 12),
            a.addPIXIObj(c.sprite, w, 1500, c.__id);
            const f = i.zEsq(c.pos)
              , S = i.ZaMxGM(2 * c.rad / i.oPtaok);
            c.sprite.position.set(f.x, f.y),
            c.sprite.scale.set(S, S),
            c.sprite.tint = 16776960,
            c.sprite.alpha = 1,
            c.sprite.visible = !c.landed,
            c.isNew = !1
        }
    }
}
function Da(o, e, t, i, r) {
    Yt[o.bulletType].addFlare ? t.addFlare(o, i) : e.addBullet(o, i, r)
}
function xi(o, e, t, i, r, s, a) {
    const l = Math.floor(y.random(1, 2));
    let h = m.mul(i, 9.5);
    for (let p = 0; p < l; p++)
        h = m.rotate(h, (Math.random() - .5) * Math.PI / 3),
        s.addParticle(o, r, t, h);
    a.playGroup(e, {
        channel: "hits",
        soundPos: t,
        layer: r,
        filter: "muffled"
    })
}
class Aa {
    bullets = [];
    tracerColors = {};
    onMapLoad(e) {
        this.tracerColors = y.mergeDeep(O.tracerColors, e.getMapDef().biome.tracerColors)
    }
    addBullet(e, t, i) {
        let r = null;
        for (let S = 0; S < this.bullets.length; S++)
            if (!this.bullets[S].alive && !this.bullets[S].collided) {
                r = this.bullets[S];
                break
            }
        r || (r = {},
        r.alive = !1,
        r.container = new J,
        r.container.pivot.set(14.5, 0),
        r.container.visible = !1,
        r.bulletTrail = ae.from("player-bullet-trail-02.img"),
        r.bulletTrail.anchor.set(.5, .5),
        r.container.addChild(r.bulletTrail),
        this.bullets.push(r));
        const s = Yt[e.bulletType]
          , a = 1 + e.varianceT * s.variance
          , l = k.remap(e.distAdjIdx, 0, 16, -1, 1);
        let h = s.distance / Math.pow(O.bullet.reflectDistDecay, e.reflectCount);
        e.clipDistance && (h = e.distance),
        r.alive = !0,
        r.isNew = !0,
        r.collided = !1,
        r.scale = 1,
        r.playerId = e.playerId,
        r.startPos = m.copy(e.pos),
        r.pos = m.copy(e.pos),
        r.dir = m.copy(e.dir),
        r.layer = e.layer,
        r.speed = s.speed * a,
        r.distance = h * a + l,
        r.damageSelf = s.shrapnel || e.reflectCount > 0,
        r.reflectCount = e.reflectCount,
        r.reflectObjId = e.reflectObjId,
        r.whizHeard = !1;
        const p = Math.atan2(r.dir.x, r.dir.y);
        r.container.rotation = p - Math.PI / 2,
        r.layer = e.layer;
        const c = t.getPlayerById(r.playerId);
        c && c.layer & 2 && (r.layer |= 2);
        let d = s.tracerWidth;
        e.trailSmall && (d *= .5),
        e.trailThick && (d *= 2),
        r.bulletTrail.scale.set(.8, d),
        r.tracerLength = s.tracerLength,
        r.suppressed = !!s.suppressed;
        const w = this.tracerColors[s.tracerColor];
        let f = w.regular;
        e.apRounds ? f = w.apSaturated : e.trailSaturated ? f = w.chambered || w.saturated : c?.surface?.data.isBright && (f = w.saturated),
        r.bulletTrail.tint = f,
        r.tracerAlphaRate = w.alphaRate,
        r.tracerAlphaMin = w.alphaMin,
        r.bulletTrail.alpha = 1,
        r.reflectCount > 0 && (r.bulletTrail.alpha *= .5),
        r.container.visible = !0,
        i.addPIXIObj(r.container, r.layer, 20)
    }
    pprlB(e, t, i, r, s, a, l, h) {
        const p = t.playerPool.MrrhcR();
        for (let c = 0; c < this.bullets.length; c++) {
            const d = this.bullets[c];
            if (d.collided && (d.scale = k.max(d.scale - e * 6, 0),
            d.scale <= 0 && (d.collided = !1,
            d.container.visible = !1)),
            d.alive) {
                const w = d.distance - m.length(m.sub(d.startPos, d.pos))
                  , f = k.min(w, e * d.speed)
                  , S = m.copy(d.pos);
                if (d.pos = m.add(d.pos, m.mul(d.dir, f)),
                !s.GoI.mSk && y.sameAudioLayer(s.layer, d.layer) && m.length(m.sub(r.CYoYrL, d.pos)) < 7.5 && !d.whizHeard && d.playerId != s.__id && (h.playGroup("bullet_whiz", {
                    soundPos: d.pos,
                    fallOff: 4
                }),
                d.whizHeard = !0),
                d.tracerAlphaRate && d.suppressed) {
                    const M = d.tracerAlphaRate;
                    d.bulletTrail.alpha = k.max(d.tracerAlphaMin, d.bulletTrail.alpha * M)
                }
                const g = []
                  , x = i.WUiyA.MrrhcR();
                for (let M = 0; M < x.length; M++) {
                    const I = x[M];
                    if (I.active && !I.dead && y.sameLayer(I.layer, d.layer) && I.height >= O.bullet.height && (d.reflectCount <= 0 || I.__id != d.reflectObjId)) {
                        const B = j.intersectSegment(I.collider, S, d.pos);
                        B && g.push({
                            type: "obstacle",
                            obstacleType: I.type,
                            collidable: I.collidable,
                            point: B.point,
                            normal: B.normal
                        })
                    }
                }
                for (let M = 0; M < p.length; M++) {
                    const I = p[M];
                    if (I.active && !I.GoI.mSk && (y.sameLayer(I.GoI.ioiPGC, d.layer) || I.GoI.ioiPGC & 2) && (I.__id != d.playerId || d.damageSelf)) {
                        let B = null;
                        if (I.dYrM()) {
                            const P = I
                              , _ = P.LYR()
                              , T = k.transformSegment(_.p0, _.p1, P.QsaRIx, P.nkY)
                              , N = k.transformSegment(_.p0, _.p1, P.CYoYrL, P.YYuRBq)
                              , A = be.intersectSegmentSegment(S, d.pos, T.p0, T.p1)
                              , W = be.intersectSegmentSegment(S, d.pos, N.p0, N.p1) || A;
                            if (W) {
                                const E = m.normalize(m.perp(m.sub(N.p1, N.p0)));
                                B = {
                                    point: W.point,
                                    normal: E
                                }
                            }
                        }
                        const z = be.intersectSegmentCircle(S, d.pos, I.CYoYrL, I.XZe);
                        if (z && (!B || m.length(m.sub(z.point, d.startPos)) < m.length(m.sub(B.point, d.startPos))) ? (g.push({
                            type: "player",
                            player: I,
                            point: z.point,
                            normal: z.normal,
                            layer: I.layer,
                            collidable: !0
                        }),
                        I.dhMGuW("steelskin") && g.push({
                            type: "pan",
                            point: m.add(z.point, m.mul(z.normal, .1)),
                            normal: z.normal,
                            layer: I.layer,
                            collidable: !1
                        })) : B && g.push({
                            type: "pan",
                            point: B.point,
                            normal: B.normal,
                            layer: I.layer,
                            collidable: !0
                        }),
                        z || B)
                            break
                    }
                }
                for (let M = 0; M < g.length; M++) {
                    const I = g[M];
                    I.dist = m.length(m.sub(I.point, S))
                }
                g.sort( (M, I) => M.dist - I.dist);
                let C = !1;
                const v = t.getPlayerById(d.playerId);
                v && (v.GoI.mSk || v.GoI.GXEH) && (C = !0);
                let b = !1;
                for (let M = 0; M < g.length; M++) {
                    const I = g[M];
                    if (I.type == "obstacle") {
                        const B = ce[I?.obstacleType];
                        xi(B.hitParticle, B.sound.bullet, I.point, I.normal, d.layer, l, h),
                        b = I.collidable
                    } else if (I.type == "player") {
                        if (!C) {
                            const B = I.player;
                            if (i.turkeyMode && v?.dhMGuW("turkey_shoot")) {
                                const P = m.mul(m.randomUnit(), y.random(3, 6));
                                l.addParticle("turkeyFeathersHit", B.layer, B.CYoYrL, P)
                            }
                            const z = m.sub(I.point, B?.CYoYrL);
                            z.y *= -1,
                            l.addParticle("bloodSplat", B.layer, m.mul(z, r.oPtaok), m.create(0, 0), 1, 1, B.container),
                            h.playGroup("player_bullet_hit", {
                                soundPos: B.CYoYrL,
                                fallOff: 1,
                                layer: B.layer,
                                filter: "muffled"
                            })
                        }
                        b = I.collidable
                    } else
                        I.type == "pan" && (xi("barrelChip", U.pan.sound.bullet, I.point, I.normal, I.layer, l, h),
                        b = I.collidable);
                    if (b) {
                        d.pos = I.point;
                        break
                    }
                }
                if (!(d.layer & 2)) {
                    const M = i.ZIeX.MrrhcR();
                    let I = d.layer;
                    for (let B = 0; B < M.length; B++) {
                        const z = M[B];
                        if (z.active) {
                            let P = !1
                              , _ = !1;
                            for (let T = 0; T < z.stairs.length; T++) {
                                const N = z.stairs[T];
                                if (!N?.lootOnly && j.intersectSegment(N?.collision, d.pos, S)) {
                                    P = !0;
                                    break
                                }
                            }
                            for (let T = 0; T < z.mask.length; T++)
                                if (j.intersectSegment(z.mask[T], d.pos, S)) {
                                    _ = !0;
                                    break
                                }
                            P && !_ && (I |= 2)
                        }
                    }
                    I != d.layer && (d.layer = I,
                    a.addPIXIObj(d.container, d.layer, 20))
                }
                (b || k.eqAbs(w, f)) && (d.collided = !0,
                d.alive = !1),
                d.isNew = !1
            }
        }
    }
    createBulletHit(e, t, i) {
        const r = e.getPlayerById(t);
        r && i.playGroup("player_bullet_hit", {
            soundPos: r.CYoYrL,
            fallOff: 1,
            layer: r.layer,
            filter: "muffled"
        })
    }
    YOuM(e) {
        for (let t = 0; t < this.bullets.length; t++) {
            const i = this.bullets[t];
            if (i.alive || i.collided) {
                const r = m.length(m.sub(i.pos, i.startPos))
                  , s = e.zEsq(i.pos);
                i.container.position.set(s.x, s.y);
                const a = e.ZaMxGM(1)
                  , l = k.min(i.tracerLength * 15, r / 2);
                i.container.scale.set(a * l * i.scale, a)
            }
        }
    }
}
function Ba() {
    const o = {
        fontFamily: "Arial",
        fontWeight: "bold",
        fontSize: D.pixelRatio > 1 ? 30 : 24,
        align: "center",
        fill: 16777215,
        stroke: 0,
        strokeThickness: 0,
        dropShadow: !0,
        dropShadowColor: "#000000",
        dropShadowBlur: 1,
        dropShadowAngle: Math.PI / 3,
        dropShadowDistance: 1
    }
      , e = new ot("",o);
    return e.anchor.set(.5, .5),
    e.scale.set(.5, .5),
    e
}
class Ea {
    __id;
    __type;
    active = !1;
    pos = m.create(0, 0);
    container = new J;
    sprite = ae.from("skull.img");
    nameText = Ba();
    nameTextSet;
    layer;
    playerId;
    constructor() {
        this.container.addChild(this.sprite),
        this.sprite.anchor.set(.5, .5),
        this.sprite.scale.set(.4, .4),
        this.sprite.tint = 5921370,
        this.nameText.anchor.set(.5, -1),
        this.nameText.tint = y.rgbToInt(y.hsvToRgb(0, 0, .5)),
        this.container.addChild(this.nameText),
        this.container.visible = this.sprite
    }
    RVRwlj() {}
    TNCQd() {
        this.container.visible = !1
    }
    cmyLn(e, t, i, r) {
        this.pos = m.copy(e.pos),
        t && (this.layer = e.layer,
        this.playerId = e.playerId),
        i && (this.nameTextSet = !1,
        this.container.visible = !0)
    }
}
class Ra {
    deadBodyPool = new Ne(Ea);
    pprlB(e, t, i, r, s, a) {
        const l = this.deadBodyPool.MrrhcR();
        for (let h = 0; h < l.length; h++) {
            const p = l[h];
            if (p.active) {
                p.nameTextSet || (p.nameText.text = t.getPlayerName(p.playerId, i.__id, !1),
                p.nameTextSet = !0);
                const c = j.createCircle(p.pos, 1)
                  , d = r.insideStructureStairs(c);
                let w = p.layer
                  , f = 12;
                p.layer == 0 && i.layer == 0 && d && (w |= 2,
                f += 100),
                a.addPIXIObj(p.container, w, f, p.__id);
                const S = s.zEsq(p.pos)
                  , g = s.ZaMxGM(1);
                p.container.position.set(S.x, S.y),
                p.container.scale.set(g, g)
            }
        }
    }
    getDeadBodyById(e) {
        const t = this.deadBodyPool.MrrhcR();
        for (let i = 0; i < t.length; i++) {
            const r = t[i];
            if (r.active && r.playerId == e)
                return r
        }
        return null
    }
}
function oi(o, e, t) {
    return o == 0 ? e : o == 1 ? t : y.lerpColor(o, e, t)
}
class Oa {
    __id;
    __type;
    active;
    decalRender = null;
    isNew;
    goreT;
    hasGore;
    type;
    pos;
    rot;
    scale;
    layer;
    goreKills;
    collider;
    surface;
    RVRwlj() {
        this.isNew = !1,
        this.goreT = 0
    }
    TNCQd() {
        this.decalRender && (this.decalRender.free(),
        this.decalRender = null)
    }
    cmyLn(e, t, i, r) {
        if (t) {
            const s = ce[e.type];
            this.type = e.type,
            this.pos = m.copy(e.pos),
            this.rot = k.oriToRad(e.ori),
            this.scale = e.scale,
            this.layer = e.layer,
            this.goreKills = e.goreKills,
            this.collider = j.transform(s.collision, this.pos, this.rot, this.scale),
            this.surface = s.surface ? y.cloneDeep(s.surface) : null,
            this.hasGore = s.gore !== void 0,
            this.isNew = i,
            this.isNew && (this.decalRender = r.decalBarn.allocDecalRender(),
            this.decalRender.init(this, r.map))
        }
    }
    update(e) {
        if (this.hasGore) {
            const t = ce[this.type];
            let i = k.delerp(this.goreKills, t.gore?.fade.start, t.gore?.fade.end);
            if (i = Math.pow(i, t.gore?.fade.pow),
            this.goreT = this.isNew ? i : k.lerp(e * t.gore?.fade.speed, this.goreT, i),
            t.gore?.tint !== void 0) {
                const r = oi(this.goreT, t.img.tint, t.gore.tint);
                this.decalRender.setTint(r)
            }
            t.gore?.alpha !== void 0 && (this.decalRender.spriteAlpha = k.lerp(this.goreT, t.img.alpha, t.gore.alpha)),
            t.gore?.waterColor !== void 0 && this.surface && (this.surface.data.waterColor = oi(this.goreT, t.surface?.data.waterColor, t.gore.waterColor)),
            t.gore?.rippleColor !== void 0 && this.surface && (this.surface.data.rippleColor = oi(this.goreT, t.surface?.data.rippleColor, t.gore.rippleColor))
        }
        this.isNew = !1
    }
}
class Fa {
    sprite = new ae;
    pos;
    rot;
    scale;
    layer;
    zIdx;
    zOrd;
    imgScale;
    spriteAlpha;
    valueAdjust;
    inWater;
    flicker;
    flickerMin;
    flickerMax;
    flickerTarget;
    flickerRate;
    flickerCooldown;
    active;
    deactivated;
    fadeout;
    fadeAlpha;
    constructor() {
        this.sprite.anchor.set(.5, .5),
        this.sprite.visible = !1
    }
    init(e, t) {
        const i = ce[e.type];
        this.pos = m.copy(e.pos),
        this.rot = e.rot,
        this.scale = e.scale,
        this.layer = e.layer,
        this.zIdx = i.img.zIdx,
        this.zOrd = e.__id;
        const r = i.img;
        if (this.sprite.texture = X.from(r.sprite),
        this.sprite.alpha = 1,
        this.sprite.visible = !0,
        this.imgScale = i.img.scale,
        this.spriteAlpha = r.alpha,
        this.valueAdjust = r.ignoreAdjust ? 1 : t.getMapDef().biome.valueAdjust,
        this.setTint(r.tint),
        this.inWater = !1,
        i.height < .25) {
            const s = t.getGroundSurface(e.pos, e.layer);
            this.inWater = s.type == "water"
        }
        this.flicker = i.img.flicker,
        this.flicker && (this.flickerMin = i.img.flickerMin,
        this.flickerMax = i.img.flickerMax,
        this.flickerTarget = this.imgScale,
        this.flickerRate = i.img.flickerRate,
        this.flickerCooldown = 0),
        this.active = !0,
        this.deactivated = !1,
        this.fadeout = i.lifetime !== void 0,
        this.fadeAlpha = 1
    }
    free() {
        this.deactivated = !0
    }
    setTint(e) {
        this.valueAdjust < 1 && (e = y.adjustValue(e, this.valueAdjust)),
        this.sprite.tint = e
    }
    update(e, t, i) {
        this.deactivated && this.fadeout && (this.fadeAlpha = k.lerp(e * 3, this.fadeAlpha, 0),
        this.fadeAlpha < .01 && (this.fadeAlpha = 0)),
        this.deactivated && (!this.fadeout || k.eqAbs(this.fadeAlpha, 0)) && (this.sprite.visible = !1,
        this.active = !1),
        this.flicker && (this.flickerCooldown < 0 ? (this.flickerTarget = y.random(this.flickerMin, this.flickerMax),
        this.flickerCooldown = y.random(.05, this.flickerRate)) : (this.imgScale = k.lerp(this.flickerRate - this.flickerCooldown, this.imgScale, this.flickerTarget),
        this.flickerCooldown -= e));
        const r = t.zEsq(this.pos)
          , s = t.ZaMxGM(this.scale * this.imgScale);
        this.sprite.position.set(r.x, r.y),
        this.sprite.scale.set(s, s),
        this.sprite.rotation = -this.rot,
        this.sprite.alpha = this.spriteAlpha * (this.inWater ? .3 : 1) * this.fadeAlpha,
        i.addPIXIObj(this.sprite, this.layer, this.zIdx, this.zOrd)
    }
}
class Gr {
    decalPool = new Ne(Oa);
    decalRenders = [];
    allocDecalRender() {
        let e = null;
        for (let t = 0; t < this.decalRenders.length; t++) {
            const i = this.decalRenders[t];
            if (!i.active) {
                e = i;
                break
            }
        }
        return e || (e = new Fa,
        this.decalRenders.push(e)),
        e
    }
    pprlB(e, t, i) {
        const r = this.decalPool.MrrhcR();
        for (let s = 0; s < r.length; s++) {
            const a = r[s];
            a.active && a.update(e)
        }
        for (let s = 0; s < this.decalRenders.length; s++) {
            const a = this.decalRenders[s];
            a.active && a.update(e, t, i)
        }
    }
    YOuM(e, t, i) {}
}
class Ga {
    active;
    pos;
    vel;
    layer;
    particle;
    ticker;
    colCount;
    constructor() {
        this.active = !1
    }
    init(e, t, i, r) {
        this.pos = m.copy(e),
        this.vel = m.copy(t),
        this.layer = i,
        this.particle = r,
        this.ticker = 0,
        this.colCount = 0,
        this.active = !0
    }
    update(e, t, i) {
        const r = m.copy(this.pos);
        this.pos = m.add(this.pos, m.mul(this.vel, e)),
        this.vel = m.mul(this.vel, 1 / (1 + e * 5));
        const s = []
          , a = t.WUiyA.MrrhcR();
        for (let p = 0; p < a.length; p++) {
            const c = a[p];
            c.active && !c.dead && y.sameLayer(this.layer, c.layer) && s.push(c.collider)
        }
        const l = i.playerPool.MrrhcR();
        for (let p = 0; p < l.length; p++) {
            const c = l[p];
            c.active && !c.dead && y.sameLayer(this.layer, c.layer) && s.push(j.createCircle(c.CYoYrL, c.XZe))
        }
        const h = [];
        for (let p = 0; p < s.length; p++) {
            const c = j.intersectSegment(s[p], r, this.pos);
            if (c) {
                const d = m.length(m.sub(c.point, r));
                h.push({
                    point: c.point,
                    normal: c.normal,
                    dist: d
                })
            }
        }
        if (h.sort( (p, c) => p.dist - c.dist),
        h.length > 0) {
            const p = h[0]
              , c = m.normalizeSafe(this.vel, m.create(1, 0))
              , d = m.length(this.vel)
              , w = m.sub(c, m.mul(p.normal, m.dot(p.normal, c) * 2))
              , f = this.colCount++ > 0 ? .35 : 1;
            this.pos = m.add(p.point, m.mul(p.normal, .01)),
            this.vel = m.mul(w, d * f)
        }
        this.particle.pos = m.copy(this.pos),
        this.ticker += e,
        this.ticker >= this.particle.life && (this.particle.free(),
        this.active = !1)
    }
}
class Na {
    active;
    type;
    done;
    pos;
    layer;
    ticker;
    lifetime;
    soundInstance;
    soundUpdateThrottle;
    constructor() {
        this.active = !1
    }
    init(e, t, i) {
        const r = Ei[e].explosionEffectType
          , s = Ji[r];
        this.active = !0,
        this.done = !1,
        this.type = e,
        this.pos = m.copy(t),
        this.layer = i,
        this.ticker = 0,
        this.lifetime = s.lifetime,
        this.soundInstance = null,
        this.soundUpdateThrottle = 0
    }
    free() {
        this.active = !1
    }
    update(e, t, i, r, s, a) {
        const l = Ei[this.type].explosionEffectType
          , h = Ji[l];
        if (this.ticker == 0) {
            let d = !0;
            if (this.type == "explosion_bomb_iron") {
                const x = j.createCircle(this.pos, .5);
                s.insideBuildingCeiling(x, !0) && (d = !1)
            }
            if (d && (h.burst.particle && i.addParticle(h.burst.particle, this.layer, this.pos, m.create(0, 0), h.burst.scale, 0, null),
            h.scatter))
                for (let x = 0; x < h.scatter.count; x++) {
                    const C = i.addParticle(h.scatter.particle, this.layer, this.pos, m.create(0, 0), 1, 0, null)
                      , v = t.addPhysicsParticle()
                      , b = m.mul(m.randomUnit(), y.random(h.scatter.speed.min, h.scatter.speed.max));
                    v.init(this.pos, b, this.layer, C)
                }
            const w = s.getGroundSurface(this.pos, this.layer)
              , f = w.type == "water" ? h.burst.sound.water : h.burst.sound.grass;
            let S = 0;
            h.burst.sound.detune != null && (S = h.burst.sound.detune);
            let g = 1;
            if (h.burst.sound.volume != null && (g = h.burst.sound.volume),
            this.soundInstance = r.playSound(f, {
                channel: "sfx",
                soundPos: this.pos,
                layer: this.layer,
                filter: "muffled",
                rangeMult: 2,
                ignoreMinAllowable: !0,
                detune: S,
                volumeScale: g
            }),
            w.type == "water")
                for (let x = 0; x < h.rippleCount; x++) {
                    const C = h.rippleCount * .5
                      , v = m.add(this.pos, m.mul(m.randomUnit(), y.random(0, C)));
                    i.addRippleParticle(v, this.layer, w.data.rippleColor).setDelay(x * .06)
                }
        }
        if (this.soundInstance && this.soundUpdateThrottle < 0) {
            this.soundUpdateThrottle = .1;
            let d = 1;
            h.burst.sound.volume != null && (d = h.burst.sound.volume),
            r.updateSound(this.soundInstance, "sfx", this.pos, {
                layer: this.layer,
                filter: "muffled",
                volumeScale: d
            })
        } else
            this.soundUpdateThrottle -= e;
        this.ticker += e;
        const p = k.min(this.ticker / h.shakeDur, 1)
          , c = k.lerp(p, h.shakeStr, 0);
        a.Wso(this.pos, c),
        this.ticker >= this.lifetime && (this.active = !1)
    }
}
class Wa {
    explosions;
    physicsParticles;
    constructor() {
        this.explosions = [],
        this.physicsParticles = []
    }
    addExplosion(e, t, i) {
        let r = null;
        for (let s = 0; s < this.explosions.length; s++)
            if (!this.explosions[s].active) {
                r = this.explosions[s];
                break
            }
        r || (r = new Na,
        this.explosions.push(r)),
        r.init(e, t, i)
    }
    addPhysicsParticle() {
        let e = null;
        for (let t = 0; t < this.physicsParticles.length; t++) {
            const i = this.physicsParticles[t];
            if (!i.active) {
                e = i;
                break
            }
        }
        return e || (e = new Ga,
        this.physicsParticles.push(e)),
        e
    }
    pprlB(e, t, i, r, s, a, l) {
        for (let h = 0; h < this.explosions.length; h++) {
            const p = this.explosions[h];
            p.active && (p.update(e, this, s, a, t, r),
            p.active || p.free())
        }
        for (let h = 0; h < this.physicsParticles.length; h++) {
            const p = this.physicsParticles[h];
            p.active && p.update(e, t, i)
        }
    }
}
const Ji = {
    frag: {
        burst: {
            particle: "explosionBurst",
            scale: 1,
            sound: {
                grass: "explosion_01",
                water: "explosion_02"
            }
        },
        rippleCount: 10,
        shakeStr: .2,
        shakeDur: .35,
        lifetime: 2
    },
    smoke: {
        burst: {
            particle: "explosionBurst",
            scale: 0,
            sound: {
                grass: "explosion_smoke_01",
                water: "explosion_smoke_01"
            }
        },
        rippleCount: 10,
        shakeStr: 0,
        shakeDur: 0,
        lifetime: 6
    },
    strobe: {
        burst: {
            particle: "explosionBurst",
            scale: .25,
            sound: {
                grass: "explosion_04",
                water: "explosion_02"
            }
        },
        rippleCount: 3,
        shakeStr: 0,
        shakeDur: 0,
        lifetime: 2
    },
    barrel: {
        burst: {
            particle: "explosionBurst",
            scale: 1,
            sound: {
                grass: "explosion_01",
                water: "explosion_02"
            }
        },
        rippleCount: 10,
        shakeStr: .2,
        shakeDur: .35,
        lifetime: 2
    },
    usas: {
        burst: {
            particle: "explosionUSAS",
            scale: .75,
            sound: {
                grass: "explosion_03",
                water: "explosion_02"
            }
        },
        rippleCount: 10,
        shakeStr: .12,
        shakeDur: .25,
        lifetime: 1.25
    },
    rounds: {
        burst: {
            particle: "explosionRounds",
            scale: .32,
            sound: {
                grass: "explosion_04",
                water: "explosion_04",
                detune: 500,
                volume: .5
            }
        },
        rippleCount: 1,
        shakeStr: 0,
        shakeDur: 0,
        lifetime: 1
    },
    rounds_sg: {
        burst: {
            particle: "explosionRounds",
            scale: .32,
            sound: {
                grass: "explosion_04",
                water: "explosion_04",
                detune: 500,
                volume: .2
            }
        },
        rippleCount: 1,
        shakeStr: 0,
        shakeDur: 0,
        lifetime: 1
    },
    mirv: {
        burst: {
            particle: "explosionMIRV",
            scale: 1,
            sound: {
                grass: "explosion_01",
                water: "explosion_02"
            }
        },
        rippleCount: 10,
        shakeStr: .2,
        shakeDur: .35,
        lifetime: 2
    },
    mirv_mini: {
        burst: {
            particle: "explosionMIRV",
            scale: .75,
            sound: {
                grass: "explosion_03",
                water: "explosion_02"
            }
        },
        rippleCount: 3,
        shakeStr: .1,
        shakeDur: .2,
        lifetime: 1.25
    },
    martyr_nade: {
        burst: {
            particle: "explosionBurst",
            scale: .75,
            sound: {
                grass: "explosion_03",
                water: "explosion_02"
            }
        },
        rippleCount: 3,
        shakeStr: .1,
        shakeDur: .2,
        lifetime: 1.25
    },
    snowball: {
        burst: {
            particle: "",
            scale: .75,
            sound: {
                grass: "snowball_01",
                water: "frag_water_01"
            }
        },
        scatter: {
            particle: "snowball_impact",
            count: 5,
            speed: {
                min: 5,
                max: 25
            }
        },
        rippleCount: 1,
        shakeStr: 0,
        shakeDur: 0,
        lifetime: 1
    },
    snowball_heavy: {
        burst: {
            particle: "",
            scale: .75,
            sound: {
                grass: "snowball_02",
                water: "frag_water_01"
            }
        },
        scatter: {
            particle: "snowball_impact",
            count: 8,
            speed: {
                min: 5,
                max: 25
            }
        },
        rippleCount: 1,
        shakeStr: 0,
        shakeDur: 0,
        lifetime: 1
    },
    potato: {
        burst: {
            particle: "",
            scale: .75,
            sound: {
                grass: "potato_01",
                water: "frag_water_01"
            }
        },
        scatter: {
            particle: "potato_impact",
            count: 5,
            speed: {
                min: 5,
                max: 25
            }
        },
        rippleCount: 1,
        shakeStr: 0,
        shakeDur: 0,
        lifetime: 1
    },
    potato_heavy: {
        burst: {
            particle: "",
            scale: .75,
            sound: {
                grass: "potato_02",
                water: "frag_water_01"
            }
        },
        scatter: {
            particle: "potato_impact",
            count: 8,
            speed: {
                min: 5,
                max: 25
            }
        },
        rippleCount: 1,
        shakeStr: 0,
        shakeDur: 0,
        lifetime: 1
    },
    potato_cannonball: {
        burst: {
            particle: "explosionPotato",
            scale: .75,
            sound: {
                grass: "explosion_05",
                water: "explosion_02"
            }
        },
        scatter: {
            particle: "potato_impact",
            count: 8,
            speed: {
                min: 5,
                max: 25
            }
        },
        rippleCount: 10,
        shakeStr: .12,
        shakeDur: .25,
        lifetime: 1.25
    },
    potato_smgshot: {
        burst: {
            particle: "",
            scale: .2,
            sound: {
                grass: "potato_01",
                water: "potato_02",
                detune: 250,
                volume: .5
            }
        },
        scatter: {
            particle: "potato_smg_impact",
            count: 2,
            speed: {
                min: 5,
                max: 25
            }
        },
        rippleCount: 1,
        shakeStr: 0,
        shakeDur: 0,
        lifetime: .5
    },
    bomb_iron: {
        burst: {
            particle: "explosionBomb",
            scale: 2,
            sound: {
                grass: "explosion_01",
                water: "explosion_02"
            }
        },
        rippleCount: 12,
        shakeStr: .25,
        shakeDur: .4,
        lifetime: 2
    }
};
class Ua {
    bullets = [];
    addFlare(e, t) {
        let i = null;
        for (let w = 0; w < this.bullets.length; w++)
            if (!this.bullets[w].alive && !this.bullets[w].collided) {
                i = this.bullets[w];
                break
            }
        i || (i = {},
        i.alive = !1,
        i.flareContainer = new J,
        i.flareContainer.visible = !1,
        i.flare = ae.from("part-flare-01.img"),
        i.flare.anchor.set(.5, .5),
        i.flareContainer.addChild(i.flare),
        i.trailContainer = new J,
        i.trailContainer.visible = !1,
        i.trailContainer.pivot.set(14.5, 0),
        i.bulletTrail = ae.from("player-bullet-trail-02.img"),
        i.bulletTrail.anchor.set(.5, .5),
        i.trailContainer.addChild(i.bulletTrail),
        this.bullets.push(i));
        const r = Yt[e.bulletType]
          , s = 1 + e.varianceT * r.variance
          , a = k.remap(e.distAdjIdx, 0, 32, -1, 1)
          , l = r.distance / Math.pow(O.bullet.reflectDistDecay, e.reflectCount);
        i.alive = !0,
        i.isNew = !0,
        i.collided = !1,
        i.flareScale = .01,
        i.trailScale = 1,
        i.timeAlive = 0,
        i.maxTimeAlive = 2.5,
        i.startPos = m.copy(e.pos),
        i.pos = m.copy(e.pos),
        i.dir = m.copy(e.dir),
        i.layer = e.layer,
        i.speed = r.speed * s,
        i.distance = l * s + a;
        const h = Math.atan2(i.dir.x, i.dir.y);
        i.flareContainer.rotation = h - Math.PI / 2,
        i.trailContainer.rotation = h - Math.PI / 2,
        i.layer = e.layer;
        const p = t.getPlayerById(i.playerId);
        p && p.layer & 2 && (i.layer |= 2);
        const c = O.tracerColors[r.tracerColor];
        let d = c.regular;
        p?.isOnBrightSurface && (d = c.saturated),
        i.bulletTrail.scale.set(.8, r.tracerWidth),
        i.tracerLength = r.tracerLength,
        i.bulletTrail.tint = d,
        i.tracerAlphaRate = c.alphaRate,
        i.tracerAlphaMin = c.alphaMin,
        i.bulletTrail.alpha = 1,
        i.flare.scale.set(1, 1),
        i.flare.tint = r.flareColor,
        i.flare.alpha = .8,
        i.maxFlareScale = r.maxFlareScale,
        i.smokeThrottle = 0,
        i.flareContainer.visible = !0,
        i.trailContainer.visible = !0
    }
    pprlB(e, t, i, r) {
        for (let s = 0; s < this.bullets.length; s++) {
            const a = this.bullets[s];
            if (a.collided && (a.flareScale = k.max(a.flareScale - e * .5, 0),
            a.flare.alpha = k.max(a.flare.alpha - e, 0),
            a.trailScale = k.max(a.trailScale - e * 6, 0),
            a.bulletTrail.alpha = k.max(a.bulletTrail.alpha - e, 0),
            a.pos = m.add(a.pos, m.mul(a.dir, e * a.speed)),
            a.flare.alpha <= 0 && (a.collided = !1,
            a.flareContainer.visible = !1,
            a.trailContainer.visible = !1)),
            a.alive) {
                if (a.tracerAlphaRate) {
                    const c = i.__id == a.playerId ? a.tracerAlphaRate : a.tracerAlphaRate * .9;
                    a.bulletTrail.alpha = k.max(a.tracerAlphaMin, a.bulletTrail.alpha * c)
                }
                a.timeAlive += e,
                a.flareScale = k.easeOutExpo(a.timeAlive / a.maxTimeAlive) * a?.maxFlareScale,
                a.smokeThrottle <= 0 ? a.smokeThrottle = .05 : a.smokeThrottle -= e;
                const l = a.distance - m.length(m.sub(a.startPos, a.pos))
                  , h = k.min(l, e * a.speed);
                a.pos = m.add(a.pos, m.mul(a.dir, h)),
                k.eqAbs(l, h) && (a.collided = !0,
                a.alive = !1);
                let p = 0;
                (y.sameLayer(p, i.layer) || i.layer & 2) && (!(i.layer & 2) || !t.insideStructureMask(j.createCircle(a.pos, 1))) && (p |= 2),
                r.addPIXIObj(a.trailContainer, p, 1e3, 0),
                r.addPIXIObj(a.flareContainer, p, 1e3, 1),
                a.isNew = !1
            }
        }
    }
    YOuM(e) {
        for (let t = 0; t < this.bullets.length; t++) {
            const i = this.bullets[t];
            if (i.alive || i.collided) {
                const r = e.zEsq(i.pos);
                i.flareContainer.position.set(r.x, r.y);
                const s = e.ZaMxGM(1);
                i.flareContainer.scale.set(s * i.flareScale, s * i.flareScale);
                const a = m.length(m.sub(i.pos, i.startPos));
                i.trailContainer.position.set(r.x, r.y);
                const l = k.min(i.tracerLength * 15, a / 2);
                i.trailContainer.scale.set(s * l * i.trailScale, s)
            }
        }
    }
}
class qa {
    __id;
    __type;
    active;
    ticker = 0;
    playDropSfx = !1;
    container = new ae;
    sprite = new ae;
    emitter = null;
    updatedData;
    pos;
    visualPosOld;
    posInterpTicker;
    isOld;
    layer;
    type;
    count;
    isPreloadedGun;
    ownerId;
    rad;
    imgScale;
    constructor() {
        this.container.anchor.set(.5, .5),
        this.container.scale.set(1, 1),
        this.sprite.anchor.set(.5, .5),
        this.sprite.scale.set(.8, .8),
        this.container.addChild(this.sprite)
    }
    RVRwlj() {
        this.updatedData = !1,
        this.visualPosOld = m.create(0, 0)
    }
    TNCQd() {
        this.container.visible = !1,
        this.emitter && (this.emitter.stop(),
        this.emitter = null)
    }
    cmyLn(e, t, i, r) {
        if (this.updatedData = !0,
        m.eq(e.pos, this.visualPosOld) || (this.visualPosOld = m.copy(i ? e.pos : this.pos),
        this.posInterpTicker = 0),
        this.pos = m.copy(e.pos),
        t && (this.layer = e.layer,
        this.type = e.type,
        this.count = e.count,
        this.isOld = e.isOld,
        this.isPreloadedGun = e.isPreloadedGun,
        this.ownerId = e.hasOwner ? e.ownerId : 0),
        i) {
            const s = U[this.type];
            this.ticker = 0,
            this.isOld && (this.ticker = 10),
            !this.isOld && s.sound.drop && !r.map.lootDropSfxIds.includes(this.__id) && (this.playDropSfx = !0),
            this.rad = O.lootRadius[s.type],
            this.imgScale = s.lootImg?.scale * 1.25;
            const a = s.lootImg.innerScale || .8;
            this.sprite.scale.set(a, a),
            this.sprite.texture = X.from(s.lootImg?.sprite),
            this.sprite.tint = s.lootImg?.tint,
            this.container.texture = s.lootImg.border ? X.from(s.lootImg.border) : X.EMPTY,
            this.isPreloadedGun && (this.container.texture = X.from("loot-circle-outer-06.img"));
            const l = U[s.ammo];
            l ? this.container.tint = l.lootImg.tintDark : s.lootImg.borderTint ? this.container.tint = s.lootImg.borderTint : this.container.tint = 0,
            s.type == "xp" && s.emitter && (this.emitter = r.particleBarn.addEmitter(s.emitter, {
                pos: this.pos,
                layer: this.layer
            })),
            this.sprite.rotation = s?.lootImg?.rot ? s.lootImg.rot : 0,
            this.sprite.scale.x = s.lootImg.mirror ? -a : a,
            this.container.visible = !0
        }
        (i || t) && r.renderer.addPIXIObj(this.container, this.layer, 13, this.__id)
    }
}
class Va {
    lootPool = new Ne(qa);
    closestLoot = null;
    pprlB(e, t, i, r, s, a) {
        this.closestLoot = null;
        let l = Number.MAX_VALUE;
        const h = this.lootPool.MrrhcR();
        for (let p = 0; p < h.length; p++) {
            const c = h[p];
            if (c.active) {
                if (y.sameLayer(c.layer, t.layer) && !t.GoI.mSk && (c.ownerId == 0 || c.ownerId == t.__id)) {
                    const x = c.pos
                      , C = D.touch ? t.XZe + c.rad * O.player.touchLootRadMult : c.rad
                      , v = m.sub(t.CYoYrL, x)
                      , b = m.lengthSqr(v);
                    b < C * C && b < l && (l = b,
                    this.closestLoot = c)
                }
                if (c.ticker += e,
                c.playDropSfx) {
                    i.lootDropSfxIds.push(c.__id),
                    c.playDropSfx = !1;
                    const x = U[c.type];
                    r.playSound(x.sound?.drop, {
                        channel: "sfx",
                        soundPos: c.pos,
                        layer: c.layer,
                        filter: "muffled"
                    })
                }
                c.emitter && (c.emitter.pos = m.add(c.pos, m.create(0, .1)),
                c.emitter.layer = c.layer);
                const d = k.delerp(c.ticker, 0, 1)
                  , w = k.easeOutElastic(d, .75);
                let f = c.pos;
                if (s.RXZ) {
                    c.posInterpTicker += e;
                    const x = k.clamp(c.posInterpTicker / s.BYJsJa, 0, 1);
                    f = m.lerp(x, c.visualPosOld, c.pos)
                }
                const S = s.zEsq(f)
                  , g = s.ZaMxGM(c.imgScale * w);
                c.container.position.set(S.x, S.y),
                c.container.scale.set(g, g)
            }
        }
    }
    getClosestLoot() {
        return this.closestLoot
    }
}
if (window.self !== window.top) {
    let o = function(e) {
        let t = e.target;
        for (; t && t !== document.body; ) {
            const i = getComputedStyle(t).overflowY;
            if (i === "auto" || i === "scroll")
                return;
            t = t.parentElement
        }
        e.preventDefault()
    };
    window.addEventListener("wheel", o, {
        passive: !1
    }),
    window.addEventListener("touchmove", o, {
        passive: !1
    }),
    document.addEventListener("keydown", e => {
        if (["ArrowUp", "ArrowDown", "ArrowLeft", "ArrowRight", " "].includes(e.key)) {
            const i = e.target
              , r = ["INPUT", "TEXTAREA", "SELECT", "BUTTON"];
            if (e.key === " " && (r.includes(i.tagName) || i.isContentEditable))
                return;
            e.preventDefault()
        }
    }
    )
}
function ja() {
    try {
        return window !== window.parent && document.referrer ? new URL(document.referrer).origin.includes("gamemonetize") : window.location.href.includes("gamemonetize")
    } catch (o) {
        return console.error("Error in isWithinGameMonetize:", o),
        window.location.href.includes("gamemonetize")
    }
}
function Ya() {
    return new URLSearchParams(self.location.search).has("crazygames")
}
function Ha() {
    const e = new URLSearchParams(self.location.search).has("spellsync")
      , t = self.location.hostname === "spellsync.survev.io"
      , i = "FALSE".toLowerCase() === "true";
    return e || t || i
}
function $a() {
    try {
        return window !== window.parent && document.referrer ? new URL(document.referrer).origin.includes("poki") : !1
    } catch (o) {
        return console.error("Error in isWithinPoki:", o),
        !1
    }
}
class Xa {
    isPoki = $a();
    isCrazyGames = Ya();
    isGameMonetize = ja();
    isSpellSync = Ha();
    isAnySDK;
    started = !1;
    respawns = [];
    adCallback = () => {}
    ;
    constructor() {
        this.isAnySDK = this.isPoki || this.isCrazyGames || this.isGameMonetize || this.isSpellSync,
        console.log("Poki SDK:", this.isPoki, "CrazyGames SDK:", this.isCrazyGames, "GameMonetize SDK:", this.isGameMonetize, "SpellSync SDK:", this.isSpellSync, "Any SDK:", this.isAnySDK)
    }
    async init() {
        if (this.isAnySDK)
            u("#btn-start-fullscreen").hide(),
            u("#left-column").hide(),
            this.isSpellSync || u("#btn-discord-top-right").show(),
            u(".surviv-shirts").css("background-image", "url(./img/discord-promo.png)").html('<a href="https://discord.gg/6uRdCdkTPt" target="_blank"></a>'),
            this.isSpellSync && (u("a[href='changelogRec.html']").hide(),
            u("a[href='changelog.html']").hide(),
            u("a[href='proxy.txt']").hide(),
            u("a[href='privacy.html']").hide(),
            u("a[data-l10n='index-privacy']").hide(),
            u("a[data-l10n='index-attributions']").hide(),
            u("a[data-l10n='index-hof']").hide(),
            u("#news-block").hide(),
            u("#start-top-left").hide());
        else {
            u(".btn-kofi").show(),
            u(".surviv-shirts").css("background-image", "url(./img/survev-kofi.png)").html('<a href="https://ko-fi.com/survev" target="_blank"></a>');
            const e = document.createElement("script");
            e.async = !0,
            e.src = "https://cdn.fuseplatform.net/publift/tags/2/4018/fuse.js",
            document.head.appendChild(e)
        }
        this.isPoki ? await this.initPoki() : this.isGameMonetize ? this.initGameMonetize() : this.isCrazyGames ? await this.initCrazyGames() : this.isSpellSync && await this.initSpellSync()
    }
    disableBloodParticles() {
        return this.isCrazyGames
    }
    gameLoadComplete() {
        this.isPoki && window.PokiSDK.gameLoadingFinished(),
        this.isSpellSync && window.spellSync.gameStart()
    }
    gamePlayStart() {
        this.isCrazyGames ? window.CrazyGames.SDK.game.gameplayStart() : this.isPoki ? window.PokiSDK.gameplayStart() : this.isSpellSync && window.spellSync.gameplayStart(),
        this.hideStickyAd()
    }
    gamePlayStop() {
        this.isCrazyGames ? window.CrazyGames.SDK.game.gameplayStop() : this.isPoki ? window.PokiSDK.gameplayStop() : this.isSpellSync && window.spellSync.gameplayStop(),
        this.showStickyAd()
    }
    requestMidGameAd(e) {
        this.isPoki ? this.requestPokiMidGameAd(e) : this.isGameMonetize ? this.requestGameMonetizeMidgameAd(e) : this.isCrazyGames ? this.requestCrazyGamesMidGameAd(e) : e()
    }
    requestFullscreenAd(e) {
        this.isSpellSync && window.spellSync.ads.isFullscreenAvailable ? window.spellSync.ads.showFullscreen({
            showCountdownOverlay: !0
        }).then(e).catch(e) : e()
    }
    async getPlayerName() {
        if (this.isCrazyGames && window.CrazyGames.SDK.user.isUserAccountAvailable) {
            const e = await window.CrazyGames.SDK.user.getUser();
            if (e)
                return e.username
        }
    }
    hideInviteButton() {
        this.isCrazyGames && window.CrazyGames.SDK.game.hideInviteButton()
    }
    showInviteButton(e) {
        this.isCrazyGames && window.CrazyGames.SDK.game.showInviteButton({
            roomID: e
        })
    }
    supportsInviteLink() {
        return this.isCrazyGames || this.isPoki
    }
    async getInviteLink(e) {
        if (this.isCrazyGames)
            return window.CrazyGames.SDK.game.inviteLink({
                roomID: e
            });
        if (this.isPoki)
            return await window.PokiSDK.shareableURL({
                roomID: e
            })
    }
    getRoomInviteParam() {
        if (this.isCrazyGames)
            return window.CrazyGames.SDK.game.getInviteParam("roomID");
        if (this.isPoki)
            return window.PokiSDK.getURLParam("roomID")
    }
    async requestAd(e) {
        if (this.isCrazyGames) {
            const t = e.split("x").map(Number);
            await this.requestCrazyGamesBanner(`survev-io_${e}`, t[0], t[1])
        }
    }
    removeAllAds() {
        this.isCrazyGames && window.CrazyGames.SDK.banner.clearAllBanners(),
        this.hideStickyAd()
    }
    requestCrazyGamesMidGameAd(e) {
        const t = {
            adFinished: e,
            adError: e,
            adStarted: () => console.log("Start midgame ad")
        };
        window.CrazyGames.SDK.ad.requestAd("midgame", t)
    }
    requestGameMonetizeMidgameAd(e) {
        window.sdk && window.sdk.showBanner ? (window.sdk.showBanner(),
        this.adCallback) : e()
    }
    requestPokiMidGameAd(e) {
        window.PokiSDK.commercialBreak( () => {}
        ).then( () => {
            e()
        }
        )
    }
    initGameMonetize() {
        const e = document.createElement("script");
        e.src = "https://api.gamemonetize.com/sdk.js",
        e.id = "gamemonetize-sdk",
        document.head.appendChild(e),
        window.SDK_OPTIONS = {
            gameId: void 0,
            onEvent: t => {
                switch (t.name) {
                case "SDK_GAME_START":
                    this.adCallback(),
                    this.adCallback = () => {}
                    ;
                    break;
                case "SDK_READY":
                    console.log("Successfully loaded GameMonetize SDK");
                    break
                }
            }
        }
    }
    initPoki() {
        return new Promise(function(e) {
            const t = document.createElement("script");
            t.src = "https://game-cdn.poki.com/scripts/v2/poki-sdk.js",
            document.head.appendChild(t),
            t.addEventListener("load", () => {
                window.PokiSDK.init().then( () => {
                    console.log("Poki SDK successfully initialized")
                }
                ).catch( () => {
                    console.log("Initialized, something went wrong, load you game anyway")
                }
                ),
                e()
            }
            )
        }
        )
    }
    initCrazyGames() {
        return new Promise( (e, t) => {
            const i = document.createElement("script");
            i.src = "https://sdk.crazygames.com/crazygames-sdk-v3.js",
            document.head.appendChild(i),
            i.addEventListener("load", async () => {
                await window.CrazyGames.SDK.init(),
                this.requestCrazyGamesBanner("survev-io_728x90", 728, 90),
                setInterval( () => {
                    const r = document.getElementById("start-menu-wrapper");
                    getComputedStyle(r).display != "none" && this.requestCrazyGamesBanner("survev-io_728x90", 728, 90)
                }
                , 6e4),
                e()
            }
            ),
            i.addEventListener("error", () => {
                console.log("CrazyGames SDK load error"),
                t()
            }
            )
        }
        )
    }
    initSpellSync() {
        return new Promise(e => {
            window.SpellSyncConfig = {
                projectId: 75,
                publicToken: "fKbGS7R1jt6gZVn5jLDvys4nQzm7IBSp",
                onReady: async i => {
                    console.log("SpellSync SDK initialized", i),
                    await i.player.ready,
                    i.ads.showPreloader(),
                    i.ads.showSticky(),
                    window.spellSync = i,
                    i.on("pause", () => {
                        console.log("[SpellSync] PAUSE"),
                        Ie.audioManager.setForcedMute(!0),
                        Ie.audioManager.update(0)
                    }
                    ),
                    i.on("resume", () => {
                        console.log("[SpellSync] RESUME"),
                        Ie.audioManager.setForcedMute(Ie.config.get("muteAudio") || !1),
                        Ie.audioManager.update(0)
                    }
                    ),
                    e()
                }
            };
            const t = document.createElement("script");
            t.src = "https://s3.spellsync.com/sdk/spellsync.js",
            document.head.appendChild(t)
        }
        )
    }
    async requestCrazyGamesBanner(e, t, i) {
        try {
            await window.CrazyGames.SDK.banner.requestBanner({
                id: e,
                width: t,
                height: i
            })
        } catch (r) {
            console.warn("Failed to request CrazyGames banner:", e, r)
        }
    }
    showStickyAd() {
        window.showAdFlag = !0;
        const e = document.querySelector(".publift-widget-sticky_footer-container");
        e && (e.style.display = "block"),
        this.isSpellSync && window.spellSync.ads.showSticky(),
        console.log("Show sticky ad")
    }
    hideStickyAd() {
        window.showAdFlag = !1;
        const e = document.querySelector(".publift-widget-sticky_footer-container");
        e && (e.style.display = "none"),
        this.isSpellSync && window.spellSync.ads.closeSticky(),
        console.log("Hide sticky ad")
    }
}
const oe = new Xa;
class n {
    constructor(e, t) {
        this.min = e,
        this.max = t
    }
    getRandom() {
        return y.random(this.min, this.max)
    }
}
function Ae(o) {
    return o instanceof n ? o.getRandom() : o
}
function Za(o) {
    return o instanceof Function ? o() : o
}
class er {
    active = !1;
    ticker = 0;
    def = {};
    sprite = new ae;
    hasParent = !1;
    pos;
    vel;
    rot;
    delay;
    life;
    drag;
    rotVel;
    rotDrag;
    scaleUseExp;
    scale;
    scaleEnd;
    scaleExp;
    alphaUseExp;
    alpha;
    alphaEnd;
    alphaExp;
    alphaIn;
    alphaInStart;
    alphaInEnd;
    emitterIdx;
    valueAdjust;
    constructor() {
        this.sprite.anchor.set(.5, .5),
        this.sprite.scale.set(1, 1),
        this.sprite.visible = !1
    }
    init(e, t, i, r, s, a, l, h, p, c) {
        const d = Mi[t];
        this.active = !0,
        this.ticker = 0,
        h ? (this.hasParent = !0,
        h.addChild(this.sprite)) : (this.hasParent = !1,
        e.addPIXIObj(this.sprite, i, p)),
        this.pos = m.copy(r),
        this.vel = m.copy(s),
        this.rot = l,
        this.def = d,
        this.delay = 0,
        this.life = Ae(d.life),
        this.drag = Ae(d.drag),
        this.rotVel = Ae(d.rotVel) * (Math.random() < .5 ? -1 : 1),
        this.rotDrag = Ae(d.drag) / 2,
        this.scaleUseExp = d.scale.exp !== void 0,
        this.scale = Ae(d.scale.start) * a,
        this.scaleEnd = this.scaleUseExp ? 0 : Ae(d.scale?.end) * a,
        this.scaleExp = this.scaleUseExp ? d.scale.exp : 0,
        this.alphaUseExp = d.alpha.exp !== void 0,
        this.alpha = Ae(d.alpha.start),
        this.alphaEnd = this.alphaUseExp ? 0 : Ae(d.alpha?.end),
        this.alphaExp = this.alphaUseExp ? d.alpha.exp : 0,
        this.alphaIn = d.alphaIn !== void 0,
        this.alphaInStart = this.alphaIn ? Ae(d.alphaIn?.start) : 0,
        this.alphaInEnd = this.alphaIn ? Ae(d.alphaIn?.end) : 0,
        this.emitterIdx = -1;
        const w = Array.isArray(d.image) ? d.image[Math.floor(Math.random() * d.image.length)] : d.image;
        this.sprite.texture = X.from(w),
        this.sprite.visible = !1,
        this.valueAdjust = d.ignoreValueAdjust ? 1 : c,
        this.setColor(Za(d.color)),
        oe.disableBloodParticles() && t == "bloodSplat" ? this.sprite.renderable = !1 : this.sprite.renderable = !0
    }
    free() {
        this.active = !1,
        this.sprite.visible = !1
    }
    setDelay(e) {
        this.delay = e
    }
    setColor(e) {
        this.valueAdjust < 1 && (e = y.adjustValue(e, this.valueAdjust)),
        this.sprite.tint = e
    }
}
class Qa {
    active = !1;
    enabled;
    type;
    pos;
    dir;
    scale;
    layer;
    duration;
    radius;
    ticker;
    nextSpawn;
    spawnCount;
    parent;
    alpha;
    rateMult;
    zOrd;
    init(e, t={}) {
        const i = Wr[e];
        this.active = !0,
        this.enabled = !0,
        this.type = e,
        this.pos = t.pos ? m.copy(t.pos) : m.create(0, 0),
        this.dir = t.dir ? m.copy(t.dir) : m.create(0, 1),
        this.scale = t.scale !== void 0 ? t.scale : 1,
        this.layer = t.layer || 0,
        this.duration = t.duration !== void 0 ? t.duration : Number.MAX_VALUE,
        this.radius = t.radius !== void 0 ? t.radius : i.radius,
        this.ticker = 0,
        this.nextSpawn = 0,
        this.spawnCount = 0,
        this.parent = t.parent || null,
        this.alpha = 1,
        this.rateMult = t.rateMult !== void 0 ? t.rateMult : 1;
        const r = Mi[i.particle];
        this.zOrd = i.zOrd !== void 0 ? i.zOrd : r.zOrd !== void 0 ? r.zOrd : 20
    }
    free() {
        this.active = !1
    }
    stop() {
        this.duration = this.ticker
    }
}
class Nr {
    constructor(e) {
        this.renderer = e;
        for (let t = 0; t < 256; t++)
            this.particles[t] = new er
    }
    particles = [];
    emitters = [];
    valueAdjust = 1;
    onMapLoad(e) {
        this.valueAdjust = e.getMapDef().biome.valueAdjust
    }
    TNCQd() {
        for (let e = 0; e < this.particles.length; e++) {
            const t = this.particles[e].sprite;
            t.parent?.removeChild(t),
            t.destroy({
                children: !0
            })
        }
    }
    addParticle(e, t, i, r, s, a, l, h) {
        let p = null;
        for (let c = 0; c < this.particles.length; c++)
            if (!this.particles[c].active) {
                p = this.particles[c];
                break
            }
        return p || (p = new er,
        this.particles.push(p)),
        s = s !== void 0 ? s : 1,
        a = a !== void 0 ? a : Math.random() * Math.PI * 2,
        h = h !== void 0 ? h : Mi[e].zOrd || 20,
        p.init(this.renderer, e, t, i, r, s, a, l, h, this.valueAdjust),
        p
    }
    addRippleParticle(e, t, i) {
        const r = this.addParticle("waterRipple", t, e, m.create(0, 0), 1, 0, null);
        return r.setColor(i),
        r
    }
    addEmitter(e, t={}) {
        let i = null;
        for (let r = 0; r < this.emitters.length; r++)
            if (!this.emitters[r].active) {
                i = this.emitters[r];
                break
            }
        return i || (i = new Qa,
        this.emitters.push(i)),
        i.init(e, t),
        i
    }
    pprlB(e, t) {
        for (let i = 0; i < this.emitters.length; i++) {
            const r = this.emitters[i];
            if (r.active && r.enabled) {
                r.ticker += e,
                r.nextSpawn -= e;
                const s = Wr[r.type];
                for (; r.nextSpawn <= 0 && r.spawnCount < s.maxCount; ) {
                    const a = r.scale * r.radius
                      , l = m.add(r.pos, y.randomPointInCircle(a))
                      , h = m.rotate(r.dir, (Math.random() - .5) * s.angle)
                      , p = m.mul(h, Ae(s.speed))
                      , c = Ae(s.rot)
                      , d = this.addParticle(s.particle, r.layer, l, p, r.scale, c, r.parent, r.zOrd);
                    d.emitterIdx = i;
                    let w = Ae(s.rate);
                    if (s.maxRate) {
                        const f = k.easeInExpo(k.min(1, r.ticker / s.maxElapsed))
                          , S = Ae(s.maxRate);
                        w = k.lerp(f, w, S)
                    }
                    r.nextSpawn += w * r.rateMult,
                    r.spawnCount++
                }
                r.ticker >= r.duration && r.free()
            }
        }
        for (let i = 0; i < this.particles.length; i++) {
            const r = this.particles[i];
            if (r.active && (r.ticker += e,
            r.ticker >= r.delay)) {
                const s = k.min((r.ticker - r.delay) / r.life, 1);
                r.vel = m.mul(r.vel, 1 / (1 + e * r.drag)),
                r.pos = m.add(r.pos, m.mul(r.vel, e)),
                r.rotVel *= 1 / (1 + e * r.rotDrag),
                r.rot += r.rotVel * e,
                r.scaleUseExp && (r.scale += e * r.scaleExp),
                r.alphaUseExp && (r.alpha = k.max(r.alpha + e * r.alphaExp, 0));
                const a = r.hasParent ? r.pos : t.zEsq(r.pos);
                let l = r.scaleUseExp ? r.scale : k.remap(s, r.def.scale.lerp?.min, r.def.scale.lerp?.max, r.scale, r.scaleEnd)
                  , h = r.alphaUseExp ? r.alpha : k.remap(s, r.def.alpha.lerp?.min, r.def.alpha.lerp?.max, r.alpha, r.alphaEnd);
                r.alphaIn && s < r.def.alphaIn?.lerp?.max && (h = k.remap(s, r.def.alphaIn?.lerp?.min, r.def.alphaIn?.lerp?.max, r.alphaInStart, r.alphaInEnd)),
                r.emitterIdx >= 0 && (h *= this.emitters[r.emitterIdx].alpha),
                r.hasParent || (l = t.ZaMxGM(l)),
                r.sprite.position.set(a.x, a.y),
                r.sprite.scale.set(l, l),
                r.sprite.rotation = r.rot,
                r.sprite.alpha = h,
                r.sprite.visible = !0,
                s >= 1 && r.free()
            }
        }
    }
}
const Mi = {
    archwayBreak: {
        image: ["part-panel-01.img"],
        life: new n(.5,1.5),
        drag: new n(1,5),
        rotVel: new n(0,Math.PI * 3),
        scale: {
            start: new n(.2,.35),
            end: new n(.08,.12),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: function() {
            return y.rgbToInt(y.hsvToRgb(.06, .84, y.random(.46, .48)))
        }
    },
    bloodSplat: {
        image: ["part-splat-01.img", "part-splat-02.img", "part-splat-03.img"],
        life: .5,
        drag: 1,
        rotVel: 0,
        scale: {
            start: .04,
            end: new n(.15,.2),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.75,1)
        },
        color: function() {
            return y.rgbToInt(y.hsvToRgb(16711680, 1, y.random(.45, .8)))
        }
    },
    barrelPlank: {
        image: ["part-plank-01.img"],
        life: new n(1,1.5),
        drag: new n(3,5),
        rotVel: new n(Math.PI * 3,Math.PI * 3),
        scale: {
            start: new n(.08,.18),
            end: new n(.07,.17),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: function() {
            return y.rgbToInt(y.hsvToRgb(.09, .8, y.random(.66, .68)))
        }
    },
    barrelChip: {
        image: ["part-spark-02.img"],
        life: .5,
        drag: new n(1,10),
        rotVel: 0,
        scale: {
            start: new n(.04,.08),
            end: new n(.01,.02),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.95,1)
        },
        color: function() {
            return y.rgbToInt(y.hsvToRgb(.01, .02, y.random(.38, .41)))
        }
    },
    barrelBreak: {
        image: ["part-spark-02.img"],
        life: new n(.8,1),
        drag: new n(1,5),
        rotVel: 0,
        scale: {
            start: new n(.07,.12),
            end: new n(.05,.1),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: function() {
            return y.rgbToInt(y.hsvToRgb(.01, .02, y.random(.38, .41)))
        }
    },
    blackChip: {
        image: ["part-woodchip-01.img"],
        life: new n(.5,1),
        drag: new n(1,5),
        rotVel: new n(Math.PI * 3,Math.PI * 3),
        scale: {
            start: new n(.04,.08),
            end: new n(.01,.02),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: function() {
            return y.rgbToInt(y.hsvToRgb(0, .08, y.random(.16, .18)))
        }
    },
    blueChip: {
        image: ["part-spark-02.img"],
        life: .5,
        drag: new n(1,10),
        rotVel: 0,
        scale: {
            start: new n(.04,.08),
            end: new n(.01,.02),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.95,1)
        },
        color: function() {
            return y.rgbToInt(y.hsvToRgb(.64, 1, y.random(.83, .85)))
        }
    },
    book: {
        image: ["part-book-01.img"],
        life: new n(1,1.5),
        drag: new n(3,5),
        rotVel: new n(Math.PI * 3,Math.PI * 3),
        scale: {
            start: new n(.09,.19),
            end: new n(.07,.17),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: function() {
            return y.rgbToInt(y.hsvToRgb(.08, .42, y.random(.72, .74)))
        }
    },
    bottleBrownChip: {
        image: ["part-spark-02.img"],
        life: .5,
        drag: new n(1,5),
        rotVel: new n(Math.PI * 1,Math.PI * 6),
        scale: {
            start: new n(.02,.04),
            end: new n(.01,.02),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.95,1)
        },
        color: 7878664
    },
    bottleBrownBreak: {
        image: ["part-spark-02.img"],
        life: new n(.4,.8),
        drag: new n(1,4),
        rotVel: new n(Math.PI * 1,Math.PI * 6),
        scale: {
            start: new n(.03,.06),
            end: new n(.05,.1),
            lerp: new n(0,1)
        },
        alpha: {
            start: .8,
            end: 0,
            lerp: new n(.75,1)
        },
        color: 7878664
    },
    bottleBlueChip: {
        image: ["part-spark-02.img"],
        life: .5,
        drag: new n(1,5),
        rotVel: new n(Math.PI * 1,Math.PI * 6),
        scale: {
            start: new n(.02,.04),
            end: new n(.01,.02),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.95,1)
        },
        color: 19544
    },
    bottleWhiteBreak: {
        image: ["part-spark-02.img"],
        life: new n(.4,.8),
        drag: new n(1,4),
        rotVel: new n(Math.PI * 1,Math.PI * 6),
        scale: {
            start: new n(.03,.06),
            end: new n(.05,.1),
            lerp: new n(0,1)
        },
        alpha: {
            start: .75,
            end: 0,
            lerp: new n(.75,1)
        },
        color: 16777215
    },
    bottleWhiteChip: {
        image: ["part-spark-02.img"],
        life: .5,
        drag: new n(1,5),
        rotVel: new n(Math.PI * 1,Math.PI * 6),
        scale: {
            start: new n(.02,.04),
            end: new n(.01,.02),
            lerp: new n(0,1)
        },
        alpha: {
            start: .75,
            end: 0,
            lerp: new n(.95,1)
        },
        color: 16777215
    },
    bottleBlueBreak: {
        image: ["part-spark-02.img"],
        life: new n(.4,.8),
        drag: new n(1,4),
        rotVel: new n(Math.PI * 1,Math.PI * 6),
        scale: {
            start: new n(.03,.06),
            end: new n(.05,.1),
            lerp: new n(0,1)
        },
        alpha: {
            start: .8,
            end: 0,
            lerp: new n(.75,1)
        },
        color: 19544
    },
    brickChip: {
        image: ["part-spark-02.img"],
        life: .5,
        drag: new n(1,10),
        rotVel: 0,
        scale: {
            start: new n(.04,.08),
            end: new n(.01,.02),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.95,1)
        },
        color: function() {
            return y.rgbToInt(y.hsvToRgb(0, .71, y.random(.32, .34)))
        }
    },
    clothBreak: {
        image: ["part-cloth-01.img"],
        life: new n(.8,1),
        drag: new n(1,5),
        rotVel: 0,
        scale: {
            start: new n(.07,.12),
            end: new n(.05,.1),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: function() {
            return y.rgbToInt(y.hsvToRgb(0, 0, y.random(.95, 1)))
        }
    },
    clothHit: {
        image: ["part-cloth-01.img"],
        life: .5,
        drag: new n(1,10),
        rotVel: 0,
        scale: {
            start: new n(.04,.08),
            end: new n(.01,.02),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.95,1)
        },
        color: function() {
            return y.rgbToInt(y.hsvToRgb(0, 0, y.random(.95, 1)))
        }
    },
    depositBoxGreyBreak: {
        image: ["part-plate-01.img"],
        life: new n(.5,1),
        drag: new n(7,8),
        rotVel: new n(0,Math.PI * 3),
        scale: {
            start: new n(.15,.25),
            end: new n(.12,.2),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: function() {
            return y.rgbToInt(y.hsvToRgb(0, 0, y.random(.36, .38)))
        }
    },
    depositBoxGoldBreak: {
        image: ["part-plate-01.img"],
        life: new n(.5,1),
        drag: new n(6,8),
        rotVel: new n(0,Math.PI * 3),
        scale: {
            start: new n(.2,.35),
            end: new n(.18,.25),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: function() {
            return y.rgbToInt(y.hsvToRgb(.11, .84, y.random(.64, .66)))
        }
    },
    glassChip: {
        image: ["part-spark-02.img"],
        life: .5,
        drag: new n(1,5),
        rotVel: new n(Math.PI * 1,Math.PI * 6),
        scale: {
            start: new n(.04,.08),
            end: new n(.01,.02),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.95,1)
        },
        color: 8444415
    },
    glassPlank: {
        image: ["part-plank-01.img"],
        life: new n(1,1.5),
        drag: new n(1,5),
        rotVel: new n(Math.PI * 3,Math.PI * 3),
        scale: {
            start: new n(.1,.2),
            end: new n(.08,.18),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: 8444415
    },
    goldChip: {
        image: ["part-spark-02.img"],
        life: .5,
        drag: new n(1,10),
        rotVel: 0,
        scale: {
            start: new n(.04,.08),
            end: new n(.01,.02),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.95,1)
        },
        color: function() {
            return y.rgbToInt(y.hsvToRgb(.11, .84, y.random(.88, .9)))
        }
    },
    pinkChip: {
        image: ["part-spark-02.img"],
        life: new n(.5,1),
        drag: new n(1,5),
        rotVel: new n(Math.PI * 3,Math.PI * 3),
        scale: {
            start: new n(.04,.08),
            end: new n(.01,.02),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: function() {
            return y.rgbToInt(y.hsvToRgb(0, .52, y.random(.98, 1)))
        }
    },
    ltblueChip: {
        image: ["part-spark-02.img"],
        life: new n(.5,1),
        drag: new n(1,5),
        rotVel: new n(Math.PI * 3,Math.PI * 3),
        scale: {
            start: new n(.04,.08),
            end: new n(.01,.02),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: function() {
            return y.rgbToInt(y.hsvToRgb(.5, .65, y.random(.98, 1)))
        }
    },
    yellowChip: {
        image: ["part-spark-02.img"],
        life: new n(.5,1),
        drag: new n(1,5),
        rotVel: new n(Math.PI * 3,Math.PI * 3),
        scale: {
            start: new n(.04,.08),
            end: new n(.01,.02),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: function() {
            return y.rgbToInt(y.hsvToRgb(.16, .73, y.random(.98, 1)))
        }
    },
    greenChip: {
        image: ["part-spark-02.img"],
        life: .5,
        drag: new n(1,10),
        rotVel: 0,
        scale: {
            start: new n(.04,.08),
            end: new n(.01,.02),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.95,1)
        },
        color: function() {
            return y.rgbToInt(y.hsvToRgb(.4, .18, y.random(.5, .62)))
        }
    },
    greenPlank: {
        image: ["part-plank-01.img"],
        life: new n(1,1.5),
        drag: new n(1,5),
        rotVel: new n(Math.PI * 3,Math.PI * 3),
        scale: {
            start: new n(.08,.16),
            end: new n(.05,.1),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: 3884335
    },
    greenhouseBreak: {
        image: ["part-spark-02.img", "part-plate-01.img", "part-panel-01.img"],
        life: new n(.5,1.5),
        drag: new n(1,5),
        rotVel: new n(Math.PI * 1,Math.PI * 6),
        scale: {
            start: new n(.25,.55),
            end: new n(.08,.18),
            lerp: new n(0,1)
        },
        alpha: {
            start: .8,
            end: 0,
            lerp: new n(.75,1)
        },
        color: 8444415
    },
    hutBreak: {
        image: ["part-panel-01.img"],
        life: new n(.5,1.5),
        drag: new n(1,5),
        rotVel: new n(0,Math.PI * 3),
        scale: {
            start: new n(.25,.55),
            end: new n(.08,.18),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: function() {
            return y.rgbToInt(y.hsvToRgb(.1, .81, y.random(.78, .82)))
        }
    },
    leaf: {
        image: ["part-leaf-01.img"],
        life: new n(.5,1),
        drag: new n(1,5),
        rotVel: new n(Math.PI * 3,Math.PI * 3),
        scale: {
            start: new n(.04,.08),
            end: new n(.01,.02),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: function() {
            return y.rgbToInt(y.hsvToRgb(0, 0, y.random(.5, .75)))
        }
    },
    leafPrickly: {
        image: ["part-leaf-01sv.img"],
        life: new n(.5,1),
        drag: new n(1,5),
        rotVel: new n(Math.PI * 3,Math.PI * 3),
        scale: {
            start: new n(.04,.08),
            end: new n(.01,.02),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: function() {
            return y.rgbToInt(y.hsvToRgb(0, 0, y.random(.8, .85)))
        }
    },
    leafRiver: {
        image: ["part-leaf-02.img"],
        life: new n(.5,1),
        drag: new n(1,5),
        rotVel: new n(Math.PI * 3,Math.PI * 3),
        scale: {
            start: new n(.04,.08),
            end: new n(.01,.02),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: function() {
            return y.rgbToInt(y.hsvToRgb(0, 0, y.random(.5, .75)))
        }
    },
    lockerBreak: {
        image: ["part-plate-01.img"],
        life: new n(.5,1),
        drag: new n(7,8),
        rotVel: new n(0,Math.PI * 3),
        scale: {
            start: new n(.15,.2),
            end: new n(.12,.15),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: function() {
            return y.rgbToInt(y.hsvToRgb(.1, .23, y.random(.51, .53)))
        }
    },
    ltgreenChip: {
        image: ["part-woodchip-01.img"],
        life: new n(.5,1),
        drag: new n(1,5),
        rotVel: new n(Math.PI * 3,Math.PI * 3),
        scale: {
            start: new n(.04,.08),
            end: new n(.01,.02),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: function() {
            return y.rgbToInt(y.hsvToRgb(.2, .42, y.random(.38, .42)))
        }
    },
    outhouseChip: {
        image: ["part-woodchip-01.img"],
        life: new n(.5,1),
        drag: new n(1,5),
        rotVel: new n(Math.PI * 3,Math.PI * 3),
        scale: {
            start: new n(.04,.08),
            end: new n(.01,.02),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: function() {
            return y.rgbToInt(y.hsvToRgb(.08, .57, y.random(.4, .46)))
        }
    },
    outhouseBreak: {
        image: ["part-panel-01.img"],
        life: new n(.5,1.5),
        drag: new n(1,5),
        rotVel: new n(0,Math.PI * 3),
        scale: {
            start: new n(.25,.55),
            end: new n(.08,.18),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: function() {
            return y.rgbToInt(y.hsvToRgb(.08, .79, y.random(.52, .54)))
        }
    },
    outhousePlank: {
        image: ["part-plank-01.img"],
        life: new n(1,1.5),
        drag: new n(1,5),
        rotVel: new n(Math.PI * 3,Math.PI * 3),
        scale: {
            start: new n(.1,.2),
            end: new n(.08,.18),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: function() {
            return y.rgbToInt(y.hsvToRgb(.08, .57, y.random(.4, .46)))
        }
    },
    potChip: {
        image: ["part-spark-02.img"],
        life: .5,
        drag: new n(1,10),
        rotVel: 0,
        scale: {
            start: new n(.04,.08),
            end: new n(.01,.02),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.95,1)
        },
        color: function() {
            return y.rgbToInt(y.hsvToRgb(.06, .84, y.random(.73, .77)))
        }
    },
    potBreak: {
        image: ["part-pot-01.img"],
        life: new n(.8,1),
        drag: new n(1,5),
        rotVel: 0,
        scale: {
            start: new n(.07,.12),
            end: new n(.05,.1),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: function() {
            return y.rgbToInt(y.hsvToRgb(.06, .84, y.random(.73, .77)))
        }
    },
    potatoChip: {
        image: ["part-spark-02.img"],
        life: .5,
        drag: new n(1,10),
        rotVel: 0,
        scale: {
            start: new n(.04,.08),
            end: new n(.01,.02),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.95,1)
        },
        color: function() {
            return y.rgbToInt(y.hsvToRgb(.075, .43, y.random(.48, .5)))
        }
    },
    potatoBreak: {
        image: ["part-pumpkin-01.img"],
        life: new n(.8,1),
        drag: new n(1,5),
        rotVel: 0,
        scale: {
            start: new n(.07,.12),
            end: new n(.05,.1),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: function() {
            return y.rgbToInt(y.hsvToRgb(.075, .43, y.random(.48, .5)))
        }
    },
    pumpkinChip: {
        image: ["part-spark-02.img"],
        life: .5,
        drag: new n(1,10),
        rotVel: 0,
        scale: {
            start: new n(.04,.08),
            end: new n(.01,.02),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.95,1)
        },
        color: function() {
            return y.rgbToInt(y.hsvToRgb(.07, 1, y.random(.98, 1)))
        }
    },
    pumpkinBreak: {
        image: ["part-pumpkin-01.img"],
        life: new n(.8,1),
        drag: new n(1,5),
        rotVel: 0,
        scale: {
            start: new n(.07,.12),
            end: new n(.05,.1),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: function() {
            return y.rgbToInt(y.hsvToRgb(.08, 1, y.random(.95, .97)))
        }
    },
    squashChip: {
        image: ["part-spark-02.img"],
        life: .5,
        drag: new n(1,10),
        rotVel: 0,
        scale: {
            start: new n(.04,.08),
            end: new n(.01,.02),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.95,1)
        },
        color: function() {
            return y.rgbToInt(y.hsvToRgb(.31, .86, y.random(.35, .36)))
        }
    },
    squashBreak: {
        image: ["part-pumpkin-01.img"],
        life: new n(.8,1),
        drag: new n(1,5),
        rotVel: 0,
        scale: {
            start: new n(.07,.12),
            end: new n(.05,.1),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: function() {
            return y.rgbToInt(y.hsvToRgb(.31, .86, y.random(.35, .36)))
        }
    },
    redChip: {
        image: ["part-spark-02.img"],
        life: .5,
        drag: new n(1,10),
        rotVel: 0,
        scale: {
            start: new n(.04,.08),
            end: new n(.01,.02),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.95,1)
        },
        color: function() {
            return y.rgbToInt(y.hsvToRgb(.98, 1, y.random(.52, .54)))
        }
    },
    redBreak: {
        image: ["part-spark-02.img"],
        life: new n(.8,1),
        drag: new n(1,5),
        rotVel: 0,
        scale: {
            start: new n(.07,.12),
            end: new n(.05,.1),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: function() {
            return y.rgbToInt(y.hsvToRgb(.98, 1, y.random(.52, .54)))
        }
    },
    redPlank: {
        image: ["part-plank-01.img"],
        life: new n(1,1.5),
        drag: new n(1,5),
        rotVel: new n(Math.PI * 3,Math.PI * 3),
        scale: {
            start: new n(.1,.2),
            end: new n(.08,.18),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: function() {
            return y.rgbToInt(y.hsvToRgb(.02, 1, y.random(.26, .28)))
        }
    },
    rockChip: {
        image: ["map-stone-01.img"],
        life: .5,
        drag: new n(1,10),
        rotVel: 0,
        scale: {
            start: new n(.04,.08),
            end: new n(.01,.02),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.95,1)
        },
        color: function() {
            return y.rgbToInt(y.hsvToRgb(0, 0, y.random(.5, .75)))
        }
    },
    rockBreak: {
        image: ["map-stone-01.img"],
        life: new n(.8,1),
        drag: new n(1,5),
        rotVel: 0,
        scale: {
            start: new n(.07,.12),
            end: new n(.05,.1),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: function() {
            return y.rgbToInt(y.hsvToRgb(0, 0, y.random(.5, .75)))
        }
    },
    rockEyeChip: {
        image: ["map-stone-01.img"],
        life: .5,
        drag: new n(1,10),
        rotVel: 0,
        scale: {
            start: new n(.03,.06),
            end: new n(.01,.02),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.95,1)
        },
        color: 2696225
    },
    rockEyeBreak: {
        image: ["map-stone-01.img"],
        life: new n(.8,1),
        drag: new n(4,12),
        rotVel: 0,
        scale: {
            start: new n(.05,.1),
            end: new n(.03,.06),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: 2696225
    },
    shackBreak: {
        image: ["part-panel-01.img"],
        life: new n(.5,1.5),
        drag: new n(1,5),
        rotVel: new n(0,Math.PI * 3),
        scale: {
            start: new n(.25,.55),
            end: new n(.08,.18),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: function() {
            return y.rgbToInt(y.hsvToRgb(.1, .24, y.random(.38, .41)))
        }
    },
    shackGreenBreak: {
        image: ["part-panel-01.img"],
        life: new n(.5,1.5),
        drag: new n(1,5),
        rotVel: new n(0,Math.PI * 3),
        scale: {
            start: new n(.25,.55),
            end: new n(.08,.18),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: 5730406
    },
    tanChip: {
        image: ["part-woodchip-01.img"],
        life: new n(.5,1),
        drag: new n(1,5),
        rotVel: new n(Math.PI * 3,Math.PI * 3),
        scale: {
            start: new n(.04,.08),
            end: new n(.01,.02),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: function() {
            return y.rgbToInt(y.hsvToRgb(.1, .35, y.random(.48, .52)))
        }
    },
    teahouseBreak: {
        image: ["part-panel-01.img"],
        life: new n(.5,1.5),
        drag: new n(1,5),
        rotVel: new n(0,Math.PI * 3),
        scale: {
            start: new n(.25,.55),
            end: new n(.08,.18),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: function() {
            return y.rgbToInt(y.hsvToRgb(.6, .31, y.random(.42, .45)))
        }
    },
    teapavilionBreak: {
        image: ["part-panel-01.img"],
        life: new n(.5,1.5),
        drag: new n(1,5),
        rotVel: new n(0,Math.PI * 3),
        scale: {
            start: new n(.25,.55),
            end: new n(.08,.18),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: function() {
            return y.rgbToInt(y.hsvToRgb(0, .8, y.random(.6, .62)))
        }
    },
    toiletBreak: {
        image: ["part-spark-02.img"],
        life: new n(.8,1),
        drag: new n(1,5),
        rotVel: 0,
        scale: {
            start: new n(.07,.12),
            end: new n(.05,.1),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: function() {
            return y.rgbToInt(y.hsvToRgb(.97, 0, y.random(.95, .97)))
        }
    },
    toiletMetalBreak: {
        image: ["part-spark-02.img"],
        life: new n(.8,1),
        drag: new n(4,5),
        rotVel: 0,
        scale: {
            start: new n(.07,.12),
            end: new n(.05,.1),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: function() {
            return y.rgbToInt(y.hsvToRgb(.01, .02, y.random(.38, .41)))
        }
    },
    turkeyFeathersHit: {
        image: ["part-feather-01.img", "part-feather-02.img"],
        life: new n(1,1.5),
        drag: new n(1,10),
        rotVel: new n(0,Math.PI * 3),
        scale: {
            start: new n(.1,.2),
            end: new n(.08,.12),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.95,1)
        },
        color: function() {
            return 16777215
        }
    },
    turkeyFeathersDeath: {
        image: ["part-feather-01.img", "part-feather-02.img"],
        life: new n(1,1.5),
        drag: new n(1,10),
        rotVel: new n(0,Math.PI * 3),
        scale: {
            start: new n(.15,.25),
            end: new n(.12,.2),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.95,1)
        },
        color: function() {
            return 16777215
        }
    },
    whiteChip: {
        image: ["part-spark-02.img"],
        life: .5,
        drag: new n(1,10),
        rotVel: 0,
        scale: {
            start: new n(.04,.08),
            end: new n(.01,.02),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.95,1)
        },
        color: function() {
            return y.rgbToInt(y.hsvToRgb(.97, 0, y.random(.95, .97)))
        }
    },
    whitePlank: {
        image: ["part-plank-01.img"],
        life: new n(1,1.5),
        drag: new n(1,5),
        rotVel: new n(Math.PI * 3,Math.PI * 3),
        scale: {
            start: new n(.1,.2),
            end: new n(.08,.18),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: function() {
            return y.rgbToInt(y.hsvToRgb(.97, 0, y.random(.95, .97)))
        }
    },
    windowBreak: {
        image: ["part-spark-02.img"],
        life: new n(.4,.8),
        drag: new n(1,4),
        rotVel: new n(Math.PI * 1,Math.PI * 6),
        scale: {
            start: new n(.07,.12),
            end: new n(.05,.1),
            lerp: new n(0,1)
        },
        alpha: {
            start: .8,
            end: 0,
            lerp: new n(.75,1)
        },
        color: 8444415
    },
    woodChip: {
        image: ["part-woodchip-01.img"],
        life: new n(.5,1),
        drag: new n(1,5),
        rotVel: new n(Math.PI * 3,Math.PI * 3),
        scale: {
            start: new n(.04,.08),
            end: new n(.01,.02),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: function() {
            return y.rgbToInt(y.hsvToRgb(.05, 1, y.random(.35, .45)))
        }
    },
    woodLog: {
        image: ["part-log-01.img"],
        life: new n(1,1.5),
        drag: new n(1,5),
        rotVel: new n(Math.PI * 3,Math.PI * 3),
        scale: {
            start: new n(.1,.2),
            end: new n(.08,.18),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: function() {
            return y.rgbToInt(y.hsvToRgb(.05, 1, y.random(.35, .45)))
        }
    },
    woodPlank: {
        image: ["part-plank-01.img"],
        life: new n(1,1.5),
        drag: new n(1,5),
        rotVel: new n(Math.PI * 3,Math.PI * 3),
        scale: {
            start: new n(.1,.2),
            end: new n(.08,.18),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: function() {
            return y.rgbToInt(y.hsvToRgb(.05, 1, y.random(.25, .35)))
        }
    },
    woodShard: {
        image: ["part-spark-02.img"],
        life: new n(1,1.5),
        drag: new n(3,5),
        rotVel: new n(Math.PI * 3,Math.PI * 3),
        scale: {
            start: new n(.06,.15),
            end: new n(.02,.1),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: function() {
            return y.rgbToInt(y.hsvToRgb(.05, 1, y.random(.25, .35)))
        }
    },
    "9mm": {
        image: ["part-shell-01.img"],
        life: new n(.5,.75),
        drag: new n(3,4),
        rotVel: new n(Math.PI * 3,Math.PI * 3),
        scale: {
            start: .0625,
            end: .0325,
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.95,1)
        },
        color: function() {
            return y.rgbToInt(y.hsvToRgb(0, 0, y.random(.9, .95)))
        }
    },
    "9mm_cursed": {
        image: ["part-shell-01.img"],
        life: new n(.5,.75),
        drag: new n(3,4),
        rotVel: new n(Math.PI * 3,Math.PI * 3),
        scale: {
            start: .0625,
            end: .0325,
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.95,1)
        },
        color: function() {
            return y.rgbToInt(y.hsvToRgb(0, 0, y.random(.9, .95)))
        }
    },
    "762mm": {
        image: ["part-shell-02.img"],
        life: new n(.75,1),
        drag: new n(1.5,2.5),
        rotVel: new n(Math.PI * 2.5,Math.PI * 2.5),
        scale: {
            start: .075,
            end: .045,
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.925,1)
        },
        color: function() {
            return y.rgbToInt(y.hsvToRgb(0, 0, y.random(.9, .95)))
        }
    },
    "556mm": {
        image: ["part-shell-04.img"],
        life: new n(.75,1),
        drag: new n(1.5,2.5),
        rotVel: new n(Math.PI * 2.5,Math.PI * 2.5),
        scale: {
            start: .075,
            end: .045,
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.925,1)
        },
        color: function() {
            return y.rgbToInt(y.hsvToRgb(0, 0, y.random(.9, .95)))
        }
    },
    "12gauge": {
        image: ["part-shell-03.img"],
        life: new n(.5,.75),
        drag: new n(1,2),
        rotVel: new n(Math.PI * 3,Math.PI * 3),
        scale: {
            start: .1,
            end: .05,
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.95,1)
        },
        color: function() {
            return y.rgbToInt(y.hsvToRgb(0, 0, y.random(.9, .95)))
        }
    },
    "50AE": {
        image: ["part-shell-01.img"],
        life: new n(.5,.75),
        drag: new n(3,4),
        rotVel: new n(Math.PI * 3,Math.PI * 3),
        scale: {
            start: .0625,
            end: .0325,
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.95,1)
        },
        color: function() {
            return y.rgbToInt(y.hsvToRgb(0, 0, y.random(.9, .95)))
        }
    },
    "308sub": {
        image: ["part-shell-05.img"],
        life: new n(.5,.75),
        drag: new n(3,4),
        rotVel: new n(Math.PI * 3,Math.PI * 3),
        scale: {
            start: .0625,
            end: .0325,
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.95,1)
        },
        color: function() {
            return y.rgbToInt(y.hsvToRgb(0, 0, y.random(.9, .95)))
        }
    },
    flare: {
        image: ["part-shell-03.img"],
        life: new n(.5,.75),
        drag: new n(1,2),
        rotVel: new n(Math.PI * 3,Math.PI * 3),
        scale: {
            start: .1,
            end: .05,
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.95,1)
        },
        color: function() {
            return y.rgbToInt(y.hsvToRgb(0, 0, y.random(.9, .95)))
        }
    },
    "45acp": {
        image: ["part-shell-01.img"],
        life: new n(.5,.75),
        drag: new n(3,4),
        rotVel: new n(Math.PI * 3,Math.PI * 3),
        scale: {
            start: .07,
            end: .04,
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.95,1)
        },
        color: function() {
            return y.rgbToInt(y.hsvToRgb(0, 0, y.random(.9, .95)))
        }
    },
    potato_ammo: {
        image: ["part-wedge-01.img"],
        life: new n(.5,.75),
        drag: new n(3,4),
        rotVel: new n(Math.PI * 3,Math.PI * 3),
        scale: {
            start: .07,
            end: .04,
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.95,1)
        },
        color: 16777215
    },
    bugle_ammo: {
        image: ["part-note-02.img"],
        life: new n(1.25,1.3),
        drag: new n(3,4),
        rotVel: new n(Math.PI * 1,Math.PI * 1),
        scale: {
            start: .1,
            end: .14,
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.5,1)
        },
        color: 16767488
    },
    fragPin: {
        image: ["part-frag-pin-01.img"],
        life: new n(.5,.5),
        drag: new n(.9,1),
        rotVel: 0,
        scale: {
            start: .18,
            end: .14,
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.5,1)
        },
        color: 16777215
    },
    fragLever: {
        image: ["part-frag-lever-01.img"],
        life: new n(.5,.5),
        drag: new n(.9,1),
        rotVel: Math.PI * 9,
        scale: {
            start: .18,
            end: .14,
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.5,1)
        },
        color: 16777215
    },
    explosionBurst: {
        image: ["part-frag-burst-01.img"],
        life: .5,
        drag: 0,
        rotVel: 0,
        scale: {
            start: 1,
            end: 4,
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.75,1)
        },
        color: function() {
            return y.rgbToInt(y.hsvToRgb(.065, 1, y.random(.98, .99)))
        }
    },
    explosionMIRV: {
        image: ["part-frag-burst-01.img"],
        life: .5,
        drag: 0,
        rotVel: 0,
        scale: {
            start: 1,
            end: 4,
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.75,1)
        },
        color: function() {
            return y.rgbToInt(y.hsvToRgb(0, 1, y.random(.82, .84)))
        }
    },
    explosionSmoke: {
        image: ["part-smoke-01.img"],
        life: new n(2,3),
        drag: 0,
        rotVel: new n(Math.PI * .25,Math.PI * .5),
        scale: {
            start: new n(.07,.12),
            end: new n(.05,.1),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: function() {
            return y.rgbToInt(y.hsvToRgb(0, 0, y.random(.9, .95)))
        }
    },
    explosionUSAS: {
        image: ["part-frag-burst-01.img"],
        life: .5,
        drag: 0,
        rotVel: 0,
        scale: {
            start: 1,
            end: 4,
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.75,1)
        },
        color: function() {
            return y.rgbToInt(y.hsvToRgb(.08, 1, y.random(.98, .99)))
        }
    },
    explosionRounds: {
        image: ["part-frag-burst-03.img"],
        life: .5,
        drag: 0,
        rotVel: 0,
        scale: {
            start: 1,
            end: 4,
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.75,1)
        },
        color: function() {
            return y.rgbToInt(y.hsvToRgb(.08, .7, y.random(.75, .8)))
        }
    },
    explosionBomb: {
        image: ["part-frag-burst-02.img"],
        life: .5,
        drag: 0,
        rotVel: 0,
        scale: {
            start: 1,
            end: 4,
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.75,1)
        },
        color: 16777215
    },
    explosionPotato: {
        image: ["part-frag-burst-01.img"],
        life: .5,
        drag: 0,
        rotVel: 0,
        scale: {
            start: 1,
            end: 4,
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.75,1)
        },
        color: 11363866
    },
    explosionPotatoSMG: {
        image: ["part-frag-burst-01.img"],
        life: .5,
        drag: 0,
        rotVel: 0,
        scale: {
            start: 1,
            end: 4,
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.75,1)
        },
        color: 12888074
    },
    airdropSmoke: {
        image: ["part-smoke-02.img", "part-smoke-03.img"],
        zOrd: 499,
        life: new n(1,1.5),
        drag: 0,
        rotVel: new n(Math.PI * .25,Math.PI * .5),
        scale: {
            start: new n(.67,.72),
            end: new n(.55,.61),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: function() {
            return y.rgbToInt(y.hsvToRgb(0, 0, y.random(.9, .95)))
        }
    },
    airdropCrate01: {
        image: ["part-airdrop-01.img"],
        life: new n(.85,1.15),
        drag: new n(2,2.25),
        rotVel: new n(Math.PI * 1,Math.PI * 2),
        scale: {
            start: .5,
            end: .4,
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: 16777215
    },
    airdropCrate01h: {
        image: ["part-airdrop-01h.img"],
        life: new n(.85,1.15),
        drag: new n(2,2.25),
        rotVel: new n(Math.PI * 1,Math.PI * 2),
        scale: {
            start: .5,
            end: .4,
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: 16777215
    },
    airdropCrate01x: {
        image: ["part-airdrop-01x.img"],
        life: new n(.85,1.15),
        drag: new n(2,2.25),
        rotVel: new n(Math.PI * 1,Math.PI * 2),
        scale: {
            start: .5,
            end: .4,
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: 16777215
    },
    airdropCrate02: {
        image: ["part-airdrop-02.img"],
        life: new n(.85,1.15),
        drag: new n(1.85,2.15),
        rotVel: new n(0,Math.PI * 2),
        scale: {
            start: .5,
            end: .4,
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: 16777215
    },
    airdropCrate02h: {
        image: ["part-airdrop-02h.img"],
        life: new n(.85,1.15),
        drag: new n(1.85,2.15),
        rotVel: new n(0,Math.PI * 2),
        scale: {
            start: .5,
            end: .4,
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: 16777215
    },
    airdropCrate02x: {
        image: ["part-airdrop-02x.img"],
        life: new n(.85,1.15),
        drag: new n(1.85,2.15),
        rotVel: new n(0,Math.PI * 2),
        scale: {
            start: .5,
            end: .4,
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: 16777215
    },
    airdropCrate03: {
        image: ["part-airdrop-03.img"],
        life: new n(.85,1.15),
        drag: new n(2,2.25),
        rotVel: new n(Math.PI * 1,Math.PI * 2),
        scale: {
            start: .5,
            end: .4,
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: 16777215
    },
    airdropCrate04: {
        image: ["part-airdrop-04.img"],
        life: new n(.85,1.15),
        drag: new n(1.85,2.15),
        rotVel: new n(0,Math.PI * 2),
        scale: {
            start: .5,
            end: .4,
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: 16777215
    },
    classShell01a: {
        image: ["part-class-shell-01a.img"],
        life: new n(.85,1.15),
        drag: new n(2,2.25),
        rotVel: new n(Math.PI * 1,Math.PI * 2),
        scale: {
            start: .5,
            end: .4,
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: 16777215
    },
    classShell01b: {
        image: ["part-class-shell-01b.img"],
        life: new n(.85,1.15),
        drag: new n(1.85,2.15),
        rotVel: new n(0,Math.PI * 2),
        scale: {
            start: .5,
            end: .4,
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: 16777215
    },
    classShell02a: {
        image: ["part-class-shell-02a.img"],
        life: new n(.85,1.15),
        drag: new n(2,2.25),
        rotVel: new n(Math.PI * 1,Math.PI * 2),
        scale: {
            start: .5,
            end: .4,
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: 16777215
    },
    classShell02b: {
        image: ["part-class-shell-02b.img"],
        life: new n(.85,1.15),
        drag: new n(1.85,2.15),
        rotVel: new n(0,Math.PI * 2),
        scale: {
            start: .5,
            end: .4,
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: 16777215
    },
    classShell03a: {
        image: ["part-class-shell-03a.img"],
        life: new n(.85,1.15),
        drag: new n(2,2.25),
        rotVel: new n(Math.PI * 1,Math.PI * 2),
        scale: {
            start: .5,
            end: .4,
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: 16777215
    },
    classShell03b: {
        image: ["part-class-shell-03b.img"],
        life: new n(.85,1.15),
        drag: new n(1.85,2.15),
        rotVel: new n(0,Math.PI * 2),
        scale: {
            start: .5,
            end: .4,
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: 16777215
    },
    cabinSmoke: {
        image: ["part-smoke-02.img", "part-smoke-03.img"],
        life: new n(3,3.25),
        drag: new n(.2,.22),
        rotVel: new n(Math.PI * .25,Math.PI * .5),
        scale: {
            start: new n(.2,.25),
            end: new n(.6,.65),
            lerp: new n(0,1)
        },
        alpha: {
            start: .7,
            end: 0,
            lerp: new n(.9,1)
        },
        alphaIn: {
            start: 0,
            end: .7,
            lerp: new n(0,.1)
        },
        color: function() {
            return y.rgbToInt(y.hsvToRgb(0, 0, y.random(.69, .695)))
        }
    },
    bathhouseSteam: {
        image: ["part-smoke-02.img", "part-smoke-03.img"],
        life: new n(10,12),
        drag: new n(.04,.06),
        rotVel: new n(Math.PI * .25,Math.PI * .5),
        scale: {
            start: new n(.2,.25),
            end: new n(.9,.95),
            lerp: new n(0,1)
        },
        alpha: {
            start: .5,
            end: 0,
            lerp: new n(.9,1)
        },
        alphaIn: {
            start: 0,
            end: .5,
            lerp: new n(0,.1)
        },
        color: function() {
            return y.rgbToInt(y.hsvToRgb(0, 0, y.random(.99, .995)))
        }
    },
    bunkerBubbles: {
        image: ["player-ripple-01.img"],
        zOrd: 10,
        life: new n(2.25,2.5),
        drag: new n(1.85,2.15),
        rotVel: new n(Math.PI * .25,Math.PI * .5),
        scale: {
            start: new n(.2,.25),
            end: new n(.65,.7),
            lerp: new n(0,1)
        },
        alpha: {
            start: .25,
            end: 0,
            lerp: new n(.9,1)
        },
        color: function() {
            return y.rgbToInt(y.hsvToRgb(0, 0, y.random(.95, 1)))
        }
    },
    waterRipple: {
        image: ["player-ripple-01.img"],
        zOrd: 10,
        life: 1.75,
        drag: 0,
        rotVel: 0,
        scale: {
            start: .15,
            exp: .5
        },
        alpha: {
            start: 1,
            exp: -1
        },
        color: 11792639
    },
    leafAutumn: {
        image: ["part-leaf-03.img", "part-leaf-04.img", "part-leaf-05.img", "part-leaf-06.img"],
        life: new n(10,15),
        drag: new n(0,0),
        rotVel: new n(Math.PI * .25,Math.PI * .5),
        scale: {
            start: new n(.12,.15),
            end: new n(.08,.11),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        alphaIn: {
            start: 0,
            end: 1,
            lerp: new n(0,.05)
        },
        color: function() {
            return y.rgbToInt(y.hsvToRgb(0, 0, y.random(.9, .95)))
        }
    },
    leafHalloween: {
        image: ["part-leaf-03.img", "part-leaf-04.img", "part-leaf-05.img", "part-leaf-06.img"],
        life: new n(10,15),
        drag: new n(0,0),
        rotVel: new n(Math.PI * .25,Math.PI * .5),
        scale: {
            start: new n(.12,.15),
            end: new n(.08,.11),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        alphaIn: {
            start: 0,
            end: 1,
            lerp: new n(0,.05)
        },
        color: function() {
            return y.rgbToInt(y.hsvToRgb(0, 0, y.random(.5, .55)))
        },
        ignoreValueAdjust: !0
    },
    leafSpring: {
        image: ["part-blossom-01.img", "part-blossom-02.img", "part-blossom-03.img", "part-blossom-04.img"],
        life: new n(10,15),
        drag: new n(0,0),
        rotVel: new n(Math.PI * .25,Math.PI * .5),
        scale: {
            start: new n(.13,.15),
            end: new n(.08,.11),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        alphaIn: {
            start: 0,
            end: 1,
            lerp: new n(0,.05)
        },
        color: function() {
            return y.rgbToInt(y.hsvToRgb(0, 0, y.random(.9, .95)))
        }
    },
    leafSummer: {
        image: ["part-leaf-06.img"],
        life: new n(10,15),
        drag: new n(0,0),
        rotVel: new n(Math.PI * .25,Math.PI * .5),
        scale: {
            start: new n(.12,.15),
            end: new n(.08,.11),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        alphaIn: {
            start: 0,
            end: 1,
            lerp: new n(0,.05)
        },
        color: function() {
            return y.rgbToInt(y.hsvToRgb(0, 0, y.random(.7, .95)))
        },
        ignoreValueAdjust: !0
    },
    leafPotato: {
        image: ["part-blossom-01.img", "part-blossom-02.img", "part-blossom-03.img", "part-blossom-04.img", "part-potato-02.img"],
        life: new n(10,15),
        drag: new n(0,0),
        rotVel: new n(Math.PI * .25,Math.PI * .5),
        scale: {
            start: new n(.13,.15),
            end: new n(.08,.11),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        alphaIn: {
            start: 0,
            end: 1,
            lerp: new n(0,.05)
        },
        color: function() {
            return y.rgbToInt(y.hsvToRgb(0, 0, y.random(.9, .95)))
        }
    },
    potato: {
        image: ["part-potato-02.img"],
        life: new n(10,15),
        drag: new n(0,0),
        rotVel: new n(Math.PI * .25,Math.PI * .5),
        scale: {
            start: new n(.13,.15),
            end: new n(.08,.11),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        alphaIn: {
            start: 0,
            end: 1,
            lerp: new n(0,.05)
        },
        color: function() {
            return y.rgbToInt(y.hsvToRgb(0, 0, y.random(.9, .95)))
        }
    },
    snow: {
        image: ["part-snow-01.img"],
        life: new n(10,15),
        drag: new n(0,0),
        rotVel: new n(Math.PI * .25,Math.PI * .5),
        scale: {
            start: new n(.07,.12),
            end: new n(.05,.1),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        alphaIn: {
            start: 0,
            end: 1,
            lerp: new n(0,.05)
        },
        color: function() {
            return y.rgbToInt(y.hsvToRgb(0, 0, y.random(.9, .95)))
        }
    },
    snowball_impact: {
        image: ["part-snow-01.img"],
        life: new n(.5,1),
        drag: new n(0,0),
        rotVel: new n(Math.PI * .25,Math.PI * .5),
        scale: {
            start: new n(.13,.23),
            end: new n(.07,.14),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: function() {
            return y.rgbToInt(y.hsvToRgb(0, 0, y.random(.9, .95)))
        }
    },
    potato_impact: {
        image: ["part-potato-01.img"],
        life: new n(.5,1),
        drag: new n(0,0),
        rotVel: new n(Math.PI * .25,Math.PI * .5),
        scale: {
            start: new n(.13,.23),
            end: new n(.07,.14),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: function() {
            return y.rgbToInt(y.hsvToRgb(0, 0, y.random(.9, .95)))
        }
    },
    potato_smg_impact: {
        image: ["part-potato-01.img"],
        life: new n(.5,1),
        drag: new n(0,0),
        rotVel: new n(Math.PI * .25,Math.PI * .5),
        scale: {
            start: new n(.13,.23),
            end: new n(.07,.14),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.9,1)
        },
        color: 16770437
    },
    heal_basic: {
        image: ["part-heal-basic.img"],
        life: new n(.75,1),
        drag: .25,
        rotVel: 0,
        scale: {
            start: new n(.1,.12),
            end: new n(.05,.07),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.7,1)
        },
        alphaIn: {
            start: 0,
            end: 1,
            lerp: new n(0,.05)
        },
        color: function() {
            return y.rgbToInt(y.hsvToRgb(0, 1, y.random(.7, 1)))
        },
        ignoreValueAdjust: !0
    },
    heal_heart: {
        image: ["part-heal-heart.img"],
        life: new n(.75,1),
        drag: .25,
        rotVel: 0,
        scale: {
            start: new n(.1,.12),
            end: new n(.05,.07),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.7,1)
        },
        alphaIn: {
            start: 0,
            end: 1,
            lerp: new n(0,.05)
        },
        color: function() {
            return y.rgbToInt(y.hsvToRgb(0, 1, y.random(.7, 1)))
        },
        ignoreValueAdjust: !0
    },
    heal_moon: {
        image: ["part-heal-moon.img"],
        life: new n(.75,1),
        drag: .25,
        rotVel: new n(Math.PI * .25,Math.PI * .5),
        scale: {
            start: new n(.1,.12),
            end: new n(.05,.07),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.7,1)
        },
        alphaIn: {
            start: 0,
            end: 1,
            lerp: new n(0,.05)
        },
        color: function() {
            return y.rgbToInt(y.hsvToRgb(0, 1, y.random(.7, 1)))
        },
        ignoreValueAdjust: !0
    },
    heal_tomoe: {
        image: ["part-heal-tomoe.img"],
        life: new n(.75,1),
        drag: .25,
        rotVel: new n(Math.PI * .5,Math.PI * 1),
        scale: {
            start: new n(.1,.12),
            end: new n(.05,.07),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.7,1)
        },
        alphaIn: {
            start: 0,
            end: 1,
            lerp: new n(0,.05)
        },
        color: function() {
            return y.rgbToInt(y.hsvToRgb(0, 1, y.random(.7, 1)))
        },
        ignoreValueAdjust: !0
    },
    boost_basic: {
        image: ["part-boost-basic.img"],
        life: new n(.75,1),
        drag: 0,
        rotVel: new n(Math.PI * .25,Math.PI * .5),
        scale: {
            start: new n(.12,.14),
            end: new n(.06,.08),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.7,1)
        },
        alphaIn: {
            start: 0,
            end: 1,
            lerp: new n(0,.05)
        },
        color: function() {
            return y.rgbToInt(y.hsvToRgb(.3, 1, y.random(.7, 1)))
        },
        ignoreValueAdjust: !0
    },
    boost_star: {
        image: ["part-boost-star.img"],
        life: new n(.75,1),
        drag: 0,
        rotVel: new n(Math.PI * .25,Math.PI * .5),
        scale: {
            start: new n(.12,.14),
            end: new n(.06,.08),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.7,1)
        },
        alphaIn: {
            start: 0,
            end: 1,
            lerp: new n(0,.05)
        },
        color: function() {
            return y.rgbToInt(y.hsvToRgb(.3, 1, y.random(.7, 1)))
        },
        ignoreValueAdjust: !0
    },
    boost_naturalize: {
        image: ["part-boost-naturalize.img"],
        life: new n(.75,1),
        drag: 0,
        rotVel: new n(Math.PI * .35,Math.PI * .7),
        scale: {
            start: new n(.12,.14),
            end: new n(.06,.08),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.7,1)
        },
        alphaIn: {
            start: 0,
            end: 1,
            lerp: new n(0,.05)
        },
        color: function() {
            return y.rgbToInt(y.hsvToRgb(.3, 1, y.random(.7, 1)))
        },
        ignoreValueAdjust: !0
    },
    boost_shuriken: {
        image: ["part-boost-shuriken.img"],
        life: new n(.75,1),
        drag: 0,
        rotVel: new n(Math.PI * 1,Math.PI * 2),
        scale: {
            start: new n(.12,.14),
            end: new n(.06,.08),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.7,1)
        },
        alphaIn: {
            start: 0,
            end: 1,
            lerp: new n(0,.05)
        },
        color: function() {
            return y.rgbToInt(y.hsvToRgb(.3, 1, y.random(.7, 1)))
        },
        ignoreValueAdjust: !0
    },
    revive_basic: {
        image: ["part-heal-basic.img"],
        life: new n(.75,1),
        drag: .25,
        rotVel: 0,
        scale: {
            start: new n(.1,.12),
            end: new n(.05,.07),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.7,1)
        },
        alphaIn: {
            start: 0,
            end: 1,
            lerp: new n(0,.05)
        },
        color: function() {
            return y.rgbToInt(y.hsvToRgb(.83, 1, y.random(.7, 1)))
        },
        ignoreValueAdjust: !0
    },
    leafStim: {
        image: ["part-blossom-01.img", "part-blossom-02.img", "part-blossom-03.img", "part-blossom-04.img"],
        life: new n(4,5),
        drag: 0,
        rotVel: new n(Math.PI * .25,Math.PI * .5),
        scale: {
            start: new n(.12,.14),
            end: new n(.06,.08),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.7,1)
        },
        alphaIn: {
            start: 0,
            end: 1,
            lerp: new n(0,.05)
        },
        color: function() {
            return y.rgbToInt(y.hsvToRgb(.37, 1, y.random(.95, 1)))
        }
    },
    takedownStim: {
        image: ["part-takedown-01.img"],
        life: new n(4,5),
        drag: 0,
        rotVel: new n(Math.PI * .25,Math.PI * .5),
        scale: {
            start: new n(.12,.14),
            end: new n(.06,.08),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.7,1)
        },
        alphaIn: {
            start: 0,
            end: 1,
            lerp: new n(0,.05)
        },
        color: 13107200
    },
    inspireStim: {
        image: ["part-note-01.img"],
        life: new n(4,5),
        drag: 0,
        rotVel: new n(Math.PI * .25,Math.PI * .5),
        scale: {
            start: new n(.12,.14),
            end: new n(.06,.08),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.7,1)
        },
        alphaIn: {
            start: 0,
            end: 1,
            lerp: new n(0,.05)
        },
        color: function() {
            return y.rgbToInt(y.hsvToRgb(.13, 1, y.random(.98, 1)))
        }
    },
    xp_common: {
        image: ["part-boost-basic.img"],
        life: new n(.75,1),
        drag: 0,
        rotVel: new n(Math.PI * .25,Math.PI * .5),
        scale: {
            start: new n(.12,.14),
            end: new n(.06,.08),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.7,1)
        },
        alphaIn: {
            start: 0,
            end: 1,
            lerp: new n(0,.05)
        },
        color: function() {
            return Math.random() > .5 ? y.rgbToInt(y.hsvToRgb(.12, .97, y.random(.95, 1))) : y.rgbToInt(y.hsvToRgb(.16, 1, y.random(.95, 1)))
        },
        ignoreValueAdjust: !0
    },
    xp_rare: {
        image: ["part-boost-basic.img"],
        life: new n(.75,1),
        drag: 0,
        rotVel: new n(Math.PI * .25,Math.PI * .5),
        scale: {
            start: new n(.12,.14),
            end: new n(.06,.08),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.7,1)
        },
        alphaIn: {
            start: 0,
            end: 1,
            lerp: new n(0,.05)
        },
        color: function() {
            return Math.random() > .5 ? y.rgbToInt(y.hsvToRgb(.05, .94, y.random(.85, .88))) : y.rgbToInt(y.hsvToRgb(.06, .95, y.random(.95, 1)))
        },
        ignoreValueAdjust: !0
    },
    xp_mythic: {
        image: ["part-boost-basic.img"],
        life: new n(.75,1),
        drag: 0,
        rotVel: new n(Math.PI * .25,Math.PI * .5),
        scale: {
            start: new n(.12,.14),
            end: new n(.06,.08),
            lerp: new n(0,1)
        },
        alpha: {
            start: 1,
            end: 0,
            lerp: new n(.7,1)
        },
        alphaIn: {
            start: 0,
            end: 1,
            lerp: new n(0,.05)
        },
        color: function() {
            return Math.random() > .5 ? y.rgbToInt(y.hsvToRgb(0, .96, y.random(.91, .94))) : y.rgbToInt(y.hsvToRgb(.03, .95, y.random(.92, .95)))
        },
        ignoreValueAdjust: !0
    }
}
  , Wr = {
    smoke_barrel: {
        particle: "explosionSmoke",
        rate: new n(.2,.3),
        radius: 0,
        speed: new n(2,3),
        angle: Math.PI * .1,
        rot: new n(0,Math.PI * 2),
        maxCount: Number.MAX_VALUE
    },
    cabin_smoke_parent: {
        particle: "cabinSmoke",
        rate: new n(.72,.83),
        radius: 0,
        speed: new n(64,96),
        angle: Math.PI * .1,
        rot: new n(0,Math.PI * 2),
        maxCount: Number.MAX_VALUE
    },
    bathhouse_steam: {
        particle: "bathhouseSteam",
        rate: new n(2,3),
        radius: 1,
        speed: new n(1.5,2),
        angle: Math.PI * .1,
        maxCount: Number.MAX_VALUE
    },
    bunker_bubbles_01: {
        particle: "bunkerBubbles",
        rate: new n(.3,.325),
        radius: 0,
        speed: new n(1.6,1.8),
        angle: Math.PI * -2.2,
        rot: new n(0,Math.PI * 2),
        maxCount: Number.MAX_VALUE
    },
    bunker_bubbles_02: {
        particle: "bunkerBubbles",
        rate: new n(.4,.425),
        radius: 0,
        speed: new n(1.6,1.8),
        angle: Math.PI * -2.2,
        rot: new n(0,Math.PI * 2),
        maxCount: Number.MAX_VALUE
    },
    falling_leaf: {
        particle: "leafAutumn",
        rate: new n(.08,.12),
        radius: 120,
        speed: new n(2,3),
        angle: Math.PI * .2,
        rot: new n(0,Math.PI * 2),
        maxCount: Number.MAX_VALUE,
        zOrd: 999
    },
    falling_leaf_halloween: {
        particle: "leafHalloween",
        rate: new n(.08,.12),
        radius: 120,
        speed: new n(2,3),
        angle: Math.PI * .2,
        rot: new n(0,Math.PI * 2),
        maxCount: Number.MAX_VALUE,
        zOrd: 999
    },
    falling_leaf_spring: {
        particle: "leafSpring",
        rate: new n(.1,.14),
        radius: 120,
        speed: new n(2,3),
        angle: Math.PI * .2,
        rot: new n(0,Math.PI * 2),
        maxCount: Number.MAX_VALUE,
        zOrd: 999
    },
    falling_leaf_summer: {
        particle: "leafSummer",
        rate: new n(.18,.24),
        radius: 120,
        speed: new n(1.4,2.4),
        angle: Math.PI * .2,
        maxCount: Number.MAX_VALUE,
        zOrd: 999
    },
    falling_leaf_potato: {
        particle: "leafPotato",
        rate: new n(.1,.14),
        radius: 120,
        speed: new n(2,3),
        angle: Math.PI * .2,
        rot: new n(0,Math.PI * 2),
        maxCount: Number.MAX_VALUE,
        zOrd: 999
    },
    falling_potato: {
        particle: "potato",
        rate: new n(.2,.24),
        radius: 120,
        speed: new n(2,3),
        angle: Math.PI * .2,
        rot: new n(0,Math.PI * 2),
        maxCount: Number.MAX_VALUE,
        zOrd: 999
    },
    falling_snow_fast: {
        particle: "snow",
        rate: new n(.12,.17),
        maxRate: new n(.05,.07),
        maxElapsed: 240,
        radius: 70,
        speed: new n(1,1.5),
        angle: Math.PI * .2,
        rot: new n(0,Math.PI * 2),
        maxCount: Number.MAX_VALUE,
        zOrd: 999
    },
    falling_snow_slow: {
        particle: "snow",
        rate: new n(.08,.12),
        radius: 70,
        speed: new n(1,1.5),
        angle: Math.PI * .2,
        rot: new n(0,Math.PI * 2),
        maxCount: Number.MAX_VALUE,
        zOrd: 999
    },
    heal_basic: {
        particle: "heal_basic",
        rate: new n(.3,.35),
        radius: 1.5,
        speed: new n(1,1.5),
        angle: 0,
        rot: 0,
        maxCount: Number.MAX_VALUE
    },
    heal_heart: {
        particle: "heal_heart",
        rate: new n(.3,.35),
        radius: 1.5,
        speed: new n(1,1.5),
        angle: 0,
        rot: 0,
        maxCount: Number.MAX_VALUE
    },
    heal_moon: {
        particle: "heal_moon",
        rate: new n(.3,.35),
        radius: 1.5,
        speed: new n(1,1.5),
        angle: 0,
        rot: 0,
        maxCount: Number.MAX_VALUE
    },
    heal_tomoe: {
        particle: "heal_tomoe",
        rate: new n(.3,.35),
        radius: 1.5,
        speed: new n(1,1.5),
        angle: 0,
        rot: 0,
        maxCount: Number.MAX_VALUE
    },
    boost_basic: {
        particle: "boost_basic",
        rate: new n(.3,.35),
        radius: 1.5,
        speed: new n(1,1.5),
        angle: 0,
        rot: new n(0,Math.PI * 2),
        maxCount: Number.MAX_VALUE
    },
    boost_star: {
        particle: "boost_star",
        rate: new n(.3,.35),
        radius: 1.5,
        speed: new n(1,1.5),
        angle: 0,
        rot: new n(0,Math.PI * 2),
        maxCount: Number.MAX_VALUE
    },
    boost_naturalize: {
        particle: "boost_naturalize",
        rate: new n(.3,.35),
        radius: 1.5,
        speed: new n(1,1.5),
        angle: 0,
        rot: new n(0,Math.PI * 2),
        maxCount: Number.MAX_VALUE
    },
    boost_shuriken: {
        particle: "boost_shuriken",
        rate: new n(.3,.35),
        radius: 1.5,
        speed: new n(1,1.5),
        angle: 0,
        rot: new n(0,Math.PI * 2),
        maxCount: Number.MAX_VALUE
    },
    revive_basic: {
        particle: "revive_basic",
        rate: new n(.5,.55),
        radius: 1.5,
        speed: new n(1,1.5),
        angle: 0,
        rot: 0,
        maxCount: Number.MAX_VALUE
    },
    windwalk: {
        particle: "leafStim",
        rate: new n(.1,.12),
        radius: 1.5,
        speed: new n(1,1.5),
        angle: 0,
        rot: 0,
        maxCount: Number.MAX_VALUE
    },
    takedown: {
        particle: "takedownStim",
        rate: new n(.1,.12),
        radius: 1.5,
        speed: new n(1,1.5),
        angle: 0,
        rot: 0,
        maxCount: Number.MAX_VALUE
    },
    inspire: {
        particle: "inspireStim",
        rate: new n(.3,.35),
        radius: 1.5,
        speed: new n(1,1.5),
        angle: 0,
        rot: 0,
        maxCount: Number.MAX_VALUE
    },
    xp_common: {
        particle: "xp_common",
        rate: new n(.3,.35),
        radius: 1.5,
        speed: new n(1,1.5),
        angle: 0,
        rot: 0,
        maxCount: Number.MAX_VALUE
    },
    xp_rare: {
        particle: "xp_rare",
        rate: new n(.3,.35),
        radius: 1.5,
        speed: new n(1,1.5),
        angle: 0,
        rot: 0,
        maxCount: Number.MAX_VALUE
    },
    xp_mythic: {
        particle: "xp_mythic",
        rate: new n(.3,.35),
        radius: 1.5,
        speed: new n(1,1.5),
        angle: 0,
        rot: 0,
        maxCount: Number.MAX_VALUE
    }
}
  , Ka = 1.25
  , zi = .75
  , Ja = .75
  , Ur = 2;
class eo {
    active = !1;
    sprite = new ae;
    soundRangeMult;
    id;
    pos;
    planeDir;
    actionComplete;
    dirty;
    soundInstance;
    soundUpdateThrottle;
    alpha;
    renderAlpha;
    spriteUpdateTime;
    type;
    config;
    rad;
    planeSound;
    constructor() {
        this.sprite.anchor.set(.5, .5),
        this.sprite.visible = !1
    }
    RVRwlj(e, t) {
        switch (this.id = e.id,
        this.pos = m.copy(e.pos),
        this.planeDir = m.copy(e.planeDir),
        this.actionComplete = e.actionComplete,
        this.active = !0,
        this.dirty = !1,
        this.soundInstance = null,
        this.soundUpdateThrottle = 0,
        this.alpha = zi,
        this.renderAlpha = 1,
        this.spriteUpdateTime = 0,
        this.type = e.action,
        this.config = this.type == O.Plane.Airdrop ? O.airdrop : O.airstrike,
        this.rad = this.config.planeRad,
        this.type) {
        case O.Plane.Airdrop:
            this.sprite.texture = X.from(t.getMapDef().biome.airdrop.planeImg),
            this.planeSound = t.getMapDef().biome.airdrop.planeSound;
            break;
        case O.Plane.Airstrike:
            this.sprite.texture = X.from("map-plane-02.img"),
            this.planeSound = "fighter_01"
        }
        this.sprite.visible = !0,
        this.sprite.rotation = Math.atan2(this.planeDir.x, this.planeDir.y)
    }
    TNCQd(e) {
        this.spriteUpdateTime >= Ur && (this.soundInstance && (e.stopSound(this.soundInstance),
        this.soundInstance = null),
        this.sprite.visible = !1,
        this.active = !1)
    }
}
class to {
    constructor(e) {
        this.container = e,
        e.addChild(this.gfx)
    }
    active = !1;
    pos = m.create(0, 0);
    rad = 0;
    duration = 0;
    ticker = 0;
    gfx = new Me;
    renderPos;
    renderRad;
    RVRwlj(e, t, i) {
        this.active = !0,
        this.pos = m.copy(e),
        this.rad = t,
        this.duration = i,
        this.ticker = 0,
        this.renderPos = m.create(0, 0),
        this.renderRad = 0,
        this.gfx.visible = !0
    }
    pprlB(e) {
        this.ticker += e,
        this.gfx.visible = !0,
        this.ticker >= this.duration && (this.gfx.visible = !1,
        this.active = !1)
    }
    render(e, t) {
        const i = e.getMapPosFromWorldPos(this.pos, t)
          , r = e.getMapPosFromWorldPos(m.add(this.pos, m.create(this.rad, 0)), t)
          , s = m.length(m.sub(r, i))
          , a = !m.eq(this.renderPos, i, 1e-4)
          , l = !k.eqAbs(this.renderRad, s, 1e-4);
        a && (this.renderPos = m.copy(i)),
        l && (this.renderRad = s),
        a && this.gfx.position.set(this.renderPos.x, this.renderPos.y),
        l && (this.gfx.clear(),
        this.gfx.lineStyle(1.5, 15400704),
        this.gfx.beginFill(15400704, .2),
        this.gfx.drawCircle(0, 0, this.renderRad),
        this.gfx.endFill());
        const h = k.smoothstep(this.ticker, 0, .5) * (1 - k.smoothstep(this.ticker, this.duration - .5, this.duration));
        this.gfx.alpha = h
    }
}
class io {
    constructor(e) {
        this.audioManager = e
    }
    planes = [];
    airstrikeZones = [];
    airstrikeZoneContainer = new J;
    TNCQd() {
        for (let e = 0; e < this.planes.length; e++)
            this.planes[e].TNCQd(this.audioManager)
    }
    updatePlanes(e, t) {
        for (let i = 0; i < this.planes.length; i++)
            this.planes[i].dirty = !0;
        for (let i = 0; i < e.length; i++) {
            const r = e[i];
            let s = null;
            for (let a = 0; a < this.planes.length; a++) {
                const l = this.planes[a];
                if (l.active && l.id == r.id) {
                    s = l;
                    break
                }
            }
            s ||= this.addPlane(r, t),
            s.dirty = !1,
            s.actionComplete = r.actionComplete
        }
        for (let i = 0; i < this.planes.length; i++) {
            const r = this.planes[i];
            r.active && r.dirty && r.TNCQd(this.audioManager)
        }
    }
    addPlane(e, t) {
        let i = null;
        for (let r = 0; r < this.planes.length; r++)
            if (!this.planes[r].active) {
                i = this.planes[r];
                break
            }
        return i || (i = new eo,
        this.planes.push(i)),
        i.RVRwlj(e, t),
        i
    }
    createAirstrikeZone(e) {
        let t = null;
        for (let i = 0; i < this.airstrikeZones.length; i++)
            if (!this.airstrikeZones[i]) {
                t = this.airstrikeZones[i];
                break
            }
        return t || (t = new to(this.airstrikeZoneContainer),
        this.airstrikeZones.push(t)),
        t.RVRwlj(e.pos, e.rad, e.duration),
        t
    }
    pprlB(e, t, i, r, s) {
        for (let a = 0; a < this.planes.length; a++) {
            const l = this.planes[a];
            if (l.active) {
                let h = 0;
                if ((y.sameLayer(h, i.layer) || i.layer & 2) && (!(i.layer & 2) || !r.insideStructureMask(j.createCircle(l.pos, 1))) && (h |= 2),
                l.pos = m.add(l.pos, m.mul(l.planeDir, e * l.config.planeVel)),
                l.actionComplete && (l.spriteUpdateTime = Math.min(l.spriteUpdateTime + e, Ur),
                l.rad = k.lerp(l.spriteUpdateTime, l.config.planeRad, l.config.planeRad * Ka),
                l.alpha = k.lerp(l.spriteUpdateTime, zi, zi * Ja),
                l.soundRangeMult = k.max(0, k.lerp(l.spriteUpdateTime, l.config.soundRangeMult, l.config.soundRangeMult - l.config.soundRangeDelta))),
                l.soundInstance)
                    l.soundUpdateThrottle < 0 ? (this.audioManager.updateSound(l.soundInstance, "sfx", l.pos, {
                        layer: h,
                        rangeMult: l.config.soundRangeMult,
                        ignoreMinAllowable: !0,
                        fallOff: l.config.fallOff
                    }),
                    l.soundUpdateThrottle = .1) : l.soundUpdateThrottle -= e;
                else {
                    const f = m.length(m.sub(i.CYoYrL, l.pos))
                      , S = l.config.soundRangeMax * l.config.soundRangeMult;
                    let g = 0;
                    if (l.type == O.Plane.Airstrike) {
                        const b = k.max(150, f);
                        g = (1 - k.clamp(k.max(0, b) / 800, 0, 1)) * 2.25
                    }
                    f < S && (l.soundInstance = this.audioManager.playSound(l.planeSound, {
                        channel: "sfx",
                        soundPos: l.pos,
                        layer: h,
                        loop: !0,
                        rangeMult: 2.5,
                        ignoreMinAllowable: !0,
                        fallOff: l.config.fallOff,
                        offset: g
                    }))
                }
                s.addPIXIObj(l.sprite, h, 1501, l.id);
                const p = t.zEsq(l.pos)
                  , c = t.ZaMxGM(l.rad / t.oPtaok)
                  , d = r.insideBuildingCeiling(j.createCircle(i.CYoYrL, .01), !0);
                let w = l.alpha;
                i.layer == 1 ? w = 0 : (d || i.layer & 1) && (w = .15),
                l.renderAlpha = k.lerp(e * 3, l.renderAlpha, w),
                l.sprite.position.set(p.x, p.y),
                l.sprite.scale.set(c, c),
                l.sprite.tint = 16776960,
                l.sprite.alpha = l.renderAlpha,
                l.sprite.visible = !0
            }
        }
        for (let a = 0; a < this.airstrikeZones.length; a++) {
            const l = this.airstrikeZones[a];
            l.active && l.pprlB(e)
        }
    }
    renderAirstrikeZones(e, t) {
        for (let i = 0; i < this.airstrikeZones.length; i++) {
            const r = this.airstrikeZones[i];
            r.active && r.render(e, t)
        }
    }
}
function V(o, e) {
    return {
        time: o,
        bones: e
    }
}
function re(o, e, t) {
    return {
        time: o,
        fn: e,
        args: t
    }
}
class L {
    constructor(e=m.create(0, 0), t=0, i=m.create(0, 0)) {
        this.pivot = e,
        this.rot = t,
        this.pos = i,
        this.pivot = m.copy(e),
        this.rot = 0,
        this.pos = m.copy(i)
    }
    copy(e) {
        m.set(this.pivot, e.pivot),
        this.rot = e.rot,
        m.set(this.pos, e.pos)
    }
    rotate(e) {
        return this.rot = e,
        this
    }
    offset(e) {
        return this.pos = m.copy(e),
        this
    }
    static identity = new L(m.create(0, 0));
    static lerp(e, t, i) {
        const r = new L;
        return r.pos = m.lerp(e, t.pos, i.pos),
        r.rot = k.lerp(e, t.rot, i.rot),
        r.pivot = m.lerp(e, t.pivot, i.pivot),
        r
    }
}
var at = (o => (o[o.HandL = 0] = "HandL",
o[o.HandR = 1] = "HandR",
o[o.FootL = 2] = "FootL",
o[o.FootR = 3] = "FootR",
o))(at || {});
jt(Object.keys(at).length % 2 == 0);
const tr = {
    fists: {
        0: new L(m.create(14, -12.25)),
        1: new L(m.create(14, 12.25))
    },
    slash: {
        0: new L(m.create(18, -8.25)),
        1: new L(m.create(6, 20.25))
    },
    meleeTwoHanded: {
        0: new L(m.create(10.5, -14.25)),
        1: new L(m.create(18, 6.25))
    },
    meleeKatana: {
        0: new L(m.create(8.5, 13.25)),
        1: new L(m.create(-3, 17.75))
    },
    meleeNaginata: {
        0: new L(m.create(19, -7.25)),
        1: new L(m.create(8.5, 24.25))
    },
    machete: {
        0: new L(m.create(14, -12.25)),
        1: new L(m.create(1, 17.75))
    },
    rifle: {
        0: new L(m.create(28, 5.25)),
        1: new L(m.create(14, 1.75))
    },
    dualRifle: {
        0: new L(m.create(5.75, -16)),
        1: new L(m.create(5.75, 16))
    },
    bullpup: {
        0: new L(m.create(28, 5.25)),
        1: new L(m.create(24, 1.75))
    },
    launcher: {
        0: new L(m.create(20, 10)),
        1: new L(m.create(2, 22))
    },
    pistol: {
        0: new L(m.create(14, 1.75)),
        1: new L(m.create(14, 1.75))
    },
    dualPistol: {
        0: new L(m.create(15.75, -8.75)),
        1: new L(m.create(15.75, 8.75))
    },
    throwable: {
        0: new L(m.create(15.75, -9.625)),
        1: new L(m.create(15.75, 9.625))
    },
    downed: {
        0: new L(m.create(14, -12.25)),
        1: new L(m.create(14, 12.25)),
        2: new L(m.create(-15.75, -9)),
        3: new L(m.create(-15.75, 9))
    }
}
  , $ = U
  , ro = {
    none: {
        keyframes: [],
        effects: []
    },
    fists: {
        keyframes: [V(0, {
            1: new L(m.create(14, 12.25))
        }), V($.fists.attack.damageTimes[0], {
            1: new L(m.create(29.75, 1.75))
        }), V($.fists.attack.cooldownTime, {
            1: new L(m.create(14, 12.25))
        })],
        effects: [re(0, "animPlaySound", {
            sound: "swing"
        }), re($.fists.attack.damageTimes[0], "animMeleeCollision", {})]
    },
    cut: {
        keyframes: [V(0, {
            1: new L(m.create(14, 12.25))
        }), V($.fists.attack.damageTimes[0] * .25, {
            1: new L(m.create(14, 12.25)).rotate(-Math.PI * .35)
        }), V($.fists.attack.damageTimes[0] * 1.25, {
            1: new L(m.create(14, 12.25)).rotate(Math.PI * .35)
        }), V($.fists.attack.cooldownTime, {
            1: new L(m.create(14, 12.25))
        })],
        effects: [re(0, "animPlaySound", {
            sound: "swing"
        }), re($.fists.attack.damageTimes[0], "animMeleeCollision", {})]
    },
    cutReverse: {
        keyframes: [V(0, {
            1: new L(m.create(1, 17.75))
        }), V($.fists.attack.damageTimes[0] * .4, {
            1: new L(m.create(25, 6.25)).rotate(Math.PI * .3)
        }), V($.fists.attack.damageTimes[0] * 1.4, {
            1: new L(m.create(25, 6.25)).rotate(-Math.PI * .5)
        }), V($.fists.attack.cooldownTime, {
            1: new L(m.create(1, 17.75))
        })],
        effects: [re(0, "animPlaySound", {
            sound: "swing"
        }), re($.fists.attack.damageTimes[0], "animMeleeCollision", {})]
    },
    thrust: {
        keyframes: [V(0, {
            1: new L(m.create(14, 12.25))
        }), V($.fists.attack.damageTimes[0] * .4, {
            1: new L(m.create(5, 12.25)).rotate(Math.PI * .1)
        }), V($.fists.attack.damageTimes[0] * 1.4, {
            1: new L(m.create(25, 6.25)).rotate(-Math.PI * 0)
        }), V($.fists.attack.cooldownTime, {
            1: new L(m.create(14, 12.25))
        })],
        effects: [re(0, "animPlaySound", {
            sound: "swing"
        }), re($.fists.attack.damageTimes[0], "animMeleeCollision", {})]
    },
    slash: {
        keyframes: [V(0, {
            0: new L(m.create(18, -8.25)),
            1: new L(m.create(6, 20.25))
        }), V($.fists.attack.damageTimes[0], {
            0: new L(m.create(6, -22.25)),
            1: new L(m.create(6, 20.25)).rotate(-Math.PI * .6)
        }), V($.fists.attack.cooldownTime, {
            0: new L(m.create(18, -8.25)),
            1: new L(m.create(6, 20.25)).rotate(0)
        })],
        effects: [re(0, "animPlaySound", {
            sound: "swing"
        }), re($.fists.attack.damageTimes[0], "animMeleeCollision", {})]
    },
    hook: {
        keyframes: [V(0, {
            1: new L(m.create(14, 12.25))
        }), V($.hook.attack.damageTimes[0] * .25, {
            1: new L(m.create(14, 12.25)).rotate(Math.PI * .1)
        }), V($.hook.attack.damageTimes[0], {
            1: new L(m.create(24, 1.75))
        }), V($.hook.attack.damageTimes[0] + .05, {
            1: new L(m.create(14, 12.25)).rotate(Math.PI * -.3)
        }), V($.hook.attack.damageTimes[0] + .1, {
            1: new L(m.create(14, 12.25))
        })],
        effects: [re(0, "animPlaySound", {
            sound: "swing"
        }), re($.hook.attack.damageTimes[0], "animMeleeCollision", {})]
    },
    pan: {
        keyframes: [V(0, {
            1: new L(m.create(14, 12.25))
        }), V(.15, {
            1: new L(m.create(22, -8.25)).rotate(-Math.PI * .2)
        }), V(.25, {
            1: new L(m.create(28, -8.25)).rotate(Math.PI * .5)
        }), V(.55, {
            1: new L(m.create(14, 12.25))
        })],
        effects: [re(0, "animPlaySound", {
            sound: "swing"
        }), re($.pan.attack.damageTimes[0], "animMeleeCollision", {})]
    },
    axeSwing: {
        keyframes: [V(0, {
            0: new L(m.create(10.5, -14.25)),
            1: new L(m.create(18, 6.25))
        }), V($.woodaxe.attack.damageTimes[0] * .4, {
            0: new L(m.create(9, -14.25)).rotate(Math.PI * .4),
            1: new L(m.create(18, 6.25)).rotate(Math.PI * .4)
        }), V($.woodaxe.attack.damageTimes[0], {
            0: new L(m.create(9, -14.25)).rotate(-Math.PI * .4),
            1: new L(m.create(18, 6.25)).rotate(-Math.PI * .4)
        }), V($.woodaxe.attack.cooldownTime, {
            0: new L(m.create(10.5, -14.25)),
            1: new L(m.create(18, 6.25))
        })],
        effects: [re($.woodaxe.attack.damageTimes[0], "animPlaySound", {
            sound: "swing"
        }), re($.woodaxe.attack.damageTimes[0], "animMeleeCollision", {})]
    },
    hammerSwing: {
        keyframes: [V(0, {
            0: new L(m.create(10.5, -14.25)),
            1: new L(m.create(18, 6.25))
        }), V($.stonehammer.attack.damageTimes[0] * .4, {
            0: new L(m.create(9, -14.25)).rotate(Math.PI * .4),
            1: new L(m.create(18, 6.25)).rotate(Math.PI * .4)
        }), V($.stonehammer.attack.damageTimes[0], {
            0: new L(m.create(9, -14.25)).rotate(-Math.PI * .4),
            1: new L(m.create(18, 6.25)).rotate(-Math.PI * .4)
        }), V($.stonehammer.attack.cooldownTime, {
            0: new L(m.create(10.5, -14.25)),
            1: new L(m.create(18, 6.25))
        })],
        effects: [re($.stonehammer.attack.damageTimes[0], "animPlaySound", {
            sound: "swing"
        }), re($.stonehammer.attack.damageTimes[0], "animMeleeCollision", {})]
    },
    katanaSwing: {
        keyframes: [V(0, {
            0: new L(m.create(8.5, 13.25)),
            1: new L(m.create(-3, 17.75))
        }), V($.katana.attack.damageTimes[0] * .3, {
            0: new L(m.create(8.5, 13.25)).rotate(Math.PI * .2),
            1: new L(m.create(-3, 17.75)).rotate(Math.PI * .2)
        }), V($.katana.attack.damageTimes[0] * .9, {
            0: new L(m.create(8.5, 13.25)).rotate(-Math.PI * 1.2),
            1: new L(m.create(-3, 17.75)).rotate(-Math.PI * 1.2)
        }), V($.katana.attack.cooldownTime, {
            0: new L(m.create(8.5, 13.25)),
            1: new L(m.create(-3, 17.75))
        })],
        effects: [re($.katana.attack.damageTimes[0], "animPlaySound", {
            sound: "swing"
        }), re($.katana.attack.damageTimes[0], "animMeleeCollision", {})]
    },
    naginataSwing: {
        keyframes: [V(0, {
            0: new L(m.create(19, -7.25)),
            1: new L(m.create(8.5, 24.25))
        }), V($.naginata.attack.damageTimes[0] * .3, {
            0: new L(m.create(19, -7.25)).rotate(Math.PI * .3),
            1: new L(m.create(8.5, 24.25)).rotate(Math.PI * .3)
        }), V($.naginata.attack.damageTimes[0] * .9, {
            0: new L(m.create(19, -7.25)).rotate(-Math.PI * .85),
            1: new L(m.create(8.5, 24.25)).rotate(-Math.PI * .85)
        }), V($.naginata.attack.cooldownTime, {
            0: new L(m.create(19, -7.25)),
            1: new L(m.create(8.5, 24.25))
        })],
        effects: [re($.naginata.attack.damageTimes[0], "animPlaySound", {
            sound: "swing"
        }), re($.naginata.attack.damageTimes[0], "animMeleeCollision", {})]
    },
    sawSwing: {
        keyframes: [V(0, {
            1: new L(m.create(1, 17.75))
        }), V($.saw.attack.damageTimes[0] * .4, {
            1: new L(m.create(25, 6.25)).rotate(Math.PI * .3)
        }), V($.saw.attack.damageTimes[0], {
            1: new L(m.create(25, 6.25)).rotate(-Math.PI * .3)
        }), V($.saw.attack.damageTimes[1] - .1, {
            1: new L(m.create(25, 17.75)).rotate(-Math.PI * .25)
        }), V($.saw.attack.damageTimes[1] * .6, {
            1: new L(m.create(-36, 7.75)).rotate(-Math.PI * .25)
        }), V($.saw.attack.damageTimes[1] + .2, {
            1: new L(m.create(1, 17.75))
        })],
        effects: [re(0, "animPlaySound", {
            sound: "swing"
        }), re(.4, "animPlaySound", {
            sound: "swing"
        }), re($.saw.attack.damageTimes[0], "animMeleeCollision", {}), re($.saw.attack.damageTimes[1], "animMeleeCollision", {
            playerHit: "playerHit2"
        })]
    },
    cutReverseShort: {
        keyframes: [V(0, {
            1: new L(m.create(1, 17.75))
        }), V($.saw.attack.damageTimes[0] * .4, {
            1: new L(m.create(25, 6.25)).rotate(Math.PI * .3)
        }), V($.saw.attack.damageTimes[0], {
            1: new L(m.create(25, 6.25)).rotate(-Math.PI * .3)
        }), V($.fists.attack.cooldownTime, {
            1: new L(m.create(14, 17.75))
        })],
        effects: [re(0, "animPlaySound", {
            sound: "swing"
        }), re($.fists.attack.damageTimes[0], "animMeleeCollision", {})]
    },
    cook: {
        keyframes: [V(0, {
            0: new L(m.create(15.75, -9.625)),
            1: new L(m.create(15.75, 9.625))
        }), V(.1, {
            0: new L(m.create(14, -1.75)),
            1: new L(m.create(14, 1.75))
        }), V(.3, {
            0: new L(m.create(14, -1.75)),
            1: new L(m.create(14, 1.75))
        }), V(.4, {
            0: new L(m.create(22.75, -1.75)),
            1: new L(m.create(1.75, 14))
        }), V(99999, {
            0: new L(m.create(22.75, -1.75)),
            1: new L(m.create(1.75, 14))
        })],
        effects: [re(0, "animPlaySound", {
            sound: "pullPin"
        }), re(.1, "animSetThrowableState", {
            state: "cook"
        })]
    },
    throw: {
        keyframes: [V(0, {
            0: new L(m.create(22.75, -1.75)),
            1: new L(m.create(1.75, 14.175))
        }), V(.15, {
            0: new L(m.create(5.25, -15.75)),
            1: new L(m.create(29.75, 1.75))
        }), V(.15 + O.player.throwTime, {
            0: new L(m.create(15.75, -9.625)),
            1: new L(m.create(15.75, 9.625))
        })],
        effects: [re(0, "animPlaySound", {
            sound: "throwing"
        }), re(0, "animSetThrowableState", {
            state: "throwing"
        }), re(0, "animThrowableParticles", {})]
    },
    crawl_forward: {
        keyframes: [V(0, {
            0: new L(m.create(14, -12.25)),
            2: new L(m.create(-15.75, -9))
        }), V(O.player.crawlTime * .33, {
            0: new L(m.create(19.25, -10.5)),
            2: new L(m.create(-20.25, -9))
        }), V(O.player.crawlTime * .66, {
            0: new L(m.create(5.25, -15.75)),
            2: new L(m.create(-11.25, -9))
        }), V(O.player.crawlTime * 1, {
            0: new L(m.create(14, -12.25)),
            2: new L(m.create(-15.75, -9))
        })],
        effects: []
    },
    crawl_backward: {
        keyframes: [V(0, {
            0: new L(m.create(14, -12.25)),
            2: new L(m.create(-15.75, -9))
        }), V(O.player.crawlTime * .33, {
            0: new L(m.create(5.25, -15.75)),
            2: new L(m.create(-11.25, -9))
        }), V(O.player.crawlTime * .66, {
            0: new L(m.create(19.25, -10.5)),
            2: new L(m.create(-20.25, -9))
        }), V(O.player.crawlTime * 1, {
            0: new L(m.create(14, -12.25)),
            2: new L(m.create(-15.75, -9))
        })],
        effects: []
    },
    revive: {
        keyframes: [V(0, {
            0: new L(m.create(14, -12.25)),
            1: new L(m.create(14, 12.25))
        }), V(.2, {
            0: new L(m.create(24.5, -8.75)),
            1: new L(m.create(5.25, 21))
        }), V(.2 + O.player.reviveDuration, {
            0: new L(m.create(24.5, -8.75)),
            1: new L(m.create(5.25, 21))
        })],
        effects: []
    }
}
  , qr = {
    "proj-frag-nopin-01.img": "proj-frag-nopin-02.img",
    "proj-frag-nopin-nolever-01.img": "proj-frag-nopin-nolever-02.img",
    "proj-frag-pin-01.img": "proj-frag-pin-02.img",
    "proj-mirv-mini-01.img": "proj-mirv-mini-02.img"
};
class so {
    __id;
    __type;
    active;
    isNew;
    container = new J;
    trail = ae.from("player-bullet-trail-02.img");
    sprite = new ae;
    strobeSprite = null;
    layer;
    type;
    rad;
    pos;
    posOld;
    visualPosOld;
    posInterpTicker;
    posZ;
    posZOld;
    dir;
    imgScale;
    rot;
    rotVel;
    rotDrag;
    velZ;
    grounded;
    inWater;
    lastSoundObjId;
    playHitSfx;
    alwaysRenderOntop;
    strobeScale;
    strobeScaleMax;
    strobeTicker;
    strobeDir;
    strobeSpeed;
    constructor() {
        this.container.visible = !1,
        this.trail.anchor.set(1, .5),
        this.trail.scale.set(1, 1),
        this.trail.visible = !1,
        this.container.addChild(this.trail),
        this.sprite.anchor.set(.5, .5),
        this.container.addChild(this.sprite)
    }
    RVRwlj() {
        this.visualPosOld = m.create(0, 0),
        this.posInterpTicker = 0
    }
    TNCQd() {
        this.container.visible = !1,
        this.strobeSprite && (this.strobeSprite.visible = !1)
    }
    cmyLn(e, t, i, r) {
        if (t) {
            const s = U[e.type];
            this.layer = e.layer,
            this.type = e.type,
            this.rad = s.rad * .5
        }
        if (this.posOld = i ? m.copy(e.pos) : m.copy(this.pos),
        this.posZOld = i ? e.posZ : this.posZ,
        this.pos = m.copy(e.pos),
        m.eq(e.pos, this.visualPosOld) || (this.visualPosOld = m.copy(this.posOld),
        this.posInterpTicker = 0),
        this.posZ = e.posZ,
        this.dir = m.copy(e.dir),
        i) {
            const s = U[e.type]
              , a = s.worldImg;
            this.imgScale = a.scale,
            this.rot = 0,
            this.rotVel = s.throwPhysics.spinVel,
            s.throwPhysics.randomizeSpinDir && Math.random() < .5 && (this.rotVel *= -1),
            this.rotDrag = s.throwPhysics.spinDrag * y.random(1, 2),
            this.velZ = 0,
            this.grounded = !1,
            this.inWater = !1,
            this.lastSoundObjId = 0,
            this.playHitSfx = !s.explodeOnImpact,
            this.alwaysRenderOntop = !1;
            let l = !0;
            if (this.type == "bomb_iron") {
                this.alwaysRenderOntop = !0;
                const p = j.createCircle(this.pos, .5);
                r.map.insideBuildingCeiling(p, !0) && (l = !1)
            }
            let h = a.sprite;
            r.map.mapDef.gameMode.spookyKillSounds && (h = qr[h] || h),
            this.sprite.texture = X.from(h),
            this.sprite.tint = a.tint,
            this.sprite.alpha = 1,
            this.container.visible = l,
            e.type == "strobe" && (this.strobeSprite || (this.strobeSprite = new ae,
            this.strobeSprite.texture = X.from("part-strobe-01.img"),
            this.strobeSprite.anchor.set(.5, .5),
            this.container.addChild(this.strobeSprite)),
            this.strobeSprite.scale.set(0, 0),
            this.strobeSprite.visible = !0,
            this.strobeScale = 0,
            this.strobeScaleMax = 12,
            this.strobeTicker = 0,
            this.strobeDir = 1,
            this.strobeSpeed = 1.25)
        }
    }
}
const ao = {
    grass: "frag_grass",
    sand: "frag_sand",
    water: "frag_water"
};
class oo {
    projectilePool = new Ne(so);
    pprlB(e, t, i, r, s, a, l) {
        const h = this.projectilePool.MrrhcR();
        for (let p = 0; p < h.length; p++) {
            const c = h[p];
            if (c.active) {
                const d = U[c.type];
                let w = c.rotDrag;
                c.inWater && (w *= 3),
                c.rotVel *= 1 / (1 + e * w),
                c.rot += c.rotVel * e;
                const f = {
                    obj: null,
                    pen: 0
                }
                  , S = {
                    obj: null,
                    pen: 0
                }
                  , g = j.createCircle(c.pos, c.rad)
                  , x = s.WUiyA.MrrhcR();
                for (let W = 0; W < x.length; W++) {
                    const E = x[W];
                    if (E.active && !E.dead && y.sameLayer(E.layer, c.layer)) {
                        const R = j.intersect(E.collider, g);
                        if (R) {
                            const Y = E.height > c.posZ ? f : S;
                            R.pen > Y.pen && (!Y.obj || Y.obj.height <= E.height) && (Y.obj = E,
                            Y.pen = R.pen)
                        }
                    }
                }
                const C = m.div(m.sub(c.pos, c.posOld), e)
                  , v = m.length(C);
                if (f.obj && f.obj.__id != c.lastSoundObjId && v > 7.5 && (c.lastSoundObjId = f.obj.__id,
                c.playHitSfx)) {
                    const W = m.mul(m.normalizeSafe(C, m.create(1, 0)), -1)
                      , E = ce[f.obj.type];
                    xi(E.hitParticle, E.sound.bullet, c.pos, W, c.layer, t, i)
                }
                const b = s.getGroundSurface(c.pos, c.layer);
                c.posZ <= .01 && (!c.inWater && b.type == "water" && t.addRippleParticle(c.pos, c.layer, b.data.rippleColor),
                c.inWater = b.type == "water");
                const M = c.velZ;
                if (c.velZ = (c.posZ - c.posZOld) / e,
                !c.isNew && !c.grounded && c.velZ >= 0 && M < 0) {
                    const W = {
                        fn: "playGroup",
                        channel: "hits",
                        name: ""
                    };
                    if (S.obj) {
                        if (c.lastSoundObjId != S.obj.__id) {
                            c.lastSoundObjId = S.obj.__id;
                            const E = ce[S.obj.type];
                            W.name = E.sound.bullet
                        }
                    } else
                        c.grounded = !0,
                        W.name = ao[b.type],
                        W.name === void 0 && (W.name = `footstep_${b.type}`,
                        W.fn = "playGroup",
                        W.channel = "sfx");
                    W.name && c.playHitSfx && i[W.fn](W.name, {
                        channel: W.channel,
                        soundPos: c.pos,
                        layer: c.layer,
                        filter: "muffled"
                    })
                }
                if (c.type == "strobe" && c.strobeSprite && (c.strobeTicker = k.clamp(c.strobeTicker + e * c.strobeDir * c.strobeSpeed, 0, 1),
                c.strobeScale = k.easeInExpo(c.strobeTicker) * c.strobeScaleMax,
                c.strobeSprite.scale.set(c.strobeScale, c.strobeScale),
                (c.strobeScale >= c.strobeScaleMax || c.strobeTicker <= 0) && (c.strobeDir *= -1)),
                c.sprite.rotation = c.rot,
                c.sprite.alpha = c.inWater ? .3 : 1,
                d.trail) {
                    const W = m.length(C)
                      , E = k.remap(W, d.throwPhysics.speed * .25, d.throwPhysics.speed * 1, 0, 1) * k.remap(c.posZ, .1, O.projectile.maxHeight * .5, 0, 1);
                    c.trail.scale.set(d.trail.maxLength * E, d.trail.width),
                    c.trail.rotation = -Math.atan2(c.dir.y, c.dir.x),
                    c.trail.tint = d.trail.tint,
                    c.trail.alpha = d.trail.alpha * E,
                    c.trail.visible = !0
                } else
                    c.trail.visible = !1;
                let I = c.layer
                  , B = c.posZ < .25 ? 14 : 25;
                const z = j.createCircle(c.pos, c.rad * 3)
                  , P = s.insideStructureStairs(z)
                  , _ = s.insideStructureMask(z);
                c.posZ >= .25 && P && (c.layer & 1) == (r.layer & 1) && (!_ || !(r.layer & 2)) && (I |= 2,
                B += 100),
                c.alwaysRenderOntop && r.layer == 0 && (B = 1e3,
                I |= 2),
                a.addPIXIObj(c.container, I, B);
                const T = c.imgScale * k.remap(c.posZ, 0, O.projectile.maxHeight, 1, 4.75);
                let N = c.pos;
                if (l.RXZ) {
                    c.posInterpTicker += e;
                    const W = k.clamp(c.posInterpTicker / l.BYJsJa, 0, 1);
                    N = m.lerp(W, c.visualPosOld, c.pos)
                }
                const A = l.zEsq(N)
                  , G = l.ZaMxGM(T);
                c.container.position.set(A.x, A.y),
                c.container.scale.set(G, G)
            }
        }
    }
}
function Vr(o, e, t, i, r, s, a, l) {
    const h = U[o];
    if (h) {
        let p = m.rotate(r, e);
        h.particle.shellForward && (p = m.mul(r, h.particle.shellForward));
        let c = m.mul(p, t * 9.5);
        c = m.rotate(c, (Math.random() - .5) * Math.PI / 3);
        let d = m.add(i, m.mul(r, O.player.radius + h.particle.shellOffset));
        h.particle.shellOffsetY && (d = m.add(d, m.mul(p, h.particle.shellOffsetY))),
        h.particle.shellReverse && (c = m.mul(c, -1)),
        l.addParticle(h.ammo, s, d, c, h.particle.shellScale, -Math.atan2(p.y, p.x), null, a)
    }
}
class lo {
    shots = [];
    addShot(e) {
        let t = null;
        for (let s = 0; s < this.shots.length; s++)
            if (!this.shots[s].active) {
                t = this.shots[s];
                break
            }
        t || (t = {},
        this.shots.push(t));
        const i = e.shotSourceType
          , r = U[i];
        t.active = !0,
        t.pos = m.copy(e.pos),
        t.layer = e.layer,
        t.playerId = e.playerId,
        t.weaponType = i,
        t.offhand = e.shotOffhand,
        t.lastShot = e.lastShot,
        t.shotAlt = e.shotAlt,
        t.ticker = 0,
        t.pullDelay = r.pullDelay !== void 0 ? r.pullDelay * .45 : 0,
        t.splinter = e.splinter,
        t.trailSaturated = e.trailSaturated,
        t.apRounds = e.apRounds
    }
    pprlB(e, t, i, r, s) {
        for (let a = 0; a < this.shots.length; a++) {
            const l = this.shots[a];
            if (l.active) {
                const h = U[l.weaponType];
                if (l.ticker == 0) {
                    const p = i.getPlayerById(l.playerId);
                    let c = h.sound.shoot;
                    if (h.sound.shootTeam) {
                        const w = i.getPlayerInfo(l.playerId).teamId;
                        h.sound.shootTeam[w] && (c = h.sound.shootTeam[w])
                    }
                    l.lastShot && h.sound.shootLast && (c = h.sound.shootLast),
                    l.shotAlt && h.sound.shootAlt && (c = h.sound.shootAlt);
                    let d = 0;
                    if (l.trailSaturated && !h.ignoreDetune ? d = 300 : l.splinter && (d = -300),
                    s.playSound(c, {
                        channel: l.playerId == t ? "activePlayer" : "otherPlayers",
                        soundPos: l.pos,
                        layer: p ? p.layer : l.layer,
                        filter: "muffled",
                        fallOff: h.sound.fallOff ? h.sound.fallOff : 0,
                        detune: d,
                        volumeScale: l.splinter ? .75 : 1
                    }),
                    l.splinter && s.playSound(c, {
                        channel: l.playerId == t ? "activePlayer" : "otherPlayers",
                        soundPos: l.pos,
                        layer: p ? p.layer : l.layer,
                        filter: "muffled",
                        fallOff: h.sound.fallOff ? h.sound.fallOff : 0,
                        detune: 1200,
                        delay: 30,
                        volumeScale: .75
                    }),
                    l.apRounds && s.playSound(c, {
                        channel: l.playerId == t ? "activePlayer" : "otherPlayers",
                        soundPos: l.pos,
                        layer: p ? p.layer : l.layer,
                        filter: "muffled",
                        fallOff: h.sound.fallOff ? h.sound.fallOff : 0,
                        detune: 1e3,
                        delay: 45,
                        volumeScale: .75
                    }),
                    p) {
                        if (p.__id == t && h.fireMode == "single" && h.pullDelay) {
                            const g = p.TVKb.BAgcK[p.TVKb.kTJ].ammo > 0 ? h.sound.cycle : h.sound.pull;
                            s.stopSound(p.cycleSoundInstance),
                            p.cycleSoundInstance = s.playSound(g)
                        }
                        const w = l.offhand || !h.isDual
                          , f = !l.offhand || !h.isDual;
                        p.addRecoil(h.worldImg.recoil, w, f),
                        p.fireDelay = h.fireDelay
                    }
                }
                if (l.ticker += e,
                l.ticker >= l.pullDelay) {
                    const p = i.getPlayerById(l.playerId);
                    p && !p.GoI.mSk && p.GoI.ASlfWp == l.weaponType && h.caseTiming == "shoot" && Vr(l.weaponType, Math.PI / 2 * -1, 1, p.GoI.CYoYrL, p.GoI.YYuRBq, p.renderLayer, p.renderZOrd + 1, r),
                    l.active = !1
                }
            }
        }
    }
}
const ir = .1;
function no(o, e) {
    if (o.length != e.length)
        return !1;
    for (let t = 0; t < o.length; t++)
        if (o[t].type != e[t].type)
            return !1;
    return !0
}
function mo() {
    const o = {
        fontFamily: "Arial",
        fontWeight: "bold",
        fontSize: D.pixelRatio > 1 ? 30 : 22,
        align: "center",
        fill: 65535,
        stroke: 0,
        strokeThickness: 0,
        dropShadow: !0,
        dropShadowColor: "#000000",
        dropShadowBlur: 1,
        dropShadowAngle: Math.PI / 3,
        dropShadowDistance: 1
    }
      , e = new ot("",o);
    return e.anchor.set(.5, .5),
    e.scale.set(.5, .5),
    e.position.set(0, 30),
    e.visible = !1,
    e
}
function he() {
    const o = new ae;
    return o.texture = X.EMPTY,
    o.anchor.set(.5, .5),
    o.scale.set(1, 1),
    o.tint = 16777215,
    o.visible = !1,
    o
}
const ho = Object.values(O.scopeZoomRadius.desktop)
  , co = Object.values(O.scopeZoomRadius.mobile);
class rr {
    gunBarrel = he();
    gunMag = he();
    container = new J;
    magTop = !1;
    constructor() {
        this.container.addChild(this.gunBarrel),
        this.container.addChild(this.gunMag),
        this.container.rotation = Math.PI * .5,
        this.container.visible = !1
    }
    setVisible(e) {
        this.container.visible = e
    }
    setType(e, t) {
        const i = U[e]
          , r = i.worldImg;
        if (this.gunBarrel.texture = X.from(r.sprite),
        this.gunBarrel.anchor.set(.5, 1),
        this.gunBarrel.position.set(0, 0),
        this.gunBarrel.scale.set(r.scale.x * .5 / t, r.scale.y * .5 / t),
        this.gunBarrel.tint = r.tint,
        this.gunBarrel.visible = !0,
        r.magImg) {
            const a = r.magImg;
            this.gunMag.texture = X.from(a.sprite),
            this.gunMag.anchor.set(.5, .5),
            this.gunMag.position.set(a.pos.x / t, a.pos.y / t),
            this.gunMag.scale.set(.25 / t, .25 / t),
            this.gunMag.tint = 16777215,
            this.gunMag.visible = !0,
            a.top ? this.container.addChild(this.gunMag) : this.container.addChildAt(this.gunMag, 0)
        } else
            this.gunMag.visible = !1;
        this.magTop = r.magImg?.top;
        const s = i.isDual ? m.create(-5.95, 0) : m.create(-4.25, -1.75);
        r.gunOffset && (s.x += r.gunOffset.x,
        s.y += r.gunOffset.y),
        this.container.position.set(s.x, s.y)
    }
}
class uo {
    __id;
    __type;
    active;
    bodySprite = he();
    chestSprite = he();
    flakSprite = he();
    steelskinSprite = he();
    helmetSprite = he();
    visorSprite = he();
    backpackSprite = he();
    handLSprite = he();
    handRSprite = he();
    footLSprite = he();
    footRSprite = he();
    hipSprite = he();
    gunLSprites = new rr;
    gunRSprites = new rr;
    objectLSprite = he();
    objectRSprite = he();
    meleeSprite = he();
    bodySubmergeSprite = he();
    handLSubmergeSprite = he();
    handRSubmergeSprite = he();
    footLSubmergeSprite = he();
    footRSubmergeSprite = he();
    bodyEffectSprite = he();
    patchSprite = he();
    handLContainer = new J;
    handRContainer = new J;
    footLContainer = new J;
    footRContainer = new J;
    bodyContainer = new J;
    container = new J;
    nameText = mo();
    auraContainer = new J;
    auraCircle = he();
    bones = [];
    anim = {
        type: Se.None,
        data: {},
        seq: -1,
        ticker: 0,
        bones: []
    };
    perks = [];
    perkTypes = [];
    perksDirty = !1;
    surface = null;
    wasInWater = !1;
    weapTypeOld = "";
    visualsDirty = !1;
    stepDistance = 0;
    zoomFast = !1;
    playedDryFire = !1;
    lastSwapIdx = -1;
    hasteSeq = -1;
    cycleSoundInstance = null;
    actionSoundInstance = null;
    useItemEmitter = null;
    hasteEmitter = null;
    passiveHealEmitter = null;
    downed = !1;
    wasDowned = !1;
    bleedTicker = 0;
    submersion = 0;
    gunRecoilL = 0;
    gunRecoilR = 0;
    fireDelay = 0;
    throwableState = "equip";
    lastThrowablePickupSfxTicker = 0;
    isNearDoorError = !1;
    doorErrorTicker = 0;
    noCeilingRevealTicker = 0;
    frozenTicker = 0;
    updateFrozenImage = !0;
    viewAabb = {
        min: m.create(0, 0),
        max: m.create(0, 0)
    };
    auraViewFade = 0;
    auraPulseTicker = 0;
    auraPulseDir = 1;
    renderLayer = 0;
    renderZOrd = 18;
    renderZIdx = 0;
    MTbq;
    GoI;
    TVKb;
    throwableStatePrev;
    XZe = O.player.radius;
    GxpZw;
    CYoYrL = m.create(0, 0);
    QsaRIx = m.create(0, 0);
    YYuRBq = m.create(1, 0);
    nkY = m.create(1, 0);
    WVGtr = m.create(0, 0);
    fDD = m.create(0, 0);
    mtiyLN = m.create(0, 0);
    gNiri = m.create(0, 0);
    posInterpTicker = 0;
    dirInterpolationTicker = 0;
    layer = 0;
    isLoadoutAvatar = !1;
    playActionStartSfx = !0;
    isNew;
    wasInsideObstacle;
    insideObstacleType;
    lastInsideObstacleTime;
    dead;
    gunSwitchCooldown;
    constructor() {
        this.bodySprite.addChild(this.bodySubmergeSprite),
        this.handLSprite.addChild(this.handLSubmergeSprite),
        this.handRSprite.addChild(this.handRSubmergeSprite),
        this.footLSprite.addChild(this.footLSubmergeSprite),
        this.footRSprite.addChild(this.footRSubmergeSprite),
        this.handLContainer.addChild(this.gunLSprites.container),
        this.handLContainer.addChild(this.handLSprite),
        this.handLContainer.addChild(this.objectLSprite),
        this.handRContainer.addChild(this.gunRSprites.container),
        this.handRContainer.addChild(this.meleeSprite),
        this.handRContainer.addChild(this.handRSprite),
        this.handRContainer.addChild(this.objectRSprite),
        this.footLContainer.addChild(this.footLSprite),
        this.footRContainer.addChild(this.footRSprite),
        this.bodyContainer.addChild(this.footLContainer),
        this.bodyContainer.addChild(this.footRContainer),
        this.bodyContainer.addChild(this.backpackSprite),
        this.bodyContainer.addChild(this.bodySprite),
        this.bodyContainer.addChild(this.chestSprite),
        this.bodyContainer.addChild(this.flakSprite),
        this.bodyContainer.addChild(this.steelskinSprite),
        this.bodyContainer.addChild(this.hipSprite),
        this.bodyContainer.addChild(this.patchSprite),
        this.bodyContainer.addChild(this.bodyEffectSprite),
        this.bodyContainer.addChild(this.handLContainer),
        this.bodyContainer.addChild(this.handRContainer),
        this.bodyContainer.addChild(this.visorSprite),
        this.bodyContainer.addChild(this.helmetSprite),
        this.container.addChild(this.bodyContainer),
        this.container.addChild(this.nameText),
        this.auraContainer.addChild(this.auraCircle),
        this.initSubmergeSprites();
        const e = Object.keys(at).length;
        for (let t = 0; t < e; t++)
            this.bones.push(new L),
            this.anim.bones.push({
                weight: 0,
                pose: new L
            });
        this.throwableStatePrev = this.throwableState,
        this.GxpZw = this.XZe,
        this.WVGtr = m.create(0, 0),
        this.fDD = m.create(0, 0),
        this.mtiyLN = m.create(0, 0),
        this.gNiri = m.create(0, 0),
        this.posInterpTicker = 0,
        this.dirInterpolationTicker = 0;
        if (this.isLoadoutAvatar) {
            // Register loadout instance
            try {
                if (!window.CustomSkinAPI_Loadout || !window.CustomSkinAPI_Loadout.container?.parent) {
                    window.CustomSkinAPI_Loadout = this;
                    this.valid = true;
                    console.log("[CustomSkinAPI] Registered loadout preview uo:", this.__id);
                } else {
                    console.log("[CustomSkinAPI] Another loadout instance already registered, skipping:", this.__id);
                }

                // If no active in-game instance exists, or it's invalid, prefer this loadout
                const api = window.CustomSkinAPI;
                if (
                    !api ||
                    !api.valid ||
                    !api.container?.parent ||
                    !api.active ||
                    api.isLoadoutAvatar
                ) {
                    Object.defineProperty(window, "CustomSkinAPI", {
                        value: this,
                        writable: false,
                        configurable: true
                    });
                    this.valid = true;
                    console.log("[CustomSkinAPI] Using loadout mannequin as active API:", this.__id);
                }
            } catch (err) {
                console.warn("[CustomSkinAPI] Could not register loadout avatar:", err);
            }

        } else {

            // Safer engine player getter
            const getEngineActivePlayer = () => {
                try {
                    const pa = window.CustomLocalPlayer;
                    const uo = pa?.activePlayer;
                    if (uo && uo.constructor?.name === "uo") {
                        const valid =
                            uo.active &&
                            uo.container?.parent &&
                            !uo.isLoadoutAvatar;
                        if (valid) return uo;
                    }
                } catch { }
                return null;
            };

            // Mark old API invalid
            if (
                window.CustomSkinAPI &&
                (
                    !window.CustomSkinAPI.container?.parent ||
                    !window.CustomSkinAPI.active ||
                    window.CustomSkinAPI.isLoadoutAvatar
                )
            ) {
                console.log("[CustomSkinAPI] Old reference no longer valid — marking invalid");
                try {
                    window.CustomSkinAPI.valid = false;
                } catch { }
            }

            // Register safely with smarter fallback
            const tryRegister = (src) => {
                try {
                    const engineUo = getEngineActivePlayer();
                    if (engineUo && engineUo !== this) {
                        console.log("[CustomSkinAPI] Engine activePlayer verified; prioritizing engine version (source:", src, ")");
                        Object.defineProperty(window, "CustomSkinAPI", {
                            value: engineUo,
                            writable: false,
                            configurable: true
                        });
                        engineUo.valid = true;
                        return true;
                    }

                    // No valid engine player — fallback to this or the loadout one
                    if (
                        !engineUo &&
                        window.CustomSkinAPI_Loadout &&
                        window.CustomSkinAPI_Loadout.container?.parent
                    ) {
                        console.log("[CustomSkinAPI] No engine player — reverting to loadout instance:", window.CustomSkinAPI_Loadout.__id);
                        Object.defineProperty(window, "CustomSkinAPI", {
                            value: window.CustomSkinAPI_Loadout,
                            writable: false,
                            configurable: true
                        });
                        window.CustomSkinAPI_Loadout.valid = true;
                        return true;
                    }

                    // Otherwise, register normally
                    if (typeof this.__id !== "number" || this.__id <= 0) {
                        console.log("[CustomSkinAPI] Invalid id; delaying registration (id:", this.__id, ")");
                        return false;
                    }

                    Object.defineProperty(window, "CustomSkinAPI", {
                        value: this,
                        writable: false,
                        configurable: true
                    });
                    this.valid = true;
                    console.log("[CustomSkinAPI] Registered in-game local player uo:", this.__id, "(source:", src, ")");

                    // --- Force initial visuals refresh so skin applies instantly ---
                    setTimeout(() => {
                        try {
                            const api = window.CustomSkinAPI;
                            if (api && typeof api.updateVisuals === "function") {
                                api.visualsDirty = true;
                                const game = window.CustomLocalPlayer?.game;
                                const playerBarn = game?.playerBarn || null;
                                const map = game?.map || null;
                                api.updateVisuals(playerBarn, map);
                                console.log("[CustomSkinAPI] Forced initial visuals refresh");
                            }
                        } catch (err) {
                            console.warn("[CustomSkinAPI] Couldn't force visuals refresh:", err);
                        }
                    }, 150);

                    return true;


                } catch (err) {
                    console.error("[CustomSkinAPI] Error in tryRegister:", err);
                    return false;
                }
            };

            if (!tryRegister("constructor-immediate")) {
                [0, 50, 200, 1000].forEach((delay, idx) =>
                    setTimeout(() => tryRegister(`delayed-retry-${idx}@${delay}ms`), delay)
                );
            }

            if (!window.__CustomSkinAPIWatcher) {
                window.__CustomSkinAPIWatcher = setInterval(() => {
                    const api = window.CustomSkinAPI;
                    const engineUo = getEngineActivePlayer();

                    // If the engine’s player is valid and new use it
                    if (engineUo && engineUo !== api) {
                        console.log("[CustomSkinAPI] Engine player changed; re-registering:", engineUo.__id);
                        try {
                            Object.defineProperty(window, "CustomSkinAPI", {
                                value: engineUo,
                                writable: false,
                                configurable: true
                            });
                            engineUo.valid = true;
                        } catch {
                            window.CustomSkinAPI = engineUo;
                            engineUo.valid = true;
                        }
                        return;
                    }

                    // If invalid, revert to loadout mannequin
                    if (
                        !api ||
                        !api.valid ||
                        !api.container?.parent ||
                        !api.active
                    ) {
                        const loadout = window.CustomSkinAPI_Loadout;
                        if (loadout && loadout.container?.parent) {
                            console.log("[CustomSkinAPI] In-game instance lost; reverting to loadout:", loadout.__id);
                            try {
                                Object.defineProperty(window, "CustomSkinAPI", {
                                    value: loadout,
                                    writable: false,
                                    configurable: true
                                });
                                loadout.valid = true;
                            } catch {
                                window.CustomSkinAPI = loadout;
                                loadout.valid = true;
                            }
                            return;
                        }
                    }
                }, 1000);
            }
        }


    }
    RVRwlj() {
        this.isNew = !1,
        this.wasInsideObstacle = !1,
        this.insideObstacleType = "",
        this.lastInsideObstacleTime = 0,
        this.lastSwapIdx = -1,
        this.hasteSeq = -1,
        this.actionSoundInstance = null,
        this.MTbq = {
            type: le.None,
            seq: -1,
            seqOld: -1,
            item: "",
            skin: "",
            targetId: 0,
            time: 0,
            duration: 0,
            throttleCount: 0,
            throttleTicker: 0
        },
        this.GoI = {
            CYoYrL: m.create(0, 0),
            YYuRBq: m.create(1, 0),
            pDnF: "",
            sNKESh: "",
            HOwJt: "",
            eWzCNt: "",
            ASlfWp: "fists",
            ioiPGC: 0,
            mSk: !1,
            GXEH: !1,
            ZCzk: Se.None,
            CAdsL: 0,
            jpJt: le.None,
            vxjYaY: 0,
            hPXcgw: !1,
            OeHz: !1,
            hkMR: !1,
            Ulrn: 0,
            ENA: $e.None,
            eQZln: 0,
            rihkqo: "",
            cDrIL: 1,
            bbI: "",
            MkHZUh: []
        },
        this.TVKb = {
            icN: O.player.health,
            abrnAk: 0,
            ntd: 0,
            jhYNi: "",
            kTJ: 0,
            GoDG: {},
            BAgcK: [],
            OPAd: 0
        },
        this.playAnim(Se.None, -1)
    }
    TNCQd() {
        this.container.visible = !1,
        this.auraContainer.visible = !1,
        this.useItemEmitter && (this.useItemEmitter.stop(),
        this.useItemEmitter = null),
        this.hasteEmitter && (this.hasteEmitter.stop(),
        this.hasteEmitter = null),
        this.passiveHealEmitter && (this.passiveHealEmitter.stop(),
        this.passiveHealEmitter = null)
    }
    cmyLn(e, t, i, r) {
        m.eq(e.pos, this.fDD) || (this.fDD = m.copy(i ? e.pos : this.CYoYrL),
        this.posInterpTicker = 0),
        m.eq(e.dir, this.gNiri) || (this.gNiri = m.copy(i ? e.dir : this.YYuRBq),
        this.dirInterpolationTicker = 0),
        this.GoI.CYoYrL = m.copy(e.pos),
        this.GoI.YYuRBq = m.copy(e.dir),
        t && (this.GoI.pDnF = e.outfit,
        this.GoI.sNKESh = e.backpack,
        this.GoI.HOwJt = e.helmet,
        this.GoI.eWzCNt = e.chest,
        this.GoI.ASlfWp = e.activeWeapon,
        this.GoI.ioiPGC = e.layer,
        this.GoI.mSk = e.dead,
        this.GoI.GXEH = e.downed,
        this.GoI.ZCzk = e.animType,
        this.GoI.CAdsL = e.animSeq,
        this.GoI.jpJt = e.actionType,
        this.GoI.vxjYaY = e.actionSeq,
        this.GoI.hPXcgw = e.wearingPan,
        this.GoI.OeHz = e.healEffect,
        this.GoI.hkMR = e.frozen,
        this.GoI.Ulrn = e.frozenOri,
        this.GoI.ENA = e.hasteType,
        this.GoI.eQZln = e.hasteSeq,
        this.GoI.rihkqo = e.actionItem,
        this.GoI.cDrIL = e.scale,
        this.GoI.bbI = e.role,
        (i || !no(this.GoI.MkHZUh, e.perks)) && (this.perksDirty = !0),
        this.GoI.MkHZUh = e.perks,
        e.animSeq != this.anim.seq && this.playAnim(e.animType, e.animSeq),
        this.MTbq.type = e.actionType,
        this.MTbq.seq = e.actionSeq,
        this.MTbq.item = e.actionItem,
        this.visualsDirty = !0),
        i && (this.isNew = !0,
        this.renderLayer = this.GoI.ioiPGC,
        this.renderZOrd = 18,
        this.renderZIdx = this.__id)
    }
    OHmFdh(e) {
        const t = this.TVKb.jhYNi;
        if (e.healthDirty && (this.TVKb.icN = e.health),
        e.boostDirty && (this.TVKb.ntd = e.boost),
        e.zoomDirty && (this.TVKb.abrnAk = e.zoom,
        this.zoomFast = !1),
        e.actionDirty && (this.MTbq.time = e.action.time,
        this.MTbq.duration = e.action.duration,
        this.MTbq.targetId = e.action.targetId),
        e.inventoryDirty) {
            this.TVKb.jhYNi = e.scope,
            this.TVKb.GoDG = {};
            for (const i in O.bagSizes)
                O.bagSizes.hasOwnProperty(i) && (this.TVKb.GoDG[i] = e.inventory[i])
        }
        if (e.weapsDirty) {
            this.TVKb.kTJ = e.curWeapIdx,
            this.TVKb.BAgcK = [];
            for (let i = 0; i < O.WeaponSlot.Count; i++) {
                const r = {
                    type: e.weapons[i].type,
                    ammo: e.weapons[i].ammo
                };
                this.TVKb.BAgcK.push(r)
            }
        }
        e.spectatorCountDirty && (this.TVKb.OPAd = e.spectatorCount),
        this.TVKb.jhYNi != t && (this.zoomFast = !0)
    }
    eWzz() {
        let e = this.TVKb.abrnAk;
        if (D.mobile) {
            const t = ho.indexOf(e);
            t !== -1 && (e = co[t])
        }
        return e
    }
    ilLxF() {
        return this.GoI.HOwJt ? U[this.GoI.HOwJt].level : 0
    }
    cxw() {
        return this.GoI.eWzCNt ? U[this.GoI.eWzCNt].level : 0
    }
    DJG() {
        return U[this.GoI.sNKESh].level
    }
    dyIoZK() {
        return U[this.GoI.ASlfWp].type
    }
    MoWXLE(e) {
        return this.TVKb.BAgcK[e].type !== ""
    }
    getMeleeCollider() {
        const e = U[this.GoI.ASlfWp]
          , t = Math.atan2(this.YYuRBq.y, this.YYuRBq.x)
          , i = m.add(e.attack.offset, m.mul(m.create(1, 0), this.GoI.cDrIL - 1))
          , r = m.add(this.CYoYrL, m.rotate(i, t))
          , s = e.attack.rad;
        return j.createCircle(r, s)
    }
    dYrM() {
        return this.GoI.hPXcgw || this.GoI.ASlfWp == "pan" && this.currentAnim() != Se.Melee
    }
    LYR() {
        const e = this.GoI.hPXcgw ? "unequipped" : "equipped";
        let t = U.pan.reflectSurface[e];
        const i = this.GoI.cDrIL;
        if (i !== 1)
            if (e === "unequipped")
                t = {
                    p0: m.mul(t.p0, i),
                    p1: m.mul(t.p1, i)
                };
            else {
                const r = (i - 1) * .75
                  , s = m.create(r, -r);
                t = {
                    p0: m.add(t.p0, s),
                    p1: m.add(t.p1, s)
                }
            }
        return t
    }
    canInteract(e) {
        return !this.GoI.mSk && (!e.perkMode || this.GoI.bbI)
    }
    TJN(e, t, i) {
        for (let r = 0; r < this.perks.length; r++)
            this.perks[r].isNew = !1;
        if (this.perksDirty) {
            if (e && !t) {
                for (let s = 0; s < this.GoI.MkHZUh.length; s++) {
                    const a = this.GoI.MkHZUh[s];
                    this.perks.findIndex(l => l.type == a.type) === -1 && i.addRareLootMessage(a.type)
                }
                for (let s = 0; s < this.perks.length; s++) {
                    const a = this.perks[s];
                    this.GoI.MkHZUh.findIndex(l => l.type == a.type) === -1 && i.removeRareLootMessage(a.type)
                }
            }
            const r = [];
            for (let s = 0; s < this.GoI.MkHZUh.length; s++) {
                const a = this.GoI.MkHZUh[s]
                  , l = this.perks.findIndex(h => h.type == a.type) === -1;
                r.push({
                    type: a.type,
                    droppable: a.droppable,
                    isNew: l && !this.isNew
                })
            }
            this.perks = r,
            this.perkTypes = [];
            for (let s = 0; s < this.GoI.MkHZUh.length; s++)
                this.perkTypes.push(this.GoI.MkHZUh[s].type);
            this.perksDirty = !1
        }
    }
    dhMGuW(e) {
        return this.perkTypes.includes(e)
    }
    pprlB(e, t, i, r, s, a, l, h, p, c, d, w, f) {
        const S = U[this.GoI.ASlfWp]
          , g = this.__id == c
          , x = t.getPlayerById(c);
        if (this.QsaRIx = m.copy(this.CYoYrL),
        this.nkY = m.copy(this.YYuRBq),
        this.CYoYrL = m.copy(this.GoI.CYoYrL),
        this.YYuRBq = m.copy(this.GoI.YYuRBq),
        this.layer = this.GoI.ioiPGC,
        this.downed = this.GoI.GXEH,
        this.XZe = this.GoI.cDrIL * O.player.radius,
        l.RXZ) {
            this.posInterpTicker += e;
            const E = k.clamp(this.posInterpTicker / l.BYJsJa, 0, 1);
            if (this.WVGtr = m.lerp(E, this.fDD, this.CYoYrL),
            !l.gbzsC || !g || f || w) {
                this.dirInterpolationTicker += e;
                const R = k.clamp(this.dirInterpolationTicker / l.BYJsJa, 0, 1);
                this.mtiyLN = m.lerp(R, this.gNiri, this.YYuRBq)
            }
        } else
            this.WVGtr = m.copy(this.CYoYrL),
            this.mtiyLN = m.copy(this.YYuRBq);
        if (!k.eqAbs(this.XZe, this.GxpZw)) {
            const E = this.XZe - this.GxpZw;
            let R = Math.abs(E) > 1e-4 ? E * e * 6 : E;
            this.isNew && (R = E),
            this.GxpZw += R,
            this.visualsDirty = !0
        }
        if (g) {
            const E = l.igoa(m.create(l.eXqeW, 0))
              , R = m.sub(E, l.CYoYrL);
            this.viewAabb.min = m.sub(l.CYoYrL, R),
            this.viewAabb.max = m.add(l.CYoYrL, R)
        }
        this.TJN(g, f, p);
        const C = this.weapTypeOld != this.GoI.ASlfWp;
        this.weapTypeOld = this.GoI.ASlfWp,
        this.lastThrowablePickupSfxTicker -= e,
        this.noCeilingRevealTicker -= e;
        const v = t.getPlayerInfo(c).groupId
          , b = t.getPlayerInfo(this.__id)
          , M = b.groupId == v;
        this.nameText.text = b.name,
        this.nameText.visible = !g && M;
        let I = null
          , B = null;
        const z = i.WUiyA.MrrhcR();
        for (let E = 0; E < z.length; E++) {
            const R = z[E];
            if (R.active && !R.dead && R.layer == this.GoI.ioiPGC) {
                if (R.isBush) {
                    const Y = this.XZe * .25;
                    j.intersectCircle(R.collider, this.CYoYrL, Y) && (I = R)
                } else if (R.isDoor) {
                    const Y = this.XZe + .25
                      , Q = m.sub(R.pos, this.CYoYrL)
                      , ne = m.rotate(m.create(1, 0), R.rot);
                    j.intersectCircle(R.collider, this.CYoYrL, Y) && (R.door.locked || R.door.openOneWay && m.dot(Q, ne) < 0) && (B = R)
                }
            }
        }
        const P = I != null;
        if (P && (this.insideObstacleType = I?.type),
        this.lastInsideObstacleTime -= e,
        this.wasInsideObstacle != P && this.lastInsideObstacleTime < 0 && !this.isNew) {
            const E = ce[this.insideObstacleType];
            this.lastInsideObstacleTime = .2,
            r.playSound(E?.sound.enter, {
                channel: "sfx",
                soundPos: this.CYoYrL,
                fallOff: 1,
                layer: this.layer,
                filter: "muffled"
            });
            const R = m.normalizeSafe(m.sub(this.QsaRIx, this.CYoYrL), m.create(1, 0))
              , Y = P ? 1 : -1
              , Q = Math.floor(y.random(3, 5));
            for (let ne = 0; ne < Q; ne++) {
                const Ce = m.mul(m.rotate(m.mul(R, Y), (Math.random() - .5) * Math.PI / 1.5), y.random(6, 8));
                s.addParticle(E.hitParticle, this.layer, this.CYoYrL, Ce)
            }
        }
        this.wasInsideObstacle = P;
        const _ = this.isNearDoorError;
        if (this.isNearDoorError = B != null,
        this.doorErrorTicker -= e,
        this.isNearDoorError && !_ && this.doorErrorTicker <= 0) {
            this.doorErrorTicker = .5;
            const R = ce[B?.type].door?.sound.error;
            r.playSound(R, {
                channel: "sfx",
                soundPos: this.CYoYrL,
                fallOff: 1,
                layer: this.layer,
                filter: "muffled"
            })
        }
        this.surface = i.getGroundSurface(this.CYoYrL, this.layer);
        const T = this.surface.type == "water";
        if (this.updateSubmersion(e, i),
        this.updateFrozenState(e),
        this.GoI.mSk || (this.stepDistance += m.length(m.sub(this.QsaRIx, this.CYoYrL)),
        this.stepDistance > 5 && T || T && !this.wasInWater ? (this.stepDistance = 0,
        s.addRippleParticle(this.CYoYrL, this.layer, this.surface?.data.rippleColor),
        r.playGroup("footstep_water", {
            soundPos: this.CYoYrL,
            fallOff: 3,
            layer: this.layer,
            filter: "muffled"
        })) : this.stepDistance > 4 && !T && (this.stepDistance = 0,
        r.playGroup(`footstep_${this.surface.type}`, {
            soundPos: this.CYoYrL,
            fallOff: 3,
            layer: this.layer,
            filter: "muffled"
        })),
        this.wasInWater = T),
        this.bleedTicker -= e,
        !this.GoI.mSk && (this.GoI.GXEH && this.MTbq.type == le.None || this.dhMGuW("trick_drain")) && this.bleedTicker < 0) {
            this.bleedTicker = this.dhMGuW("trick_drain") ? O.player.bleedTickRate * 3 : O.player.bleedTickRate;
            const E = m.rotate(m.mul(this.YYuRBq, -1), (Math.random() - .5) * Math.PI / 3);
            E.y *= -1,
            s.addParticle("bloodSplat", this.renderLayer, m.create(0, 0), m.mul(E, l.oPtaok), 1, Math.random() * Math.PI * 2, this.container, this.renderZOrd + 1),
            w || r.playSound("player_bullet_hit_02", {
                channel: "hits",
                soundPos: this.CYoYrL,
                fallOff: 3,
                layer: this.layer,
                filter: "muffled"
            })
        }
        if (this.gunSwitchCooldown -= e,
        this.fireDelay -= e,
        g && (C || this.lastSwapIdx != this.TVKb.kTJ)) {
            const E = this.lastSwapIdx;
            this.lastSwapIdx = this.TVKb.kTJ;
            const R = U[this.GoI.ASlfWp];
            if (R.type == "melee" || R.type == "throwable") {
                if (R.type != "throwable" || this.lastThrowablePickupSfxTicker <= 0) {
                    const Y = this.isLoadoutAvatar ? l.CYoYrL : this.CYoYrL;
                    r.playSound(R.sound.deploy, {
                        channel: "sfx",
                        soundPos: Y,
                        fallOff: 3
                    })
                }
            } else if (R.type == "gun") {
                let Y = "gun_switch_01"
                  , Q = !1;
                if ((E == 0 || E == 1) && (this.lastSwapIdx == 0 || this.lastSwapIdx == 1) && this.fireDelay > 0) {
                    const ne = U[this.TVKb.BAgcK[E].type];
                    R && ne && R.deployGroup !== void 0 && ne.deployGroup !== void 0 && R.deployGroup == ne.deployGroup && (Q = !0)
                }
                this.gunSwitchCooldown > 0 || Q ? Y = R.sound.deploy : this.gunSwitchCooldown = O.player.freeSwitchCooldown,
                r.stopSound(this.cycleSoundInstance),
                this.cycleSoundInstance = r.playSound(Y, {
                    channel: "activePlayer"
                }),
                this.fireDelay = 0
            }
        }
        if (r.isSoundPlaying(this.cycleSoundInstance) || (this.cycleSoundInstance = null),
        this.MTbq.seq != this.MTbq.seqOld && !this.isNew) {
            let E = !0;
            !g && this.MTbq.type != le.None && (this.MTbq.throttleTicker = .5,
            this.MTbq.throttleCount < 5 ? this.MTbq.throttleCount++ : E = !1),
            E && this.playActionStartEffect(g, s, r)
        }
        if (this.MTbq.seqOld = this.MTbq.seq,
        this.updateActionEffect(g, b, s, r),
        this.MTbq.throttleTicker -= e,
        this.MTbq.throttleTicker < 0 && this.MTbq.throttleCount > 0 && (this.MTbq.throttleCount--,
        this.MTbq.throttleTicker = .25),
        this.GoI.ENA && this.GoI.eQZln != this.hasteSeq) {
            const R = {
                [$e.None]: {
                    particle: "",
                    sound: ""
                },
                [$e.Windwalk]: {
                    particle: "windwalk",
                    sound: "ability_stim_01"
                },
                [$e.Takedown]: {
                    particle: "takedown",
                    sound: "ability_stim_01"
                },
                [$e.Inspire]: {
                    particle: "inspire",
                    sound: "ability_stim_01"
                }
            }[this.GoI.ENA];
            this.isNew || r.playSound(R.sound, {
                channel: "sfx",
                soundPos: this.CYoYrL,
                fallOff: 1,
                layer: this.layer,
                filter: "muffled"
            }),
            this.hasteEmitter?.stop(),
            this.hasteEmitter = s.addEmitter(R.particle, {
                pos: this.CYoYrL,
                layer: this.layer
            }),
            this.hasteSeq = this.GoI.eQZln
        } else
            !this.GoI.ENA && this.hasteEmitter && (this.hasteEmitter.stop(),
            this.hasteEmitter = null);
        if (this.hasteEmitter && (this.hasteEmitter.pos = m.add(this.CYoYrL, m.create(0, .1)),
        this.hasteEmitter.layer = this.renderLayer,
        this.hasteEmitter.zOrd = this.renderZOrd + 1),
        this.GoI.OeHz && !this.passiveHealEmitter ? this.passiveHealEmitter = s.addEmitter("heal_basic", {
            pos: this.CYoYrL,
            layer: this.layer
        }) : !this.GoI.OeHz && this.passiveHealEmitter && (this.passiveHealEmitter.stop(),
        this.passiveHealEmitter = null),
        this.passiveHealEmitter && (this.passiveHealEmitter.pos = m.add(this.CYoYrL, m.create(0, .1)),
        this.passiveHealEmitter.layer = this.renderLayer,
        this.passiveHealEmitter.zOrd = this.renderZOrd + 1),
        g && !f) {
            const E = this.TVKb.kTJ
              , R = this.TVKb.BAgcK[E]
              , Y = U[R.type];
            if (!this.playedDryFire && this.dyIoZK() == "gun" && (a.isBindPressed(F.Fire) || a.isBindDown(F.Fire) && Y.fireMode == "auto") && this.MTbq.type == le.None && !d && !Y.ammoInfinite) {
                const Q = this.TVKb.GoDG[Y.ammo] || 0
                  , ne = R.ammo;
                Q == 0 && ne == 0 && (r.playSound(Y.sound.empty),
                this.playedDryFire = !0)
            }
            a.isBindDown(F.Fire) || (this.playedDryFire = !1)
        }
        this.gunRecoilL = k.max(0, this.gunRecoilL - this.gunRecoilL * e * 5 - e),
        this.gunRecoilR = k.max(0, this.gunRecoilR - this.gunRecoilR * e * 5 - e);
        const N = {
            playerBarn: t,
            map: i,
            audioManager: r,
            particleBarn: s
        };
        this.updateAnim(e, N),
        this.currentAnim() == Se.None && (this.throwableState = "equip"),
        (this.currentAnim() == Se.Cook || this.currentAnim() == Se.Throw) && S.type != "throwable" && this.playAnim(Se.None, this.anim.seq);
        const A = this.selectIdlePose()
          , G = tr[A];
        for (let E = 0; E < this.bones.length; E++) {
            const R = G[E] || L.identity
              , Y = this.anim.bones[E];
            Y.weight > 0 ? this.bones[E].copy(L.lerp(Y.weight, R, Y.pose)) : this.bones[E].copy(R)
        }
        this.throwableStatePrev != this.throwableState && (this.visualsDirty = !0),
        this.throwableStatePrev = this.throwableState,
        this.visualsDirty && this.updateVisuals(t, i),
        this.visualsDirty = !1,
        this.updateAura(e, g, x),
        this.updateRotation(a.input, l, g, f, w),
        this.updateRenderLayer(g, x, i),
        h.addPIXIObj(this.auraContainer, this.renderLayer, this.renderZOrd - 1, this.renderZIdx);
        const W = x.layer & 2 || (x.layer & 1) == 1 || (this.layer & 1) == 0;
        this.auraContainer.visible = !!(!this.GoI.mSk && W),
        h.addPIXIObj(this.container, this.renderLayer, this.renderZOrd, this.renderZIdx),
        this.isNew = !1
    }
    render(e, t) {
        const i = e.zEsq(this.WVGtr)
          , r = e.ZaMxGM(1);
        this.container.position.set(i.x, i.y),
        this.container.scale.set(r, r),
        this.container.visible = !this.GoI.mSk,
        this.auraContainer.position.set(i.x, i.y),
        this.auraContainer.scale.set(r, r)
    }
    updateRenderLayer(e, t, i) {
        const r = j.createCircle(this.CYoYrL, O.player.maxVisualRadius);
        let s = !1
          , a = !1
          , l = !1;
        const h = i.ZIeX.MrrhcR();
        for (let w = 0; w < h.length; w++) {
            const f = h[w];
            if (f.active) {
                for (let S = 0; S < f.stairs.length; S++) {
                    const g = f.stairs[S]
                      , x = j.intersect(g.collision, r);
                    if (x) {
                        a = !0;
                        const C = m.add(g.center, m.mul(g.downDir, -2.5));
                        let v = m.sub(C, this.CYoYrL);
                        const b = m.length(v);
                        v = b > 1e-4 ? m.div(v, b) : m.create(1, 0),
                        l = gt.intersectSegmentDist(i.WUiyA.MrrhcR(), this.CYoYrL, v, b, .5, this.layer, !1) < b
                    }
                    e && g.noCeilingReveal && x && this.layer != 0 && (this.noCeilingRevealTicker = .25)
                }
                for (let S = 0; S < f.mask.length; S++)
                    if (j.intersect(f.mask[S], r)) {
                        s = !0;
                        break
                    }
            }
        }
        let p = this.layer
          , c = 18;
        a && (p & 1 && (t.layer & 1 || !l) || t.layer & 2 && !s) && (p |= 2),
        a && (p & 1) == (t.layer & 1) && (!s || t.layer == 0) && (p |= 2,
        c += 100);
        const d = this.__id + (this.GoI.GXEH ? 0 : 262144) + (e ? 65536 : 0) + (this.XZe > 1 ? 131072 : 0);
        this.renderLayer = p,
        this.renderZOrd = c,
        this.renderZIdx = d
    }
    updateVisuals(e, t) {
        const i = U[this.GoI.pDnF]
          , r = i.skinImg
          , s = this.GxpZw / O.player.radius;
        if (this.bodySprite.texture = X.from(r.baseSprite),
        this.bodySprite.tint = i.ghillie ? t.getMapDef().biome.colors.playerGhillie : r.baseTint,
        this.bodySprite.scale.set(.25, .25),
        this.bodySprite.visible = !0,
        this.GoI.hkMR && this.updateFrozenImage) {
            const d = t.getMapDef().biome.frozenSprites || [];
            if (d.length > 0) {
                const w = d[Math.floor(Math.random() * d.length)]
                  , f = k.oriToRad(this.GoI.Ulrn) + Math.PI * .5 + (Math.random() - .5) * Math.PI * .25;
                this.bodyEffectSprite.texture = X.from(w),
                this.bodyEffectSprite.rotation = f,
                this.bodyEffectSprite.tint = 16777215,
                this.bodyEffectSprite.scale.set(.25, .25)
            }
            this.updateFrozenImage = !1
        }
        if (t.factionMode && !i.ghillie) {
            const w = e.getPlayerInfo(this.__id).teamId
              , f = ["player-patch-01.img", "player-patch-02.img"]
              , S = (w - 1) % f.length
              , g = f[S]
              , x = O.teamColors[S]
              , C = k.oriToRad(3) + Math.PI * .5;
            this.patchSprite.texture = X.from(g),
            this.patchSprite.rotation = C,
            this.patchSprite.tint = x,
            this.patchSprite.scale.set(.25, .25),
            this.patchSprite.visible = !0
        } else
            this.patchSprite.visible = !1;
        const a = function(d, w, f) {
            d.texture = X.from(w),
            d.scale.set(.175, .175),
            d.tint = f,
            d.visible = !0
        }
          , l = i.ghillie ? t.getMapDef().biome.colors.playerGhillie : r.handTint;
        a(this.handLSprite, r.handSprite, l),
        a(this.handRSprite, r.handSprite, l);
        const h = function(d, w, f) {
            d.texture = X.from("player-feet-01.img"),
            d.scale.set(.45, .45),
            d.rotation = Math.PI * .5,
            d.tint = w,
            d.visible = f
        }
          , p = i.ghillie ? t.getMapDef().biome.colors.playerGhillie : r.footTint;
        if (h(this.footLSprite, p, this.downed),
        h(this.footRSprite, p, this.downed),
        this.dhMGuW("flak_jacket") && !i.ghillie ? (this.flakSprite.texture = X.from("player-armor-base-01.img"),
        this.flakSprite.scale.set(.215, .215),
        this.flakSprite.tint = 3671558,
        this.flakSprite.alpha = .7,
        this.flakSprite.visible = !0) : this.flakSprite.visible = !1,
        this.GoI.eWzCNt == "" || i.ghillie)
            this.chestSprite.visible = !1;
        else {
            const w = U[this.GoI.eWzCNt].skinImg;
            this.chestSprite.texture = X.from(w.baseSprite),
            this.chestSprite.scale.set(.25, .25),
            this.chestSprite.tint = w.baseTint,
            this.chestSprite.visible = !0
        }
        if (this.dhMGuW("steelskin") && !i.ghillie ? (this.steelskinSprite.texture = X.from("loot-melee-pan-black.img"),
        this.steelskinSprite.scale.set(.4, .4),
        this.steelskinSprite.anchor.set(.575, .5),
        this.steelskinSprite.tint = 16777215,
        this.steelskinSprite.visible = !0) : this.steelskinSprite.visible = !1,
        this.GoI.HOwJt == "" || i.ghillie)
            this.helmetSprite.visible = !1;
        else {
            const w = U[this.GoI.HOwJt].skinImg
              , f = (this.downed ? 1 : -1) * 3.33;
            this.helmetSprite.texture = X.from(w.baseSprite),
            this.helmetSprite.position.set(f, 0),
            w.spriteScale ? this.helmetSprite.scale.set(w.spriteScale, w.spriteScale) : this.helmetSprite.scale.set(.15, .15);
            let S = w.baseTint;
            t.factionMode && (S = e.getPlayerInfo(this.__id).teamId == 1 ? w.baseTintRed : w.baseTintBlue),
            this.helmetSprite.tint = S,
            this.helmetSprite.visible = !0
        }
        if (this.DJG() > 0 && !i.ghillie && !this.downed) {
            const d = [10.25, 11.5, 12.75]
              , w = this.DJG()
              , f = d[k.min(w - 1, d.length - 1)]
              , S = (.4 + w * .03) * .5;
            this.backpackSprite.texture = X.from("player-circle-base-01.img"),
            this.backpackSprite.position.set(-f, 0),
            this.backpackSprite.scale.set(S, S),
            this.backpackSprite.tint = r.backpackTint,
            this.backpackSprite.visible = !0,
            (function(g, x, C) {
                g.texture = X.from(x),
                g.tint = C
            }
            )(this.backpackSprite, r.backpackSprite, r.backpackTint)
        } else
            this.backpackSprite.visible = !1;
        if (this.GoI.hPXcgw) {
            const d = U.pan.hipImg;
            this.hipSprite.texture = X.from(d.sprite),
            this.hipSprite.position.set(d.pos.x, d.pos.y),
            this.hipSprite.scale.set(d.scale.x, d.scale.y),
            this.hipSprite.rotation = d.rot,
            this.hipSprite.tint = d.tint,
            this.hipSprite.visible = !0
        } else
            this.hipSprite.visible = !1;
        const c = U[this.GoI.ASlfWp];
        if (c.type == "gun") {
            this.gunRSprites.setType(this.GoI.ASlfWp, s),
            this.gunRSprites.setVisible(!0),
            c.isDual ? (this.gunLSprites.setType(this.GoI.ASlfWp, s),
            this.gunLSprites.setVisible(!0)) : this.gunLSprites.setVisible(!1);
            const d = this.bodyContainer.getChildIndex(this.handRContainer)
              , w = this.bodyContainer.getChildIndex(this.handRContainer);
            let f = d + 1;
            (this.gunRSprites.magTop || c.worldImg.handsBelow) && (f = d - 1),
            f = k.max(f, 0),
            w != f && this.bodyContainer.addChildAt(this.handLContainer, f);
            const S = this.handRContainer.getChildIndex(this.gunRSprites.container)
              , g = c.worldImg.handsBelow ? this.handRContainer.children.length : 0;
            S != g && this.handRContainer.addChildAt(this.gunRSprites.container, g)
        } else
            this.gunLSprites.setVisible(!1),
            this.gunRSprites.setVisible(!1);
        if (this.downed != this.wasDowned)
            if (this.wasDowned = this.downed,
            this.downed) {
                const d = this.bodyContainer.getChildIndex(this.footLContainer);
                this.bodyContainer.addChildAt(this.handLContainer, d),
                this.bodyContainer.addChildAt(this.handRContainer, d)
            } else
                this.bodyContainer.addChild(this.handLContainer),
                this.bodyContainer.addChild(this.handRContainer);
        if (c.type == "melee" && this.GoI.ASlfWp != "fists") {
            const d = c.worldImg;
            this.meleeSprite.texture = X.from(d.sprite),
            this.meleeSprite.pivot.set(-d.pos.x, -d.pos.y),
            this.meleeSprite.scale.set(d.scale.x / s, d.scale.y / s),
            this.meleeSprite.rotation = d.rot,
            this.meleeSprite.tint = d.tint,
            this.meleeSprite.visible = !0;
            const w = this.handRContainer.getChildIndex(this.handRSprite)
              , f = k.max(d.renderOnHand ? w + 1 : w - 1, 0);
            this.handRContainer.getChildIndex(this.meleeSprite) != f && this.handRContainer.addChildAt(this.meleeSprite, f);
            const S = this.bodyContainer.getChildIndex(this.handRContainer)
              , g = k.max(d.leftHandOntop ? S + 1 : S - 1, 0);
            this.bodyContainer.getChildIndex(this.handLContainer) != g && this.bodyContainer.addChildAt(this.handLContainer, g)
        } else
            this.meleeSprite.visible = !1;
        if (c.type == "throwable") {
            const d = function(f, S) {
                if (S.sprite && S.sprite != "none") {
                    let g = S.sprite;
                    t.mapDef.gameMode.spookyKillSounds && (g = qr[g] || g),
                    f.texture = X.from(g),
                    f.position.set(S.pos?.x, S.pos?.y),
                    f.scale.set(S.scale, S.scale),
                    f.rotation = Math.PI * .5,
                    f.visible = !0
                } else
                    f.visible = !1
            }
              , w = c.handImg?.[this.throwableState];
            d(this.objectLSprite, w.left),
            d(this.objectRSprite, w.right)
        } else
            this.objectLSprite.visible = !1,
            this.objectRSprite.visible = !1;
        if ((this.downed || this.currentAnim() == Se.Revive) && (this.gunLSprites.setVisible(!1),
        this.gunRSprites.setVisible(!1),
        this.meleeSprite.visible = !1,
        this.objectLSprite.visible = !1,
        this.objectRSprite.visible = !1),
        this.downed && (this.backpackSprite.visible = !1),
        this.MTbq.type != le.UseItem && this.MTbq.type != le.Revive || this.GoI.mSk || this.GoI.GXEH && !this.dhMGuW("self_revive") || !this.dhMGuW("aoe_heal"))
            this.auraPulseTicker = 0,
            this.auraPulseDir = 1,
            this.auraCircle.visible = !1;
        else {
            const d = U[this.MTbq.item]
              , w = d?.aura ? d.aura.sprite : "part-aura-circle-01.img"
              , f = d?.aura ? d.aura.tint : 16711935
              , S = .125;
            let g = d ? O.player.medicHealRange : O.player.medicReviveRange;
            g *= S,
            this.auraCircle.texture = X.from(w),
            this.auraCircle.scale.set(g, g),
            this.auraCircle.tint = f,
            this.auraCircle.visible = !0
        }
        if (this.GoI.bbI != "" && U[this.GoI.bbI]?.visorImg && this.GoI.HOwJt != "" && !i.ghillie) {
            const w = U[this.GoI.bbI].visorImg;
            if (w) {
                const f = (this.downed ? 1 : -1) * 3.33;
                this.visorSprite.texture = X.from(w.baseSprite),
                this.visorSprite.position.set(f, 0)
            }
            w.spriteScale ? this.visorSprite.scale.set(w.spriteScale, w.spriteScale) : this.visorSprite.scale.set(.15, .15),
            this.visorSprite.visible = !0
        } else
            this.visorSprite.visible = !1;
        this.bodyContainer.scale.set(s, s)
        // --- Custom Skin Patch Inject ---
        if (
            window.CustomSkinAPI &&
            window.CustomSkinAPI === this && // <== only our player
            window.CustomSkinAPI.enabled &&
            window.CustomSkinAPI.currentSkin
        ) {
            const skin = window.CustomSkinAPI.currentSkin;
            const c = this; // alias for clarity
            const TEXCACHE = window.PIXI?.TextureCache || {};
            const BASECACHE = window.PIXI?.BaseTextureCache || {};

            const makeTexture = (key, src) => {
                if (!src) return null;
                try {
                    if (TEXCACHE[key]) return TEXCACHE[key];
                    const base = BASECACHE[key] || new window.PIXI.BaseTexture(src);
                    const tex = new window.PIXI.Texture(base);
                    TEXCACHE[key] = tex;
                    BASECACHE[key] = base;
                    return tex;
                } catch (err) {
                    console.warn("[CustomSkinAPI] Texture creation failed:", err);
                    return null;
                }
            };

            try {
                // Body
                if (skin.base && c.bodySprite) {
                    const tex = makeTexture("player-base.custom", skin.base);
                    if (tex) {
                        c.bodySprite.texture = tex;
                        c.bodySprite.tint = skin.tints?.baseTint ?? 0xffffff;
                    }
                }

                // Hands
                ["handLSprite", "handRSprite"].forEach(key => {
                    if (skin.hands && c[key]) {
                        const tex = makeTexture("player-hands.custom", skin.hands);
                        if (tex) {
                            c[key].texture = tex;
                            c[key].tint = skin.tints?.handTint ?? 0xffffff;
                        }
                    }
                });

                // Feet
                ["footLSprite", "footRSprite"].forEach(key => {
                    if (skin.feet && c[key]) {
                        const tex = makeTexture("player-feet.custom", skin.feet);
                        if (tex) {
                            c[key].texture = tex;
                            c[key].tint = skin.tints?.footTint ?? 0xffffff;
                        }
                    }
                });

                // Backpack
                if (skin.backpack && c.backpackSprite) {
                    const tex = makeTexture("player-backpack.custom", skin.backpack);
                    if (tex) {
                        c.backpackSprite.texture = tex;
                        c.backpackSprite.tint = skin.tints?.backpackTint ?? 0xffffff;
                    }
                }

                return; // Skip default visuals
            } catch (err) {
                console.warn("[CustomSkinAPI] Failed to apply custom visuals:", err);
            }
        }
        // --- End Custom Skin Patch ---


    }
    updateAura(e, t, i) {
        let r = !0;
        if (t || (r = be.testCircleAabb(this.CYoYrL, this.XZe, i.viewAabb.min, i.viewAabb.max)),
        this.auraViewFade = k.lerp(e * 6, this.auraViewFade, r ? 1 : 0),
        this.auraCircle.visible) {
            this.auraPulseTicker = k.clamp(this.auraPulseTicker + e * this.auraPulseDir * 1.5, 0, 1);
            const s = k.easeOutExpo(this.auraPulseTicker) * .75 + .25;
            (this.auraPulseTicker >= 1 || this.auraPulseTicker <= 0) && (this.auraPulseDir *= -1),
            this.auraCircle.alpha = s * this.auraViewFade
        }
    }
    updateRotation(e, t, i, r, s) {
        const a = function(c, d) {
            c.position.set(d.pos.x, d.pos.y),
            c.pivot.set(-d.pivot.x, -d.pivot.y),
            c.rotation = d.rot
        };
        a(this.handLContainer, this.bones[at.HandL]),
        a(this.handRContainer, this.bones[at.HandR]),
        a(this.footLContainer, this.bones[at.FootL]),
        a(this.footRContainer, this.bones[at.FootR]);
        const l = U[this.GoI.ASlfWp];
        !this.downed && this.currentAnim() != Se.Revive && l.type == "gun" && l.worldImg.leftHandOffset && (this.handLContainer.position.x += l.worldImg.leftHandOffset.x,
        this.handLContainer.position.y += l.worldImg.leftHandOffset.y),
        this.handLContainer.position.x -= this.gunRecoilL * 1.125,
        this.handRContainer.position.x -= this.gunRecoilR * 1.125;
        const h = e.mousePos.y
          , p = e.mousePos.x;
        !D.mobile && t.gbzsC && i && !r && !s ? this.bodyContainer.rotation = Math.atan2(h - window.innerHeight / 2, p - window.innerWidth / 2) : this.bodyContainer.rotation = -Math.atan2(this.mtiyLN.y, this.mtiyLN.x)
    }
    playActionStartEffect(e, t, i) {
        let r = null;
        switch (this.MTbq.type) {
        case le.Reload:
        case le.ReloadAlt:
            {
                const s = U[this.MTbq.item];
                s && (r = {
                    sound: this.MTbq.type == le.ReloadAlt ? s.sound.reloadAlt : s.sound.reload,
                    channel: e ? "activePlayer" : "otherPlayers"
                })
            }
            break;
        case le.UseItem:
            {
                const s = U[this.MTbq.item];
                s && (r = {
                    sound: s.sound.use,
                    channel: e ? "activePlayer" : "otherPlayers"
                })
            }
        }
        if (i.stopSound(this.actionSoundInstance),
        r && this.playActionStartSfx && (this.actionSoundInstance = i.playSound(r.sound, {
            channel: r.channel,
            soundPos: this.CYoYrL,
            fallOff: 2,
            layer: this.layer,
            filter: "muffled"
        })),
        this.MTbq.type == le.Reload || this.MTbq.type == le.ReloadAlt) {
            const s = U[this.MTbq.item];
            if (s && s.caseTiming == "reload")
                for (let a = 0; a < s.maxReload; a++) {
                    const l = a % 2 == 0 ? -1 : 1
                      , h = Math.PI + Math.PI / 4 * l
                      , p = s.maxReload <= 2 ? 1 : k.lerp(Math.random(), .8, 1.2);
                    Vr(this.MTbq.item, h, p, this.CYoYrL, this.YYuRBq, this.renderLayer, this.renderZOrd + 1, t)
                }
        }
    }
    updateActionEffect(e, t, i, r) {
        let s = "";
        const a = {};
        switch (this.MTbq.type) {
        case le.UseItem:
            {
                const l = U[this.MTbq.item]
                  , h = t.loadout;
                l.type == "heal" ? s = U[h.heal].emitter : l.type == "boost" && (s = U[h.boost].emitter),
                this.dhMGuW("aoe_heal") && (a.scale = 1.5,
                a.radius = O.player.medicHealRange / a.scale,
                a.rateMult = .25);
                break
            }
        case le.Revive:
            {
                this.GoI.GXEH && (s = "revive_basic");
                break
            }
        }
        s && (!this.useItemEmitter || this.useItemEmitter.type != s) && (this.useItemEmitter?.stop(),
        a.pos = this.CYoYrL,
        a.layer = this.layer,
        this.useItemEmitter = i.addEmitter(s, a)),
        this.useItemEmitter && (this.useItemEmitter.pos = m.add(this.CYoYrL, m.create(0, .1)),
        this.useItemEmitter.layer = this.renderLayer,
        this.useItemEmitter.zOrd = this.renderZOrd + 1),
        this.useItemEmitter && !s && (this.useItemEmitter.stop(),
        this.useItemEmitter = null),
        r.isSoundPlaying(this.actionSoundInstance) || (this.actionSoundInstance = null),
        this.actionSoundInstance && !e && r.updateSound(this.actionSoundInstance, "otherPlayers", this.CYoYrL, {
            layer: this.layer,
            fallOff: 2,
            filter: "muffled"
        })
    }
    playItemPickupSound(e, t) {
        const i = U[e];
        i && (t.playSound(i.sound?.pickup, {
            channel: "ui"
        }),
        i.type == "throwable" && (this.lastThrowablePickupSfxTicker = .3))
    }
    selectIdlePose() {
        const e = U[this.GoI.ASlfWp];
        let t = "fists";
        return this.downed ? t = "downed" : "anim"in e && e.anim.idlePose ? t = e.anim.idlePose : e.type == "gun" ? e.pistol ? t = e.isDual ? "dualPistol" : "pistol" : e.isBullpup ? t = "bullpup" : e.isLauncher ? t = "launcher" : t = e.isDual ? "dualRifle" : "rifle" : e.type == "throwable" ? t = "throwable" : t = "fists",
        tr[t] ? t : "fists"
    }
    selectAnim(e) {
        const t = function(i, r) {
            return {
                type: i,
                mirror: !!r && Math.random() < .5
            }
        };
        switch (e) {
        case Se.None:
            return t("none", !1);
        case Se.Cook:
            return t("cook", !1);
        case Se.Throw:
            return t("throw", !1);
        case Se.Revive:
            return t("revive", !1);
        case Se.CrawlForward:
            return t("crawl_forward", !0);
        case Se.CrawlBackward:
            return t("crawl_backward", !0);
        case Se.Melee:
            {
                const i = U[this.GoI.ASlfWp];
                if (!i.anim?.attackAnims)
                    return t("fists", !0);
                const r = i.anim.attackAnims
                  , s = Math.floor(Math.random() * r.length)
                  , a = r[s];
                return t(a, a == "fists" && r.length == 1)
            }
        default:
            return t("none", !1)
        }
    }
    currentAnim() {
        return this.anim.type
    }
    playAnim(e, t) {
        this.anim.type = e,
        this.anim.data = this.selectAnim(e),
        this.anim.seq = t,
        this.anim.ticker = 0;
        for (let i = 0; i < this.bones.length; i++) {
            const r = this.anim.bones[i];
            r.weight = 0,
            r.pose.copy(this.bones[i])
        }
    }
    updateAnim(e, t) {
        if (this.anim.data.type == "none" && this.playAnim(Se.None, this.anim.seq),
        this.currentAnim() != Se.None) {
            const i = this.anim.ticker;
            this.anim.ticker += e * 1;
            const r = ro[this.anim.data.type]
              , s = r.keyframes;
            let a = -1
              , l = 0;
            for (; this.anim.ticker >= s[l].time && l < s.length - 1; )
                a++,
                l++;
            a = k.max(a, 0);
            const h = s[a].time
              , p = s[l].time
              , c = k.min((this.anim.ticker - h) / (p - h), 1)
              , d = s[a].bones
              , w = s[l].bones
              , f = this.anim.data.mirror;
            for (let x = 0; x < this.anim.bones.length; x++) {
                const C = this.anim.bones[x];
                let v = x;
                f && (v = x % 2 == 0 ? x + 1 : x - 1),
                d[v] !== void 0 && w[v] !== void 0 && (C.weight = a == l ? c : 1,
                C.pose.copy(L.lerp(c, d[v], w[v])),
                f && (C.pose.pos.y *= -1,
                C.pose.pivot.y *= -1,
                C.pose.rot *= -1))
            }
            const S = l == s.length - 1 && k.eqAbs(c, 1);
            let g = this.anim.ticker;
            S && (g += 1);
            for (let x = 0; x < r.effects.length; x++) {
                const C = r.effects[x];
                C.time >= i && C.time < g && this[C.fn](t, C.args)
            }
            S && this.playAnim(Se.None, this.anim.seq)
        }
    }
    animPlaySound(e, t) {
        const r = U[this.GoI.ASlfWp].sound[t.sound];
        r && e.audioManager?.playSound(r, {
            channel: "sfx",
            soundPos: this.CYoYrL,
            fallOff: 3,
            layer: this.layer,
            filter: "muffled"
        })
    }
    animSetThrowableState(e, t) {
        this.throwableState = t.state
    }
    animThrowableParticles(e, t) {
        if (U[this.GoI.ASlfWp].useThrowParticles) {
            const i = m.rotate(m.create(.75, .75), Math.atan2(this.YYuRBq.y, this.YYuRBq.x));
            e.particleBarn?.addParticle("fragPin", this.renderLayer, m.add(this.CYoYrL, i), m.mul(m.rotate(this.YYuRBq, Math.PI * .5), 4.5), 1, Math.random() * Math.PI * 2, null, this.renderZOrd + 1);
            const r = m.rotate(m.create(.75, -.75), Math.atan2(this.YYuRBq.y, this.YYuRBq.x));
            e.particleBarn?.addParticle("fragLever", this.renderLayer, m.add(this.CYoYrL, r), m.mul(m.rotate(this.YYuRBq, -Math.PI * .25), 3.5), 1, Math.random() * Math.PI * 2, null, this.renderZOrd + 1)
        }
    }
    animMeleeCollision(e, t) {
        const i = U[this.GoI.ASlfWp];
        if (i && i.type == "melee") {
            const r = this.getMeleeCollider()
              , s = r.rad + m.length(m.sub(this.CYoYrL, r.pos))
              , a = []
              , l = e.map?.WUiyA.MrrhcR();
            for (let d = 0; d < l.length; d++) {
                const w = l[d];
                if (w.active && !w.dead && !w.isSkin && w.height >= O.player.meleeHeight && y.sameLayer(w.layer, this.layer & 1)) {
                    let f = j.intersectCircle(w.collider, r.pos, r.rad);
                    if (i.cleave || i.wallCheck) {
                        const S = m.normalizeSafe(m.sub(w.pos, this.CYoYrL), m.create(1, 0))
                          , g = gt.intersectSegment(e.map?.WUiyA.MrrhcR(), this.CYoYrL, S, s, O.player.meleeHeight, this.layer, !1);
                        g && g.id !== w.__id && (f = null)
                    }
                    if (f) {
                        const S = ce[w.type]
                          , g = m.add(r.pos, m.mul(m.neg(f.dir), r.rad - f.pen))
                          , x = m.rotate(m.mul(f.dir, 7.5), (Math.random() - .5) * Math.PI / 3);
                        a.push({
                            pen: f.pen,
                            prio: 1,
                            pos: g,
                            vel: x,
                            layer: this.renderLayer,
                            zOrd: this.renderZOrd,
                            particle: S.hitParticle,
                            sound: S.sound.punch,
                            soundFn: "playGroup"
                        })
                    }
                }
            }
            const h = e.playerBarn?.getPlayerInfo(this.__id).teamId
              , p = e.playerBarn?.playerPool.MrrhcR();
            for (let d = 0; d < p.length; d++) {
                const w = p[d];
                if (w.active && w.__id != this.__id && !w.GoI.mSk && y.sameLayer(w.layer, this.layer)) {
                    const f = m.normalizeSafe(m.sub(w.CYoYrL, this.CYoYrL), m.create(1, 0))
                      , S = be.intersectCircleCircle(r.pos, r.rad, w.CYoYrL, w.XZe);
                    if (S && k.eqAbs(s, gt.intersectSegmentDist(e.map?.WUiyA.MrrhcR(), this.CYoYrL, f, s, O.player.meleeHeight, this.layer, !1))) {
                        const g = e.playerBarn?.getPlayerInfo(w.__id).teamId
                          , x = m.rotate(f, (Math.random() - .5) * Math.PI / 3)
                          , C = i.sound[t.playerHit] || i.sound.playerHit;
                        a.push({
                            pen: S.pen,
                            prio: g == h ? 2 : 0,
                            pos: m.copy(w.CYoYrL),
                            vel: x,
                            layer: w.renderLayer,
                            zOrd: w.renderZOrd,
                            particle: "bloodSplat",
                            sound: C,
                            soundFn: "playSound"
                        })
                    }
                }
            }
            a.sort( (d, w) => d.prio == w.prio ? w.pen - d.pen : d.prio - w.prio);
            let c = a.length;
            i.cleave || (c = k.min(c, 1));
            for (let d = 0; d < c; d++) {
                const w = a[d];
                e.particleBarn?.addParticle(w.particle, w.layer, w.pos, w.vel, 1, Math.random() * Math.PI * 2, null, w.zOrd + 1),
                e.audioManager?.[w.soundFn](w.sound, {
                    channel: "hits",
                    soundPos: w.pos,
                    layer: this.layer,
                    filter: "muffled"
                })
            }
        }
    }
    initSubmergeSprites() {
        const e = function(i, r) {
            i.texture = X.from(r),
            i.anchor.set(.5, .5),
            i.tint = 16777215,
            i.alpha = 0,
            i.visible = !1
        };
        e(this.bodySubmergeSprite, "player-wading-01.img"),
        e(this.handLSubmergeSprite, "player-hands-01.img"),
        e(this.handRSubmergeSprite, "player-hands-01.img"),
        e(this.footLSubmergeSprite, "player-feet-01.img"),
        e(this.footRSubmergeSprite, "player-feet-01.img");
        const t = new Me;
        t.beginFill(16711680, .5),
        t.drawCircle(0, 0, 76 * ir),
        t.position.set(0, 0),
        this.bodySubmergeSprite.addChild(t),
        this.bodySubmergeSprite.mask = t,
        this.bodySubmergeSprite.scale.set(.5, .5)
    }
    updateSubmersion(e, t) {
        const i = this.surface?.type == "water";
        let r = 0;
        if (i) {
            const p = this.surface?.data.river
              , c = p && !t.isInOcean(this.CYoYrL)
              , d = c ? p.distanceToShore(this.CYoYrL) : t.distanceToShore(this.CYoYrL)
              , w = c ? 12 : 16;
            r = k.remap(d, 0, w, .6, 1)
        }
        this.submersion = k.lerp(e * 4, this.submersion, r);
        const s = this.submersion * .8
          , a = (.9 - this.submersion * .4) * 2
          , l = 1 / (a * ir);
        this.bodySubmergeSprite.scale.set(a, a),
        this.bodySubmergeSprite.mask.scale.set(l, l),
        this.bodySubmergeSprite.alpha = s,
        this.bodySubmergeSprite.visible = s > .001,
        i && (this.bodySubmergeSprite.tint = this.surface?.data.waterColor);
        const h = [this.handLSubmergeSprite, this.handRSubmergeSprite, this.footLSubmergeSprite, this.footRSubmergeSprite];
        for (let p = 0; p < h.length; p++) {
            const c = h[p];
            c.alpha = this.downed ? s : 0,
            c.visible = c.alpha > .001,
            i && (c.tint = this.surface?.data.waterColor)
        }
    }
    updateFrozenState(e) {
        this.GoI.hkMR ? this.frozenTicker = .25 : (this.frozenTicker -= e,
        this.updateFrozenImage = !0),
        this.bodyEffectSprite.alpha = this.GoI.hkMR ? 1 : k.remap(this.frozenTicker, 0, .25, 0, 1),
        this.bodyEffectSprite.visible = this.frozenTicker > 0
    }
    addRecoil(e, t, i) {
        t && (this.gunRecoilL += e),
        i && (this.gunRecoilR += e)
    }
    isUnderground(e) {
        if (this.layer != 1)
            return !1;
        const t = e.ZIeX.MrrhcR();
        for (let i = 0; i < t.length; i++) {
            const r = t[i];
            if (r.layers.length >= 2) {
                const s = r.layers[1];
                if (j.intersectCircle(s.collision, this.CYoYrL, this.XZe))
                    return s.underground
            }
        }
        return !0
    }
}
class jr {
    playerPool = new Ne(uo);
    playerInfo = {};
    playerIds = [];
    teamInfo = {};
    groupInfo = {};
    playerStatus = {};
    anonPlayerNames = !1;
    pprlB(e, t, i, r, s, a, l, h, p, c, d, w) {
        const f = this.playerPool.MrrhcR();
        for (let v = 0; v < f.length; v++) {
            const b = f[v];
            b.active && b.pprlB(e, this, a, h, r, l, s, i, p, t, c, d, w)
        }
        const S = this.getPlayerInfo(t)
          , g = this.getPlayerById(t);
        this.setPlayerStatus(t, {
            pos: m.copy(g.GoI.CYoYrL),
            health: g.TVKb.icN,
            disconnected: !1,
            dead: g.GoI.mSk,
            downed: g.GoI.GXEH,
            role: g.GoI.bbI,
            visible: !0
        });
        const x = Xs(a.factionMode)
          , C = Object.keys(this.playerStatus);
        for (let v = 0; v < C.length; v++) {
            const b = this.playerStatus[C[v]]
              , M = b.playerId
              , I = this.getPlayerInfo(M)
              , B = this.getPlayerById(M);
            B ? (b.posDelta = m.length(m.sub(B.GoI.CYoYrL, b.pos)),
            b.posTarget = m.copy(B.GoI.CYoYrL),
            b.posInterp = k.clamp(b.posInterp + e * .2, e / x, 1),
            b.dead = B.GoI.mSk,
            b.downed = B.GoI.GXEH) : b.posInterp = e / x;
            const z = m.sub(b.posTarget, b.pos)
              , P = m.length(z)
              , _ = P > 1e-4 ? m.div(z, P) : m.create(1, 0)
              , T = k.min(P, b.posDelta * b.posInterp);
            b.pos = m.add(b.pos, m.mul(_, T)),
            b.timeSinceVisible += e,
            b.timeSinceUpdate += e;
            const N = !b.dead || I.teamId != S.teamId && b.role != "leader" ? 0 : .6;
            b.minimapAlpha = k.smoothstep(b.timeSinceVisible, 0, .1) * k.lerp(k.smoothstep(b.timeSinceUpdate, 2, 2.5), 1, N),
            !a.factionMode && I.teamId != S.teamId && (b.minimapAlpha = 0),
            b.minimapVisible = b.minimapAlpha > .01
        }
    }
    YOuM(e, t) {
        const i = this.playerPool.MrrhcR();
        for (let r = 0; r < i.length; r++) {
            const s = i[r];
            s.active && s.render(e, t)
        }
    }
    getPlayerById(e) {
        const t = this.playerPool.MrrhcR();
        for (let i = 0; i < t.length; i++) {
            const r = t[i];
            if (r.active && r.__id === e)
                return r
        }
        return null
    }
    setPlayerInfo(e) {
        this.playerInfo[e.playerId] = {
            playerId: e.playerId,
            teamId: e.teamId,
            groupId: e.groupId,
            name: e.name,
            nameTruncated: Z.truncateString(e.name || "", "bold 16px arial", 180),
            anonName: `Player${e.playerId - 2750}`,
            loadout: y.cloneDeep(e.loadout)
        },
        this.playerIds.push(e.playerId),
        this.playerIds.sort( (t, i) => t - i)
    }
    deletePlayerInfo(e) {
        const t = this.playerIds.indexOf(e);
        t !== -1 && this.playerIds.splice(t, 1),
        delete this.playerInfo[e],
        delete this.playerStatus[e]
    }
    getPlayerInfo(e) {
        return this.playerInfo[e] || {
            playerId: 0,
            group: 0,
            teamId: 0,
            name: "",
            nameTruncated: "",
            anonName: "",
            loadout: {}
        }
    }
    recomputeTeamData() {
        this.teamInfo = {},
        this.groupInfo = {};
        const e = Object.keys(this.playerInfo);
        for (let r = 0; r < e.length; r++) {
            const s = this.playerInfo[e[r]]
              , a = s.playerId
              , l = s.teamId;
            this.teamInfo[l] = this.teamInfo[l] || {
                teamId: l,
                playerIds: []
            },
            this.teamInfo[l].playerIds.push(a);
            const h = s.groupId;
            this.groupInfo[h] = this.groupInfo[h] || {
                groupId: h,
                playerIds: []
            },
            this.groupInfo[h].playerIds.push(a)
        }
        const t = Object.keys(this.teamInfo);
        for (let r = 0; r < t.length; r++)
            this.teamInfo[t[r]].playerIds.sort( (s, a) => s - a);
        const i = Object.keys(this.groupInfo);
        for (let r = 0; r < i.length; r++)
            this.groupInfo[i[r]].playerIds.sort( (s, a) => s - a)
    }
    getTeamInfo(e) {
        return this.teamInfo[e]
    }
    getGroupInfo(e) {
        return this.groupInfo[e]
    }
    updatePlayerStatus(e, t, i) {
        const r = this.getTeamInfo(e)
          , s = i ? this.playerIds : r.playerIds;
        if (s.length != t.length) {
            xe.logError(`PlayerIds and playerStatus out of sync. OurLen: ${s.length} MsgLen: ${t.length} FactionMode: ${i}`);
            return
        }
        for (let a = 0; a < s.length; a++) {
            const l = s[a]
              , h = t[a];
            h.hasData && this.setPlayerStatus(l, h)
        }
    }
    setPlayerStatus(e, t) {
        const i = this.playerStatus[e] || {
            playerId: e,
            pos: m.copy(t.pos),
            posTarget: m.copy(t.pos),
            posDelta: m.create(0, 0),
            health: 100,
            posInterp: 0,
            visible: !1,
            dead: !1,
            downed: !1,
            disconnected: !1,
            role: "",
            timeSinceUpdate: 0,
            timeSinceVisible: 0,
            minimapAlpha: 0,
            minimapVisible: !1
        };
        i.minimapVisible || (i.pos = m.copy(t.pos),
        !i.visible && t.visible && (i.timeSinceVisible = 0)),
        i.visible = t.visible,
        i.visible && (i.timeSinceUpdate = 0),
        i.posTarget = m.copy(t.pos),
        i.posDelta = m.length(m.sub(t.pos, i.pos)),
        i.dead = t.dead,
        i.downed = t.downed,
        i.role = t.role,
        t.health !== void 0 && (i.health = t.health),
        t.disconnected !== void 0 && (i.disconnected = t.disconnected),
        this.playerStatus[e] = i
    }
    getPlayerStatus(e) {
        return this.playerStatus[e]
    }
    updateGroupStatus(e, t) {
        const i = this.getGroupInfo(e);
        if (i.playerIds.length != t.length) {
            xe.logError("PlayerIds and groupStatus out of sync");
            return
        }
        for (let r = 0; r < i.playerIds.length; r++) {
            const s = i.playerIds[r]
              , a = t[r]
              , l = this.getPlayerStatus(s);
            l && (l.health = a.health,
            l.disconnected = a.disconnected)
        }
    }
    getGroupColor(e) {
        const t = this.getPlayerInfo(e)
          , i = this.getGroupInfo(t.groupId)
          , r = i ? i.playerIds.indexOf(e) : 0;
        return r >= 0 && r < O.groupColors.length ? O.groupColors[r] : 16777215
    }
    getTeamColor(e) {
        const t = e - 1;
        return t >= 0 && t < O.teamColors.length ? O.teamColors[t] : 16777215
    }
    getPlayerName(e, t, i) {
        const r = this.getPlayerInfo(e);
        if (!r)
            return "";
        let s = r.name;
        return i && (s = r.nameTruncated),
        this.anonPlayerNames && this.getPlayerInfo(t).groupId != r.groupId && (s = r.anonName),
        s
    }
    addDeathEffect(e, t, i, r) {
        const s = this.getPlayerById(e)
          , a = this.getPlayerById(t);
        if (s && a?.dhMGuW("turkey_shoot")) {
            i.playGroup("cluck", {
                soundPos: s.CYoYrL,
                layer: s.layer,
                muffled: !0
            }),
            i.playSound("feather_01", {
                channel: "sfx",
                soundPos: s.CYoYrL,
                layer: s.layer,
                muffled: !0
            });
            const l = Math.floor(y.random(30, 35));
            for (let h = 0; h < l; h++) {
                const p = m.mul(m.randomUnit(), y.random(5, 15));
                r.addParticle("turkeyFeathersDeath", s.layer, s.CYoYrL, p)
            }
        }
    }
}
class po {
    __id;
    __type;
    active;
    vHr;
    CYoYrL;
    XZe;
    ioiPGC;
    pJs;
    RVRwlj() {}
    TNCQd() {
        this.vHr.fadeOut(),
        this.vHr = null
    }
    cmyLn(e, t, i, r) {
        this.CYoYrL = m.copy(e.pos),
        this.XZe = e.rad,
        t && (this.ioiPGC = e.layer,
        this.pJs = e.interior),
        i && (this.vHr = r.smokeBarn.wmzTv(),
        this.vHr?.RVRwlj(this.CYoYrL, this.XZe, this.ioiPGC, this.pJs)),
        this.vHr.posTarget = m.copy(this.CYoYrL),
        this.vHr.radTarget = this.XZe
    }
}
const sr = ["part-smoke-02.img", "part-smoke-03.img"];
class fo {
    active = !1;
    zIdx = 0;
    sprite = ae.from(sr[Math.floor(Math.random() * sr.length)]);
    pos;
    posTarget;
    rad;
    radTarget;
    rot;
    rotVel;
    fade;
    fadeTicker;
    fadeDuration;
    tint;
    layer;
    interior;
    constructor() {
        this.sprite.anchor = new vi(.5,.5),
        this.sprite.visible = !1
    }
    RVRwlj(e, t, i, r) {
        this.pos = m.copy(e),
        this.posTarget = m.copy(this.pos),
        this.rad = t,
        this.radTarget = this.rad,
        this.rot = y.random(0, Math.PI * 2),
        this.rotVel = Math.PI * y.random(.25, .5) * (Math.random() < .5 ? -1 : 1),
        this.fade = !1,
        this.fadeTicker = 0,
        this.fadeDuration = y.random(.5, .75),
        this.tint = y.rgbToInt(y.hsvToRgb(0, 0, y.random(.9, .95))),
        this.layer = i,
        this.interior = r
    }
    fadeOut() {
        this.fade = !0
    }
}
class Yr {
    zSaLA = new Ne(po);
    kfRNx = [];
    zIdx = 2147483647;
    wmzTv() {
        let e = null;
        for (let t = 0; t < this.kfRNx.length; t++)
            if (!this.kfRNx[t].active) {
                e = this.kfRNx[t];
                break
            }
        return e || (e = new fo,
        this.kfRNx.push(e)),
        e.active = !0,
        e.zIdx = this.zIdx--,
        e
    }
    pprlB(e, t, i, r, s) {
        for (let a = 0; a < this.kfRNx.length; a++) {
            const l = this.kfRNx[a];
            if (l.active) {
                l.rad = k.lerp(e * 3, l.rad, l.radTarget),
                l.pos = k.v2lerp(e * 3, l.pos, l.posTarget),
                l.rotVel *= 1 / (1 + e * .1),
                l.rot += l.rotVel * e,
                l.fadeTicker += l.fade ? e : 0,
                l.active = l.fadeTicker < l.fadeDuration;
                const h = k.clamp(1 - l.fadeTicker / l.fadeDuration, 0, 1) * .9;
                let p = l.layer;
                (y.sameLayer(l.layer, i.layer) || i.layer & 2) && (l.layer == 1 || !(i.layer & 2) || !r.insideStructureMask(j.createCircle(l.pos, 1))) && (p |= 2);
                const c = l.interior ? 500 : 1e3;
                s.addPIXIObj(l.sprite, p, c, l.zIdx);
                const d = t.zEsq(l.pos)
                  , w = t.ZaMxGM(l.rad * 2 / t.oPtaok);
                l.sprite.position.set(d.x, d.y),
                l.sprite.scale.set(w, w),
                l.sprite.rotation = l.rot,
                l.sprite.tint = l.tint,
                l.sprite.alpha = h,
                l.sprite.visible = l.active
            }
        }
    }
}
function ar(o, e, t) {
    const i = e - o
      , r = i * t;
    return Math.abs(r) < .01 ? i : r
}
function wo() {
    const o = new Me;
    return o.position.set(0, 0),
    o.scale.set(1, 1),
    o.__zOrd = 0,
    o.__zIdx = 0,
    o
}
function li(o, e, t, i, r) {
    o.moveTo(e, t),
    o.lineTo(e, t + r),
    o.lineTo(e + i, t + r),
    o.lineTo(e + i, t),
    o.lineTo(e, t),
    o.closePath()
}
class Hr {
    constructor(e, t) {
        this.game = e,
        this.canvasMode = t;
        for (let i = 0; i < 4; i++)
            this.layers.push(new So(`layer_${i}`));
        this.ground.alpha = 0
    }
    zIdx = 0;
    layer = 0;
    layerAlpha = 0;
    groundAlpha = 0;
    underground = !1;
    layers = [];
    ground = new Me;
    layerMask = wo();
    debugLayerMask = null;
    layerMaskDirty = !0;
    layerMaskActive = !1;
    TNCQd() {
        this.layerMask.parent?.removeChild(this.layerMask),
        this.layerMask.destroy(!0)
    }
    addPIXIObj(e, t, i, r) {
        if (!e.transform) {
            const l = new Error
              , h = JSON.stringify({
                type: "addChild",
                stack: l.stack,
                browser: navigator.userAgent,
                playing: this.game.HwI,
                gameOver: this.game.tjXwYe,
                spectating: this.game.DnZ,
                time: this.game.iMBsyQ,
                mode: this.game.teamMode,
                layer: t,
                zOrd: i,
                zIdx: r
            });
            xe.logError(h)
        }
        e.__layerIdx === void 0 && (e.__layerIdx = -1,
        e.__zOrd = -1,
        e.__zIdx = -1);
        let s = t;
        t & 2 && (s = i >= 100 ? 3 : 2),
        !(e.parent == this.layers[s] && e.__zOrd == i && (r === void 0 || e.__zIdx == r)) && (e.__layerIdx = s,
        e.__zOrd = i,
        e.__zIdx = r !== void 0 ? r : this.zIdx++,
        this.layers[s].addSortedChild(e))
    }
    setActiveLayer(e) {
        this.layer = e
    }
    setUnderground(e) {
        this.underground = e
    }
    resize(e, t) {
        const i = e.mapLoaded ? e.getMapDef().biome.colors.underground : 1772803;
        this.ground.clear(),
        this.ground.beginFill(i),
        this.ground.drawRect(0, 0, t.eXqeW, t.rkdRrQ),
        this.ground.endFill(),
        this.layerMaskDirty = !0
    }
    redrawLayerMask(e, t) {
        const i = this.layerMask;
        if (this.canvasMode) {
            if (i.clear(),
            this.layerMaskActive) {
                i.beginFill(16777215, 1),
                i.drawRect(0, 0, e.eXqeW, e.rkdRrQ);
                const r = t.ZIeX.MrrhcR();
                for (let s = 0; s < r.length; s++) {
                    const a = r[s];
                    if (a.active)
                        for (let l = 0; l < a.mask.length; l++) {
                            const h = a.mask[l]
                              , p = m.mul(m.sub(h.max, h.min), .5)
                              , c = m.add(h.min, p)
                              , d = e.zEsq(m.sub(c, p))
                              , w = e.zEsq(m.add(c, p));
                            i.drawRect(d.x, d.y, w.x - d.x, w.y - d.y)
                        }
                }
                i.endFill()
            }
        } else {
            if (this.layerMaskDirty) {
                this.layerMaskDirty = !1,
                i.clear(),
                i.beginFill(16777215, 1),
                li(i, 0, 0, K.MaxPosition, K.MaxPosition);
                const a = t.ZIeX.MrrhcR();
                for (let l = 0; l < a.length; l++) {
                    const h = a[l];
                    if (h.active)
                        for (let p = 0; p < h.mask.length; p++) {
                            const c = h.mask[p]
                              , d = m.mul(m.sub(c.max, c.min), .5)
                              , w = m.add(c.min, d)
                              , f = w.x - d.x
                              , S = w.y - d.y
                              , g = d.x * 2
                              , x = d.y * 2;
                            i.beginHole(),
                            li(i, f, S, g, x),
                            i.endHole()
                        }
                }
                i.endFill()
            }
            const r = e.zEsq(m.create(0, 0))
              , s = e.pTKJ(1);
            i.position.set(r.x, r.y),
            i.scale.set(s, -s)
        }
    }
    redrawDebugLayerMask(e, t) {
        const i = this.debugLayerMask;
        i.clear(),
        i.beginFill(16711935, 1);
        const r = t.ZIeX.MrrhcR();
        for (let l = 0; l < r.length; l++) {
            const h = r[l];
            if (h.active)
                for (let p = 0; p < h.mask.length; p++) {
                    const c = h.mask[p]
                      , d = m.mul(m.sub(c.max, c.min), .5)
                      , w = m.add(c.min, d)
                      , f = w.x - d.x
                      , S = w.y - d.y
                      , g = d.x * 2
                      , x = d.y * 2;
                    li(i, f, S, g, x)
                }
        }
        i.endFill();
        const s = e.zEsq(m.create(0, 0))
          , a = e.pTKJ(1);
        i.position.set(s.x, s.y),
        i.scale.set(a, -a)
    }
    pprlB(e, t, i) {
        const r = this.layer > 0 ? 1 : 0;
        this.layerAlpha += ar(this.layerAlpha, r, e * 12);
        const s = this.layer == 1 && this.underground ? 1 : 0;
        this.groundAlpha += ar(this.groundAlpha, s, e * 12),
        this.layers[0].alpha = 1,
        this.layers[1].alpha = this.layerAlpha,
        this.layers[2].alpha = 1,
        this.layers[3].alpha = 1,
        this.ground.alpha = this.groundAlpha,
        this.layers[0].visible = this.groundAlpha < 1,
        this.layers[1].visible = this.layerAlpha > 0,
        this.ground.visible = this.groundAlpha > 0,
        this.redrawLayerMask(t, i);
        const a = this.layer == 0;
        a && !this.layerMaskActive ? (this.layers[2].mask = this.layerMask,
        this.layers[2].addChild(this.layerMask),
        this.layerMaskActive = !0) : !a && this.layerMaskActive && (this.layers[2].mask = null,
        this.layers[2].removeChild(this.layerMask),
        this.layerMaskActive = !1);
        for (let l = 0; l < this.layers.length; l++)
            this.layers[l].checkSort()
    }
}
class So extends J {
    constructor(e="") {
        super(),
        this.debugName = e
    }
    dirty = !0;
    addSortedChild(e) {
        this.addChild(e),
        this.dirty = !0
    }
    checkSort() {
        return this.dirty ? (this.children.sort( (e, t) => e.__zOrd == t.__zOrd ? e.__zIdx - t.__zIdx : e.__zOrd - t.__zOrd),
        this.dirty = !1,
        !0) : !1
    }
}
const Nt = 2
  , or = 1e-5;
class go {
    constructor(e, t) {
        this.input = e,
        this.config = t;
        const i = function(h, p) {
            const c = ae.from("pad.img");
            return c.anchor.set(.5, .5),
            c.scale.set(1, 1),
            c.alpha = .2,
            c.visible = !1,
            c.tint = p,
            h.addChild(c),
            c
        }
          , r = () => ({
            touched: !1,
            centerPos: m.create(0, 0),
            touchPos: m.create(0, 0),
            centerSprite: i(this.container, 0),
            touchSprite: i(this.container, 16777215)
        });
        this.touchPads = [r(), r()];
        const s = function(h) {
            return ["locked", "anywhere"].includes(h) ? h : "anywhere"
        }
          , a = s(t.get("touchMoveStyle"))
          , l = s(t.get("touchAimStyle"));
        this.setMoveStyle(a),
        this.setAimStyle(l),
        this.setTouchAimLine(!!t.get("touchAimLine")),
        this.init()
    }
    container = new J;
    lineSprites = new yo;
    padScaleBase = 1;
    padScaleDown = .6;
    padScalePos = .25;
    moveDetected = !1;
    shotDetected = !1;
    shotDetectedOld = !1;
    touchingAim = !1;
    display = !0;
    moveStyle = "locked";
    aimStyle = "locked";
    touchAimLine = !0;
    touchPads;
    playerMovement = {
        left: !1,
        right: !1,
        up: !1,
        down: !1,
        moveLen: 0
    };
    analogMovement = {
        toMoveDir: m.create(1, 0),
        toMoveLen: 0
    };
    aimMovement = {
        toAimDir: m.create(1, 0),
        toAimLen: 0
    };
    leftLockedPadCenter = m.create(0, 0);
    rightLockedPadCenter = m.create(0, 0);
    padPosBase = 48;
    padPosRange = 0;
    movePadDetectMult = 1;
    shotPadDetectMult = 1.075;
    turnDirCooldown = .5;
    turnDirTicker = 0;
    mobileOffsetLandscape = 25;
    mobileOffsetPortrait = 100;
    lockedPadOffsetLandscape = m.create(126, 100);
    lockedPadOffsetPortrait = m.create(96, 160);
    lockedPadOffsetYLandscapeSafari = 120;
    lockedPadOffsetYPortraitSafari = 240;
    getTouchMovement(e) {
        return this.getMovement(e)
    }
    getAimMovement(e, t) {
        const i = e.TVKb.kTJ == O.WeaponSlot.Throwable;
        return this.getAim(i, t)
    }
    setAimDir(e) {
        this.aimMovement.toAimDir = m.copy(e)
    }
    getMovement(e) {
        let t = null, i = null, r = !1, s;
        this.moveDetected = !1;
        for (let l = 0; l < this.input.touches.length; l++) {
            const h = this.input.touches[l];
            if (!h.isDead && this.isLeftSideTouch(h.posDown.x, e)) {
                const p = this.moveStyle == "anywhere" ? h.posDown : this.leftLockedPadCenter
                  , c = m.sub(h.pos, p)
                  , d = m.length(c);
                if (d > Nt) {
                    const w = (d - Nt) / (this.padPosRange / this.movePadDetectMult - Nt);
                    s = w > or ? m.div(c, w) : this.analogMovement.toMoveDir,
                    this.analogMovement = {
                        toMoveDir: m.create(s.x, s.y * -1),
                        toMoveLen: w
                    },
                    this.moveDetected = !0
                }
                i = this.getConstrainedPos(p, h.pos, d),
                t = p,
                r = !0;
                break
            }
        }
        const a = this.touchPads[0];
        return a.touched = r,
        r && this.moveStyle == "anywhere" ? a.centerPos = m.copy(t) : a.centerPos = m.copy(this.leftLockedPadCenter),
        a.touchPos.x = r ? i.x : this.leftLockedPadCenter.x,
        a.touchPos.y = r ? i.y : this.leftLockedPadCenter.y,
        this.analogMovement
    }
    getAim(e, t) {
        let i = !1, r = null, s = null, a;
        for (let h = 0; h < this.input.touches.length; h++) {
            const p = this.input.touches[h];
            if (!p.isDead && !this.isLeftSideTouch(p.posDown.x, t)) {
                const c = this.aimStyle == "anywhere" ? p.posDown : this.rightLockedPadCenter
                  , d = m.sub(p.pos, c)
                  , w = m.length(d);
                if (w > Nt) {
                    const f = m.sub(p.pos, c)
                      , S = m.length(f);
                    a = S > or ? m.div(f, S) : this.aimMovement.toAimDir,
                    this.aimMovement = {
                        toAimDir: m.create(a.x, a.y * -1),
                        toAimLen: S
                    }
                } else
                    this.aimMovement.toAimLen = 0;
                s = this.getConstrainedPos(c, p.pos, w),
                r = c,
                i = !0;
                break
            }
        }
        this.shotDetectedOld = this.shotDetected,
        this.shotDetected = this.aimMovement.toAimLen > this.padPosRange / this.shotPadDetectMult && i,
        this.touchingAim = i,
        e && this.shotDetectedOld && i && (this.shotDetected = !0);
        const l = this.touchPads[1];
        return l.touched = i,
        i && this.aimStyle == "anywhere" ? l.centerPos = m.copy(r) : l.centerPos = m.copy(this.rightLockedPadCenter),
        l.touchPos.x = i ? s.x : this.rightLockedPadCenter.x,
        l.touchPos.y = i ? s.y : this.rightLockedPadCenter.y,
        {
            aimMovement: this.aimMovement,
            touched: l.touched
        }
    }
    pprlB(e, t, i, r, s) {
        for (let a = 0; a < this.touchPads.length; a++) {
            const l = this.touchPads[a];
            l.centerSprite.position.x = l.centerPos.x,
            l.centerSprite.position.y = l.centerPos.y,
            l.centerSprite.scale.x = this.padScaleBase * this.padScaleDown,
            l.centerSprite.scale.y = this.padScaleBase * this.padScaleDown,
            l.centerSprite.visible = D.touch && this.display,
            l.touchSprite.position.x = l.touchPos.x,
            l.touchSprite.position.y = l.touchPos.y,
            l.touchSprite.scale.x = this.padScaleBase * this.padScalePos,
            l.touchSprite.scale.y = this.padScaleBase * this.padScalePos,
            l.touchSprite.visible = D.touch && this.display
        }
        this.lineSprites.update(this, t, i, r, s)
    }
    isLeftSideTouch(e, t) {
        return e < t.eXqeW * .5
    }
    getConstrainedPos(e, t, i) {
        if (i <= this.padPosRange)
            return t;
        const r = t.x - e.x
          , s = t.y - e.y
          , a = Math.atan2(s, r);
        return m.create(Math.cos(a) * this.padPosRange + e.x, Math.sin(a) * this.padPosRange + e.y)
    }
    getConstrainedPosDown(e, t, i) {
        const r = m.normalizeSafe(t);
        return m.add(e, m.mul(r, Math.max(0, i - this.padPosRange)))
    }
    toggleMoveStyle() {
        this.setMoveStyle(this.moveStyle == "locked" ? "anywhere" : "locked")
    }
    setMoveStyle(e) {
        this.moveStyle = e,
        this.config.set("touchMoveStyle", e);
        const t = document.getElementById("btn-game-move-style");
        t && (this.moveStyle == "locked" ? (t.classList.remove("unlocked-on-icon"),
        t.classList.add("locked-on-icon")) : (t.classList.remove("locked-on-icon"),
        t.classList.add("unlocked-on-icon")))
    }
    toggleAimStyle() {
        this.setAimStyle(this.aimStyle == "locked" ? "anywhere" : "locked")
    }
    setAimStyle(e) {
        this.aimStyle = e,
        this.config.set("touchAimStyle", e);
        const t = document.getElementById("btn-game-aim-style");
        this.aimStyle == "locked" ? (t.classList.remove("unlocked-on-icon"),
        t.classList.add("locked-on-icon")) : (t.classList.remove("locked-on-icon"),
        t.classList.add("unlocked-on-icon"))
    }
    toggleAimLine() {
        this.setTouchAimLine(!this.touchAimLine)
    }
    setTouchAimLine(e) {
        this.touchAimLine = e,
        this.config.set("touchAimLine", this.touchAimLine);
        const t = document.getElementById("btn-game-aim-line");
        this.touchAimLine ? (t.classList.remove("aim-line-off-icon"),
        t.classList.add("aim-line-on-icon")) : (t.classList.remove("aim-line-on-icon"),
        t.classList.add("aim-line-off-icon"))
    }
    init() {
        this.resize()
    }
    resize() {
        const e = D.isLandscape
          , t = this.lockedPadOffsetLandscape
          , i = this.lockedPadOffsetPortrait;
        D.tablet && (t.x = t.x * 1,
        i.x = i.x * 1.25);
        const r = m.create(t.x, t.y)
          , s = m.create(i.x, i.y)
          , a = m.create(D.screenWidth - t.x, t.y)
          , l = m.create(D.screenWidth - i.x, i.y);
        if (D.os == "ios")
            if (D.model == "iphonex")
                r.x = r.x + 56,
                a.x = a.x - 56,
                r.y = r.y * .9,
                a.y = a.y * .9;
            else {
                let c = this.lockedPadOffsetYLandscapeSafari
                  , d = this.lockedPadOffsetYPortraitSafari;
                D.tablet && (c *= 1,
                d *= 1),
                r.y = c,
                s.y = d,
                a.y = c,
                l.y = d
            }
        this.padScaleBase = e ? 1 : .8,
        this.padPosRange = this.padPosBase * this.padScaleBase;
        const h = e ? r : s;
        this.leftLockedPadCenter = m.create(h.x, D.screenHeight - h.y);
        const p = e ? a : l;
        this.rightLockedPadCenter = m.create(p.x, D.screenHeight - p.y),
        this.setMobileStyling(e)
    }
    setMobileStyling(e) {
        if (D.touch && (u("#btn-touch-styles").find(".btn-game-container").css("display", "inline-block"),
        u("#ui-emote-button").css("display", "block")),
        D.uiLayout == D.UiLayout.Sm ? (u("#ui-map-wrapper").addClass("ui-map-wrapper-mobile").removeClass("ui-map-wrapper-desktop"),
        u("#ui-settings-container-mobile").css("display", "block"),
        u("#ui-settings-container-desktop").css("display", "none"),
        u("#ui-right-center").addClass("ui-right-center-mobile").removeClass("ui-right-center-desktop"),
        u("#ui-leaderboard-wrapper").css("display", "none"),
        u("#big-map-close").css("display", "block"),
        u("#ui-game-menu").removeClass("ui-game-menu-desktop"),
        u("#btn-game-tabs").css("display", "none"),
        u("#ui-game-tab-settings").removeClass("ui-game-tab-settings-desktop"),
        u(".ui-ability-key").css("display", "none")) : (u("#ui-map-wrapper").removeClass("ui-map-wrapper-mobile").addClass("ui-map-wrapper-desktop"),
        u("#ui-settings-container-mobile").css("display", "none"),
        u("#ui-settings-container-desktop").css("display", "block"),
        u("#ui-right-center").removeClass("ui-right-center-mobile").addClass("ui-right-center-desktop"),
        u("#ui-leaderboard-wrapper").css("display", "block"),
        u("#big-map-close").css("display", "none"),
        u("#ui-game-menu").addClass("ui-game-menu-desktop"),
        u("#btn-game-tabs").css("display", "flex"),
        u("#ui-game-tab-settings").addClass("ui-game-tab-settings-desktop"),
        u(".ui-ability-key").css("display", "block")),
        D.tablet && (e ? (D.os == "ios" ? (u("#ui-bottom-right").addClass("ui-bottom-right-tablet-ipad-browser"),
        u("#ui-right-center").addClass("ui-right-center-tablet-ipad-browser")) : (u("#ui-bottom-right").addClass("ui-bottom-right-tablet"),
        u("#ui-right-center").addClass("ui-right-center-tablet")),
        u("#ui-bottom-center-left").addClass("ui-bottom-center-left-tablet"),
        u("#ui-bottom-center-right").addClass("ui-bottom-center-right-tablet"),
        u("#ui-top-left").addClass("ui-top-left-tablet"),
        u("#ui-spectate-options-wrapper").addClass("ui-spectate-options-wrapper-tablet"),
        u("#ui-killfeed-wrapper").addClass("ui-killfeed-wrapper-tablet"),
        u("#ui-kill-leader-wrapper").css("right", 144)) : (u("#ui-bottom-left").removeClass("ui-bottom-left-tablet"),
        u("#ui-bottom-right").removeClass("ui-bottom-right-tablet"),
        u("#ui-right-center").removeClass("ui-right-center-tablet"),
        u("#ui-bottom-center-right").removeClass("ui-bottom-center-right-tablet"),
        u("#ui-top-left").removeClass("ui-top-left-tablet"),
        u("#ui-spectate-options-wrapper").removeClass("ui-spectate-options-wrapper-tablet"),
        u("#ui-killfeed-wrapper-wrapper").removeClass("ui-killfeed-wrapper-tablet"))),
        D.os == "ios")
            if (D.model == "iphonex") {
                const t = D.isLandscape ? "99%" : "90%"
                  , i = D.isLandscape ? 0 : 32;
                u("#ui-game").css({
                    height: t,
                    top: i
                }),
                u("#ui-stats-contents").css({
                    transform: "translate(-50%) scale(0.95)",
                    "transform-origin": "top"
                }),
                e ? u("#ui-game").css({
                    left: "50%",
                    transform: "translateX(-50%)",
                    width: "93%"
                }) : u("#ui-game").css({
                    left: "",
                    transform: "",
                    width: ""
                })
            } else if (window.navigator.standalone && !D.tablet)
                u("#ui-game").css({
                    height: "95%"
                });
            else {
                let t = D.isLandscape ? "86%" : "82%";
                D.tablet && (t = "100%"),
                u("#ui-game").css({
                    height: t
                }),
                u("#ui-right-center, #ui-top-center-scopes-wrapper, #ui-top-center, #ui-menu-display").css({
                    "margin-top": 6
                })
            }
        D.tablet || e ? (u("#ui-loot-50AE").insertBefore("#ui-loot-556mm"),
        u("#ui-loot-9mm").insertBefore("#ui-loot-556mm"),
        u("#ui-loot-308sub").insertBefore("#ui-loot-556mm"),
        u("#ui-loot-12gauge").insertBefore("#ui-loot-556mm"),
        u("#ui-loot-flare").insertBefore("#ui-loot-556mm"),
        u("#ui-loot-762mm").insertBefore("#ui-loot-556mm"),
        u("#ui-loot-45acp").insertBefore("#ui-loot-556mm")) : (u("#ui-loot-9mm").insertBefore("#ui-loot-45acp"),
        u("#ui-loot-12gauge").insertBefore("#ui-loot-45acp"),
        u("#ui-loot-762mm").insertBefore("#ui-loot-45acp"),
        u("#ui-loot-556mm").insertBefore("#ui-loot-45acp"),
        u("#ui-loot-50AE").insertBefore("#ui-loot-45acp"),
        u("#ui-loot-308sub").insertBefore("#ui-loot-45acp"),
        u("#ui-loot-flare").insertBefore("#ui-loot-45acp"))
    }
    hideAll() {
        this.display = !1
    }
}
class yo {
    container = new J;
    dots = [];
    constructor() {
        this.container.visible = !1
    }
    createDot() {
        const e = new ae;
        return e.texture = X.from("dot.img"),
        e.anchor.set(.5, .5),
        e.position.set(0, 0),
        e.scale.set(1, 1),
        e.tint = 16777215,
        e.alpha = 1,
        e.visible = !1,
        e
    }
    update(e, t, i, r, s) {
        const a = D.touch && e.touchingAim && e.touchAimLine;
        if (a) {
            const l = t.GoI.ASlfWp
              , h = U[l];
            let p = 30;
            if (h.type == "gun") {
                const B = Yt[h.bulletType].distance;
                p = h.barrelLength + B
            }
            const c = t.eWzz()
              , d = Math.sqrt(c * 1.414 * c);
            p = k.min(p, d);
            const w = m.copy(t.CYoYrL);
            let f = m.add(w, m.mul(t.YYuRBq, p));
            const S = i.WUiyA.MrrhcR();
            for (let B = 0; B < S.length; B++) {
                const z = S[B];
                if (z.active && !z.dead && z.height >= O.bullet.height && z.collidable && !z.isWindow && y.sameLayer(t.layer, z.layer) && (h.type != "throwable" || z.height > O.projectile.maxHeight)) {
                    const P = j.intersectSegment(z.collider, w, f);
                    if (P) {
                        const _ = m.length(m.sub(P.point, w));
                        _ < p && (p = _,
                        f = P.point)
                    }
                }
            }
            const g = 3.5
              , x = 1.5
              , C = m.length(m.sub(f, w))
              , v = Math.max(Math.ceil((C - g) / x), 0);
            for (; this.dots.length < v; ) {
                const B = this.createDot();
                this.container.addChild(B),
                this.dots.push(B)
            }
            for (let B = 0; B < this.dots.length; B++) {
                const z = this.dots[B]
                  , P = g + B * x
                  , _ = m.add(t.CYoYrL, m.mul(t.YYuRBq, P))
                  , T = 1 / 32 * .375;
                z.position.set(_.x, _.y),
                z.scale.set(T, T),
                z.visible = B < v
            }
            const b = r.zEsq(m.create(0, 0))
              , M = r.zEsq(m.create(1, 1))
              , I = m.sub(M, b);
            this.container.position.set(b.x, b.y),
            this.container.scale.set(I.x, I.y),
            this.container.alpha = .3,
            s.addPIXIObj(this.container, t.layer, 19, 0)
        }
        this.container.visible = a
    }
}
class xo {
    constructor(e) {
        this.mapSpriteBarn = e
    }
    mapIndicators = [];
    idToMapIdicator = {};
    updateIndicatorData(e) {
        for (let t = 0; t < e.length; t++) {
            const i = e[t];
            i.dead ? this.removeIndicator(i.id) : this.updateIndicator(i)
        }
    }
    addIndicator(e) {
        const t = {
            id: e.id,
            type: e.type,
            pos: m.copy(e.pos),
            equipped: e.equipped,
            mapSprite: this.mapSpriteBarn.addSprite(),
            pulseSprite: this.mapSpriteBarn.addSprite(),
            pulseScale: .5,
            pulseScaleMin: .5,
            pulseScaleMax: 1,
            pulseTicker: 0,
            pulseDir: 1,
            pulseSpeed: .3
        };
        return this.mapIndicators.push(t),
        this.idToMapIdicator[e.id] = t,
        t
    }
    removeIndicator(e) {
        for (let t = 0; t < this.mapIndicators.length; t++) {
            const i = this.mapIndicators[t];
            if (i.id == e) {
                i.mapSprite.free(),
                i.pulseSprite.free(),
                this.mapIndicators.splice(t, 1),
                delete this.idToMapIdicator[e];
                break
            }
        }
    }
    updateIndicator(e) {
        let t = this.idToMapIdicator[e.id];
        t ||= this.addIndicator(e),
        t.pos = m.copy(e.pos),
        t.equipped = e.equipped;
        const i = U[t.type]
          , r = (D.uiLayout == D.UiLayout.Sm ? .15 : .2) * 1.25
          , s = t.equipped ? 655350 : 1
          , a = t.mapSprite;
        if (a.pos = m.copy(t.pos),
        a.scale = r,
        a.alpha = 1,
        a.zOrder = s,
        a.visible = !0,
        a.sprite.texture = X.from(i.mapIndicator?.sprite),
        a.sprite.tint = i.mapIndicator?.tint ?? 16777215,
        i.mapIndicator?.pulse) {
            const l = t.pulseSprite;
            l.pos = m.copy(t.pos),
            l.scale = 1,
            l.zOrder = s - 1,
            l.visible = !0,
            l.sprite.texture = X.from("part-pulse-01.img"),
            l.sprite.tint = i.mapIndicator.pulseTint
        }
    }
    updateIndicatorPulses(e) {
        for (let t = 0; t < this.mapIndicators.length; t++) {
            const i = this.mapIndicators[t];
            i.pulseTicker = k.clamp(i.pulseTicker + e * i.pulseDir * i.pulseSpeed, i.pulseScaleMin, 1),
            i.pulseScale = i.pulseTicker * i.pulseScaleMax,
            (i.pulseScale >= i.pulseScaleMax || i.pulseTicker <= i.pulseScaleMin) && (i.pulseDir *= -1),
            i.pulseSprite.scale = i.pulseScale,
            i.pulseSprite.visible = i.equipped
        }
    }
}
class zo extends ae {
    __zOrder = -1;
    constructor() {
        super()
    }
}
class bo {
    active = !1;
    retained = !0;
    sprite = new zo;
    pos = m.create(0, 0);
    scale = 1;
    alpha = 1;
    visible = !0;
    pulse = !1;
    lifetime = 0;
    ticker = 0;
    zOrder = 0;
    constructor() {
        this.sprite.anchor.set(.5, .5),
        this.sprite.scale.set(1, 1),
        this.sprite.visible = !1
    }
    init() {
        this.active = !0,
        this.retained = !0,
        this.pos = m.create(0, 0),
        this.scale = 1,
        this.alpha = 1,
        this.pulse = !1,
        this.visible = !0,
        this.lifetime = Number.MAX_VALUE,
        this.ticker = 0,
        this.zOrder = 0
    }
    free() {
        this.active = !1,
        this.sprite.visible = !1
    }
    release() {
        this.retained = !1
    }
}
class ko {
    container = new J;
    mapSprites = [];
    free() {
        for (let e = 0; e < this.mapSprites.length; e++) {
            const t = this.mapSprites[e].sprite;
            t.parent?.removeChild(t),
            t.destroy({
                children: !0
            })
        }
    }
    addSprite() {
        let e = null;
        for (let t = 0; t < this.mapSprites.length; t++)
            if (!this.mapSprites[t].active) {
                e = this.mapSprites[t];
                break
            }
        return e || (e = new bo,
        this.mapSprites.push(e),
        this.container.addChild(e.sprite)),
        e.init(),
        e
    }
    update(e, t, i) {
        let r = !1;
        for (let s = 0; s < this.mapSprites.length; s++) {
            const a = this.mapSprites[s];
            if (a.active) {
                a.zOrder != a.sprite.__zOrder && (a.sprite.__zOrder = a.zOrder,
                r = !0),
                a.ticker += e,
                a.pulse && (a.scale += e / 2.5);
                const l = t.getMapPosFromWorldPos(a.pos, i)
                  , h = a.scale
                  , p = k.smoothstep(a.ticker, 0, .1) * (1 - k.smoothstep(a.ticker, a.lifetime - .5, a.lifetime));
                a.sprite.position.set(l.x, l.y),
                a.sprite.scale.set(h, h),
                a.sprite.alpha = a.alpha * p,
                a.sprite.visible = a.visible && a.sprite.alpha > 1e-4,
                a.ticker >= a.lifetime && !a.retained && a.free()
            }
        }
        r && this.container.children.sort( (s, a) => s.__zOrder - a.__zOrder)
    }
}
const Wt = 24;
class vo {
    container = new J;
    timerBackground = ae.from("timer-background.img");
    counterText = new ot;
    gfx = new Me;
    labelText = new ot;
    screenScaleFactor = 1;
    mobileOffset = 0;
    active = !1;
    label = "";
    elapsed = 0;
    duration = 0;
    constructor() {
        this.container.visible = !1,
        this.timerBackground.anchor.set(.5, .5),
        this.timerBackground.scale.set(1, 1),
        this.container.addChild(this.timerBackground),
        this.container.addChild(this.gfx),
        this.counterText.anchor.set(.5, .5),
        this.counterText.style = {
            fontFamily: "Roboto Condensed, Arial, sans-serif",
            fontWeight: "bold",
            fontSize: Wt,
            align: "center",
            fill: 16777215,
            stroke: 0,
            strokeThickness: 3
        },
        this.container.addChild(this.counterText),
        this.labelText.anchor.set(.5, .5),
        this.labelText.style = {
            fontFamily: "Roboto Condensed, Arial, sans-serif",
            fontWeight: "100",
            fontSize: Wt,
            align: "center",
            fill: 16777215
        },
        this.container.addChild(this.labelText)
    }
    destroy() {
        this.container.removeChild(this.timerBackground),
        this.timerBackground.destroy({
            children: !0
        }),
        this.container.destroy({
            children: !0,
            texture: !0
        })
    }
    start(e, t, i) {
        this.active = !0,
        this.label = e,
        this.elapsed = t,
        this.duration = i
    }
    stop() {
        this.active = !1
    }
    resize(e, t) {
        this.screenScaleFactor = t,
        D.uiLayout == D.UiLayout.Sm ? (D.tablet || this.container.scale.set(.5, .5),
        this.mobileOffset = D.isLandscape ? e.mobileOffsetLandscape : e.mobileOffsetPortrait) : (this.container.scale.set(1, 1),
        this.mobileOffset = 0)
    }
    update(e, t) {
        if (!this.active) {
            this.container.visible = !1;
            return
        }
        this.elapsed = k.min(this.elapsed + e, this.duration);
        const i = 56 + this.label.length * Wt * .45
          , r = Wt * 1.5
          , s = 0 - i / 2
          , a = 87.5 - r / 2
          , l = k.min(this.elapsed / this.duration, 1) * Math.PI * 2 - Math.PI * .5;
        this.gfx.clear(),
        this.gfx.beginFill(0, .5),
        this.gfx.drawRoundedRect(s, a, i, r, 5),
        this.gfx.endFill(),
        this.gfx.lineStyle(6, 16777215),
        this.gfx.arc(0, 0, 35, -Math.PI * .5, l, !1),
        this.counterText.text = k.max(0, this.duration - this.elapsed).toFixed(1),
        this.labelText.position.y = 87.5,
        this.labelText.text = this.label,
        this.container.position.set(t.eXqeW / 2, t.rkdRrQ / 3 * this.screenScaleFactor + this.mobileOffset),
        this.container.visible = !0
    }
}
function lr(o) {
    const e = Math.floor(o / 3600)
      , t = Math.floor(o / 60) % 60
      , i = Math.floor(o) % 60;
    let r = "";
    return e > 0 && (r += `${e}h `),
    (e > 0 || t > 0) && (r += `${t}m `),
    r += `${i}s`
}
function ni(o, e, t, i) {
    const r = o + (e - o) / t * i;
    return Math.floor(r)
}
class It {
    constructor(e, t, i) {
        this.r = e,
        this.g = t,
        this.b = i
    }
    getColors() {
        return {
            r: this.r,
            g: this.g,
            b: this.b
        }
    }
}
class _o {
    constructor(e, t, i, r, s, a, l, h, p) {
        this.game = e,
        this.audioManager = t,
        this.particleBarn = i,
        this.planeBarn = r,
        this.localization = s,
        this.canvasMode = a,
        this.touch = l,
        this.inputBinds = h,
        this.inputBindUi = p,
        this.game = e,
        this.particleBarn = i,
        this.localization = s,
        this.touch = l,
        this.inputBinds = h,
        this.inputBindUi = p,
        this.roleMenuConfirm.on("click", f => {
            f.stopPropagation(),
            this.roleSelected = this.roleDisplayed,
            this.setRoleMenuActive(!1)
        }
        ),
        u("#ui-map-wrapper").css("display", "block"),
        u("#ui-team").css("display", "block"),
        u(".ui-map-expand").on("mousedown", f => {
            f.stopPropagation()
        }
        ),
        u(".ui-map-expand").on("click", f => {
            D.touch ? this.bigmapDisplayed || this.displayMapLarge() : D.uiLayout == D.UiLayout.Lg && this.displayMapLarge(this.bigmapDisplayed)
        }
        ),
        u("#ui-map-minimize").on("mousedown", f => {
            f.stopPropagation()
        }
        ),
        u("#ui-map-minimize").on("click", f => {
            f.stopPropagation(),
            this.toggleMiniMap()
        }
        ),
        u("#ui-menu-display").on("click", f => {
            f.stopPropagation(),
            this.toggleEscMenu()
        }
        ),
        this.moveStyleButton.on("touchstart", () => {
            l.toggleMoveStyle()
        }
        ),
        this.aimStyleButton.on("touchstart", () => {
            l.toggleAimStyle()
        }
        ),
        this.aimLineButton.on("touchstart", () => {
            l.toggleAimLine()
        }
        ),
        this.onTouchScreen = f => {
            f.target?.id == "cvs" && this.toggleEscMenu(!0)
        }
        ,
        u(document).on("touchstart", this.onTouchScreen),
        this.bigmapClose = u("#big-map-close"),
        this.bigmapClose.on("touchend", f => {
            f.stopPropagation(),
            this.displayMapLarge(!0)
        }
        ),
        this.bigmapClose.on("mousedown", f => {
            f.stopPropagation()
        }
        ),
        this.bigmapClose.on("click", f => {
            f.stopPropagation(),
            this.displayMapLarge(!0)
        }
        ),
        this.gameTabBtns.on("click", f => {
            this.setCurrentGameTab(u(f.target).data("tab"))
        }
        ),
        this.setCurrentGameTab(this.currentGameTab),
        this.fullScreenButton.on("mousedown", f => {
            f.stopPropagation()
        }
        ),
        this.fullScreenButton.on("click", () => {
            Z.toggleFullScreen(),
            this.toggleEscMenu()
        }
        ),
        u("#btn-game-fullscreen").css("display", oe.isAnySDK ? "none" : "block"),
        this.resumeButton.on("mousedown", f => {
            f.stopPropagation()
        }
        ),
        this.resumeButton.on("click", () => {
            this.toggleEscMenu()
        }
        ),
        D.touch && this.resumeButton.css("display", "none"),
        u("#btn-spectate-quit").on("click", () => {
            this.quitGame()
        }
        ),
        u("#btn-game-quit").on("mousedown", f => {
            f.stopPropagation()
        }
        ),
        u("#btn-game-quit").on("click", () => {
            this.game.CPcPu = !0,
            this.game.WyTcZ = 1,
            this.quitGame()
        }
        ),
        this.specStatsButton.on("click", () => {
            this.toggleLocalStats()
        }
        ),
        this.specNextButton.on("click", () => {
            this.specNext = !0
        }
        ),
        this.specPrevButton.on("click", () => {
            this.specPrev = !0
        }
        ),
        this.interactionElems.css("pointer-events", "auto"),
        this.interactionElems.on("touchstart", f => {
            f.stopPropagation(),
            this.interactionTouched = !0
        }
        ),
        this.reloadElems.css("pointer-events", "auto"),
        this.reloadElems.on("touchstart", f => {
            f.stopPropagation(),
            this.reloadTouched = !0
        }
        ),
        this.gasRenderer = new Er(a,0),
        this.resetWeapSlotStyling = () => {
            this.weapDraggedDiv && (this.weapSwitches.css({
                left: "",
                top: ""
            }),
            u("#ui-game").css({
                "pointer-events": ""
            })),
            this.weapDraggedDiv = null,
            this.weapDragging = !1,
            this.weapDropped = !1,
            this.weapSwitches.hasClass("ui-weapon-dragged") && this.weapSwitches.removeClass("ui-weapon-dragged"),
            this.weapNoSwitches.hasClass("ui-outline-hover") || this.weapNoSwitches.addClass("ui-outline-hover")
        }
        ,
        D.touch || (this.weapSwitches.on("mousedown", f => {
            const S = f.currentTarget;
            f.button == 0 && (this.weapDraggedDiv = u(S),
            this.weapDraggedId = u(S).data("slot"))
        }
        ),
        u("#ui-game").on("mousemove", f => {
            this.weapDraggedDiv && !this.weapDropped && (this.weapDragging ? (this.weapDraggedDiv.css({
                left: f.pageX - 80,
                top: f.pageY - 30
            }),
            this.weapDraggedDiv.addClass("ui-weapon-dragged")) : (u("#ui-game").css({
                "pointer-events": "initial"
            }),
            this.weapNoSwitches.removeClass("ui-outline-hover"),
            this.weapDragging = !0))
        }
        ),
        u("#ui-game, #ui-weapon-id-1, #ui-weapon-id-2").on("mouseup", f => {
            f.button == 0 && this.weapDraggedDiv != null && (this.weapSwitches.each( () => {
                const S = u(f.currentTarget).data("slot");
                u(f.currentTarget).is(":hover") && this.weapDraggedId != S && (this.swapWeapSlots = !0,
                this.weapDropped = !0)
            }
            ),
            this.swapWeapSlots || this.resetWeapSlotStyling())
        }
        )),
        this.mapIndicatorBarn = new xo(this.mapSpriteBarn),
        this.container.mask = new Me,
        this.display = {
            gas: this.gasRenderer.display,
            gasSafeZone: this.gasSafeZoneRenderer.display,
            airstrikeZones: r.airstrikeZoneContainer,
            mapSprites: this.mapSpriteBarn.container,
            teammates: new J,
            player: new J,
            border: new Me
        },
        this.mapSprite.anchor = new vi(.5,.5),
        this.container.addChild(this.mapSprite),
        this.container.addChild(this.display.gas),
        this.container.addChild(this.display.gasSafeZone),
        this.container.addChild(this.display.airstrikeZones),
        this.container.addChild(this.display.mapSprites),
        this.container.addChild(this.display.teammates),
        this.container.addChild(this.display.player),
        this.container.addChild(this.display.border);
        const c = this.getMinimapMargin()
          , d = this.getMinimapSize();
        this.minimapPos = m.create(c + d / 2, e.ciS.rkdRrQ - d / 2 - c),
        this.muteButtonImage = this.muteButton.find("img");
        const w = this.audioManager.mute;
        this.muteButtonImage.attr("src", w ? this.muteOffImg : this.muteOnImg),
        this.muteButton.on("mousedown", f => {
            f.stopPropagation()
        }
        ),
        this.muteButton.on("click", f => {
            let S = this.audioManager.muteToggle();
            this.muteButtonImage.attr("src", S ? this.muteOffImg : this.muteOnImg),
            S = null
        }
        ),
        this.teamMemberHealthBarWidth = parseInt(u(".ui-team-member-health").find(".ui-bar-inner").css("width"));
        for (let f = 0; f < 4; f++) {
            const S = this.topLeft
              , g = f;
            this.teamSelectors.push({
                teamNameHtml: "",
                groupId: u(S).find(`[data-id=${g}]`),
                groupIdDisplayed: !1,
                teamName: u(S).find(`[data-id=${g}]`).find(".ui-team-member-name"),
                teamIcon: u(S).find(`[data-id=${g}]`).find(".ui-team-member-icon"),
                teamStatus: u(S).find(`[data-id=${g}]`).find(".ui-team-member-status"),
                teamHealthInner: u(S).find(`[data-id=${g}]`).find(".ui-health-actual"),
                teamColor: u(S).find(`[data-id=${g}]`).find(".ui-team-member-color"),
                playerId: 0,
                prevHealth: 0,
                prevStatus: {
                    disconnected: !1,
                    dead: !1,
                    downed: !1,
                    role: ""
                },
                indicators: {
                    main: {
                        elem: u("#ui-team-indicators").find(`.ui-indicator-main[data-id=${g}]`),
                        displayed: !1
                    }
                }
            })
        }
        this.init()
    }
    mgR = new vo;
    gameElem = u("#ui-game");
    statsMain = u("#ui-stats");
    statsElem = u("#ui-stats-bg");
    statsContentsContainer = u("#ui-stats-contents");
    statsContents = u("#ui-stats-contents-inner");
    statsHeader = u("#ui-stats-header");
    statsInfoBox = u("#ui-stats-info-box");
    statsOptions = u("#ui-stats-options");
    statsAds = u(".ui-stats-ad-container");
    statsLogo = u("#ui-stats-logo");
    escMenuElem = u("#ui-game-menu");
    escMenuDisplayed = !1;
    roleMenuElemWrapper = u("#ui-role-menu-wrapper");
    roleMenuElem = u("#ui-role-menu");
    roleMenuFooterEnterElem = u("#ui-role-footer-enter");
    roleMenuFooterHtml = "";
    roleMenuActive = !1;
    roleMenuDisplayed = !1;
    roleMenuTicker = 0;
    roleDisplayed = "";
    roleSelected = "";
    roleMenuConfirm = u("#ui-role-footer-enter");
    roleMenuInst = null;
    topLeft = u("#ui-top-left");
    waitingForPlayers = !0;
    waitingText = u("#ui-waiting-text");
    spectating = !1;
    prevSpectatorCount = 0;
    spectatorCount = 0;
    spectatorCounterDisplayed = !1;
    spectatorCounterContainer = u("#ui-spec-counter");
    spectatorCounter = u("#ui-spec-counter-number");
    spectateMode = u(".ui-spectate-mode");
    spectatedPlayerText = u("#ui-spectate-text");
    spectatedPlayerName = "";
    spectatedPlayerId = 0;
    spectateModeStats = u("#ui-spectate-stats");
    spectateModeStatsData = u("#ui-spectate-stats-data");
    spectateOptionsWrapper = u("#ui-spectate-options-wrapper");
    rightCenter = u("#ui-right-center");
    leaderboardAlive = u("#ui-leaderboard-alive");
    playersAlive = u(".js-ui-players-alive");
    leaderboardAliveFaction = u("#ui-leaderboard-alive-faction");
    playersAliveRed = u(".js-ui-players-alive-red");
    playersAliveBlue = u(".js-ui-players-alive-blue");
    playersAliveRedCounter = 0;
    playersAliveBlueCounter = 0;
    playerKills = u(".js-ui-player-kills");
    announcement = u("#ui-announcement");
    killLeaderName = u("#ui-kill-leader-name");
    killLeaderCount = u("#ui-kill-leader-count");
    mapContainer = u("#ui-map-container");
    mapContainerBottom = 52;
    mapInfo = u("#ui-map-info");
    mapInfoBottom = 218;
    gasState = {};
    gasIcon = u("#ui-gas-icon");
    gasTimer = u("#ui-gas-timer");
    mapMinimizeButton = u("#ui-map-minimize");
    menuDisplayButton = u("#ui-menu-display");
    bottomCenterRight = u("#ui-bottom-center-right");
    actionSeq = -1;
    displayMapDirty = !1;
    displayMapClear = !1;
    gameTabs = u(".ui-game-tab");
    gameTabBtns = u(".btn-game-tab-select");
    gameKeybindBtns = u(".btn-keybind-desc");
    currentGameTab = "settings";
    onTouchScreen;
    bigmap = u("#big-map");
    bigmapCollision = u("#big-map-collision");
    bigmapClose = u("#big-map-close");
    moveStyleButton = u("#btn-game-move-style");
    aimLineButton = u("#btn-game-aim-line");
    aimStyleButton = u("#btn-game-aim-style");
    fullScreenButton = u("#btn-game-fullscreen");
    resumeButton = u("#btn-game-resume");
    specStatsButton = u("#btn-spectate-view-stats");
    specBegin = !1;
    specNext = !1;
    specPrev = !1;
    specNextButton = u("#btn-spectate-next-player");
    specPrevButton = u("#btn-spectate-prev-player");
    interactionElems = u("#ui-interaction-press, #ui-interaction");
    interactionTouched = !1;
    reloadElems = u("#ui-current-clip, #ui-remaining-ammo, #ui-reload-button-container");
    reloadTouched = !1;
    flairElems = u(".ui-health-flair");
    flairId = 0;
    healthRed = new It(255,0,0);
    healthDarkpink = new It(255,45,45);
    healthLightpink = new It(255,112,112);
    healthWhite = new It(255,255,255);
    healthGrey = new It(179,179,179);
    minimapDisplayed = !0;
    visibilityMode = 0;
    hudVisible = !0;
    gasRenderer;
    gasSafeZoneRenderer = new fa;
    sentAdStatus = !1;
    frame = 0;
    weapsDirty = !1;
    weapSwitches = u("#ui-weapon-id-1, #ui-weapon-id-2");
    weapNoSwitches = u("#ui-weapon-id-3, #ui-weapon-id-4");
    weapDraggedId = 0;
    swapWeapSlots = !1;
    weapDraggedDiv = null;
    weapDragging = !1;
    weapDropped = !1;
    mapSpriteBarn = new ko;
    mapIndicatorBarn;
    playerMapSprites = [];
    playerPingSprites = {};
    container = new J;
    resetWeapSlotStyling;
    display;
    mapSprite = new ae(X.EMPTY);
    bigmapDisplayed = !1;
    screenScaleFactor = 1;
    minimapPos;
    dead = !1;
    muteButton = u("#ui-mute-ingame");
    muteButtonImage;
    muteOffImg = "audio-off.img";
    muteOnImg = "audio-on.img";
    displayingStats = !1;
    teamMemberHealthBarWidth;
    teamMemberHeight = 48;
    groupPlayerCount = 0;
    teamSelectors = [];
    displayOldMapSprites = !1;
    TNCQd() {
        this.gasRenderer.free(),
        this.clearUI(),
        this.roleMenuConfirm.off("click"),
        u(".ui-role-option").off("click"),
        u(".ui-map-expand").off("mousedown"),
        u(".ui-map-expand").off("click"),
        u("#ui-map-minimize").off("mousedown"),
        u("#ui-map-minimize").off("click"),
        u("#ui-menu-display").off("click"),
        this.moveStyleButton.off("touchstart"),
        this.aimStyleButton.off("touchstart"),
        this.aimLineButton.off("touchstart"),
        u(document).off("touchstart", this.onTouchScreen),
        this.bigmapClose.off("touchend"),
        this.bigmapClose.off("mousedown"),
        this.bigmapClose.off("click"),
        this.gameTabBtns.off("click"),
        this.fullScreenButton.off("mousedown"),
        this.fullScreenButton.off("click"),
        this.resumeButton.off("mousedown"),
        this.resumeButton.off("click"),
        u("#btn-spectate-quit").off("click"),
        u("#btn-game-quit").off("mousedown"),
        u("#btn-game-quit").off("click"),
        this.specStatsButton.off("click"),
        this.specNextButton.off("click"),
        this.specPrevButton.off("click"),
        this.interactionElems.off("touchstart"),
        this.reloadElems.off("touchstart"),
        this.weapSwitches.off("mousedown"),
        u("#ui-game").off("mousemove"),
        u("#ui-game").off("mouseup"),
        u("#ui-weapon-id-1").off("mouseup"),
        u("#ui-weapon-id-2").off("mouseup"),
        this.muteButton.off("mousedown"),
        this.muteButton.off("click"),
        u(".ui-team-member-health").find(".ui-bar-inner").css("width", this.teamMemberHealthBarWidth),
        u("#ui-center").off("mouseenter mouseleave"),
        this.inputBinds.menuHovered = !1,
        this.hudVisible || this.cycleHud(),
        this.mgR.destroy(),
        this.clearStatsElems(),
        this.setRoleMenuActive(!1),
        this.init()
    }
    init() {
        u(".js-ui-map-hidden").css("display", "block"),
        u("#ui-map-counter-default").css("display", "inline-block"),
        u("#ui-map-counter-faction").css("display", "none"),
        this.flairElems.css("display", "none"),
        this.clearStatsElems(),
        this.setSpectating(!1),
        this.updateSpectatorCountDisplay(!0),
        this.resetWeapSlotStyling(),
        this.dead = !1;
        for (let e = 0; e < this.teamSelectors.length; e++)
            this.teamSelectors[e].teamColor.removeAttr("style")
    }
    onMapLoad(e, t) {
        this.resize(e, t);
        const i = e.getMapDef().gameMode.killLeaderEnabled;
        u("#ui-kill-leader-container").css("display", i ? "block" : "none"),
        D.mobile || u("#ui-killfeed-wrapper").css("top", i ? "60px" : "12px")
    }
    pprlB(e, t, i, r, s, a, l, h) {
        const p = t;
        this.weapsDirty && this.resetWeapSlotStyling(),
        this.weapsDirty = !1,
        this.mapIndicatorBarn.updateIndicatorPulses(e);
        const c = k.max(Math.floor(r.duration * (1 - r.circleT)), 0)
          , d = {
            mode: r.mode,
            time: c
        };
        if (this.gasState.mode != d.mode || this.gasState.time != d.time) {
            this.gasState = d;
            const v = this.gasState.mode == ti.Moving;
            this.mapInfo.removeClass("icon-pulse"),
            this.gasIcon.removeClass("gas-icon"),
            this.gasIcon.removeClass("danger-icon"),
            v && this.mapInfo.addClass("icon-pulse"),
            this.gasIcon.addClass(v ? "danger-icon" : "gas-icon");
            const b = Math.floor(this.gasState.time / 60)
              , I = `0${this.gasState.time % 60}`.slice(-2);
            this.gasTimer.html(`${b}:${I}`)
        }
        if (this.spectatorCount = t.TVKb.OPAd,
        this.updateSpectatorCountDisplay(!1),
        t.GoI.mSk && !this.dead && (this.dead = !0,
        this.mgR.stop()),
        (p.downed || this.dead) && this.resetWeapSlotStyling(),
        this.actionSeq != t.MTbq.seq && (this.actionSeq = t.MTbq.seq,
        this.mgR.stop(),
        t.MTbq.type != le.None && !this.displayingStats)) {
            let v = ""
              , b = ""
              , M = "";
            switch (t.MTbq.type) {
            case le.Reload:
            case le.ReloadAlt:
                U[t.MTbq.item] && (b = this.localization.translate("game-reloading"));
                break;
            case le.UseItem:
                U[t.MTbq.item] && (b = this.localization.translate("game-using"),
                M = this.localization.translate(`game-${t.MTbq.item}`));
                break;
            case le.Revive:
                {
                    const I = s.getPlayerInfo(t.MTbq.targetId).name;
                    b = this.localization.translate("game-reviving"),
                    M = p.downed ? "" : I;
                    break
                }
            }
            (b != "" || M != "") && (this.localization.translate("word-order") == "svo" ? (v += b || "",
            v += M ? ` ${M}` : "") : this.localization.translate("word-order") == "sov" && (v += M ? `${M} ` : "",
            v += b ? ` ${b}` : ""),
            this.mgR.start(v, t.MTbq.time, t.MTbq.duration))
        }
        this.bigmapDisplayed || (this.mapSprite.x = this.minimapPos.x + this.mapSprite.width / 2 - t.WVGtr.x / i.width * this.mapSprite.width,
        this.mapSprite.y = this.minimapPos.y - this.mapSprite.height / 2 + t.WVGtr.y / i.height * this.mapSprite.height);
        const w = m.create(a.eXqeW * .5 / a.YLH(), a.rkdRrQ * .5 / a.YLH())
          , f = {
            min: m.sub(a.CYoYrL, w),
            max: m.add(a.CYoYrL, w)
        }
          , S = s.getPlayerInfo(t.__id).groupId
          , g = s.getGroupInfo(S);
        if (!g) {
            const v = {
                playerId: t.__id,
                groupId: S,
                spectating: this.spectating,
                playing: this.game.iMBsyQ,
                groupInfo: s.groupInfo
            };
            xe.logError(`badTeamInfo_1: ${JSON.stringify(v)}`)
        }
        const x = D.uiLayout == D.UiLayout.Sm
          , C = g.playerIds.length;
        for (let v = 0; v < C; v++) {
            const b = this.teamSelectors[v]
              , M = g.playerIds[v]
              , I = s.getPlayerInfo(M)
              , B = M == p.__id
              , z = s.getPlayerStatus(M);
            if (z && l > Ge.Solo) {
                b.groupIdDisplayed || (b.groupId.css("display", "block"),
                b.groupIdDisplayed = !0),
                this.updateTeam(v, Z.htmlEscape(I.name), z.health, {
                    disconnected: z.disconnected,
                    dead: z.dead,
                    downed: z.downed,
                    role: z.role
                }, I.playerId);
                for (const P in b.indicators)
                    if (b.indicators.hasOwnProperty(P)) {
                        const _ = b.indicators[P]
                          , T = _.elem;
                        let N = !0;
                        if ((!B || _.displayAll) && !h) {
                            const A = z.pos
                              , G = m.normalizeSafe(m.sub(A, a.CYoYrL), m.create(1, 0))
                              , W = be.intersectRayAabb(a.CYoYrL, G, f.min, f.max)
                              , E = Math.atan2(G.y, -G.x) - Math.PI * .5
                              , R = a.zEsq(W)
                              , Y = be.testCircleAabb(A, O.player.radius, f.min, f.max);
                            if (!z.dead && !Y) {
                                let Q = 32
                                  , ne = `translate(-50%, -50%) rotate(${E}rad)`;
                                x && (Q = 16,
                                ne += " scale(0.5)"),
                                N = !1,
                                T.css({
                                    left: k.clamp(R.x, Q, a.eXqeW - Q),
                                    top: k.clamp(R.y, Q, a.rkdRrQ - Q - 0),
                                    transform: ne
                                }),
                                _.displayed || (T.css("display", "block"),
                                _.displayed = !0)
                            }
                        }
                        N && _.displayed && (T.css("display", "none"),
                        _.displayed = !1)
                    }
            }
        }
        for (let v = C; v < this.teamSelectors.length; v++) {
            const b = this.teamSelectors[v];
            for (const M in b.indicators)
                if (b.indicators.hasOwnProperty(M)) {
                    const I = b.indicators[M];
                    I.displayed && (I.elem.css("display", "none"),
                    I.displayed = !1)
                }
            b.groupIdDisplayed && (b.groupId.css("display", "none"),
            b.groupIdDisplayed = !1)
        }
        if (i.factionMode) {
            const v = s.getPlayerInfo(p.__id);
            if (this.flairId != v.teamId) {
                this.flairId = v.teamId;
                const b = this.flairId == 1 ? "red" : "blue";
                this.flairElems.css({
                    display: "block",
                    "background-image": `url(../img/gui/player-patch-${b}.svg)`
                })
            }
        }
        if (l > Ge.Solo && this.groupPlayerCount != C && D.uiLayout == D.UiLayout.Lg ? (this.groupPlayerCount = C,
        this.spectateOptionsWrapper.css({
            top: this.groupPlayerCount * this.teamMemberHeight + 12
        })) : l == Ge.Solo && this.spectateOptionsWrapper.css({
            top: 12
        }),
        this.updatePlayerMapSprites(t, s, i),
        this.mapSpriteBarn.update(e, this, i),
        this.mgR.update(e, a),
        this.roleMenuActive) {
            this.roleMenuTicker -= e;
            const v = Math.ceil(this.roleMenuTicker)
              , b = `${this.localization.translate("game-enter-game")} (${v})`;
            b != this.roleMenuFooterHtml && (this.roleMenuFooterEnterElem.html(b),
            this.roleMenuFooterHtml = b),
            !this.roleMenuInst && this.audioManager.isSoundLoaded("ambient_lab_01", "ambient") && (this.roleMenuInst = this.audioManager.playSound("ambient_lab_01", {
                channel: "ambient"
            })),
            this.roleMenuTicker <= 0 && (this.roleSelected = this.roleDisplayed,
            this.setRoleMenuActive(!1))
        }
    }
    updatePlayerMapSprites(e, t, i) {
        const r = t.getPlayerInfo(e.__id);
        let s = 0;
        const a = (h, p, c, d, w, f, S) => {
            if (s >= this.playerMapSprites.length) {
                const x = this.mapSpriteBarn.addSprite();
                this.playerMapSprites.push(x)
            }
            const g = this.playerMapSprites[s++];
            g.pos = m.copy(h),
            g.scale = p,
            g.alpha = c,
            g.visible = d,
            g.zOrder = w,
            g.sprite.texture = X.from(f),
            g.sprite.tint = S
        }
          , l = Object.keys(t.playerStatus);
        for (let h = 0; h < l.length; h++) {
            const p = t.playerStatus[l[h]]
              , c = p.playerId
              , d = t.getPlayerInfo(c)
              , w = d.groupId == r.groupId;
            let f = 65535 + c * 2;
            c == r.playerId && (f += 65535 * 2);
            const S = Pr[p.role]
              , g = S?.mapIcon;
            g && (f += 65535);
            let x = "player-map-inner.img";
            g && S.mapIcon?.alive && (x = S.mapIcon.alive),
            p.dead ? (x = "skull-outlined.img",
            S?.mapIcon?.dead && (x = S.mapIcon.dead)) : p.downed && (x = w ? "player-map-inner.img" : "player-map-downed.img");
            let C = w ? t.getGroupColor(c) : t.getTeamColor(d.teamId);
            i.factionMode && g && (C = t.getTeamColor(d.teamId));
            const v = D.uiLayout == D.UiLayout.Sm ? .15 : .2;
            let b = v;
            if (b = w ? p.dead ? v * 1.5 : g ? v * 1.25 : v * 1 : p.dead || p.downed || g ? v * 1.25 : v * .75,
            a(p.pos, b, p.minimapAlpha, p.minimapVisible, f, x, C),
            w) {
                const M = D.uiLayout == D.UiLayout.Sm ? .25 : .3
                  , I = p.minimapVisible && !g;
                a(p.pos, M, p.minimapAlpha, I, f - 1, "player-map-outer.img", 16777215)
            }
        }
        for (let h = this.playerMapSprites.length - 1; h >= s; h--)
            this.playerMapSprites[h].visible = !1
    }
    getMinimapMargin() {
        return D.uiLayout == D.UiLayout.Sm ? 4 : 16
    }
    getMinimapSize() {
        return D.uiLayout == D.UiLayout.Sm ? 192 : 256
    }
    getMinimapBorderWidth() {
        return D.uiLayout == D.UiLayout.Sm ? 1 : 4
    }
    createPing(e, t, i, r, s, a) {
        const l = Tt[e];
        if (l) {
            const h = (c, d) => {
                const w = this.mapSpriteBarn.addSprite();
                return w.pos = m.copy(t),
                w.scale = c,
                w.lifetime = l.mapLife,
                w.pulse = !1,
                w.zOrder = 100,
                w.sprite.texture = X.from(l.mapTexture),
                w.sprite.tint = d,
                w
            }
              , p = c => {
                const d = this.mapSpriteBarn.addSprite();
                return d.pos = m.copy(t),
                d.scale = 0,
                d.lifetime = l.pingLife,
                d.pulse = !0,
                d.zOrder = 99,
                d.sprite.texture = X.from("ping-map-pulse.img"),
                d.sprite.tint = c,
                d
            }
            ;
            if (l.mapEvent) {
                const c = (D.uiLayout == D.UiLayout.Sm ? .15 : .2) * 1.5;
                h(c, l.tint).release(),
                p(l.tint).release()
            } else {
                let c = 16777215;
                const d = s.getPlayerInfo(r)
                  , w = s.getPlayerInfo(i)
                  , f = s.getPlayerStatus(i);
                d && w && f && (f.role == "leader" ? c = 65280 : d.groupId == w.groupId ? c = s.getGroupColor(i) : c = s.getTeamColor(w.teamId)),
                this.playerPingSprites[i] || (this.playerPingSprites[i] = []);
                const S = this.playerPingSprites[i];
                for (let v = 0; v < S.length; v++)
                    S[v].free();
                const g = D.uiLayout == D.UiLayout.Sm ? .15 : .2
                  , x = h(g, c)
                  , C = p(c);
                S.push(x),
                S.push(C)
            }
        }
    }
    updateMapSprite(e, t, i, r) {
        e.displayed && (e.life != null && (e.life -= r,
        e.displayed = e.life > 0,
        e.maxLife - e.life < .1 ? t.alpha = (e.maxLife - e.life) / .1 : e.life < .5 ? t.alpha = k.max(e.life / .5, 0) : t.alpha = 1),
        e.pulse && e.displayed && (e.scale = e.scale + r / 2.5,
        t.scale.set(e.scale, e.scale)),
        t.visible = i && t.alpha > 0)
    }
    updateMapIndicators(e) {
        this.mapIndicatorBarn.updateIndicatorData(e)
    }
    getMapPosFromWorldPos(e, t) {
        const i = this.mapSprite.x - this.mapSprite.width / 2 + e.x / t.width * this.mapSprite.width
          , r = this.mapSprite.y + this.mapSprite.height / 2 - e.y / t.height * this.mapSprite.height;
        return m.create(i, r)
    }
    getWorldPosFromMapPos(e, t, i) {
        let r = !1;
        if (this.bigmapDisplayed) {
            const s = (i.eXqeW - this.mapSprite.width) / 2;
            let a = (i.rkdRrQ - this.mapSprite.height) / 2;
            D.uiLayout == D.UiLayout.Sm && !D.isLandscape && (a = 0),
            r = e.x > s && e.x < i.eXqeW - s && e.y > a && e.y < i.rkdRrQ - a
        } else if (this.minimapDisplayed) {
            const s = this.getMinimapSize()
              , a = this.getMinimapMargin()
              , h = (s * this.screenScaleFactor + a) * .5;
            r = e.x > this.minimapPos.x - h && e.x < this.minimapPos.x + h && e.y > this.minimapPos.y - h && e.y < this.minimapPos.y + h
        }
        if (r) {
            const s = m.create(this.mapSprite.x - this.mapSprite.width / 2, this.mapSprite.y + this.mapSprite.height / 2)
              , a = (e.x - s.x) / this.mapSprite.width * t.width
              , l = (s.y - e.y) / this.mapSprite.height * t.height;
            return m.create(a, l)
        }
        return !1
    }
    hideAll() {
        this.gameElem.css("display", "none")
    }
    showAll() {
        this.gameElem.css("display", "block")
    }
    setLocalKills(e) {
        this.playerKills.html(e)
    }
    removeAds() {
        oe.removeAllAds()
    }
    refreshMainPageAds() {
        const e = ["728x90"];
        if (oe.isCrazyGames)
            for (let t = 0; t < e.length; t++)
                oe.requestAd(e[t]);
        oe.showStickyAd()
    }
    clearUI() {
        this.mgR.stop(),
        this.curAction = {
            type: le.None
        },
        this.displayMapLarge(!0),
        this.displayMiniMap(),
        this.clearStatsElems(),
        this.clearTeamUI(),
        this.toggleEscMenu(!0),
        this.toggleLocalStats(!0),
        this.visibilityMode = 0,
        this.spectatorCount = 0,
        this.setLocalKills(0)
    }
    beginSpectating() {
        this.specBegin = !0
    }
    hideStats() {
        this.displayingStats = !1,
        this.statsMain.css("display", "none"),
        this.statsElem.stop().css({
            display: "none",
            opacity: 0
        }),
        this.statsContents.stop().hide(),
        oe.hideStickyAd()
    }
    teamModeToString(e) {
        const t = {
            unknown: "game-rank",
            [Ge.Solo]: "game-solo-rank",
            [Ge.Duo]: "game-duo-rank",
            [Ge.Squad]: "game-squad-rank"
        }
          , i = t[e] || t.unknown;
        return this.localization.translate(i)
    }
    getTitleVictoryText(e, t) {
        if (e)
            return `${this.spectatedPlayerName} ${this.localization.translate("game-won-the-game")}`;
        let i = "game-chicken";
        return t.turkeyMode && (i = "game-turkey"),
        this.localization.translate(i)
    }
    getTitleDefeatText(e, t) {
        return t ? `${this.spectatedPlayerName} ${this.localization.translate("game-player-died")}.` : e > Ge.Solo ? this.localization.translate("game-team-eliminated") : `${this.localization.translate("game-You")} ${this.localization.translate("game-you-died")}.`
    }
    getOverviewElems(e, t, i, r) {
        if (r) {
            const s = this.localization.translate("game-red-team")
              , a = this.localization.translate("game-blue-team");
            return `<div class="ui-stats-header-right ui-stats-header-red-team"><span class="ui-stats-header-stat">${s} </span><span class="ui-stats-header-value">${this.playersAliveRedCounter}</span></div><div class="ui-stats-header-left ui-stats-header-blue-team"><span class="ui-stats-header-stat">${a} </span><span class="ui-stats-header-value">${this.playersAliveBlueCounter}</span></div>`
        }
        return e == Ge.Solo ? `<div><span class="ui-stats-header-stat">${this.teamModeToString(e)} </span><span class="ui-stats-header-value">#${t}</span></div>` : `<div class="ui-stats-header-right"><span class="ui-stats-header-stat">${this.teamModeToString(e)} </span><span class="ui-stats-header-value">#${t}</span></div><div class="ui-stats-header-left"><span class="ui-stats-header-stat">${this.localization.translate("game-team-kills")} </span><span class="ui-stats-header-value">${i}</span></div>`
    }
    quitGame() {
        this.game.tjXwYe = !0,
        this.refreshMainPageAds(),
        this.game.onQuit()
    }
    showStats(e, t, i, r, s, a, l, h, p, c, d, w) {
        if (!h || t == a || s) {
            this.toggleEscMenu(!0),
            this.displayingStats = !0,
            this.mgR.stop(),
            this.displayMapLarge(!0),
            this.clearStatsElems(),
            this.setSpectating(!1, l),
            this.removeAds(),
            this.statsMain.css("display", "block"),
            this.statsLogo.css("display", "block"),
            this.statsContentsContainer.css({
                top: ""
            }),
            this.statsInfoBox.css({
                height: ""
            });
            const S = a == r ? 1750 : 2500;
            this.setBannerAd(S, w);
            const g = a == r || h && r == t
              , x = h && a != t
              , C = g ? this.getTitleVictoryText(x, d.getMapDef().gameMode) : this.getTitleDefeatText(l, x);
            let v = 0;
            for (let G = 0; G < e.length; G++)
                v += e[G].kills;
            const b = this.getOverviewElems(l, i, v, d.getMapDef().gameMode.factionMode)
              , M = u("<div/>").append(u("<div/>", {
                class: "ui-stats-header-title",
                html: C
            })).append(u("<div/>", {
                class: "ui-stats-header-overview",
                html: b
            }));
            this.statsHeader.html(M);
            const I = (G, W) => u("<div/>", {
                class: "ui-stats-info"
            }).append(u("<div/>", {
                html: G
            })).append(u("<div/>", {
                html: W
            }))
              , B = D.uiLayout != D.UiLayout.Sm || D.tablet ? 250 : 125;
            let z = 0;
            z -= (e.length - 1) * B / 2,
            z -= (e.length - 1) * 10;
            for (let G = 0; G < e.length; G++) {
                const W = e[G]
                  , E = p.getPlayerInfo(W.playerId)
                  , R = lr(W.timeAlive);
                let Y = "ui-stats-info-player";
                Y += W.dead ? " ui-stats-info-status" : "";
                const Q = (ne => u("<div/>", {
                    class: ne
                }))(Y);
                if (Q.css("left", z),
                Q.append(u("<div/>", {
                    class: "ui-stats-info-player-name",
                    html: Z.htmlEscape(E.name)
                })),
                Q.append(I(this.localization.translate("game-kills"), `${W.kills}`)).append(I(this.localization.translate("game-damage-dealt"), W.damageDealt)).append(I(this.localization.translate("game-damage-taken"), W.damageTaken)).append(I(this.localization.translate("game-survived"), R)),
                d.getMapDef().gameMode.factionMode && s)
                    switch (G) {
                    case 1:
                        Q.append(u("<div/>", {
                            class: "ui-stats-info-player-badge ui-stats-info-player-red-leader"
                        }));
                        break;
                    case 2:
                        Q.append(u("<div/>", {
                            class: "ui-stats-info-player-badge ui-stats-info-player-blue-leader"
                        }));
                        break;
                    case 3:
                        {
                            const ne = E.teamId == 1 ? "ui-stats-info-player-red-ribbon" : "ui-stats-info-player-blue-ribbon";
                            Q.append(u("<div/>", {
                                class: `ui-stats-info-player-badge ${ne}`
                            }))
                        }
                    }
                this.statsInfoBox.append(Q),
                z += 10
            }
            const P = u("<a/>", {
                class: "ui-stats-restart btn-green btn-darken menu-option",
                html: this.localization.translate("game-play-new-game")
            });
            if (P.on("click", () => {
                oe.requestFullscreenAd( () => {
                    this.quitGame()
                }
                )
            }
            ),
            this.statsOptions.append(P),
            s || this.waitingForPlayers)
                P.css({
                    width: D.uiLayout != D.UiLayout.Sm || D.tablet ? 225 : 130
                });
            else {
                P.css({
                    left: D.uiLayout != D.UiLayout.Sm || D.tablet ? -72 : -46
                });
                const G = u("<a/>", {
                    class: "btn-green btn-darken menu-option ui-stats-spectate",
                    html: this.localization.translate("game-spectate")
                });
                G.on("click", this.beginSpectating.bind(this)),
                this.statsOptions.append(G)
            }
            let _ = 0;
            const T = 500
              , N = 250 / k.max(1, e.length)
              , A = 750 / k.max(1, e.length);
            this.statsInfoBox.children().each( (G, W) => {
                const E = u(W);
                E.css("opacity", 0),
                E.delay(S + A + (_ + G) * N).animate({
                    opacity: 1
                }, T, () => {
                    E.children().each( (R, Y) => {
                        u(Y).delay(R * N).animate({
                            opacity: 1
                        }, T)
                    }
                    )
                }
                ),
                E.children().each( (R, Y) => {
                    u(Y).css("opacity", 0),
                    _++
                }
                ),
                _++
            }
            ),
            this.statsOptions.children().each( (G, W) => {
                const E = u(W);
                E.hide();
                const R = S + A + (_ + G) * N + 500;
                E.delay(R).fadeIn(T),
                _++
            }
            ),
            this.statsElem.stop(),
            this.statsElem.css("display", "block"),
            this.statsElem.delay(S).animate({
                opacity: 1
            }, 1e3),
            this.statsContents.stop(),
            this.statsContents.css("display", "block"),
            this.statsContents.delay(S).animate({
                opacity: 1
            }, 1e3)
        }
    }
    clearStatsElems() {
        this.statsHeader.empty(),
        this.statsInfoBox.empty(),
        this.statsOptions.empty(),
        this.statsAds.css("display", "none"),
        this.statsContents.stop(),
        this.statsContents.css({
            display: "none",
            opacity: 0
        }),
        this.statsElem.stop(),
        this.statsElem.css({
            display: "none",
            opacity: 0
        }),
        this.statsMain.css("display", "none")
    }
    showTeamAd(e, t) {
        this.toggleEscMenu(!0),
        this.displayMapLarge(!0),
        this.clearStatsElems(),
        this.statsMain.css("display", "block"),
        this.statsLogo.css("display", "none"),
        this.mgR.stop(),
        this.displayingStats = !0,
        this.statsHeader.html(( () => {
            let a = this.localization.translate("game-You");
            a += " ",
            a += this.localization.translate("game-you-died"),
            a += ".";
            let l = `<div><span class="ui-stats-header-stat">${this.localization.translate("game-kills")} </span>`;
            return l += `<span class="ui-stats-header-value">${e.kills}</span></div>`,
            u("<div/>", {
                class: ""
            }).append(u("<div/>", {
                class: "ui-stats-header-title",
                html: a
            })).append(u("<div/>", {
                class: "ui-stats-header-overview",
                html: l
            }))
        }
        )()),
        this.statsContentsContainer.css({
            top: "10%"
        }),
        this.statsInfoBox.css({
            height: 0
        });
        const i = u("<a/>", {
            class: "ui-stats-restart btn-green btn-darken menu-option",
            html: this.localization.translate("game-play-new-game")
        });
        i.on("click", () => {
            oe.requestFullscreenAd( () => {
                this.quitGame()
            }
            )
        }
        ),
        this.statsOptions.append(i),
        i.css({
            left: D.uiLayout != D.UiLayout.Sm || D.tablet ? -72 : -46
        });
        const r = u("<a/>", {
            class: "btn-green btn-darken menu-option ui-stats-spectate",
            html: this.localization.translate("game-spectate")
        });
        r.on("click", this.beginSpectating.bind(this)),
        this.statsOptions.append(r);
        let s = 0;
        this.statsOptions.children().each( (a, l) => {
            const h = u(l);
            h.hide();
            const p = 4100 + (s + a) * 300 + 300;
            h.delay(p).fadeIn(750),
            s++
        }
        ),
        this.statsElem.stop(),
        this.statsElem.css("display", "block"),
        this.statsElem.delay(2500).animate({
            opacity: 1
        }, 1e3),
        this.statsContents.stop(),
        this.statsContents.css("display", "block"),
        this.statsContents.delay(2500).animate({
            opacity: 1
        }, 1e3)
    }
    setBannerAd(e, t) {
        let i = Math.max(e - 150, 0);
        setTimeout( () => {
            u("#ui-stats-ad-container-desktop").css("display", "inline-block"),
            oe.showStickyAd(),
            t.hideKillMessage()
        }
        , i)
    }
    setSpectateTarget(e, t, i, r) {
        if (e != this.spectatedPlayerId) {
            this.setSpectating(!0, i);
            const s = r.getPlayerName(e, t, !1);
            this.spectatedPlayerId = e,
            this.spectatedPlayerName = Z.htmlEscape(s),
            this.spectatedPlayerText.find("#spectate-player").html(this.spectatedPlayerName),
            this.actionSeq = -1,
            this.mgR.stop()
        }
    }
    setSpectating(e, t) {
        if (this.spectating != e)
            if (this.spectating = e,
            this.spectating) {
                this.spectateMode.css("display", "block"),
                u(".ui-zoom").removeClass("ui-zoom-hover");
                const i = t == Ge.Solo;
                this.specPrevButton.css("display", i ? "none" : "block"),
                this.specNextButton.css("display", i ? "none" : "block"),
                this.hideStats()
            } else
                this.spectateMode.css("display", "none"),
                u(".ui-zoom").addClass("ui-zoom-hover")
    }
    setLocalStats(e) {
        const t = {
            kills: this.localization.translate("game-kills"),
            damageDealt: this.localization.translate("game-damage-dealt"),
            damageTaken: this.localization.translate("game-damage-taken"),
            timeAlive: this.localization.translate("game-survived")
        };
        this.spectateModeStatsData.empty();
        for (const i in t)
            if (t.hasOwnProperty(i)) {
                const r = t[i]
                  , s = i == "timeAlive" ? lr(e[i]) : e[i]
                  , a = `<tr><td class="ui-spectate-stats-category">${r}</td><td class="ui-spectate-stats-value">${s}</td></tr>`;
                this.spectateModeStatsData.append(a)
            }
    }
    toggleLocalStats(e=!1) {
        const t = this.spectateModeStats.css("display") == "none" && !e;
        this.spectateModeStats.css("display", t ? "inline-block" : "none"),
        this.specStatsButton.html(t ? this.localization.translate("game-hide-match-stats") : this.localization.translate("game-view-match-stats"))
    }
    updatePlayersAlive(e) {
        this.playersAlive.html(e),
        this.leaderboardAlive.css("display", "block"),
        this.leaderboardAliveFaction.css("display", "none")
    }
    updatePlayersAliveRed(e) {
        this.playersAliveRed.html(e),
        this.playersAliveRedCounter = e,
        this.leaderboardAlive.css("display", "none"),
        this.leaderboardAliveFaction.css("display", "block"),
        u("#ui-map-counter-default").css("display", "none"),
        u("#ui-map-counter-faction").css("display", "inline-block")
    }
    updatePlayersAliveBlue(e) {
        this.playersAliveBlue.html(e),
        this.playersAliveBlueCounter = e,
        this.leaderboardAlive.css("display", "none"),
        this.leaderboardAliveFaction.css("display", "block"),
        u("#ui-map-counter-default").css("display", "none"),
        u("#ui-map-counter-faction").css("display", "inline-block")
    }
    updateKillLeader(e, t, i, r) {
        const s = e != 0
          , a = r?.sniperMode ? this.localization.translate("game-waiting-for-hunted") : this.localization.translate("game-waiting-for-new-leader");
        this.killLeaderName.html(s ? t : a),
        this.killLeaderCount.html(s ? i : 0)
    }
    displayMapLarge(e) {
        this.bigmapDisplayed = !e && !this.bigmapDisplayed,
        this.bigmapDisplayed ? this.container.alpha = 1 : this.container.alpha = this.minimapDisplayed ? 1 : 0;
        let t = D.uiLayout == D.UiLayout.Sm ? ".js-ui-mobile-map-hidden" : "js-ui-desktop-map-hidden";
        t += ", .js-ui-map-hidden",
        u(this.visibilityMode == 2 ? ".js-ui-hud-show" : t).css("display", this.bigmapDisplayed ? "none" : "block"),
        u(".js-ui-map-show").css("display", this.bigmapDisplayed ? "block" : "none"),
        this.updateSpectatorCountDisplay(!0),
        this.redraw(this.game.ciS)
    }
    updateSpectatorCountDisplay(e) {
        const t = !this.bigmapDisplayed && this.spectatorCount > 0;
        e = e || this.spectatorCount > 0 && !this.spectatorCounterDisplayed || this.spectatorCount == 0 && this.spectatorCounterDisplayed,
        this.spectatorCount != this.prevSpectatorCount && (this.spectatorCounter.html(this.spectatorCount),
        this.prevSpectatorCount = this.spectatorCount),
        e && (this.spectatorCounterContainer.css("display", t ? "block" : "none"),
        this.spectatorCounterDisplayed = t)
    }
    toggleMiniMap() {
        this.minimapDisplayed ? this.hideMiniMap() : this.displayMiniMap()
    }
    cycleVisibilityMode() {
        if (!this.bigmapDisplayed)
            switch (this.visibilityMode) {
            case 0:
                this.hideMiniMap(),
                this.visibilityMode = 1;
                break;
            case 1:
                this.displayMiniMap(),
                this.visibilityMode = 0
            }
    }
    cycleHud() {
        this.gameElem.css("display") == "none" ? (this.gameElem.css("display", "block"),
        this.displayMiniMap(),
        this.hudVisible = !0) : (this.gameElem.css("display", "none"),
        this.hideMiniMap(),
        this.hudVisible = !1)
    }
    hideMiniMap() {
        this.bigmapDisplayed || (this.minimapDisplayed = !1,
        this.container.alpha = 0,
        this.mapInfo.css("bottom", "auto"),
        this.spectatorCounterContainer.css({
            bottom: 6,
            left: 98
        }))
    }
    displayMiniMap() {
        if (!this.bigmapDisplayed) {
            const e = D.uiLayout == D.UiLayout.Sm;
            this.minimapDisplayed = !0,
            this.container.alpha = 1,
            this.mapInfo.css("bottom", this.mapInfoBottom),
            this.spectatorCounterContainer.css({
                bottom: e ? 0 : 218,
                left: e ? 0 : 6
            })
        }
    }
    displayAnnouncement(e) {
        e && (this.announcement.html(e),
        this.announcement.fadeIn(400, () => {
            setTimeout( () => {
                this.announcement.fadeOut(800)
            }
            , 3e3)
        }
        ))
    }
    displayGasAnnouncement(e, t) {
        let i = "";
        switch (e) {
        case ti.Waiting:
            {
                i = this.localization.translate("game-red-zone-advances");
                const r = Math.floor(t / 60)
                  , s = t - r * 60;
                i += r > 1 ? ` ${r} ${this.localization.translate("game-minutes")}` : "",
                i += r == 1 ? ` ${r} ${this.localization.translate("game-minute")}` : "",
                i += s > 0 ? ` ${Math.floor(s)} ${this.localization.translate("game-seconds")}` : "";
                break
            }
        case ti.Moving:
            i = this.localization.translate("game-red-zone-advancing");
            break
        }
        this.displayAnnouncement(i)
    }
    setWaitingForPlayers(e) {
        this.waitingForPlayers = e,
        this.waitingText.css("display", e ? "block" : "none")
    }
    YOuM(e, t, i, r) {
        const s = t.getCircle(1)
          , a = this.getMapPosFromWorldPos(s.pos, i)
          , l = this.getMapPosFromWorldPos(m.add(s.pos, m.create(s.rad, 0)), i)
          , h = m.length(m.sub(l, a));
        this.gasRenderer.render(a, h, t.isActive());
        const p = t.circleNew
          , c = this.getMapPosFromWorldPos(p.pos, i)
          , d = this.getMapPosFromWorldPos(m.add(p.pos, m.create(p.rad, 0)), i)
          , w = m.length(m.sub(d, c))
          , f = this.getMapPosFromWorldPos(e, i)
          , S = t.isActive()
          , g = t.isActive() && !this.bigmapDisplayed;
        this.gasSafeZoneRenderer.render(c, w, f, S, g),
        r.renderAirstrikeZones(this, i)
    }
    updateHealthBar(e, t, i, r) {
        const s = e;
        let a = r.health * .01 * s;
        a = r.dead ? 0 : k.max(a, 1),
        t.css("width", a),
        a > 0 && i?.css("width", a);
        const l = r.health;
        let h = this.healthRed
          , p = this.healthDarkpink;
        if (l > 25) {
            if (r.downed)
                t.css({
                    backgroundColor: "red"
                });
            else {
                k.eqAbs(l, 100, .2) ? (h = this.healthGrey,
                p = this.healthGrey) : k.eqAbs(l, 75, .2) || l >= 75 ? (h = this.healthWhite,
                p = this.healthWhite) : (h = this.healthDarkpink,
                p = this.healthLightpink);
                const c = h.getColors()
                  , d = p.getColors()
                  , w = ni(c.r, d.r, 45, l)
                  , f = ni(c.g, d.g, 45, l)
                  , S = ni(c.b, d.b, 45, l);
                t.css({
                    backgroundColor: `rgba(${w},${f},${S},1)`
                })
            }
            t.removeClass("ui-bar-danger")
        } else
            t.addClass("ui-bar-danger")
    }
    updateTeam(e, t, i, r, s) {
        const a = this.teamSelectors[e].groupId
          , l = this.teamSelectors[e].teamName
          , h = this.teamSelectors[e].prevHealth
          , p = this.teamSelectors[e].prevStatus
          , c = r.dead != p.dead || r.disconnected != p.disconnected || r.downed != p.downed || r.role != p.role;
        if (this.teamSelectors[e].playerId != s || i != h || c) {
            const d = this.teamSelectors[e].teamStatus
              , w = this.teamSelectors[e].teamHealthInner;
            this.teamSelectors[e].playerId = s,
            this.teamSelectors[e].teamNameHtml = t,
            l.html(t),
            this.updateHealthBar(this.teamMemberHealthBarWidth, w, null, {
                health: i,
                dead: r.dead,
                downed: r.downed
            }),
            c && (d.attr("class", "ui-team-member-status"),
            r.disconnected ? d.addClass("ui-team-member-status-disconnected") : r.dead ? d.addClass("ui-team-member-status-dead") : r.downed && d.addClass("ui-team-member-status-downed").addClass("icon-pulse"),
            l.css("opacity", r.disconnected || r.dead ? .3 : 1)),
            a.css("display", "block"),
            this.teamSelectors[e].prevStatus = r,
            this.teamSelectors[e].prevHealth = i
        }
    }
    clearTeamUI() {
        u(".ui-team-member").css("display", "none"),
        u(".ui-team-indicator").css("display", "none"),
        u(".ui-team-member-name").removeAttr("style"),
        u(".ui-team-member-status").removeAttr("style"),
        u(".ui-team-member-status").removeClass("ui-team-member-status-downed ui-team-member-status-dead ui-team-member-status-disconnected icon-pulse"),
        this.teamSelectors = []
    }
    resize(e, t) {
        this.screenScaleFactor = D.uiLayout == D.UiLayout.Sm ? .5626 : k.min(1, k.clamp(t.eXqeW / 1280, .75, 1) * k.clamp(t.rkdRrQ / 1024, .75, 1)),
        this.mgR.resize(this.touch, this.screenScaleFactor),
        this.gasRenderer.resize(),
        this.mapSprite.texture = e.getMapTexture();
        const i = k.min(1, k.min(t.eXqeW / 1200, t.rkdRrQ / 900));
        this.roleMenuElem.css("transform", `translateX(-50%) translateY(-50%) scale(${i})`),
        this.redraw(t)
    }
    redraw(e) {
        const t = e.eXqeW
          , i = e.rkdRrQ
          , r = this.getMinimapMargin();
        let s = 0
          , a = 0;
        D.model == "iphonex" && (D.isLandscape ? s += 28 : a += 32);
        const l = this.getMinimapSize()
          , h = this.getMinimapBorderWidth()
          , p = D.uiLayout == D.UiLayout.Sm;
        if (this.display.border.clear(),
        this.container.mask?.clear(),
        this.bigmapDisplayed) {
            const c = k.min(t, i);
            this.mapSprite.width = c,
            this.mapSprite.height = c,
            this.mapSprite.x = t / 2,
            this.mapSprite.y = i / 2,
            this.mapSprite.alpha = 1,
            this.container.mask.beginFill(16777215, 1),
            this.container.mask.drawRect(this.mapSprite.x - this.mapSprite.width / 2, this.mapSprite.y - this.mapSprite.height / 2, this.mapSprite.width, this.mapSprite.height),
            this.container.mask.endFill(),
            D.touch && this.bigmapCollision.css({
                width: i,
                height: t
            })
        } else {
            const c = this.screenScaleFactor * 1600 / 1.2
              , d = l * this.screenScaleFactor;
            this.mapSprite.width = c,
            this.mapSprite.height = c,
            this.mapSprite.alpha = .8;
            let w = {
                zoom: this.screenScaleFactor
            };
            document.body && ("WebkitTransform"in document.body.style ? w = {
                "-webkit-transform": `scale(${this.screenScaleFactor})`
            } : "transform"in document.body.style && (w = {
                transform: `scale(${this.screenScaleFactor})`
            })),
            this.mapContainer.css(w),
            this.mapContainer.css("bottom", this.mapContainerBottom * this.screenScaleFactor);
            const f = p ? d / 2 + r : i - d / 2 - r;
            this.minimapPos.x = r + d / 2 + s,
            this.minimapPos.y = f + a,
            this.display.border.lineStyle(h, 0),
            this.display.border.beginFill(0, 0);
            const S = p ? r + h / 2 : i - d - r + h / 2;
            this.display.border.drawRect(r + h / 2 + s, S + a, d - h, d - h),
            this.display.border.endFill();
            const g = p ? r : i - d - r;
            this.container.mask.beginFill(16777215, 1),
            this.container.mask.drawRect(r + s, g - .5 + a, d, d),
            this.container.mask.endFill()
        }
    }
    toggleEscMenu(e=!1) {
        this.displayingStats || (this.escMenuDisplayed || e ? (this.escMenuDisplayed = !1,
        this.escMenuElem.css("display", "none"),
        this.setCurrentGameTab("settings"),
        u("#ui-center").off("mouseenter mouseleave"),
        this.inputBinds.menuHovered = !1,
        this.roleMenuActive && this.displayRoleMenu()) : this.bigmapDisplayed ? this.displayMapLarge(!0) : (this.visibilityMode == 2 && this.cycleVisibilityMode(),
        this.escMenuDisplayed = !0,
        this.escMenuElem.css("display", "block"),
        u("#ui-center").on("mouseenter", () => {
            this.inputBinds.menuHovered = !0
        }
        ).on("mouseleave", () => {
            this.inputBinds.menuHovered = !1
        }
        ),
        this.inputBinds.menuHovered = !1,
        this.roleMenuActive && this.hideRoleMenu()))
    }
    setCurrentGameTab(e) {
        this.currentGameTab = e,
        this.gameTabs.css("display", "none"),
        this.gameTabBtns.removeClass("btn-game-menu-selected"),
        u(`#ui-game-tab-${this.currentGameTab}`).css("display", "block"),
        u(`#btn-game-${this.currentGameTab}`).addClass("btn-game-menu-selected"),
        this.currentGameTab == "keybinds" ? this.inputBindUi.refresh() : this.inputBindUi.cancelBind()
    }
    setRoleMenuActive(e) {
        this.roleMenuActive = e,
        this.roleMenuActive ? (this.roleMenuTicker = O.player.perkModeRoleSelectDuration,
        this.displayRoleMenu()) : (this.roleMenuInst && (this.audioManager.stopSound(this.roleMenuInst),
        this.roleMenuInst = null),
        this.hideRoleMenu())
    }
    displayRoleMenu() {
        this.roleMenuElemWrapper.css("display", "block")
    }
    hideRoleMenu() {
        this.roleMenuElemWrapper.css("display", "none")
    }
    setRoleMenuOptions(e, t) {
        u("#ui-role-header").html("");
        for (let r = 0; r < t.length; r++) {
            const s = t[r]
              , a = U[s]
              , l = u("<div/>", {
                class: "ui-role-option",
                "data-role": s
            });
            l.css({
                "background-image": `url('${a.guiImg}')`
            }),
            u("#ui-role-header").append(l)
        }
        u(".ui-role-option").on("click", r => {
            r.stopPropagation();
            const s = u(r.currentTarget);
            this.setRoleMenuInfo(s.data("role"))
        }
        );
        let i = t[0];
        t.includes(e) && (i = e),
        this.setRoleMenuInfo(i)
    }
    setRoleMenuInfo(e) {
        const t = U[e];
        u(".ui-role-option").css({
            "background-size": 132,
            opacity: .5
        }),
        u("#ui-role-header").find(`[data-role=${e}]`).css({
            "background-size": 164,
            opacity: 1
        });
        const i = u("<div/>", {
            class: "ui-role-body-left"
        })
          , r = u("<div/>", {
            class: "ui-role-body-name"
        })
          , s = u("<div/>", {
            class: "ui-role-body-image"
        })
          , a = this.localization.translate(`game-${e}`);
        r.html(a),
        s.css({
            "background-image": `url('${t.guiImg}')`
        });
        const l = t.color ? Z.colorToHexString(t.color) : "default";
        this.roleMenuElem.css("border-color", l),
        i.append(r).append(s);
        const h = u("<div/>", {
            class: "ui-role-body-right"
        })
          , p = t.perks;
        for (let c = 0; c < p.length; c++) {
            const d = p[c]
              , w = u("<div/>", {
                class: "ui-role-body-perk"
            })
              , f = u("<div/>", {
                class: "ui-role-body-perk-image-wrapper"
            }).append(u("<div/>", {
                class: "ui-role-body-perk-image-icon"
            }))
              , S = u("<div/>", {
                class: "ui-role-body-perk-name"
            })
              , g = Z.getSvgFromGameType(d instanceof Function ? d() : d);
            f.find(".ui-role-body-perk-image-icon").css({
                "background-image": `url('${g}')`
            });
            const x = this.localization.translate(`game-${d}`);
            S.html(x),
            w.append(f).append(S),
            h.append(w)
        }
        u("#ui-role-body").html("").append(i).append(h),
        this.roleDisplayed = e
    }
}
const $r = 6
  , nr = .75 * 1e3
  , Xr = 4
  , Io = {
    [O.WeaponSlot.Primary]: F.EquipPrimary,
    [O.WeaponSlot.Secondary]: F.EquipSecondary,
    [O.WeaponSlot.Melee]: F.EquipMelee,
    [O.WeaponSlot.Throwable]: F.EquipThrowable
};
function te(o) {
    return document.getElementById(o)
}
function mr(o) {
    return o.button == 0
}
function hr(o) {
    return o.button == 2
}
function bi(o, e, t) {
    if (o instanceof Array)
        for (let i = 0; i < o.length; i++)
            bi(o[i], t !== void 0 ? e[t] : e, i);
    else if (o instanceof Object) {
        const i = Object.keys(o);
        for (let r = 0; r < i.length; r++) {
            const s = i[r];
            bi(o[s], t !== void 0 ? e[t] : e, s)
        }
    } else
        e[t] = o
}
function ki(o, e, t) {
    if (e instanceof Array) {
        const i = [];
        for (let r = 0; r < e.length; r++)
            i[r] = ki(o[r], e[r], t);
        return i
    }
    if (e instanceof Object) {
        const i = {}
          , r = Object.keys(e);
        for (let s = 0; s < r.length; s++) {
            const a = r[s];
            i[a] = ki(o[a], e[a], t)
        }
        return i
    }
    return o != e || t
}
function Zr() {
    const o = Object.keys(U)
      , e = [];
    for (let t = 0; t < o.length; t++) {
        const i = o[t]
          , r = U[i];
        !r.hideUi && (r.type == "heal" || r.type == "boost" || r.type == "ammo") && e.push(i)
    }
    return e
}
class cr {
    mobile = !1;
    touch = !1;
    rareLootMessage = {
        lootType: "",
        ticker: 0,
        duration: 0,
        opacity: 0
    };
    pickupMessage = {
        message: "",
        ticker: 0,
        duration: 0,
        opacity: 0
    };
    killMessage = {
        text: "",
        count: "",
        ticker: 0,
        duration: 0,
        opacity: 0
    };
    killFeed = Array.from({
        length: $r
    }, () => ({
        text: "",
        color: "#000000",
        offset: 0,
        opacity: 0,
        ticker: Number.MAX_VALUE
    }));
    ammo = {
        current: 0,
        remaining: 0,
        displayCurrent: !1,
        displayRemaining: !1
    };
    interaction = {
        type: 0,
        text: "",
        key: "",
        usable: !1
    };
    weapons = Array.from({
        length: O.WeaponSlot.Count
    }, (e, t) => ({
        slot: t,
        type: "",
        ammo: 0,
        equipped: !1,
        selectable: !1,
        opacity: 0,
        width: 0,
        ticker: 0,
        bind: Io[t],
        bindStr: ""
    }));
    scopes = di.map(e => ({
        type: e,
        visible: !1,
        equipped: !1,
        selectable: !1
    }));
    loot = Zr().map(e => ({
        type: e,
        count: 0,
        maximum: 0,
        selectable: !1,
        width: 0,
        ticker: 0
    }));
    perks = Array.from({
        length: Xr
    }, () => ({
        type: "",
        droppable: !1,
        width: 0,
        ticker: 0,
        pulse: !1
    }));
    gear = pi.map(e => ({
        type: e,
        item: "",
        selectable: !1,
        width: 0,
        ticker: 0,
        rot: 0
    }));
    health = O.player.health;
    boost = 0;
    downed = !1
}
class Mo {
    constructor(e, t) {
        this.localization = e,
        this.inputBinds = t;
        for (let a = 0; a < $r; a++) {
            const l = `ui-killfeed-${a}`;
            let h = te(l);
            if (!h) {
                h = document.createElement("div"),
                h.id = l,
                h.classList.add("killfeed-div");
                const p = document.createElement("div");
                p.classList.add("killfeed-text"),
                h.appendChild(p),
                this.dom.killFeed.div.appendChild(h)
            }
            this.dom.killFeed.lines.push({
                line: h,
                text: h.firstElementChild
            })
        }
        for (let a = 0; a < O.WeaponSlot.Count; a++) {
            const l = te(`ui-weapon-id-${a + 1}`)
              , h = {
                div: l,
                type: l.getElementsByClassName("ui-weapon-name")[0],
                number: l.getElementsByClassName("ui-weapon-number")[0],
                image: l.getElementsByClassName("ui-weapon-image")[0],
                ammo: l.getElementsByClassName("ui-weapon-ammo-counter")[0]
            };
            this.dom.weapons.push(h)
        }
        for (let a = 0; a < di.length; a++) {
            const l = di[a]
              , h = {
                scopeType: l,
                div: te(`ui-scope-${l}`)
            };
            this.dom.scopes.push(h)
        }
        for (let a = Zr(), l = 0; l < a.length; l++) {
            const h = a[l]
              , p = te(`ui-loot-${h}`);
            if (p) {
                const c = {
                    lootType: h,
                    div: p,
                    count: p.getElementsByClassName("ui-loot-count")[0],
                    image: p.getElementsByClassName("ui-loot-image")[0],
                    overlay: p.getElementsByClassName("ui-loot-overlay")[0]
                };
                this.dom.loot.push(c)
            }
        }
        for (let a = 0; a < pi.length; a++) {
            const l = pi[a]
              , h = te(`ui-armor-${l}`)
              , p = {
                gearType: l,
                div: h,
                level: h.getElementsByClassName("ui-armor-level")[0],
                image: h.getElementsByClassName("ui-armor-image")[0]
            };
            this.dom.gear.push(p)
        }
        for (let a = 0; a < Xr; a++) {
            const l = te(`ui-perk-${a}`)
              , h = {
                perkType: "",
                div: l,
                divTitle: l.getElementsByClassName("tooltip-title")[0],
                divDesc: l.getElementsByClassName("tooltip-desc")[0],
                image: l.getElementsByClassName("ui-armor-image")[0]
            };
            this.dom.perks.push(h)
        }
        const i = (a, l, h) => {
            this.eventListeners.push({
                event: a,
                elem: l,
                fn: h
            }),
            l.addEventListener(a, h)
        }
          , r = (a, l, h, p) => {
            this.itemActions.push({
                action: a,
                type: l,
                data: h,
                div: p,
                actionQueued: !1,
                actionTime: 0
            })
        }
        ;
        for (let a = 0; a < this.dom.weapons.length; a++)
            r("use", "weapon", a, this.dom.weapons[a].div),
            r("drop", "weapon", a, this.dom.weapons[a].div);
        for (let a = 0; a < this.dom.scopes.length; a++) {
            const l = this.dom.scopes[a];
            r("use", "scope", l.scopeType, l.div),
            l.scopeType != "1xscope" && r("drop", "loot", l.scopeType, l.div)
        }
        for (let a = 0; a < this.dom.loot.length; a++) {
            const l = this.dom.loot[a]
              , h = U[l.lootType];
            (h.type == "heal" || h.type == "boost") && r("use", "loot", l.lootType, l.div),
            r("drop", "loot", l.lootType, l.div)
        }
        for (let a = 0; a < this.dom.gear.length; a++) {
            const l = this.dom.gear[a];
            l.gearType != "backpack" && r("drop", "loot", l.gearType, l.div)
        }
        for (let a = 0; a < this.dom.perks.length; a++)
            r("drop", "perk", a, this.dom.perks[a].div);
        for (let a = 0; a < this.itemActions.length; a++) {
            const l = this.itemActions[a];
            i("mousedown", l.div, h => {
                (l.action == "use" && mr(h) || l.action == "drop" && hr(h)) && (h.stopPropagation(),
                l.actionQueued = !0)
            }
            ),
            i("mouseup", l.div, h => {
                l.actionQueued && (l.action == "use" && mr(h) || l.action == "drop" && hr(h)) && (h.stopPropagation(),
                this.pushAction(l),
                l.actionQueued = !1)
            }
            ),
            i("touchstart", l.div, h => {
                h.changedTouches.length > 0 && (h.stopPropagation(),
                l.actionQueued = !0,
                l.actionTime = new Date().getTime(),
                l.touchOsId = h.changedTouches[0].identifier)
            }
            ),
            i("touchend", l.div, h => {
                new Date().getTime() - l.actionTime < nr && l.actionQueued && l.action == "use" && this.pushAction(l),
                l.actionQueued = !1
            }
            ),
            i("touchcancel", l.div, h => {
                l.actionQueued = !1
            }
            )
        }
        const s = document.getElementById("cvs");
        this.clearQueuedItemActions = () => {
            for (let a = 0; a < this.itemActions.length; a++)
                this.itemActions[a].actionQueued = !1;
            D.touch && s.focus()
        }
        ,
        window.addEventListener("mouseup", this.clearQueuedItemActions),
        window.addEventListener("focus", this.clearQueuedItemActions),
        this.onKeyUp = a => {
            const l = a.which || a.keyCode
              , h = this.inputBinds.getBind(F.Fullscreen);
            h && l == h.code && Z.toggleFullScreen()
        }
        ,
        window.addEventListener("keyup", this.onKeyUp)
    }
    oldState = new cr;
    newState = new cr;
    frameCount = 0;
    dom = {
        debugButton: te("ui-debug-button"),
        emoteButton: te("ui-emote-button"),
        menu: {
            touchStyles: te("btn-touch-styles"),
            aimLine: te("btn-game-aim-line")
        },
        rareLootMessage: {
            icon: te("ui-perk-message-image-icon"),
            imageWrapper: te("ui-perk-message-image-wrapper"),
            wrapper: te("ui-perk-message-wrapper"),
            name: te("ui-perk-message-name"),
            desc: te("ui-perk-message-acquired")
        },
        pickupMessage: te("ui-pickup-message"),
        killMessage: {
            div: te("ui-kills"),
            text: te("ui-kill-text"),
            count: te("ui-kill-count")
        },
        killFeed: {
            div: te("ui-killfeed-contents"),
            lines: []
        },
        weapons: [],
        ammo: {
            current: te("ui-current-clip"),
            remaining: te("ui-remaining-ammo"),
            reloadButton: te("ui-reload-button-container")
        },
        interaction: {
            div: te("ui-interaction"),
            key: te("ui-interaction-press"),
            text: te("ui-interaction-description")
        },
        health: {
            inner: te("ui-health-actual"),
            depleted: te("ui-health-depleted")
        },
        boost: {
            div: te("ui-boost-counter"),
            bars: [te("ui-boost-counter-0").firstElementChild, te("ui-boost-counter-1").firstElementChild, te("ui-boost-counter-2").firstElementChild, te("ui-boost-counter-3").firstElementChild]
        },
        scopes: [],
        loot: [],
        gear: [],
        perks: []
    };
    rareLootMessageQueue = [];
    uiEvents = [];
    eventListeners = [];
    clearQueuedItemActions;
    onKeyUp;
    itemActions = [];
    TNCQd() {
        for (let e = 0; e < this.eventListeners.length; e++) {
            const t = this.eventListeners[e];
            t.elem.removeEventListener(t.event, t.fn)
        }
        window.removeEventListener("focus", this.clearQueuedItemActions),
        window.removeEventListener("mouseup", this.clearQueuedItemActions),
        window.removeEventListener("keyup", this.onKeyUp)
    }
    pushAction(e) {
        this.uiEvents.push({
            action: e.action,
            type: e.type,
            data: e.data
        })
    }
    flushInput() {
        this.uiEvents = []
    }
    pprlB(e, t, i, r, s, a, l) {
        const h = this.newState;
        if (h.mobile = D.mobile,
        h.touch = D.touch,
        h.touch)
            for (let P = 0; P < this.itemActions.length; P++) {
                const _ = this.itemActions[P];
                if (_.actionQueued && _.action == "drop") {
                    const T = new Date().getTime();
                    T - _.actionTime >= nr && (this.pushAction(_),
                    _.actionTime = T,
                    _.actionQueued = !1)
                }
            }
        if (h.rareLootMessage.ticker >= h.rareLootMessage.duration && this.rareLootMessageQueue.length > 0) {
            const P = this.rareLootMessageQueue.shift();
            h.rareLootMessage.lootType = P,
            h.rareLootMessage.ticker = 0,
            h.rareLootMessage.duration = this.rareLootMessageQueue.length > 0 ? 2 : 4,
            h.rareLootMessage.opacity = 0
        }
        h.rareLootMessage.ticker += e;
        const p = h.rareLootMessage.ticker
          , c = h.rareLootMessage.duration;
        h.rareLootMessage.opacity = 1 - k.smoothstep(p, c - .2, c),
        h.pickupMessage.ticker += e;
        const d = h.pickupMessage.ticker
          , w = h.pickupMessage.duration;
        h.pickupMessage.opacity = k.smoothstep(d, 0, .2) * (1 - k.smoothstep(d, w, w + .2)) * (1 - h.rareLootMessage.opacity),
        h.killMessage.ticker += e;
        const f = h.killMessage.ticker
          , S = h.killMessage.duration;
        h.killMessage.opacity = (1 - k.smoothstep(f, S - .2, S)) * (1 - h.rareLootMessage.opacity);
        let g = 0;
        for (let P = 0; P < h.killFeed.length; P++) {
            const _ = h.killFeed[P];
            _.ticker += e;
            const T = _.ticker;
            _.offset = g,
            _.opacity = k.smoothstep(T, 0, .25) * (1 - k.smoothstep(T, 6, 6.5)),
            g += k.min(T / .25, 1),
            D.mobile && (_.opacity = T < 6.5 ? 1 : 0)
        }
        h.health = t.GoI.mSk ? 0 : k.max(t.TVKb.icN, 1),
        h.boost = t.TVKb.ntd,
        h.downed = t.GoI.GXEH;
        let x = 0
          , C = null
          , v = !0;
        if (t.canInteract(a)) {
            let P = null
              , _ = 0;
            const T = a.WUiyA.MrrhcR();
            for (let G = 0; G < T.length; G++) {
                const W = T[G];
                if (W.active && !W.dead && y.sameLayer(W.layer, t.layer)) {
                    const E = W.getInteraction();
                    if (E) {
                        const R = j.intersectCircle(W.collider, t.GoI.CYoYrL, E.rad + t.XZe);
                        R && R.pen >= _ && (P = W,
                        _ = R.pen)
                    }
                }
            }
            P && (x = 4,
            C = P,
            v = !0);
            const N = s.getClosestLoot();
            if (N && !t.GoI.GXEH) {
                const G = U[N.type]
                  , W = t.MoWXLE(O.WeaponSlot.Primary)
                  , E = t.MoWXLE(O.WeaponSlot.Secondary)
                  , R = W && E
                  , Y = G.type != "gun" || !R || t.dyIoZK() == "gun";
                let Q = !1;
                (h.touch && G.type == "helmet" && t.ilLxF() == G.level && N.type != t.GoI.HOwJt || G.type == "chest" && t.cxw() == G.level && N.type != t.GoI.eWzCNt) && (Q = !0),
                (Y || D.uiLayout == D.UiLayout.Sm) && (x = 2,
                C = N),
                v = Y && (!h.touch || G.type == "gun" || G.type == "melee" || G.type == "outfit" || G.type == "perk" || Q)
            }
            const A = t.dhMGuW("self_revive");
            if (t.MTbq.type == le.None && (!t.GoI.GXEH || A)) {
                const G = r.getPlayerInfo(t.__id).teamId
                  , W = r.playerPool.MrrhcR();
                for (let E = 0; E < W.length; E++) {
                    const R = W[E];
                    if (R.active) {
                        const Y = r.getPlayerInfo(R.__id).teamId;
                        (R.__id != t.__id || A) && G == Y && R.GoI.GXEH && !R.GoI.mSk && R.MTbq.type != le.Revive && m.length(m.sub(R.GoI.CYoYrL, t.GoI.CYoYrL)) < O.player.reviveRange && y.sameLayer(R.layer, t.layer) && (x = 3,
                        C = R,
                        v = !0)
                    }
                }
            }
            t.MTbq.type == le.Revive && t.GoI.GXEH && !A && (x = 0,
            C = null,
            v = !1),
            (t.MTbq.type == le.UseItem || t.MTbq.type == le.Revive && (!t.GoI.GXEH || A)) && !i && (x = 1,
            C = null,
            v = !0)
        }
        h.interaction.type = x,
        h.interaction.text = this.getInteractionText(x, C, t),
        h.interaction.key = this.getInteractionKey(x),
        h.interaction.usable = v && !i;
        for (let P = 0; P < t.TVKb.BAgcK.length; P++) {
            const _ = t.TVKb.BAgcK[P]
              , T = h.weapons[P];
            T.type = _.type,
            T.ammo = _.ammo,
            P == O.WeaponSlot.Throwable && (T.ammo = t.TVKb.GoDG[_.type] || 0);
            const N = T.equipped;
            T.equipped = P == t.TVKb.kTJ,
            T.selectable = (_.type != "" || P == 0 || P == 1) && !i;
            const A = T.equipped ? 1 : .6
              , G = A - T.opacity
              , W = k.min(G, k.sign(G) * e / .15);
            T.opacity = k.clamp(T.opacity + W, 0, 1),
            D.mobile && (T.opacity = A),
            T.type == "bugle" && T.ammo == 0 && (T.opacity = .25),
            T.ticker += e,
            (!T.equipped || !N) && (T.ticker = 0),
            this.frameCount < 2 && (T.ticker = 1);
            const E = k.min(T.ticker / .09, Math.PI)
              , R = Math.sin(E);
            T.width = R < .001 ? 0 : R,
            D.mobile && (T.width = 0);
            const Y = l.getBind(T.bind);
            T.bindStr = Y ? Y.toString() : ""
        }
        const b = h.weapons[t.TVKb.kTJ]
          , M = U[b.type]
          , I = b.ammo
          , B = M.type == "gun" ? M.ammoInfinite || t.dhMGuW("endless_ammo") && !M.ignoreEndlessAmmo ? Number.MAX_VALUE : t.TVKb.GoDG[M.ammo] : 0;
        h.ammo.current = I,
        h.ammo.remaining = B,
        h.ammo.displayCurrent = M.type != "melee",
        h.ammo.displayRemaining = B > 0;
        for (let P = 0; P < h.scopes.length; P++) {
            const _ = h.scopes[P];
            _.visible = t.TVKb.GoDG[_.type] > 0,
            _.equipped = _.visible && t.TVKb.jhYNi == _.type,
            _.selectable = _.visible && !i
        }
        for (let P = t.DJG(), _ = 0; _ < h.loot.length; _++) {
            const T = h.loot[_]
              , N = T.count;
            T.count = t.TVKb.GoDG[T.type] || 0,
            T.maximum = O.bagSizes[T.type][P],
            T.selectable = T.count > 0 && !i,
            T.count > N && (T.ticker = 0),
            this.frameCount < 2 && (T.ticker = 1),
            T.ticker += e;
            const A = k.min(T.ticker / .05, Math.PI)
              , G = Math.sin(A);
            T.width = G < .001 ? 0 : G,
            D.mobile && (T.width = 0)
        }
        for (let P = 0; P < h.gear.length; P++) {
            const _ = h.gear[P];
            let T = "";
            _.type == "chest" ? T = t.GoI.eWzCNt : _.type == "helmet" ? T = t.GoI.HOwJt : _.type == "backpack" && (T = t.GoI.sNKESh) == "backpack00" && (T = "");
            const N = _.item;
            _.item = T,
            _.selectable = T != "" && !i,
            N != _.item && (_.ticker = 0),
            this.frameCount < 2 && (_.ticker = 1),
            _.ticker += e;
            const A = k.min(_.ticker / .05, Math.PI)
              , G = Math.sin(A);
            _.width = G < .001 ? 0 : G,
            D.mobile && (_.width = 0)
        }
        for (let P = 0; P < h.perks.length; P++) {
            const _ = h.perks[P];
            if (t.perks.length > P) {
                const T = t.perks[P];
                _.type = T.type,
                _.droppable = T.droppable,
                T.isNew && (_.ticker = 0),
                this.frameCount < 2 && (_.ticker = 1),
                _.ticker += e;
                const N = k.min(_.ticker / .05, Math.PI)
                  , A = Math.sin(N);
                _.width = A < .001 ? 0 : A,
                D.mobile && (_.width = 0),
                _.pulse = !D.mobile && _.ticker < 4
            } else
                _.type = ""
        }
        const z = ki(this.oldState, this.newState, this.frameCount++ == 0);
        this.render(z, this.newState),
        bi(this.newState, this.oldState)
    }
    render(e, t) {
        const i = this.dom;
        if (e.touch && (i.interaction.key.style.backgroundImage = t.touch ? "url('img/gui/tap.svg')" : "none",
        t.touch && (i.interaction.key.innerHTML = ""),
        i.menu.touchStyles.style.display = t.touch ? "flex" : "none",
        i.menu.aimLine.style.display = t.touch ? "block" : "none",
        i.ammo.reloadButton.style.display = t.touch ? "block" : "none",
        i.emoteButton.style.display = t.touch ? "block" : "none",
        i.debugButton && (i.debugButton.style.display = t.touch ? "block" : "none")),
        e.rareLootMessage.lootType) {
            const r = t.rareLootMessage.lootType
              , s = U[r];
            if (s && s.type == "xp") {
                const p = this.localization.translate("game-xp-drop-desc");
                i.rareLootMessage.desc.innerHTML = `+${s.xp} ${p}`
            } else
                i.rareLootMessage.desc.innerHTML = "";
            const a = s?.lootImg?.border ? `url(img/loot/${s.lootImg.border.slice(0, -4)}.svg)` : "none";
            i.rareLootMessage.imageWrapper.style.backgroundImage = a;
            const l = Z.getSvgFromGameType(r);
            i.rareLootMessage.icon.style.backgroundImage = l ? `url('${l}')` : "none";
            const h = this.localization.translate(`game-${r}`);
            i.rareLootMessage.name.innerHTML = h
        }
        e.rareLootMessage.opacity && (i.rareLootMessage.wrapper.style.opacity = String(t.rareLootMessage.opacity)),
        e.pickupMessage.message && (i.pickupMessage.innerHTML = t.pickupMessage.message),
        e.pickupMessage.opacity && (i.pickupMessage.style.opacity = String(t.pickupMessage.opacity)),
        (e.killMessage.text || e.killMessage.count) && (i.killMessage.text.innerHTML = t.killMessage.text,
        i.killMessage.count.innerHTML = t.killMessage.count),
        e.killMessage.opacity && (i.killMessage.div.style.opacity = String(t.killMessage.opacity));
        for (let r = 0; r < e.killFeed.length; r++) {
            const s = e.killFeed[r]
              , a = i.killFeed.lines[r]
              , l = t.killFeed[r];
            if (s.text && (a.text.innerHTML = l.text),
            s.offset) {
                const h = D.uiLayout != D.UiLayout.Sm || D.tablet ? 35 : 15;
                a.line.style.top = `${Math.floor(l.offset * h)}px`
            }
            s.color && (a.text.style.color = l.color),
            s.opacity && (a.line.style.opacity = String(l.opacity))
        }
        if (e.health || e.downed) {
            const r = [{
                health: 100,
                color: [179, 179, 179]
            }, {
                health: 100,
                color: [255, 255, 255]
            }, {
                health: 75,
                color: [255, 255, 255]
            }, {
                health: 75,
                color: [255, 158, 158]
            }, {
                health: 25,
                color: [255, 82, 82]
            }, {
                health: 25,
                color: [255, 0, 0]
            }, {
                health: 0,
                color: [255, 0, 0]
            }];
            let s = 0;
            const a = Math.ceil(t.health);
            for (; r[s].health > a && s < r.length - 1; )
                s++;
            const l = r[k.max(s - 1, 0)]
              , h = r[s]
              , p = k.delerp(t.health, l.health, h.health);
            let c = [Math.floor(k.lerp(p, l.color[0], h.color[0])), Math.floor(k.lerp(p, l.color[1], h.color[1])), Math.floor(k.lerp(p, l.color[2], h.color[2]))];
            t.downed && (c = [255, 0, 0]),
            i.health.inner.style.backgroundColor = `rgba(${c[0]}, ${c[1]}, ${c[2]}, 1.0)`,
            i.health.inner.style.width = `${t.health}%`,
            i.health.depleted.style.width = `${t.health}%`,
            i.health.depleted.style.display = t.health > 0 ? "block" : "none",
            t.health > 25 ? i.health.inner.classList.remove("ui-bar-danger") : i.health.inner.classList.add("ui-bar-danger")
        }
        if (e.boost) {
            const r = O.player.boostBreakpoints;
            let s = 0;
            for (let a = 0; a < r.length; a++)
                s += r[a];
            for (let a = t.boost / 100, l = 0; l < i.boost.bars.length; l++) {
                const h = r[l] / s
                  , p = k.clamp(a / h, 0, 1);
                a = k.max(a - h, 0),
                i.boost.bars[l].style.width = `${p * 100}%`
            }
            i.boost.div.style.opacity = String(t.boost == 0 ? 0 : 1)
        }
        e.interaction.type && (i.interaction.div.style.display = t.interaction.type == 0 ? "none" : "flex"),
        e.interaction.text && (i.interaction.text.innerHTML = t.interaction.text),
        e.interaction.key && (i.interaction.key.innerHTML = t.touch ? "" : t.interaction.key,
        i.interaction.key.className = i.interaction.key.innerHTML.length > 1 ? "ui-interaction-small" : "ui-interaction-large"),
        e.interaction.usable && (i.interaction.key.style.display = t.interaction.usable ? "block" : "none");
        for (let r = 0; r < e.weapons.length; r++) {
            const s = e.weapons[r]
              , a = i.weapons[r]
              , l = t.weapons[r];
            if (s.type) {
                let h = ""
                  , p = "";
                const c = U[l.type];
                c && (h = this.localization.translate(`game-hud-${l.type}`) || this.localization.translate(`game-${l.type}`),
                p = Z.getCssTransformFromGameType(l.type)),
                a.type.innerHTML = h,
                a.image.src = Z.getSvgFromGameType(l.type),
                a.image.style.display = c ? "inline" : "none",
                a.image.style.transform = p
            }
            if (s.equipped && (a.div.style.backgroundColor = l.equipped ? "rgba(0, 0, 0, 0.4)" : "rgba(0, 0, 0, 0)"),
            s.selectable && (a.div.style.pointerEvents = l.type != "" || l.selectable ? "auto" : "none"),
            s.width) {
                const h = k.lerp(l.width, 83.33, 100);
                a.div.style.width = `${h}%`
            }
            s.opacity && (a.div.style.opacity = String(l.opacity)),
            s.ammo && a.ammo && (a.ammo.innerHTML = String(l.ammo),
            a.ammo.style.display = l.ammo > 0 ? "block" : "none"),
            s.bindStr && (a.number.innerHTML = l.bindStr[0] || "")
        }
        if (e.ammo.current) {
            const r = t.ammo.current;
            i.ammo.current.innerHTML = String(r),
            i.ammo.current.style.color = r > 0 ? "white" : "red"
        }
        if (e.ammo.remaining) {
            const r = t.ammo.remaining;
            i.ammo.remaining.innerHTML = String(r == Number.MAX_VALUE ? "&#8734;" : r),
            i.ammo.remaining.style.color = r != 0 ? "white" : "red"
        }
        e.ammo.displayCurrent && (i.ammo.current.style.opacity = String(t.ammo.displayCurrent ? 1 : 0)),
        e.ammo.displayRemaining && (i.ammo.remaining.style.opacity = String(t.ammo.displayRemaining ? 1 : 0),
        i.ammo.reloadButton.style.opacity = String(t.ammo.displayRemaining ? 1 : 0));
        for (let r = 0; r < e.scopes.length; r++) {
            const s = e.scopes[r]
              , a = i.scopes[r]
              , l = t.scopes[r];
            s.visible && (l.visible ? a.div.classList.remove("ui-hidden") : a.div.classList.add("ui-hidden")),
            s.equipped && (l.equipped ? (a.div.classList.add("ui-zoom-active"),
            a.div.classList.remove("ui-zoom-inactive")) : (a.div.classList.remove("ui-zoom-active"),
            a.div.classList.add("ui-zoom-inactive"))),
            s.selectable && (a.div.style.pointerEvents = l.selectable ? "auto" : "none")
        }
        for (let r = 0; r < e.loot.length; r++) {
            const s = e.loot[r]
              , a = i.loot[r]
              , l = t.loot[r];
            if (s && a && l) {
                if ((s.count || s.maximum) && (a.count.innerHTML = String(l.count),
                a.div.style.opacity = String(U[a.lootType].special && l.count == 0 ? 0 : l.count > 0 ? 1 : .25),
                a.div.style.color = l.count == l.maximum ? "#ff9900" : "#ffffff"),
                s.width) {
                    const h = 1 + l.width * .33
                      , p = `scale(${h}, ${h})`;
                    a.image.style.transform = p,
                    a.overlay && (a.overlay.style.transform = p)
                }
                s.selectable && (a.div.style.pointerEvents = l.selectable ? "auto" : "none")
            }
        }
        for (let r = 0; r < e.gear.length; r++) {
            const s = e.gear[r]
              , a = i.gear[r]
              , l = t.gear[r];
            if (s.item) {
                const h = l.item ? U[l.item] : null
                  , p = h ? h.level : 0;
                a.div.style.display = h ? "block" : "none",
                a.level.innerHTML = this.localization.translate(`game-level-${p}`),
                a.level.style.color = p >= 3 ? "#ff9900" : "#ffffff",
                a.image.src = Z.getSvgFromGameType(l.item)
            }
            if (s.selectable && (a.div.style.pointerEvents = l.selectable ? "auto" : "none"),
            s.width) {
                const h = 1 + l.width * .33;
                let p = `scale(${h}, ${h})`;
                const c = U[l.item];
                c?.lootImg.rot !== void 0 && (p += ` rotate(${c.lootImg.rot}rad)`),
                a.image.style.transform = p
            }
        }
        for (let r = 0; r < e.perks.length; r++) {
            const s = e.perks[r]
              , a = i.perks[r]
              , l = t.perks[r];
            if (s.type && (a.perkType = l.type,
            a.divTitle.innerHTML = this.localization.translate(`game-${l.type}`),
            a.divDesc.innerHTML = this.localization.translate(`game-${l.type}-desc`),
            a.div.style.display = l.type ? "block" : "none",
            a.image.src = l.type ? Z.getSvgFromGameType(l.type) : ""),
            s.droppable && (l.droppable ? (a.div.classList.add("ui-outline-hover"),
            a.div.classList.remove("ui-perk-no-drop")) : (a.div.classList.remove("ui-outline-hover"),
            a.div.classList.add("ui-perk-no-drop"))),
            s.pulse && (l.pulse ? a.div.classList.add("ui-perk-pulse") : a.div.classList.remove("ui-perk-pulse")),
            s.width) {
                const h = 1 + l.width * .33;
                a.image.style.transform = `scale(${h}, ${h})`
            }
        }
    }
    displayPickupMessage(e) {
        const t = this.newState.pickupMessage;
        t.message = this.getPickupMessageText(e),
        t.ticker = 0,
        t.duration = 3
    }
    displayKillMessage(e, t) {
        const i = this.newState.killMessage;
        i.text = e,
        i.count = t,
        i.ticker = 0,
        i.duration = 7
    }
    hideKillMessage() {
        this.newState.killMessage.ticker = k.max(this.newState.killMessage.ticker, this.newState.killMessage.duration - .2)
    }
    addRareLootMessage(e, t) {
        t && (this.newState.rareLootMessage.ticker = this.newState.rareLootMessage.duration,
        this.rareLootMessageQueue = []),
        this.rareLootMessageQueue.push(e)
    }
    removeRareLootMessage(e) {
        const t = this.rareLootMessageQueue.indexOf(e);
        t >= 0 && this.rareLootMessageQueue.splice(t, 1),
        this.newState.rareLootMessage.lootType == e && (this.newState.rareLootMessage.ticker = this.newState.rareLootMessage.duration)
    }
    getRareLootMessageText(e) {
        return U[e] ? `Acquired perk: ${this.localization.translate(`game-${e}`)}` : ""
    }
    addKillFeedMessage(e, t) {
        const i = this.newState.killFeed
          , r = i[i.length - 1];
        r.text = e,
        r.color = t,
        r.ticker = 0,
        i.sort( (s, a) => s.ticker - a.ticker)
    }
    getKillFeedText(e, t, i, r, s) {
        switch (r) {
        case ft.Player:
            return `${t} ${this.localization.translate(s ? "game-knocked-out" : "game-killed")} ${e} ${this.localization.translate("game-with")} ${this.localization.translate(`game-${i}`)}`;
        case ft.Bleeding:
            {
                const a = this.localization.translate(t ? "game-finally-killed" : "game-finally-bled-out");
                return t ? `${t} ${a} ${e}` : `${e} ${a}`
            }
        case ft.Gas:
            {
                let a, l;
                return s ? (a = this.localization.translate("game-the-red-zone"),
                l = this.localization.translate("game-knocked-out")) : l = this.localization.translate(t ? "game-finally-killed" : "game-died-outside"),
                a ? `${a} ${l} ${e}` : `${e} ${l}`
            }
        case ft.Airdrop:
            {
                const a = ce[i]
                  , l = this.localization.translate("game-the-air-drop")
                  , h = s ? this.localization.translate("game-knocked-out") : a && !a.airdropCrate ? this.localization.translate("game-killed") : this.localization.translate("game-crushed");
                return `${l} ${h} ${e}`
            }
        case ft.Airstrike:
            {
                const a = this.localization.translate(s ? "game-knocked-out" : "game-killed");
                return t ? `${t} ${a} ${e} ${this.localization.translate("game-with")} ${this.localization.translate("game-an-air-strike")}` : `${this.localization.translate("game-the-air-strike")} ${a} ${e}`
            }
        default:
            return ""
        }
    }
    getKillFeedColor(e, t, i, r) {
        return r ? "#efeeee" : e == t ? "#d1777c" : e == i ? "#00bfff" : "#efeeee"
    }
    getRoleKillFeedColor(e, t, i) {
        const r = U[e];
        return r?.killFeed?.color ? r.killFeed.color : Z.colorToHexString(i.getTeamColor(t))
    }
    getRoleTranslation(e, t) {
        let i = `game-${e}`;
        return e == "leader" && (i = t == 1 ? "game-red-leader" : "game-blue-leader"),
        this.localization.translate(i)
    }
    getRoleAnnouncementText(e, t) {
        return `${this.localization.translate("game-youve-been-promoted-to")} ${this.getRoleTranslation(e, t)}!`
    }
    getRoleAssignedKillFeedText(e, t, i) {
        const r = this.getRoleTranslation(e, t);
        return `${i} ${this.localization.translate("game-promoted-to")} ${r}!`
    }
    getRoleKilledKillFeedText(e, t, i) {
        const r = this.getRoleTranslation(e, t);
        return i ? `${i} ${this.localization.translate("game-killed")} ${r}!` : `${r} ${this.localization.translate("game-is-dead")}!`
    }
    getKillText(e, t, i, r, s, a, l, h, p) {
        const c = r && !s
          , d = p ? e : this.localization.translate("game-you").toUpperCase()
          , w = c ? "game-knocked-out" : i ? "game-killed" : "game-finally-killed"
          , f = this.localization.translate(w)
          , S = a ? p ? this.localization.translate("game-themselves") : this.localization.translate("game-yourself").toUpperCase() : t
          , g = this.localization.translate(h == O.DamageType.Airstrike ? "game-an-air-strike" : `game-${l}`)
          , x = this.localization.translate("game-with");
        return g && (i || c) ? `${d} ${f} ${S} ${x} ${g}` : `${d} ${f} ${S}`
    }
    getKillCountText(e) {
        return `${e} ${this.localization.translate(e != 1 ? "game-kills" : "game-kill")}`
    }
    getDownedText(e, t, i, r, s) {
        const a = s ? t : this.localization.translate("game-you").toUpperCase();
        let l = e;
        l || (r == O.DamageType.Gas ? l = this.localization.translate("game-the-red-zone") : r == O.DamageType.Airdrop ? l = this.localization.translate("game-the-air-drop") : r == O.DamageType.Airstrike && (l = this.localization.translate("game-the-air-strike")));
        let h = this.localization.translate(`game-${i}`);
        e && r == O.DamageType.Airstrike && (h = this.localization.translate("game-an-air-strike"));
        const p = this.localization.translate("game-with");
        return h ? `${l} knocked ${a} out ${p} ${h}` : `${l} knocked ${a} out`
    }
    getPickupMessageText(e) {
        const t = {
            [rt.Full]: "game-not-enough-space",
            [rt.AlreadyOwned]: "game-item-already-owned",
            [rt.AlreadyEquipped]: "game-item-already-equipped",
            [rt.BetterItemEquipped]: "game-better-item-equipped",
            [rt.GunCannotFire]: "game-gun-cannot-fire"
        }
          , i = t[e] || t[rt.Full];
        return this.localization.translate(i)
    }
    getInteractionText(e, t, i) {
        switch (e) {
        case 0:
            return "";
        case 1:
            return this.localization.translate("game-cancel");
        case 3:
            return t && i && (t == i || i.downed) && i.dhMGuW("self_revive") ? this.localization.translate("game-revive-self") : this.localization.translate("game-revive-teammate");
        case 4:
            {
                const r = t.getInteraction();
                return `${this.localization.translate(r.action)} ${this.localization.translate(r.object)}`
            }
        case 2:
            {
                const r = t;
                let s = this.localization.translate(`game-${r.type}`) || r.type;
                return r.count > 1 && (s += ` (${r.count})`),
                s
            }
        default:
            return ""
        }
    }
    getInteractionKey(e) {
        let t = null;
        switch (e) {
        case 1:
            t = this.inputBinds.getBind(F.Cancel);
            break;
        case 2:
            t = this.inputBinds.getBind(F.Loot) || this.inputBinds.getBind(F.Interact);
            break;
        case 4:
            t = this.inputBinds.getBind(F.Use) || this.inputBinds.getBind(F.Interact);
            break;
        case 3:
            t = this.inputBinds.getBind(F.Revive) || this.inputBinds.getBind(F.Interact);
            break;
        case 0:
        default:
            t = this.inputBinds.getBind(F.Use)
        }
        return t ? t.toString() : "<Unbound>"
    }
}
function To() {
    const o = {
        "ui-loot-bandage": "img/loot/loot-medical-bandage.svg",
        "ui-loot-healthkit": "img/loot/loot-medical-healthkit.svg",
        "ui-loot-soda": "img/loot/loot-medical-soda.svg",
        "ui-loot-painkiller": "img/loot/loot-medical-pill.svg",
        "ui-loot-9mm": "img/loot/loot-ammo-box.svg",
        "ui-loot-12gauge": "img/loot/loot-ammo-box.svg",
        "ui-loot-762mm": "img/loot/loot-ammo-box.svg",
        "ui-loot-556mm": "img/loot/loot-ammo-box.svg",
        "ui-loot-50AE": "img/loot/loot-ammo-box.svg",
        "ui-loot-308sub": "img/loot/loot-ammo-box.svg",
        "ui-loot-flare": "img/loot/loot-ammo-box.svg",
        "ui-loot-45acp": "img/loot/loot-ammo-box.svg"
    };
    for (const [e,t] of Object.entries(o))
        te(e).getElementsByClassName("ui-loot-image")[0].src = t;
    te("mag-glass-white").src = "img/gui/mag-glass.svg",
    te("ui-minimize-img").src = "img/gui/minimize.svg"
}
class Co {
    constructor(e, t, i, r, s, a, l, h, p, c, d) {
        this.Ftc = e,
        this.hfxWMp = t,
        this.FoQuUL = i,
        this.kwtr = r,
        this.NRlj = s,
        this.deLdPl = a,
        this.VGr = l,
        this.wUYv = h,
        this.wKMS = p,
        this.onJoin = c,
        this.onQuit = d,
        this.Ftc = e,
        this.hfxWMp = t,
        this.wUYv = h,
        this.FoQuUL = i,
        this.kwtr = r,
        this.NRlj = s,
        this.deLdPl = a,
        this.VGr = l,
        this.wKMS = p
    }
    initialized = !1;
    teamMode = Ge.Solo;
    victoryMusic = null;
    iQIg = null;
    connecting = !1;
    connected = !1;
    PFrw;
    ciS;
    emr;
    Wnrg;
    WOy;
    kWDFmW;
    noEG;
    bvNL;
    hXLsv;
    xwICl;
    awaD;
    QaR;
    ntGiOh;
    mFT;
    aRbBqf;
    HxBh;
    RKj;
    rpiAeT;
    AFD;
    GEMO;
    jqpu;
    obdQQa;
    wnFZ;
    hVzUUm;
    CPcPu;
    WyTcZ;
    Ofghwi;
    HwI;
    tjXwYe;
    DnZ;
    fZn;
    UXEZv;
    iMBsyQ;
    zBJ;
    ZFKKVA;
    ALYMHi;
    rLi;
    Nzc;
    SWly;
    VnBV;
    ICmG;
    editor;
    debugHUD;
    seq;
    seqInFlight;
    seqSendTime;
    pings;
    debugPingTime;
    lastUpdateTime;
    updateIntervals;
    tryJoinGame(e, t, i, r) {
        if (!this.connecting && !this.connected && !this.initialized) {
            this.iQIg && (this.iQIg.onerror = function() {}
            ,
            this.iQIg.onopen = function() {}
            ,
            this.iQIg.onmessage = function() {}
            ,
            this.iQIg.onclose = function() {}
            ,
            this.iQIg.close(),
            this.iQIg = null),
            this.connecting = !0,
            this.connected = !1;
            try {
                this.iQIg = new WebSocket(e),
                this.iQIg.binaryType = "arraybuffer",
                this.iQIg.onerror = s => {
                    this.iQIg?.close()
                }
                ,
                this.iQIg.onopen = () => {
                    this.connecting = !1,
                    this.connected = !0;
                    const s = this.kwtr.get("playerName")
                      , a = new ks;
                    a.protocol = O.protocolVersion,
                    a.matchPriv = t,
                    a.questPriv = i,
                    a.name = s,
                    a.useTouch = D.touch,
                    a.isMobile = D.mobile || window.mobile,
                    a.bot = !1,
                    a.loadout = this.kwtr.get("loadout"),
                    this.gbOT(ge.Join, a, 8192)
                }
                ,
                this.iQIg.onmessage = s => {
                    const a = new Ri(s.data);
                    for (; ; ) {
                        const l = a.deserializeMsgType();
                        if (l == ge.None)
                            break;
                        this.JRyXfu(l, a.getStream()),
                        a.stream.readAlignToNextByte()
                    }
                    this.debugHUD?.netInGraph.addEntry(a.stream.buffer.byteLength)
                }
                ,
                this.iQIg.onclose = () => {
                    const s = this.rpiAeT?.displayingStats
                      , a = this.connecting
                      , l = this.connected;
                    if (this.connecting = !1,
                    this.connected = !1,
                    a)
                        r();
                    else if (l && !this.tjXwYe && !s) {
                        const h = this.Ofghwi || "index-host-closed";
                        this.onQuit(h)
                    }
                }
            } catch (s) {
                console.error(s),
                this.connecting = !1,
                this.connected = !1,
                r()
            }
        }
    }
    init() {
        this.hVzUUm = this.Ftc.renderer.type == qt.CANVAS,
        this.PFrw = new go(this.NRlj,this.kwtr),
        this.ciS = new Br,
        this.emr = new Hr(this,this.hVzUUm),
        this.Wnrg = new Nr(this.emr),
        this.WOy = new Gr,
        this.kWDFmW = new Fr(this.WOy),
        this.noEG = new jr,
        this.bvNL = new Aa,
        this.hXLsv = new Ua,
        this.xwICl = new oo,
        this.awaD = new Wa,
        this.QaR = new io(this.hfxWMp),
        this.ntGiOh = new La,
        this.mFT = new Yr,
        this.aRbBqf = new Ra,
        this.HxBh = new Va,
        this.RKj = new wa(this.hVzUUm),
        this.rpiAeT = new _o(this,this.hfxWMp,this.Wnrg,this.QaR,this.FoQuUL,this.hVzUUm,this.PFrw,this.deLdPl,this.VGr),
        this.AFD = new Mo(this.FoQuUL,this.deLdPl),
        this.GEMO = new pa(this.hfxWMp,this.rpiAeT,this.noEG,this.ciS,this.kWDFmW),
        window.CustomLocalPlayer = this.GEMO,
        this.jqpu = new lo,
        this.debugHUD = new ha(this.kwtr);
        const e = {
            [ye.Player]: this.noEG.playerPool,
            [ye.Obstacle]: this.kWDFmW.WUiyA,
            [ye.Loot]: this.HxBh.lootPool,
            [ye.DeadBody]: this.aRbBqf.deadBodyPool,
            [ye.Building]: this.kWDFmW.nnNJE,
            [ye.Structure]: this.kWDFmW.ZIeX,
            [ye.Decal]: this.WOy.decalPool,
            [ye.Projectile]: this.xwICl.projectilePool,
            [ye.Smoke]: this.mFT.zSaLA,
            [ye.Airdrop]: this.ntGiOh.airdropPool
        };
        this.obdQQa = new Or;
        for (const i in e)
            e.hasOwnProperty(i) && this.obdQQa.zOgn(i, e[i]);
        this.wnFZ = new Me;
        const t = [this.kWDFmW.display.ground, this.emr.layers[0], this.emr.ground, this.emr.layers[1], this.emr.layers[2], this.emr.layers[3], this.wnFZ, this.RKj.gasRenderer.display, this.PFrw.container, this.GEMO.container, this.rpiAeT.container, this.rpiAeT.mgR.container, this.GEMO.indContainer, this.debugHUD.container];
        for (let i = 0; i < t.length; i++) {
            const r = t[i];
            r && (r.interactiveChildren = !1,
            this.Ftc.stage.addChild(r))
        }
        this.Ofghwi = "",
        this.HwI = !1,
        this.tjXwYe = !1,
        this.DnZ = !1,
        this.fZn = 0,
        this.UXEZv = new Gi,
        this.iMBsyQ = 0,
        this.zBJ = 0,
        this.CPcPu = !1,
        this.WyTcZ = 0,
        this.ZFKKVA = 0,
        this.ALYMHi = 0,
        this.rLi = null,
        this.Nzc = !1,
        this.SWly = 1,
        this.VnBV = 1,
        this.ICmG = !1,
        this.seq = 0,
        this.seqInFlight = !1,
        this.seqSendTime = 0,
        this.pings = [],
        this.updateIntervals = [],
        this.lastUpdateTime = 0,
        this.debugPingTime = 0,
        this.ciS.fns(this.kwtr.get("screenShake")),
        this.ciS.Kozelh(this.kwtr.get("interpolation")),
        this.ciS.BrlY(this.kwtr.get("localRotation")),
        this.noEG.anonPlayerNames = this.kwtr.get("anonPlayerNames"),
        this.initialized = !0
    }
    free() {
        if (this.iQIg && (this.iQIg.onmessage = function() {}
        ,
        this.iQIg.close(),
        this.iQIg = null),
        this.connecting = !1,
        this.connected = !1,
        this.initialized)
            for (this.initialized = !1,
            this.CPcPu = !1,
            this.WyTcZ = 0,
            this.GEMO.TNCQd(),
            this.AFD.TNCQd(),
            this.rpiAeT.TNCQd(),
            this.RKj.TNCQd(),
            this.ntGiOh.TNCQd(),
            this.QaR.TNCQd(),
            this.kWDFmW.TNCQd(),
            this.Wnrg.TNCQd(),
            this.emr.TNCQd(),
            this.NRlj.TNCQd(),
            this.hfxWMp.stopAll(); this.Ftc.stage.children.length > 0; ) {
                const e = this.Ftc.stage.children[0];
                this.Ftc.stage.removeChild(e),
                e.destroy({
                    children: !0
                })
            }
    }
    warnPageReload() {
        return this.initialized && this.HwI && !this.DnZ && !this.rpiAeT.displayingStats
    }
    update(e) {
        this.debugHUD.pprlB(e, this);
        let t;
        t = {};
        const i = this.mFT.kfRNx;
        this.HwI && (this.iMBsyQ += e),
        this.noEG.pprlB(e, this.ALYMHi, this.emr, this.Wnrg, this.ciS, this.kWDFmW, this.deLdPl, this.hfxWMp, this.AFD, this.GEMO.wheelKeyTriggered, this.rpiAeT.displayingStats, this.DnZ),
        this.updateAmbience(),
        this.ciS.CYoYrL = m.copy(this.rLi.WVGtr),
        this.ciS.PTwQy();
        const r = this.rLi.eWzz()
          , s = k.min(this.ciS.eXqeW, this.ciS.rkdRrQ)
          , a = k.max(this.ciS.eXqeW, this.ciS.rkdRrQ)
          , l = k.max(s * (16 / 9), a);
        this.ciS.SWly = l * .5 / (r * this.ciS.oPtaok);
        const h = this.rLi.zoomFast ? 3 : 2
          , p = this.rLi.zoomFast ? 3 : 1.4
          , c = this.ciS.SWly > this.ciS.abrnAk ? h : p;
        this.ciS.abrnAk = k.lerp(e * c, this.ciS.abrnAk, this.ciS.SWly),
        this.hfxWMp.cameraPos = m.copy(this.ciS.CYoYrL),
        this.NRlj.keyPressed(H.Escape) && this.rpiAeT.toggleEscMenu(),
        (this.deLdPl.isBindPressed(F.ToggleMap) || this.NRlj.keyPressed(H.G) && !this.deLdPl.isKeyBound(H.G)) && this.rpiAeT.displayMapLarge(!1),
        this.deLdPl.isBindPressed(F.CycleUIMode) && this.rpiAeT.cycleVisibilityMode(),
        (this.deLdPl.isBindPressed(F.HideUI) || this.NRlj.keyPressed(H.Escape) && !this.rpiAeT.hudVisible) && this.rpiAeT.cycleHud();
        const d = this.rLi.CYoYrL
          , w = m.create(this.rLi.CYoYrL.x + (this.NRlj.mousePos.x - this.ciS.eXqeW * .5) / this.ciS.YLH(), this.rLi.CYoYrL.y + (this.ciS.rkdRrQ * .5 - this.NRlj.mousePos.y) / this.ciS.YLH())
          , f = m.sub(w, d);
        let S = m.length(f)
          , g = S > 1e-5 ? m.div(f, S) : m.create(1, 0);
        this.GEMO.wheelDisplayed && (S = this.UXEZv.toMouseLen,
        g = this.UXEZv.toMouseDir);
        const x = new Gi;
        if (x.seq = this.seq,
        !this.DnZ) {
            if (D.touch) {
                const _ = this.PFrw.getTouchMovement(this.ciS)
                  , T = this.PFrw.getAimMovement(this.rLi, this.ciS);
                let N = m.copy(T.aimMovement.toAimDir);
                if (this.PFrw.turnDirTicker -= e,
                this.PFrw.moveDetected && !T.touched) {
                    const W = m.normalizeSafe(_.toMoveDir, m.create(1, 0))
                      , E = this.PFrw.turnDirTicker < 0 ? W : T.aimMovement.toAimDir;
                    this.PFrw.setAimDir(E),
                    N = E
                }
                T.touched && (this.PFrw.turnDirTicker = this.PFrw.turnDirCooldown),
                this.PFrw.moveDetected ? (x.touchMoveDir = m.normalizeSafe(_.toMoveDir, m.create(1, 0)),
                x.touchMoveLen = Math.round(k.clamp(_.toMoveLen, 0, 1) * 255)) : x.touchMoveLen = 0,
                x.touchMoveActive = !0;
                const A = T.aimMovement.toAimLen
                  , G = k.clamp(A / this.PFrw.padPosRange, 0, 1) * O.player.throwableMaxMouseDist;
                x.toMouseLen = G,
                x.toMouseDir = N
            } else
                x.moveLeft = this.deLdPl.isBindDown(F.MoveLeft) || this.NRlj.keyDown(H.Left) && !this.deLdPl.isKeyBound(H.Left),
                x.moveRight = this.deLdPl.isBindDown(F.MoveRight) || this.NRlj.keyDown(H.Right) && !this.deLdPl.isKeyBound(H.Right),
                x.moveUp = this.deLdPl.isBindDown(F.MoveUp) || this.NRlj.keyDown(H.Up) && !this.deLdPl.isKeyBound(H.Up),
                x.moveDown = this.deLdPl.isBindDown(F.MoveDown) || this.NRlj.keyDown(H.Down) && !this.deLdPl.isKeyBound(H.Down),
                x.toMouseDir = m.copy(g),
                x.toMouseLen = S;
            x.touchMoveDir = m.normalizeSafe(x.touchMoveDir, m.create(1, 0)),
            x.touchMoveLen = k.clamp(x.touchMoveLen, 0, 255),
            x.toMouseDir = m.normalizeSafe(x.toMouseDir, m.create(1, 0)),
            x.toMouseLen = k.clamp(x.toMouseLen, 0, K.MouseMaxDist),
            x.shootStart = this.deLdPl.isBindPressed(F.Fire) || this.PFrw.shotDetected,
            x.shootHold = this.deLdPl.isBindDown(F.Fire) || this.PFrw.shotDetected,
            x.portrait = this.ciS.eXqeW < this.ciS.rkdRrQ;
            const z = [F.Reload, F.Revive, F.Use, F.Loot, F.Cancel, F.EquipPrimary, F.EquipSecondary, F.EquipThrowable, F.EquipMelee, F.EquipNextWeap, F.EquipPrevWeap, F.EquipLastWeap, F.EquipOtherGun, F.EquipPrevScope, F.EquipNextScope, F.StowWeapons];
            for (let _ = 0; _ < z.length; _++) {
                const T = z[_];
                this.deLdPl.isBindPressed(T) && x.addInput(T)
            }
            if (this.deLdPl.isBindPressed(F.Interact)) {
                const _ = []
                  , T = [F.Revive, F.Use, F.Loot];
                for (let N = 0; N < T.length; N++) {
                    const A = T[N];
                    this.deLdPl.getBind(A) || _.push(A)
                }
                if (_.length == T.length)
                    x.addInput(F.Interact);
                else
                    for (let N = 0; N < _.length; N++)
                        x.addInput(_[N])
            }
            (this.deLdPl.isBindPressed(F.SwapWeapSlots) || this.rpiAeT.swapWeapSlots) && (x.addInput(F.SwapWeapSlots),
            this.rLi.gunSwitchCooldown = 0),
            this.rpiAeT.reloadTouched && x.addInput(F.Reload),
            this.rpiAeT.interactionTouched && (x.addInput(F.Interact),
            x.addInput(F.Cancel));
            for (let _ = 0; _ < this.AFD.uiEvents.length; _++) {
                const T = this.AFD.uiEvents[_];
                if (T.action == "use")
                    if (T.type == "weapon") {
                        const A = {
                            [Gt.Primary]: F.EquipPrimary,
                            [Gt.Secondary]: F.EquipSecondary,
                            [Gt.Melee]: F.EquipMelee,
                            [Gt.Throwable]: F.EquipThrowable
                        }[T.data];
                        A && x.addInput(A)
                    } else
                        x.useItem = T.data
            }
            this.deLdPl.isBindPressed(F.UseBandage) ? x.useItem = "bandage" : this.deLdPl.isBindPressed(F.UseHealthKit) ? x.useItem = "healthkit" : this.deLdPl.isBindPressed(F.UseSoda) ? x.useItem = "soda" : this.deLdPl.isBindPressed(F.UsePainkiller) && (x.useItem = "painkiller");
            let P = !1;
            for (let _ = 0; _ < this.AFD.uiEvents.length; _++) {
                const T = this.AFD.uiEvents[_];
                if (T.action == "drop") {
                    const N = new xs;
                    if (T.type == "weapon") {
                        const A = T.data
                          , G = this.rLi.TVKb.BAgcK;
                        N.item = G[A].type,
                        N.weapIdx = A
                    } else if (T.type == "perk") {
                        const A = T.data
                          , G = this.rLi.GoI.MkHZUh
                          , W = G.length > A ? G[A] : null;
                        W?.droppable && (N.item = W.type)
                    } else {
                        const A = T.data == "helmet" ? this.rLi.GoI.HOwJt : T.data == "chest" ? this.rLi.GoI.eWzCNt : T.data;
                        N.item = A
                    }
                    N.item != "" && (this.gbOT(ge.DropItem, N, 128),
                    N.item != "fists" && (P = !0))
                }
            }
            if (P && this.hfxWMp.playSound("loot_drop_01", {
                channel: "ui"
            }),
            this.rpiAeT.roleSelected) {
                const _ = new Bs;
                _.role = this.rpiAeT.roleSelected,
                this.gbOT(ge.PerkModeRoleSelect, _, 128),
                this.kwtr.set("perkModeRole", _.role)
            }
        }
        const C = this.rpiAeT.specBegin
          , v = this.rpiAeT.specNext || this.DnZ && this.NRlj.keyPressed(H.Right)
          , b = this.rpiAeT.specPrev || this.DnZ && this.NRlj.keyPressed(H.Left)
          , M = this.NRlj.keyPressed(H.Right) || this.NRlj.keyPressed(H.Left);
        if (C || this.DnZ && v || b) {
            const z = new Os;
            z.specBegin = C,
            z.specNext = v,
            z.specPrev = b,
            z.specForce = M,
            this.gbOT(ge.Spectate, z, 128)
        }
        this.rpiAeT.specBegin = !1,
        this.rpiAeT.specNext = !1,
        this.rpiAeT.specPrev = !1,
        this.rpiAeT.reloadTouched = !1,
        this.rpiAeT.interactionTouched = !1,
        this.rpiAeT.swapWeapSlots = !1,
        this.rpiAeT.roleSelected = "";
        let I = !1;
        for (const z in x)
            if (x.hasOwnProperty(z)) {
                if (z == "inputs")
                    I = x[z].length > 0;
                else if (z == "toMouseDir" || z == "touchMoveDir") {
                    const P = k.clamp(m.dot(x[z], this.UXEZv[z]), -1, 1);
                    I = k.rad2deg(Math.acos(P)) > .1
                } else
                    z == "toMouseLen" ? I = Math.abs(this.UXEZv[z] - x[z]) > .5 : z == "shootStart" ? I = x[z] || x[z] != this.UXEZv[z] : this.UXEZv[z] != x[z] && (I = !0);
                if (I)
                    break
            }
        this.fZn -= e,
        (I || this.fZn < 0) && (this.seqInFlight || (this.seq = (this.seq + 1) % 256,
        this.seqSendTime = Date.now(),
        this.seqInFlight = !0,
        x.seq = this.seq),
        this.gbOT(ge.Input, x, 128),
        this.fZn = 1,
        this.UXEZv = x),
        this.AFD.flushInput(),
        this.kWDFmW.pprlB(e, this.rLi, this.noEG, this.Wnrg, this.hfxWMp, this.wUYv, this.emr, this.ciS, i, t),
        this.HxBh.pprlB(e, this.rLi, this.kWDFmW, this.hfxWMp, this.ciS, t),
        this.bvNL.pprlB(e, this.noEG, this.kWDFmW, this.ciS, this.rLi, this.emr, this.Wnrg, this.hfxWMp),
        this.hXLsv.pprlB(e, this.kWDFmW, this.rLi, this.emr),
        this.xwICl.pprlB(e, this.Wnrg, this.hfxWMp, this.rLi, this.kWDFmW, this.emr, this.ciS),
        this.awaD.pprlB(e, this.kWDFmW, this.noEG, this.ciS, this.Wnrg, this.hfxWMp, t),
        this.ntGiOh.pprlB(e, this.rLi, this.ciS, this.kWDFmW, this.Wnrg, this.emr, this.hfxWMp),
        this.QaR.pprlB(e, this.ciS, this.rLi, this.kWDFmW, this.emr),
        this.mFT.pprlB(e, this.ciS, this.rLi, this.kWDFmW, this.emr),
        this.jqpu.pprlB(e, this.ALYMHi, this.noEG, this.Wnrg, this.hfxWMp),
        this.Wnrg.pprlB(e, this.ciS),
        this.aRbBqf.pprlB(e, this.noEG, this.rLi, this.kWDFmW, this.ciS, this.emr),
        this.WOy.pprlB(e, this.ciS, this.emr),
        this.rpiAeT.pprlB(e, this.rLi, this.kWDFmW, this.RKj, this.noEG, this.ciS, this.teamMode, this.kWDFmW.factionMode),
        this.AFD.pprlB(e, this.rLi, this.DnZ, this.noEG, this.HxBh, this.kWDFmW, this.deLdPl),
        this.GEMO.pprlB(e, this.ZFKKVA, this.rLi, this.teamMode, this.aRbBqf, this.kWDFmW, this.emr, this.NRlj, this.deLdPl, this.DnZ),
        this.PFrw.pprlB(e, this.rLi, this.kWDFmW, this.ciS, this.emr),
        this.emr.pprlB(e, this.ciS, this.kWDFmW);
        for (let z = 0; z < this.GEMO.newPings.length; z++) {
            const P = this.GEMO.newPings[z]
              , _ = new Fi;
            _.type = P.type,
            _.pos = P.pos,
            _.isPing = !0,
            this.gbOT(ge.Emote, _, 128)
        }
        this.GEMO.newPings = [];
        for (let z = 0; z < this.GEMO.newEmotes.length; z++) {
            const P = this.GEMO.newEmotes[z]
              , _ = new Fi;
            _.type = P.type,
            _.pos = P.pos,
            _.isPing = !1,
            this.gbOT(ge.Emote, _, 128)
        }
        this.GEMO.newEmotes = [];
        const B = Date.now();
        if (B > this.debugPingTime) {
            let z = function(A, G) {
                return (" ".repeat(G) + A).slice(-G)
            };
            this.debugPingTime = B + 2e4;
            const P = this.pings.sort( (A, G) => A - G)
              , _ = P.length;
            if (_ > 0) {
                const A = P[Math.floor(_ * .5)]
                  , G = P[Math.floor(_ * .95)]
                  , W = P[_ - 1];
                console.log("Ping     min:", z(P[0].toFixed(2), 7), "med:", z(A.toFixed(2), 7), "p95:", z(G.toFixed(2), 7), "max:", z(W.toFixed(2), 7))
            }
            this.pings = [];
            const T = this.updateIntervals.sort( (A, G) => A - G)
              , N = T.length;
            if (N > 0) {
                const A = T[Math.floor(N * .5)]
                  , G = T[Math.floor(N * .95)]
                  , W = T[N - 1];
                console.log("Interval min:", z(T[0].toFixed(2), 7), "med:", z(A.toFixed(2), 7), "p95:", z(G.toFixed(2), 7), "max:", z(W.toFixed(2), 7))
            }
            this.updateIntervals = []
        }
        this.YOuM(e, t)
    }
    YOuM(e, t) {
        const i = this.kWDFmW.mapLoaded ? this.kWDFmW.getMapDef().biome.colors.grass : 8433481;
        this.Ftc.renderer.background.color = i,
        this.noEG.YOuM(this.ciS, t),
        this.bvNL.YOuM(this.ciS),
        this.hXLsv.YOuM(this.ciS),
        this.WOy.YOuM(this.ciS, t, this.rLi.layer),
        this.kWDFmW.YOuM(this.ciS),
        this.RKj.YOuM(e, this.ciS),
        this.rpiAeT.YOuM(this.rLi.CYoYrL, this.RKj, this.kWDFmW, this.QaR),
        this.GEMO.YOuM(this.ciS)
    }
    updateAmbience() {
        const e = this.rLi.CYoYrL;
        let t = 0
          , i = 0
          , r = 1;
        if (this.kWDFmW.isInOcean(e))
            t = 1,
            i = 0,
            r = 0;
        else {
            const s = this.kWDFmW.distanceToShore(e);
            t = k.delerp(s, 50, 0),
            i = 0;
            for (let a = 0; a < this.kWDFmW.terrain.rivers.length; a++) {
                const l = this.kWDFmW.terrain?.rivers[a]
                  , h = l.spline.getClosestTtoPoint(e)
                  , p = l.spline.getPos(h)
                  , c = m.length(m.sub(p, e))
                  , d = l.waterWidth + 2
                  , w = k.delerp(c, 30 + d, d)
                  , f = k.clamp(l.waterWidth / 8, .25, 1);
                i = k.max(w * f, i)
            }
            this.rLi.layer == 1 && (i = 0),
            r = 1
        }
        this.wUYv.getTrack("wind").weight = r,
        this.wUYv.getTrack("river").weight = i,
        this.wUYv.getTrack("waves").weight = t
    }
    resize() {
        this.ciS.eXqeW = D.screenWidth,
        this.ciS.rkdRrQ = D.screenHeight,
        this.kWDFmW.resize(this.Ftc.renderer, this.hVzUUm),
        this.RKj.resize(),
        this.rpiAeT.resize(this.kWDFmW, this.ciS),
        this.PFrw.resize(),
        this.emr.resize(this.kWDFmW, this.ciS)
    }
    HTG(e) {
        const t = {
            audioManager: this.hfxWMp,
            renderer: this.emr,
            particleBarn: this.Wnrg,
            map: this.kWDFmW,
            smokeBarn: this.mFT,
            decalBarn: this.WOy
        };
        e.activePlayerIdDirty && (this.ALYMHi = e.activePlayerId);
        for (let s = 0; s < e.playerInfos.length; s++)
            this.noEG.setPlayerInfo(e.playerInfos[s]);
        for (let s = 0; s < e.deletedPlayerIds.length; s++) {
            const a = e.deletedPlayerIds[s];
            this.noEG.deletePlayerInfo(a)
        }
        if ((e.playerInfos.length > 0 || e.deletedPlayerIds.length > 0) && this.noEG.recomputeTeamData(),
        e.playerStatusDirty) {
            const s = this.noEG.getPlayerInfo(this.ALYMHi).teamId;
            this.noEG.updatePlayerStatus(s, e.playerStatus, this.kWDFmW.factionMode)
        }
        if (e.groupStatusDirty) {
            const s = this.noEG.getPlayerInfo(this.ALYMHi).groupId;
            this.noEG.updateGroupStatus(s, e.groupStatus)
        }
        for (let s = 0; s < e.delObjIds.length; s++)
            this.obdQQa.tISqH(e.delObjIds[s]);
        for (let s = 0; s < e.fullObjects.length; s++) {
            const a = e.fullObjects[s];
            this.obdQQa.XRD(a.__type, a.__id, a, t)
        }
        for (let s = 0; s < e.partObjects.length; s++) {
            const a = e.partObjects[s];
            this.obdQQa.FxLc(a.__id, a, t)
        }
        this.DnZ = this.ALYMHi != this.ZFKKVA,
        this.rLi = this.noEG.getPlayerById(this.ALYMHi),
        this.rLi.OHmFdh(e.activePlayerData),
        e.activePlayerData.weapsDirty && (this.rpiAeT.weapsDirty = !0),
        this.DnZ && (this.rpiAeT.setSpectateTarget(this.ALYMHi, this.ZFKKVA, this.teamMode, this.noEG),
        this.PFrw.hideAll()),
        this.rLi.layer = this.rLi.GoI.ioiPGC,
        this.emr.setActiveLayer(this.rLi.layer),
        this.hfxWMp.activeLayer = this.rLi.layer;
        const i = this.rLi.isUnderground(this.kWDFmW);
        this.emr.setUnderground(i),
        this.hfxWMp.underground = i,
        e.gasDirty && this.RKj.setFullState(e.gasT, e.gasData, this.rpiAeT),
        e.gasTDirty && this.RKj.setProgress(e.gasT);
        for (let s = 0; s < e.bullets.length; s++) {
            const a = e.bullets[s];
            Da(a, this.bvNL, this.hXLsv, this.noEG, this.emr),
            a.shotFx && this.jqpu.addShot(a)
        }
        for (let s = 0; s < e.explosions.length; s++) {
            const a = e.explosions[s];
            this.awaD.addExplosion(a.type, a.pos, a.layer)
        }
        for (let s = 0; s < e.emotes.length; s++) {
            const a = e.emotes[s];
            a.isPing ? this.GEMO.addPing(a, this.kWDFmW.factionMode) : this.GEMO.addEmote(a)
        }
        this.QaR.updatePlanes(e.planes, this.kWDFmW);
        for (let s = 0; s < e.airstrikeZones.length; s++)
            this.QaR.createAirstrikeZone(e.airstrikeZones[s]);
        if (this.rpiAeT.updateMapIndicators(e.mapIndicators),
        e.killLeaderDirty) {
            const s = Z.htmlEscape(this.noEG.getPlayerName(e.killLeaderId, this.ALYMHi, !0));
            this.rpiAeT.updateKillLeader(e.killLeaderId, s, e.killLeaderKills, this.kWDFmW.getMapDef().gameMode)
        }
        const r = Date.now();
        if (this.zBJ++,
        e.ack == this.seq && this.seqInFlight) {
            this.seqInFlight = !1;
            const s = r - this.seqSendTime;
            this.debugHUD.pingGraph.addEntry(s),
            this.pings.push(s)
        }
        if (this.lastUpdateTime > 0) {
            const s = r - this.lastUpdateTime;
            this.ciS.BYJsJa = s / 1e3,
            this.updateIntervals.push(s)
        }
        this.lastUpdateTime = r
    }
    JRyXfu(e, t) {
        switch (e) {
        case ge.Joined:
            {
                const i = new bs;
                i.deserialize(t),
                this.onJoin(),
                this.teamMode = i.teamMode,
                this.ZFKKVA = i.playerId,
                this.Nzc = !0,
                this.GEMO.updateEmoteWheel(i.emotes),
                i.started || this.rpiAeT.setWaitingForPlayers(!0),
                this.rpiAeT.removeAds(),
                this.victoryMusic && (this.victoryMusic.stop(),
                this.victoryMusic = null),
                document.hasFocus() || this.hfxWMp.playSound("notification_start_01", {
                    channel: "ui"
                }),
                oe.gamePlayStart();
                break
            }
        case ge.Map:
            {
                const i = new As;
                if (i.deserialize(t),
                this.kWDFmW.loadMap(i, this.ciS, this.hVzUUm, this.Wnrg),
                this.wKMS.loadMapAssets(this.kWDFmW.mapName),
                this.kWDFmW.renderMap(this.Ftc.renderer, this.hVzUUm),
                this.bvNL.onMapLoad(this.kWDFmW),
                this.Wnrg.onMapLoad(this.kWDFmW),
                this.rpiAeT.onMapLoad(this.kWDFmW, this.ciS),
                this.kWDFmW.perkMode) {
                    const r = this.kwtr.get("perkModeRole");
                    this.rpiAeT.setRoleMenuOptions(r, this.kWDFmW.getMapDef().gameMode.perkModeRoles),
                    this.rpiAeT.setRoleMenuActive(!0)
                } else
                    this.rpiAeT.setRoleMenuActive(!1);
                break
            }
        case ge.Update:
            {
                const i = new $s;
                i.deserialize(t, this.obdQQa),
                this.HwI = !0,
                this.HTG(i);
                break
            }
        case ge.Kill:
            {
                const i = new vs;
                i.deserialize(t);
                const r = i.itemSourceType || i.mapSourceType
                  , s = this.noEG.getPlayerInfo(this.ALYMHi).teamId
                  , a = i.downed && !i.killed || i.damageType == O.DamageType.Gas || i.damageType == O.DamageType.Bleeding || i.damageType == O.DamageType.Airdrop
                  , l = this.noEG.getPlayerInfo(i.targetId)
                  , h = this.noEG.getPlayerInfo(i.killCreditId)
                  , p = a ? h : this.noEG.getPlayerInfo(i.killerId);
                let c = this.noEG.getPlayerName(l.playerId, this.ALYMHi, !0)
                  , d = this.noEG.getPlayerName(h.playerId, this.ALYMHi, !0)
                  , w = this.noEG.getPlayerName(p.playerId, this.ALYMHi, !0);
                if (c = Z.htmlEscape(c),
                d = Z.htmlEscape(d),
                w = Z.htmlEscape(w),
                i.killCreditId == this.ALYMHi) {
                    const g = i.killerId == this.ALYMHi
                      , x = i.killerId == i.targetId || i.killCreditId == i.targetId
                      , C = this.AFD.getKillText(d, c, g, i.downed, i.killed, x, r, i.damageType, this.DnZ)
                      , v = i.killed && !x ? this.AFD.getKillCountText(i.killerKills) : "";
                    this.AFD.displayKillMessage(C, v)
                } else if (i.targetId == this.ALYMHi && i.downed && !i.killed) {
                    const g = this.AFD.getDownedText(d, c, r, i.damageType, this.DnZ);
                    this.AFD.displayKillMessage(g, "")
                }
                i.killCreditId == this.ZFKKVA && i.killed && this.rpiAeT.setLocalKills(i.killerKills);
                const f = this.AFD.getKillFeedText(c, p.teamId ? w : "", r, i.damageType, i.downed && !i.killed)
                  , S = this.AFD.getKillFeedColor(s, l.teamId, h.teamId, this.kWDFmW.factionMode);
                this.AFD.addKillFeedMessage(f, S),
                i.killed && this.noEG.addDeathEffect(i.targetId, i.killerId, this.hfxWMp, this.Wnrg),
                i.damageType == O.DamageType.Player && this.bvNL.createBulletHit(this.noEG, i.targetId, this.hfxWMp);
                break
            }
        case ge.RoleAnnouncement:
            {
                const i = new Rs;
                i.deserialize(t);
                const r = Pr[i.role];
                if (!r)
                    break;
                const s = this.noEG.getPlayerInfo(i.playerId)
                  , a = Z.htmlEscape(this.noEG.getPlayerName(i.playerId, this.ALYMHi, !0));
                if (i.assigned) {
                    if (r.sound?.assign && (i.role == "kill_leader" && this.kWDFmW.getMapDef().gameMode.spookyKillSounds ? this.hfxWMp.playGroup("kill_leader_assigned", {
                        channel: "ui"
                    }) : (i.role == "kill_leader" || !this.kWDFmW.perkMode || this.ZFKKVA == i.playerId) && this.hfxWMp.playSound(r.sound.assign, {
                        channel: "ui"
                    })),
                    this.kWDFmW.perkMode && this.ZFKKVA == i.playerId && this.rpiAeT.setRoleMenuActive(!1),
                    r.killFeed?.assign) {
                        const l = this.AFD.getRoleAssignedKillFeedText(i.role, s.teamId, a)
                          , h = this.AFD.getRoleKillFeedColor(i.role, s.teamId, this.noEG);
                        this.AFD.addKillFeedMessage(l, h)
                    }
                    if (r.announce && this.ZFKKVA == i.playerId) {
                        const l = this.AFD.getRoleAnnouncementText(i.role, s.teamId);
                        this.rpiAeT.displayAnnouncement(l.toUpperCase())
                    }
                } else if (i.killed) {
                    if (r.killFeed?.dead) {
                        let l = Z.htmlEscape(this.noEG.getPlayerName(i.killerId, this.ALYMHi, !0));
                        i.playerId == i.killerId && (l = "");
                        const h = this.AFD.getRoleKilledKillFeedText(i.role, s.teamId, l)
                          , p = this.AFD.getRoleKillFeedColor(i.role, s.teamId, this.noEG);
                        this.AFD.addKillFeedMessage(h, p)
                    }
                    r.sound?.dead && (this.kWDFmW.getMapDef().gameMode.spookyKillSounds ? this.hfxWMp.playGroup("kill_leader_dead", {
                        channel: "ui"
                    }) : this.hfxWMp.playSound(r.sound.dead, {
                        channel: "ui"
                    }))
                }
                break
            }
        case ge.PlayerStats:
            {
                const i = new wi;
                i.deserialize(t),
                this.rpiAeT.setLocalStats(i.playerStats),
                this.rpiAeT.showTeamAd(i.playerStats, this.AFD);
                break
            }
        case ge.Stats:
            {
                t.readString();
                break
            }
        case ge.GameOver:
            {
                const i = new zs;
                i.deserialize(t),
                this.tjXwYe = i.gameOver;
                const r = this.noEG.getPlayerInfo(this.ZFKKVA).teamId;
                for (let s = 0; s < i.playerStats.length; s++) {
                    const a = i.playerStats[s];
                    if (a.playerId == this.ZFKKVA) {
                        this.rpiAeT.setLocalStats(a);
                        break
                    }
                }
                this.rpiAeT.showStats(i.playerStats, i.teamId, i.teamRank, i.winningTeamId, i.gameOver, r, this.teamMode, this.DnZ, this.noEG, this.hfxWMp, this.kWDFmW, this.AFD),
                r == i.winningTeamId && (this.victoryMusic = this.hfxWMp.playSound("menu_music", {
                    channel: "music",
                    delay: 1300,
                    forceStart: !0
                })),
                this.PFrw.hideAll();
                break
            }
        case ge.Pickup:
            {
                const i = new Es;
                if (i.deserialize(t),
                i.type == rt.Success && i.item) {
                    this.rLi.playItemPickupSound(i.item, this.hfxWMp);
                    const r = U[i.item];
                    r && r.type == "xp" && this.AFD.addRareLootMessage(i.item, !0)
                } else
                    this.AFD.displayPickupMessage(i.type);
                break
            }
        case ge.UpdatePass:
            {
                new ms().deserialize(t),
                this.CPcPu = !0,
                this.WyTcZ = 0;
                break
            }
        case ge.AliveCounts:
            {
                const i = new gs;
                i.deserialize(t),
                i.teamAliveCounts.length == 1 ? this.rpiAeT.updatePlayersAlive(i.teamAliveCounts[0]) : i.teamAliveCounts.length >= 2 && (this.rpiAeT.updatePlayersAliveRed(i.teamAliveCounts[0]),
                this.rpiAeT.updatePlayersAliveBlue(i.teamAliveCounts[1]));
                break
            }
        case ge.Disconnect:
            {
                const i = new ys;
                i.deserialize(t),
                this.Ofghwi = i.reason
            }
        }
    }
    gbOT(e, t, i) {
        const r = i || 128
          , s = new Ri(new ArrayBuffer(r));
        s.serializeMsg(e, t),
        this.SjPWZ(s)
    }
    SjPWZ(e) {
        if (this.iQIg && this.iQIg.readyState == this.iQIg.OPEN)
            try {
                this.iQIg.send(e.getBuffer())
            } catch (t) {
                console.error("sendMessageException", t),
                this.iQIg.close()
            }
    }
}
var Mt = {}, ur;
function Po() {
    if (ur)
        return Mt;
    ur = 1,
    Mt.byteLength = l,
    Mt.toByteArray = p,
    Mt.fromByteArray = w;
    for (var o = [], e = [], t = typeof Uint8Array < "u" ? Uint8Array : Array, i = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", r = 0, s = i.length; r < s; ++r)
        o[r] = i[r],
        e[i.charCodeAt(r)] = r;
    e[45] = 62,
    e[95] = 63;
    function a(f) {
        var S = f.length;
        if (S % 4 > 0)
            throw new Error("Invalid string. Length must be a multiple of 4");
        var g = f.indexOf("=");
        g === -1 && (g = S);
        var x = g === S ? 0 : 4 - g % 4;
        return [g, x]
    }
    function l(f) {
        var S = a(f)
          , g = S[0]
          , x = S[1];
        return (g + x) * 3 / 4 - x
    }
    function h(f, S, g) {
        return (S + g) * 3 / 4 - g
    }
    function p(f) {
        var S, g = a(f), x = g[0], C = g[1], v = new t(h(f, x, C)), b = 0, M = C > 0 ? x - 4 : x, I;
        for (I = 0; I < M; I += 4)
            S = e[f.charCodeAt(I)] << 18 | e[f.charCodeAt(I + 1)] << 12 | e[f.charCodeAt(I + 2)] << 6 | e[f.charCodeAt(I + 3)],
            v[b++] = S >> 16 & 255,
            v[b++] = S >> 8 & 255,
            v[b++] = S & 255;
        return C === 2 && (S = e[f.charCodeAt(I)] << 2 | e[f.charCodeAt(I + 1)] >> 4,
        v[b++] = S & 255),
        C === 1 && (S = e[f.charCodeAt(I)] << 10 | e[f.charCodeAt(I + 1)] << 4 | e[f.charCodeAt(I + 2)] >> 2,
        v[b++] = S >> 8 & 255,
        v[b++] = S & 255),
        v
    }
    function c(f) {
        return o[f >> 18 & 63] + o[f >> 12 & 63] + o[f >> 6 & 63] + o[f & 63]
    }
    function d(f, S, g) {
        for (var x, C = [], v = S; v < g; v += 3)
            x = (f[v] << 16 & 16711680) + (f[v + 1] << 8 & 65280) + (f[v + 2] & 255),
            C.push(c(x));
        return C.join("")
    }
    function w(f) {
        for (var S, g = f.length, x = g % 3, C = [], v = 16383, b = 0, M = g - x; b < M; b += v)
            C.push(d(f, b, b + v > M ? M : b + v));
        return x === 1 ? (S = f[g - 1],
        C.push(o[S >> 2] + o[S << 4 & 63] + "==")) : x === 2 && (S = (f[g - 2] << 8) + f[g - 1],
        C.push(o[S >> 10] + o[S >> 4 & 63] + o[S << 2 & 63] + "=")),
        C.join("")
    }
    return Mt
}
var Lo = Po();
const dr = Lr(Lo);
var mi = {
    exports: {}
}, pr;
function Do() {
    return pr || (pr = 1,
    (function(o) {
        (function(e) {
            var t = function(w, f, S) {
                var g = w instanceof ArrayBuffer || typeof Buffer < "u" && w instanceof Buffer;
                if (!g)
                    throw new Error("Must specify a valid ArrayBuffer or Buffer.");
                f = f || 0,
                S = S || w.byteLength || w.length,
                this._view = new Uint8Array(w.buffer || w,f,S),
                this.bigEndian = !1
            };
            t._scratch = new DataView(new ArrayBuffer(8)),
            Object.defineProperty(t.prototype, "buffer", {
                get: function() {
                    return typeof Buffer < "u" ? Buffer.from(this._view.buffer) : this._view.buffer
                },
                enumerable: !0,
                configurable: !1
            }),
            Object.defineProperty(t.prototype, "byteLength", {
                get: function() {
                    return this._view.length
                },
                enumerable: !0,
                configurable: !1
            }),
            t.prototype._setBit = function(w, f) {
                f ? this._view[w >> 3] |= 1 << (w & 7) : this._view[w >> 3] &= ~(1 << (w & 7))
            }
            ,
            t.prototype.getBits = function(w, f, S) {
                var g = this._view.length * 8 - w;
                if (f > g)
                    throw new Error("Cannot get " + f + " bit(s) from offset " + w + ", " + g + " available");
                for (var x = 0, C = 0; C < f; ) {
                    var v = f - C, b = w & 7, M = this._view[w >> 3], I = Math.min(v, 8 - b), B, z;
                    this.bigEndian ? (B = ~(255 << I),
                    z = M >> 8 - I - b & B,
                    x <<= I,
                    x |= z) : (B = ~(255 << I),
                    z = M >> b & B,
                    x |= z << C),
                    w += I,
                    C += I
                }
                return S ? (f !== 32 && x & 1 << f - 1 && (x |= -1 ^ (1 << f) - 1),
                x) : x >>> 0
            }
            ,
            t.prototype.setBits = function(w, f, S) {
                var g = this._view.length * 8 - w;
                if (S > g)
                    throw new Error("Cannot set " + S + " bit(s) from offset " + w + ", " + g + " available");
                for (var x = 0; x < S; ) {
                    var C = S - x, v = w & 7, b = w >> 3, M = Math.min(C, 8 - v), I, B, z;
                    if (this.bigEndian) {
                        I = ~(-1 << M),
                        B = f >> S - x - M & I;
                        var P = 8 - v - M;
                        z = ~(I << P),
                        this._view[b] = this._view[b] & z | B << P
                    } else
                        I = ~(255 << M),
                        B = f & I,
                        f >>= M,
                        z = ~(I << v),
                        this._view[b] = this._view[b] & z | B << v;
                    w += M,
                    x += M
                }
            }
            ,
            t.prototype.getBoolean = function(w) {
                return this.getBits(w, 1, !1) !== 0
            }
            ,
            t.prototype.getInt8 = function(w) {
                return this.getBits(w, 8, !0)
            }
            ,
            t.prototype.getUint8 = function(w) {
                return this.getBits(w, 8, !1)
            }
            ,
            t.prototype.getInt16 = function(w) {
                return this.getBits(w, 16, !0)
            }
            ,
            t.prototype.getUint16 = function(w) {
                return this.getBits(w, 16, !1)
            }
            ,
            t.prototype.getInt32 = function(w) {
                return this.getBits(w, 32, !0)
            }
            ,
            t.prototype.getUint32 = function(w) {
                return this.getBits(w, 32, !1)
            }
            ,
            t.prototype.getFloat32 = function(w) {
                return t._scratch.setUint32(0, this.getUint32(w)),
                t._scratch.getFloat32(0)
            }
            ,
            t.prototype.getFloat64 = function(w) {
                return t._scratch.setUint32(0, this.getUint32(w)),
                t._scratch.setUint32(4, this.getUint32(w + 32)),
                t._scratch.getFloat64(0)
            }
            ,
            t.prototype.setBoolean = function(w, f) {
                this.setBits(w, f ? 1 : 0, 1)
            }
            ,
            t.prototype.setInt8 = t.prototype.setUint8 = function(w, f) {
                this.setBits(w, f, 8)
            }
            ,
            t.prototype.setInt16 = t.prototype.setUint16 = function(w, f) {
                this.setBits(w, f, 16)
            }
            ,
            t.prototype.setInt32 = t.prototype.setUint32 = function(w, f) {
                this.setBits(w, f, 32)
            }
            ,
            t.prototype.setFloat32 = function(w, f) {
                t._scratch.setFloat32(0, f),
                this.setBits(w, t._scratch.getUint32(0), 32)
            }
            ,
            t.prototype.setFloat64 = function(w, f) {
                t._scratch.setFloat64(0, f),
                this.setBits(w, t._scratch.getUint32(0), 32),
                this.setBits(w + 32, t._scratch.getUint32(4), 32)
            }
            ,
            t.prototype.getArrayBuffer = function(w, f) {
                for (var S = new Uint8Array(f), g = 0; g < f; g++)
                    S[g] = this.getUint8(w + g * 8);
                return S
            }
            ;
            var i = function(w, f) {
                return function() {
                    if (this._index + f > this._length)
                        throw new Error("Trying to read past the end of the stream");
                    var S = this._view[w](this._index);
                    return this._index += f,
                    S
                }
            }
              , r = function(w, f) {
                return function(S) {
                    this._view[w](this._index, S),
                    this._index += f
                }
            };
            function s(w, f) {
                return l(w, f, !1)
            }
            function a(w, f) {
                return l(w, f, !0)
            }
            function l(w, f, S) {
                if (f === 0)
                    return "";
                var g = 0
                  , x = []
                  , C = !0
                  , v = !!f;
                for (f || (f = Math.floor((w._length - w._index) / 8)); g < f; ) {
                    var b = w.readUint8();
                    if (b === 0 && (C = !1,
                    !v))
                        break;
                    C && x.push(b),
                    g++
                }
                var M = String.fromCharCode.apply(null, x);
                if (S)
                    try {
                        return decodeURIComponent(escape(M))
                    } catch {
                        return M
                    }
                else
                    return M
            }
            function h(w, f, S) {
                for (var g = S || f.length + 1, x = 0; x < g; x++)
                    w.writeUint8(x < f.length ? f.charCodeAt(x) : 0)
            }
            function p(w, f, S) {
                for (var g = c(f), x = S || g.length + 1, C = 0; C < x; C++)
                    w.writeUint8(C < g.length ? g[C] : 0)
            }
            function c(w) {
                var f = [], S, g;
                for (S = 0; S < w.length; S++)
                    g = w.charCodeAt(S),
                    g <= 127 ? f.push(g) : g <= 2047 ? (f.push(g >> 6 | 192),
                    f.push(g & 63 | 128)) : g <= 65535 ? (f.push(g >> 12 | 224),
                    f.push(g >> 6 & 63 | 128),
                    f.push(g & 63 | 128)) : (f.push(g >> 18 | 240),
                    f.push(g >> 12 & 63 | 128),
                    f.push(g >> 6 & 63 | 128),
                    f.push(g & 63 | 128));
                return f
            }
            var d = function(w, f, S) {
                var g = w instanceof ArrayBuffer || typeof Buffer < "u" && w instanceof Buffer;
                if (!(w instanceof t) && !g)
                    throw new Error("Must specify a valid BitView, ArrayBuffer or Buffer");
                g ? this._view = new t(w,f,S) : this._view = w,
                this._index = 0,
                this._startIndex = 0,
                this._length = this._view.byteLength * 8
            };
            Object.defineProperty(d.prototype, "index", {
                get: function() {
                    return this._index - this._startIndex
                },
                set: function(w) {
                    this._index = w + this._startIndex
                },
                enumerable: !0,
                configurable: !0
            }),
            Object.defineProperty(d.prototype, "length", {
                get: function() {
                    return this._length - this._startIndex
                },
                set: function(w) {
                    this._length = w + this._startIndex
                },
                enumerable: !0,
                configurable: !0
            }),
            Object.defineProperty(d.prototype, "bitsLeft", {
                get: function() {
                    return this._length - this._index
                },
                enumerable: !0,
                configurable: !0
            }),
            Object.defineProperty(d.prototype, "byteIndex", {
                get: function() {
                    return Math.ceil(this._index / 8)
                },
                set: function(w) {
                    this._index = w * 8
                },
                enumerable: !0,
                configurable: !0
            }),
            Object.defineProperty(d.prototype, "buffer", {
                get: function() {
                    return this._view.buffer
                },
                enumerable: !0,
                configurable: !1
            }),
            Object.defineProperty(d.prototype, "view", {
                get: function() {
                    return this._view
                },
                enumerable: !0,
                configurable: !1
            }),
            Object.defineProperty(d.prototype, "bigEndian", {
                get: function() {
                    return this._view.bigEndian
                },
                set: function(w) {
                    this._view.bigEndian = w
                },
                enumerable: !0,
                configurable: !1
            }),
            d.prototype.readBits = function(w, f) {
                var S = this._view.getBits(this._index, w, f);
                return this._index += w,
                S
            }
            ,
            d.prototype.writeBits = function(w, f) {
                this._view.setBits(this._index, w, f),
                this._index += f
            }
            ,
            d.prototype.readBoolean = i("getBoolean", 1),
            d.prototype.readInt8 = i("getInt8", 8),
            d.prototype.readUint8 = i("getUint8", 8),
            d.prototype.readInt16 = i("getInt16", 16),
            d.prototype.readUint16 = i("getUint16", 16),
            d.prototype.readInt32 = i("getInt32", 32),
            d.prototype.readUint32 = i("getUint32", 32),
            d.prototype.readFloat32 = i("getFloat32", 32),
            d.prototype.readFloat64 = i("getFloat64", 64),
            d.prototype.writeBoolean = r("setBoolean", 1),
            d.prototype.writeInt8 = r("setInt8", 8),
            d.prototype.writeUint8 = r("setUint8", 8),
            d.prototype.writeInt16 = r("setInt16", 16),
            d.prototype.writeUint16 = r("setUint16", 16),
            d.prototype.writeInt32 = r("setInt32", 32),
            d.prototype.writeUint32 = r("setUint32", 32),
            d.prototype.writeFloat32 = r("setFloat32", 32),
            d.prototype.writeFloat64 = r("setFloat64", 64),
            d.prototype.readASCIIString = function(w) {
                return s(this, w)
            }
            ,
            d.prototype.readUTF8String = function(w) {
                return a(this, w)
            }
            ,
            d.prototype.writeASCIIString = function(w, f) {
                h(this, w, f)
            }
            ,
            d.prototype.writeUTF8String = function(w, f) {
                p(this, w, f)
            }
            ,
            d.prototype.readBitStream = function(w) {
                var f = new d(this._view);
                return f._startIndex = this._index,
                f._index = this._index,
                f.length = w,
                this._index += w,
                f
            }
            ,
            d.prototype.writeBitStream = function(w, f) {
                f || (f = w.bitsLeft);
                for (var S; f > 0; )
                    S = Math.min(f, 32),
                    this.writeBits(w.readBits(S), S),
                    f -= S
            }
            ,
            d.prototype.readArrayBuffer = function(w) {
                var f = this._view.getArrayBuffer(this._index, w);
                return this._index += w * 8,
                f
            }
            ,
            d.prototype.writeArrayBuffer = function(w, f) {
                this.writeBitStream(new d(w), f * 8)
            }
            ,
            o.exports && (o.exports = {
                BitView: t,
                BitStream: d
            })
        }
        )()
    }
    )(mi)),
    mi.exports
}
var Ao = Do();
const fr = Lr(Ao)
  , Bo = [0, 49345, 49537, 320, 49921, 960, 640, 49729, 50689, 1728, 1920, 51009, 1280, 50625, 50305, 1088, 52225, 3264, 3456, 52545, 3840, 53185, 52865, 3648, 2560, 51905, 52097, 2880, 51457, 2496, 2176, 51265, 55297, 6336, 6528, 55617, 6912, 56257, 55937, 6720, 7680, 57025, 57217, 8e3, 56577, 7616, 7296, 56385, 5120, 54465, 54657, 5440, 55041, 6080, 5760, 54849, 53761, 4800, 4992, 54081, 4352, 53697, 53377, 4160, 61441, 12480, 12672, 61761, 13056, 62401, 62081, 12864, 13824, 63169, 63361, 14144, 62721, 13760, 13440, 62529, 15360, 64705, 64897, 15680, 65281, 16320, 16e3, 65089, 64001, 15040, 15232, 64321, 14592, 63937, 63617, 14400, 10240, 59585, 59777, 10560, 60161, 11200, 10880, 59969, 60929, 11968, 12160, 61249, 11520, 60865, 60545, 11328, 58369, 9408, 9600, 58689, 9984, 59329, 59009, 9792, 8704, 58049, 58241, 9024, 57601, 8640, 8320, 57409, 40961, 24768, 24960, 41281, 25344, 41921, 41601, 25152, 26112, 42689, 42881, 26432, 42241, 26048, 25728, 42049, 27648, 44225, 44417, 27968, 44801, 28608, 28288, 44609, 43521, 27328, 27520, 43841, 26880, 43457, 43137, 26688, 30720, 47297, 47489, 31040, 47873, 31680, 31360, 47681, 48641, 32448, 32640, 48961, 32e3, 48577, 48257, 31808, 46081, 29888, 30080, 46401, 30464, 47041, 46721, 30272, 29184, 45761, 45953, 29504, 45313, 29120, 28800, 45121, 20480, 37057, 37249, 20800, 37633, 21440, 21120, 37441, 38401, 22208, 22400, 38721, 21760, 38337, 38017, 21568, 39937, 23744, 23936, 40257, 24320, 40897, 40577, 24128, 23040, 39617, 39809, 23360, 39169, 22976, 22656, 38977, 34817, 18624, 18816, 35137, 19200, 35777, 35457, 19008, 19968, 36545, 36737, 20288, 36097, 19904, 19584, 35905, 17408, 33985, 34177, 17728, 34561, 18368, 18048, 34369, 33281, 17088, 17280, 33601, 16640, 33217, 32897, 16448];
function wr(o) {
    let e = 0;
    for (let t = 0; t < o.length; t++) {
        const i = o[t];
        e = (Bo[(e ^ i) & 255] ^ e >> 8) & 65535
    }
    return e
}
function ie(o, e) {
    return {
        name: o,
        defaultValue: e
    }
}
function ue(o) {
    return new At(Ze.Key,o)
}
function Sr(o) {
    return new At(Ze.MouseButton,o)
}
function gr(o) {
    return new At(Ze.MouseWheel,o)
}
const Dt = {
    [F.MoveLeft]: ie("Move Left", ue(H.A)),
    [F.MoveRight]: ie("Move Right", ue(H.D)),
    [F.MoveUp]: ie("Move Up", ue(H.W)),
    [F.MoveDown]: ie("Move Down", ue(H.S)),
    [F.Fire]: ie("Fire", Sr(gi.Left)),
    [F.Reload]: ie("Reload", ue(H.R)),
    [F.Cancel]: ie("Cancel", ue(H.X)),
    [F.Interact]: ie("Interact", ue(H.F)),
    [F.Revive]: ie("Revive", null),
    [F.Use]: ie("Open/Use", null),
    [F.Loot]: ie("Loot", null),
    [F.EquipPrimary]: ie("Equip Primary", ue(H.One)),
    [F.EquipSecondary]: ie("Equip Secondary", ue(H.Two)),
    [F.EquipMelee]: ie("Equip Melee", ue(H.Three)),
    [F.EquipThrowable]: ie("Equip Throwable", ue(H.Four)),
    [F.EquipNextWeap]: ie("Equip Next Weapon", gr(yi.Down)),
    [F.EquipPrevWeap]: ie("Equip Previous Weapon", gr(yi.Up)),
    [F.EquipLastWeap]: ie("Equip Last Weapon", ue(H.Q)),
    [F.StowWeapons]: ie("Stow Weapons", ue(H.E)),
    [F.EquipPrevScope]: ie("Equip Previous Scope", null),
    [F.EquipNextScope]: ie("Equip Next Scope", null),
    [F.UseBandage]: ie("Use Bandage", ue(H.Seven)),
    [F.UseHealthKit]: ie("Use Med Kit", ue(H.Eight)),
    [F.UseSoda]: ie("Use Soda", ue(H.Nine)),
    [F.UsePainkiller]: ie("Use Pills", ue(H.Zero)),
    [F.SwapWeapSlots]: ie("Switch Gun Slots", ue(H.T)),
    [F.ToggleMap]: ie("Toggle Map", ue(H.M)),
    [F.CycleUIMode]: ie("Toggle Minimap", ue(H.V)),
    [F.EmoteMenu]: ie("Emote Menu", Sr(gi.Right)),
    [F.TeamPingMenu]: ie("Team Ping Hold", ue(H.C)),
    [F.EquipOtherGun]: ie("Equip Other Gun", null),
    [F.Fullscreen]: ie("Full Screen", ue(H.L)),
    [F.HideUI]: ie("Hide UI", null),
    [F.TeamPingSingle]: ie("Team Ping Menu", null)
};
class Eo {
    constructor(e, t) {
        this.input = e,
        this.config = t,
        this.input = e,
        this.config = t,
        this.loadBinds()
    }
    binds = [];
    boundKeys = {};
    menuHovered = !1;
    toArray() {
        const e = new ArrayBuffer(this.binds.length * 2 + 1)
          , t = new fr.BitStream(e);
        t.writeUint8(1);
        for (let a = 0; a < this.binds.length; a++) {
            const l = this.binds[a]
              , h = l ? l.type : 0
              , p = l ? l.code : 0;
            t.writeBits(h & 3, 2),
            t.writeUint8(p & 255)
        }
        const i = new Uint8Array(e,0,t.byteIndex)
          , r = wr(i)
          , s = new Uint8Array(i.length + 2);
        return s.set(i),
        s[s.length - 2] = r >> 8 & 255,
        s[s.length - 1] = r & 255,
        s
    }
    fromArray(e) {
        let t = new Uint8Array(e);
        if (!t || t.length < 3)
            return !1;
        const i = t[t.length - 2] << 8 | t[t.length - 1];
        if (t = t.slice(0, t.length - 2),
        wr(t) != i)
            return !1;
        const r = new ArrayBuffer(t.length)
          , s = new Uint8Array(r);
        for (let h = 0; h < t.length; h++)
            s[h] = t[h];
        const a = new fr.BitStream(r)
          , l = a.readUint8();
        this.clearAllBinds();
        for (let h = 0; a.length - a.index >= 10; ) {
            const p = h++
              , c = a.readBits(2)
              , d = a.readUint8();
            p >= 0 && p < F.Count && c != Ze.None && this.setBind(p, c != 0 ? new At(c,d) : null)
        }
        return l < 1 && (this.upgradeBinds(l),
        this.saveBinds()),
        !0
    }
    toBase64() {
        return dr.fromByteArray(this.toArray())
    }
    fromBase64(e) {
        let t = !1;
        try {
            t = this.fromArray(dr.toByteArray(e))
        } catch (i) {
            console.error("Error", i)
        }
        return t
    }
    saveBinds() {
        this.config.set("binds", this.toBase64())
    }
    loadBinds() {
        this.fromBase64(this.config.get("binds") || "") || (this.loadDefaultBinds(),
        this.saveBinds())
    }
    upgradeBinds(e) {
        const t = [];
        for (let i = 0; i < t.length; i++) {
            const r = t[i]
              , s = Dt[r].defaultValue;
            for (let a = 0; a < this.binds.length && !this.binds[a]?.equals(s); a++)
                ;
            this.setBind(r, s)
        }
    }
    clearAllBinds() {
        for (let e = 0; e < F.Count; e++)
            this.binds[e] = null;
        this.boundKeys = {}
    }
    setBind(e, t) {
        if (t)
            for (let r = 0; r < this.binds.length; r++)
                this.binds[r]?.equals(t) && (this.binds[r] = null);
        const i = this.binds[e];
        i && i.type == Ze.Key && (this.boundKeys[i.code] = null),
        this.binds[e] = t,
        t && t.type == Ze.Key && (this.boundKeys[t.code] = !0)
    }
    getBind(e) {
        return this.binds[e]
    }
    preventMenuBind(e) {
        return e && this.menuHovered && (e.type == 2 || e.type == 3)
    }
    isKeyBound(e) {
        return this.boundKeys[e]
    }
    isBindPressed(e) {
        const t = this.binds[e];
        return !this.preventMenuBind(t) && t && this.input.isInputValuePressed(t)
    }
    isBindReleased(e) {
        const t = this.binds[e];
        return !this.preventMenuBind(t) && t && this.input.isInputValueReleased(t)
    }
    isBindDown(e) {
        const t = this.binds[e];
        return !this.preventMenuBind(t) && t && this.input.isInputValueDown(t)
    }
    loadDefaultBinds() {
        this.clearAllBinds();
        const e = Object.keys(Dt);
        for (let t = 0; t < e.length; t++) {
            const i = e[t]
              , r = Dt[i];
            this.setBind(parseInt(i), r.defaultValue)
        }
    }
}
class Ro {
    constructor(e, t, i) {
        this.input = e,
        this.inputBinds = t,
        this.localization = i,
        this.input = e,
        this.inputBinds = t,
        u(".js-btn-keybind-restore").on("click", () => {
            this.inputBinds.loadDefaultBinds(),
            this.inputBinds.saveBinds(),
            this.refresh()
        }
        )
    }
    cancelBind() {
        this.input.captureNextInput(null)
    }
    refresh() {
        const e = Object.keys(Dt)
          , t = this.inputBinds.binds
          , i = u(".js-keybind-list");
        i.empty();
        for (let r = 0; r < e.length; r++) {
            const s = e[r]
              , a = Dt[s]
              , l = t[s]
              , h = "bind-" + a.name.toLowerCase().replace(/[^a-z0-9]+/g, "-").replace(/-+/g, "-").replace(/^-|-$/g, "")
              , p = u("<a/>", {
                class: "btn-game-menu btn-darken btn-keybind-desc",
                text: this.localization.translate(h) || a.name
            })
              , c = u("<div/>", {
                class: "btn-keybind-display",
                text: l ? this.localization.translate(l.toString()) || l.toString() : ""
            });
            p.on("click", d => {
                const w = u(d.target);
                w.addClass("btn-keybind-desc-selected"),
                this.input.captureNextInput( (f, S) => {
                    f.preventDefault(),
                    f.stopPropagation();
                    const g = [H.Control, H.Shift, H.Alt, H.Windows, H.ContextMenu, H.F1, H.F2, H.F3, H.F4, H.F5, H.F6, H.F7, H.F8, H.F9, H.F10, H.F11, H.F12];
                    if (S.type == Ze.Key && g.includes(S.code))
                        return !1;
                    if (w.removeClass("btn-keybind-desc-selected"),
                    !S.equals(ue(H.Escape))) {
                        let x = S;
                        S.equals(ue(H.Backspace)) && (x = null),
                        this.inputBinds.setBind(parseInt(s), x),
                        this.inputBinds.saveBinds(),
                        this.refresh()
                    }
                    return !0
                }
                )
            }
            ),
            i.append(u("<div/>", {
                class: "ui-keybind-container"
            }).append(p).append(c))
        }
        u("#keybind-link").html(this.inputBinds.toBase64())
    }
}
var hi = [{
    region: "na",
    zone: "na",
    url: "usr.mathsiscoolfun.com:8001",
    https: !0
}, {
    region: "eu",
    zone: "eu",
    url: "eur.mathsiscoolfun.com:8001",
    https: !0
}, {
    region: "ru",
    zone: "ru",
    url: "russia.mathsiscoolfun.com:8001",
    https: !0
}, {
    region: "asia",
    zone: "asia",
    url: "asr.mathsiscoolfun.com:8001",
    https: !0
}, {
    region: "sa",
    zone: "sa",
    url: "sa.mathsiscoolfun.com:8001",
    https: !0
}];
class Oo {
    ptcDataBuf = new ArrayBuffer(1);
    tests = hi.map(e => ({
        region: e.region,
        zone: e.zone,
        url: e.url,
        https: e.https,
        ping: 9999,
        active: !1,
        complete: !1,
        ws: null,
        sendDelay: 0,
        sendTime: 0,
        sendCount: 0,
        recvCount: 0,
        recvCountMax: 6,
        retryCount: 0,
        retryCountMax: 1
    }));
    testsStarted = 0;
    testsCompleted = 0;
    printSummary = !0;
    start(e) {
        if ("WebSocket"in window) {
            let t = 0;
            for (let i = 0; i < this.tests.length; i++) {
                const r = this.tests[i];
                !r.active && !r.complete && e.includes(r.region) && (r.active = !0,
                this.testsStarted++,
                t++)
            }
            t > 0 && (this.printSummary = !0)
        }
    }
    update(e) {
        const t = r => {
            r.active = !1,
            r.complete = !0,
            this.testsCompleted++
        }
          , i = function(r) {
            r.ws && (r.ws.close(),
            r.ws = null),
            r.complete || r.retryCount++ >= r.retryCountMax && t(r)
        };
        for (let r = 0; r < this.tests.length; r++) {
            const s = this.tests[r];
            if (s.active) {
                if (!s.ws) {
                    const a = new WebSocket(`ws${s.https ? "s" : ""}://${s.url}/ptc`);
                    a.binaryType = "arraybuffer",
                    a.onopen = function() {}
                    ,
                    a.onmessage = function(l) {
                        const h = (Date.now() - s.sendTime) / 1e3;
                        s.ping = Math.min(s.ping, h),
                        s.recvCount++,
                        s.sendDelay = .125
                    }
                    ,
                    a.onerror = function(l) {
                        i(s)
                    }
                    ,
                    a.onclose = function() {
                        i(s)
                    }
                    ,
                    s.ws = a,
                    s.sendDelay = 0,
                    s.sendCount = 0,
                    s.recvCount = 0
                }
                if (s.ws.readyState == s.ws.OPEN) {
                    if (s.sendDelay -= e,
                    s.sendCount == s.recvCount && s.sendDelay < 0) {
                        s.sendTime = Date.now(),
                        s.sendCount++;
                        try {
                            s.ws.send(this.ptcDataBuf)
                        } catch {
                            s.ws.close()
                        }
                    }
                    s.recvCount >= s.recvCountMax && (t(s),
                    s.ws.close())
                }
            }
        }
        if (this.printSummary && this.isComplete()) {
            const r = this.tests.sort( (s, a) => s.ping - a.ping);
            console.log("Ping test results"),
            console.log("----------------------------------------");
            for (let s = 0; s < r.length; s++) {
                const a = r[s];
                console.log("region", a.region, "zone  ", a.zone, "ping  ", a.ping)
            }
            this.printSummary = !1
        }
    }
    isComplete() {
        return this.testsCompleted == this.testsStarted && this.testsStarted > 0
    }
    getRegionList() {
        const e = [];
        for (let t = 0; t < hi.length; t++) {
            const i = hi[t].region;
            e.includes(i) || e.push(i)
        }
        return e
    }
    getRegion() {
        return this.tests.sort( (e, t) => e.ping - t.ping),
        this.tests[0].region
    }
    getZones(e) {
        const t = this.tests.sort( (r, s) => r.ping - s.ping)
          , i = [];
        for (let r = 0; r < t.length; r++) {
            const s = t[r];
            s.region == e && i.push(s.zone)
        }
        return i
    }
}
const Fo = JSON.parse('{"gradient":[{"meta":{"image":"assets/gradient-0-100-e36ceff1.png","size":{"w":1024,"h":1024},"scale":1},"frames":{"map-building-club-gradient-01.img":{"frame":{"x":2,"y":2,"w":232,"h":256},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":34,"y":10,"w":232,"h":256},"sourceSize":{"w":292,"h":280}},"map-building-mansion-gradient-01.img":{"frame":{"x":238,"y":2,"w":232,"h":202},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":9,"w":232,"h":202},"sourceSize":{"w":248,"h":220}},"map-barrel-res-01.img":{"frame":{"x":2,"y":262,"w":226,"h":216},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":15,"y":21,"w":226,"h":216},"sourceSize":{"w":256,"h":256}},"map-plane-01.img":{"frame":{"x":232,"y":262,"w":178,"h":198},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":39,"y":12,"w":178,"h":198},"sourceSize":{"w":256,"h":256}},"map-plane-02.img":{"frame":{"x":414,"y":208,"w":84,"h":170},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":86,"y":2,"w":84,"h":170},"sourceSize":{"w":256,"h":256}},"map-bush-03.img":{"frame":{"x":474,"y":2,"w":148,"h":152},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":0,"w":148,"h":152},"sourceSize":{"w":152,"h":152}},"map-bush-01cb.img":{"frame":{"x":626,"y":2,"w":142,"h":142},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":142,"h":142},"sourceSize":{"w":144,"h":144}},"map-light-01.img":{"frame":{"x":772,"y":2,"w":140,"h":140},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":140,"h":140},"sourceSize":{"w":144,"h":144}},"map-bush-04.img":{"frame":{"x":772,"y":146,"w":136,"h":130},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":9,"w":136,"h":130},"sourceSize":{"w":150,"h":150}},"map-bush-04cb.img":{"frame":{"x":626,"y":148,"w":136,"h":130},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":10,"w":136,"h":130},"sourceSize":{"w":150,"h":150}},"map-bush-01.img":{"frame":{"x":766,"y":280,"w":126,"h":130},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":7,"w":126,"h":130},"sourceSize":{"w":144,"h":144}},"map-decal-flyer-01.img":{"frame":{"x":474,"y":158,"w":36,"h":44},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":2,"w":36,"h":44},"sourceSize":{"w":48,"h":48}}}}],"loadout":[{"meta":{"image":"assets/loadout-0-100-f889000f.png","size":{"w":4096,"h":4096},"scale":1},"frames":{"ping-map-pulse.img":{"frame":{"x":2,"y":2,"w":502,"h":502},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":5,"w":502,"h":502},"sourceSize":{"w":512,"h":512}},"loot-melee-naginata.img":{"frame":{"x":508,"y":2,"w":345,"h":38},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":14,"w":345,"h":38},"sourceSize":{"w":350,"h":54}},"part-aura-circle-01.img":{"frame":{"x":508,"y":44,"w":284,"h":282},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":3,"w":284,"h":282},"sourceSize":{"w":288,"h":288}},"part-shell-05.img":{"frame":{"x":857,"y":2,"w":63,"h":260},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":63,"h":260},"sourceSize":{"w":63,"h":260}},"loot-melee-warhammer-tank.img":{"frame":{"x":508,"y":330,"w":255,"h":131},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":17,"w":255,"h":131},"sourceSize":{"w":264,"h":152}},"emote-circle-outer.img":{"frame":{"x":767,"y":330,"w":252,"h":254},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":1,"w":252,"h":254},"sourceSize":{"w":256,"h":256}},"part-smoke-02.img":{"frame":{"x":508,"y":465,"w":254,"h":248},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":4,"w":254,"h":248},"sourceSize":{"w":256,"h":256}},"part-smoke-03.img":{"frame":{"x":766,"y":588,"w":253,"h":250},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":2,"w":253,"h":250},"sourceSize":{"w":256,"h":256}},"gun-potato-cannon-01.img":{"frame":{"x":796,"y":44,"w":56,"h":248},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":56,"h":248},"sourceSize":{"w":56,"h":248}},"gun-scarssr-01.img":{"frame":{"x":924,"y":2,"w":60,"h":248},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":60,"h":248},"sourceSize":{"w":60,"h":248}},"gun-dp28-01.img":{"frame":{"x":988,"y":2,"w":34,"h":228},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":4,"w":34,"h":228},"sourceSize":{"w":56,"h":232}},"gun-awc-01.img":{"frame":{"x":2,"y":717,"w":45,"h":226},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":10,"w":45,"h":226},"sourceSize":{"w":60,"h":236}},"gun-awc-02.img":{"frame":{"x":51,"y":717,"w":45,"h":226},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":10,"w":45,"h":226},"sourceSize":{"w":60,"h":236}},"loot-melee-katana-demo.img":{"frame":{"x":2,"y":947,"w":226,"h":38},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":1,"w":226,"h":38},"sourceSize":{"w":230,"h":40}},"loot-melee-katana-orchid.img":{"frame":{"x":232,"y":508,"w":226,"h":38},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":1,"w":226,"h":38},"sourceSize":{"w":230,"h":40}},"loot-melee-katana-rusted.img":{"frame":{"x":2,"y":508,"w":226,"h":38},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":1,"w":226,"h":38},"sourceSize":{"w":230,"h":40}},"loot-melee-katana.img":{"frame":{"x":232,"y":550,"w":226,"h":38},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":1,"w":226,"h":38},"sourceSize":{"w":230,"h":40}},"gun-bar-01.img":{"frame":{"x":100,"y":717,"w":59,"h":216},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":47,"y":32,"w":59,"h":216},"sourceSize":{"w":176,"h":248}},"gun-m249-top-01.img":{"frame":{"x":462,"y":508,"w":36,"h":214},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":18,"w":36,"h":214},"sourceSize":{"w":56,"h":232}},"gun-garand-01.img":{"frame":{"x":163,"y":726,"w":32,"h":212},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":20,"w":32,"h":212},"sourceSize":{"w":48,"h":232}},"gun-potato-smg-01.img":{"frame":{"x":199,"y":726,"w":99,"h":210},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":19,"y":38,"w":99,"h":210},"sourceSize":{"w":176,"h":248}},"pad.img":{"frame":{"x":502,"y":717,"w":208,"h":208},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":208,"h":208},"sourceSize":{"w":208,"h":208}},"gun-usas-01.img":{"frame":{"x":714,"y":717,"w":41,"h":208},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":24,"w":41,"h":208},"sourceSize":{"w":56,"h":232}},"gun-vss-01.img":{"frame":{"x":302,"y":726,"w":38,"h":208},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":0,"w":38,"h":208},"sourceSize":{"w":48,"h":208}},"gun-an94-01.img":{"frame":{"x":344,"y":592,"w":41,"h":204},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":28,"w":41,"h":204},"sourceSize":{"w":56,"h":232}},"gun-scorpion-01.img":{"frame":{"x":344,"y":800,"w":39,"h":198},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":10,"w":39,"h":198},"sourceSize":{"w":48,"h":208}},"gun-m1014-01.img":{"frame":{"x":389,"y":592,"w":45,"h":192},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":40,"w":45,"h":192},"sourceSize":{"w":56,"h":232}},"gun-pkp-top-01.img":{"frame":{"x":438,"y":726,"w":34,"h":192},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":40,"w":34,"h":192},"sourceSize":{"w":56,"h":232}},"part-shell-02.img":{"frame":{"x":232,"y":940,"w":63,"h":190},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":63,"h":190},"sourceSize":{"w":63,"h":190}},"gun-grozas-01.img":{"frame":{"x":302,"y":938,"w":37,"h":189},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":19,"w":37,"h":189},"sourceSize":{"w":48,"h":208}},"gun-m4a1-01.img":{"frame":{"x":389,"y":788,"w":42,"h":187},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":9,"w":42,"h":187},"sourceSize":{"w":48,"h":196}},"gun-long-01.img":{"frame":{"x":435,"y":922,"w":28,"h":184},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":28,"h":184},"sourceSize":{"w":28,"h":184}},"part-shell-03.img":{"frame":{"x":343,"y":1002,"w":63,"h":180},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":63,"h":180},"sourceSize":{"w":63,"h":180}},"player-helmet-forest.img":{"frame":{"x":2,"y":989,"w":148,"h":176},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":148,"h":176},"sourceSize":{"w":176,"h":176}},"gun-saiga-01.img":{"frame":{"x":299,"y":1131,"w":40,"h":174},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":6,"w":40,"h":174},"sourceSize":{"w":48,"h":196}},"part-wedge-01.img":{"frame":{"x":163,"y":550,"w":55,"h":170},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":55,"h":170},"sourceSize":{"w":63,"h":180}},"proj-wedge-01.img":{"frame":{"x":154,"y":989,"w":55,"h":170},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":55,"h":170},"sourceSize":{"w":63,"h":180}},"player-wading-01.img":{"frame":{"x":2,"y":1169,"w":169,"h":168},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":2,"w":169,"h":168},"sourceSize":{"w":172,"h":172}},"gun-qbb97-top-01.img":{"frame":{"x":213,"y":1134,"w":32,"h":168},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":40,"w":32,"h":168},"sourceSize":{"w":48,"h":208}},"gun-famas-01.img":{"frame":{"x":249,"y":1134,"w":36,"h":166},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":42,"w":36,"h":166},"sourceSize":{"w":48,"h":208}},"role-assault.img":{"frame":{"x":2,"y":1341,"w":130,"h":165},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":23,"y":6,"w":130,"h":165},"sourceSize":{"w":176,"h":176}},"loot-melee-machete-taiga.img":{"frame":{"x":249,"y":1304,"w":44,"h":164},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":60,"y":3,"w":44,"h":164},"sourceSize":{"w":168,"h":168}},"part-shell-04.img":{"frame":{"x":175,"y":1306,"w":55,"h":164},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":55,"h":164},"sourceSize":{"w":55,"h":164}},"role-demo.img":{"frame":{"x":2,"y":550,"w":130,"h":162},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":23,"y":6,"w":130,"h":162},"sourceSize":{"w":176,"h":176}},"role-healer.img":{"frame":{"x":2,"y":1510,"w":130,"h":162},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":23,"y":6,"w":130,"h":162},"sourceSize":{"w":176,"h":176}},"role-scout.img":{"frame":{"x":2,"y":1676,"w":130,"h":162},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":23,"y":6,"w":130,"h":162},"sourceSize":{"w":176,"h":176}},"role-sniper.img":{"frame":{"x":2,"y":1842,"w":130,"h":162},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":23,"y":6,"w":130,"h":162},"sourceSize":{"w":176,"h":176}},"role-tank.img":{"frame":{"x":136,"y":1474,"w":130,"h":162},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":23,"y":6,"w":130,"h":162},"sourceSize":{"w":176,"h":176}},"part-airdrop-02.img":{"frame":{"x":136,"y":1640,"w":38,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":38,"h":160},"sourceSize":{"w":38,"h":160}},"part-airdrop-02x.img":{"frame":{"x":136,"y":1804,"w":38,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":38,"h":160},"sourceSize":{"w":38,"h":160}},"part-airdrop-03.img":{"frame":{"x":178,"y":1640,"w":160,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":160},"sourceSize":{"w":160,"h":160}},"player-mash-01.img":{"frame":{"x":988,"y":234,"w":160,"h":85},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":85},"sourceSize":{"w":160,"h":160}},"player-snow-01.img":{"frame":{"x":270,"y":1472,"w":160,"h":85},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":85},"sourceSize":{"w":160,"h":160}},"proj-bomb-iron-01.img":{"frame":{"x":297,"y":1309,"w":66,"h":158},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":47,"y":1,"w":66,"h":158},"sourceSize":{"w":160,"h":160}},"loot-melee-kukri-sniper.img":{"frame":{"x":1026,"y":2,"w":40,"h":156},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":54,"y":2,"w":40,"h":156},"sourceSize":{"w":160,"h":160}},"loot-melee-kukri-trad.img":{"frame":{"x":1070,"y":2,"w":40,"h":156},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":54,"y":2,"w":40,"h":156},"sourceSize":{"w":160,"h":160}},"proj-smoke-nopin.img":{"frame":{"x":1114,"y":2,"w":152,"h":156},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":2,"w":152,"h":156},"sourceSize":{"w":160,"h":160}},"proj-smoke-pin.img":{"frame":{"x":178,"y":1804,"w":152,"h":156},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":2,"w":152,"h":156},"sourceSize":{"w":160,"h":160}},"loot-melee-bonesaw-healer.img":{"frame":{"x":334,"y":1804,"w":60,"h":155},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":64,"y":10,"w":60,"h":155},"sourceSize":{"w":168,"h":168}},"loot-melee-bonesaw-rusted.img":{"frame":{"x":342,"y":1561,"w":54,"h":155},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":81,"y":22,"w":54,"h":155},"sourceSize":{"w":192,"h":192}},"loot-melee-fireaxe.img":{"frame":{"x":136,"y":1968,"w":150,"h":76},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":150,"h":76},"sourceSize":{"w":152,"h":76}},"loot-melee-spade-assault.img":{"frame":{"x":367,"y":1186,"w":54,"h":150},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":53,"y":5,"w":54,"h":150},"sourceSize":{"w":160,"h":160}},"player-star.img":{"frame":{"x":398,"y":1720,"w":148,"h":142},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":3,"w":148,"h":142},"sourceSize":{"w":148,"h":148}},"star.img":{"frame":{"x":400,"y":1561,"w":148,"h":142},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":3,"w":148,"h":142},"sourceSize":{"w":148,"h":148}},"loot-melee-sledgehammer.img":{"frame":{"x":1026,"y":162,"w":148,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":148,"h":58},"sourceSize":{"w":148,"h":58}},"loot-melee-stonehammer.img":{"frame":{"x":410,"y":1110,"w":148,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":4,"w":148,"h":56},"sourceSize":{"w":148,"h":60}},"loot-melee-woodaxe-bloody.img":{"frame":{"x":290,"y":1964,"w":148,"h":54},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":148,"h":54},"sourceSize":{"w":148,"h":54}},"loot-melee-woodaxe.img":{"frame":{"x":398,"y":1866,"w":148,"h":54},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":148,"h":54},"sourceSize":{"w":148,"h":54}},"player-mash-03.img":{"frame":{"x":442,"y":1924,"w":148,"h":74},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":0,"w":148,"h":74},"sourceSize":{"w":160,"h":160}},"player-snow-03.img":{"frame":{"x":367,"y":1340,"w":148,"h":74},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":0,"w":148,"h":74},"sourceSize":{"w":160,"h":160}},"proj-strobe-unarmed.img":{"frame":{"x":434,"y":1418,"w":147,"h":125},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":25,"w":147,"h":125},"sourceSize":{"w":160,"h":160}},"gun-groza-01.img":{"frame":{"x":425,"y":1170,"w":37,"h":146},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":62,"w":37,"h":146},"sourceSize":{"w":48,"h":208}},"loot-circle-outer-03.img":{"frame":{"x":466,"y":1170,"w":146,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":10,"w":146,"h":126},"sourceSize":{"w":146,"h":146}},"proj-smoke-nopin-nolever.img":{"frame":{"x":467,"y":929,"w":76,"h":146},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":42,"y":7,"w":76,"h":146},"sourceSize":{"w":160,"h":160}},"player-mash-02.img":{"frame":{"x":519,"y":1300,"w":145,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":0,"w":145,"h":80},"sourceSize":{"w":160,"h":160}},"player-snow-02.img":{"frame":{"x":547,"y":929,"w":145,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":0,"w":145,"h":80},"sourceSize":{"w":160,"h":160}},"face-dab.img":{"frame":{"x":562,"y":1013,"w":144,"h":98},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":23,"w":144,"h":98},"sourceSize":{"w":144,"h":144}},"ping-border.img":{"frame":{"x":616,"y":1115,"w":144,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":144},"sourceSize":{"w":144,"h":144}},"loot-circle-outer-01.img":{"frame":{"x":710,"y":929,"w":144,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":144,"h":144},"sourceSize":{"w":146,"h":146}},"loot-circle-outer-02.img":{"frame":{"x":550,"y":1707,"w":144,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":144,"h":144},"sourceSize":{"w":146,"h":146}},"loot-circle-outer-05.img":{"frame":{"x":552,"y":1547,"w":144,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":144,"h":144},"sourceSize":{"w":146,"h":146}},"loot-circle-outer-06.img":{"frame":{"x":585,"y":1384,"w":144,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":144,"h":144},"sourceSize":{"w":146,"h":146}},"player-helmet-moon.img":{"frame":{"x":594,"y":1855,"w":117,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":16,"w":117,"h":144},"sourceSize":{"w":176,"h":176}},"player-armor-base-01.img":{"frame":{"x":698,"y":1695,"w":144,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":144,"h":144},"sourceSize":{"w":148,"h":148}},"player-circle-base-01.img":{"frame":{"x":700,"y":1532,"w":144,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":144,"h":144},"sourceSize":{"w":148,"h":148}},"player-circle-base-02.img":{"frame":{"x":715,"y":1843,"w":144,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":144,"h":144},"sourceSize":{"w":148,"h":148}},"proj-mirv-nopin-nolever.img":{"frame":{"x":846,"y":1680,"w":76,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":26,"y":2,"w":76,"h":144},"sourceSize":{"w":128,"h":148}},"proj-mirv-nopin.img":{"frame":{"x":863,"y":1828,"w":102,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":26,"y":2,"w":102,"h":144},"sourceSize":{"w":128,"h":148}},"proj-mirv-pin.img":{"frame":{"x":733,"y":1263,"w":102,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":2,"w":102,"h":144},"sourceSize":{"w":128,"h":148}},"gun-bugle-01.img":{"frame":{"x":764,"y":1077,"w":64,"h":143},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":89,"w":64,"h":143},"sourceSize":{"w":96,"h":232}},"part-panel-01.img":{"frame":{"x":832,"y":1077,"w":142,"h":142},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":142,"h":142},"sourceSize":{"w":144,"h":144}},"part-plank-01.img":{"frame":{"x":858,"y":842,"w":142,"h":142},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":142,"h":142},"sourceSize":{"w":144,"h":144}},"part-woodchip-01.img":{"frame":{"x":839,"y":1223,"w":141,"h":140},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":1,"w":141,"h":140},"sourceSize":{"w":144,"h":144}},"player-king-woods.img":{"frame":{"x":839,"y":1367,"w":140,"h":133},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":7,"w":140,"h":133},"sourceSize":{"w":148,"h":148}},"player-the-hunted.img":{"frame":{"x":848,"y":1504,"w":140,"h":140},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":140,"h":140},"sourceSize":{"w":144,"h":144}},"loot-circle-outer-04.img":{"frame":{"x":983,"y":1367,"w":140,"h":133},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":0,"w":140,"h":133},"sourceSize":{"w":146,"h":146}},"player-ripple-01.img":{"frame":{"x":926,"y":1648,"w":140,"h":140},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":140,"h":140},"sourceSize":{"w":142,"h":142}},"loot-melee-crowbar-recon.img":{"frame":{"x":992,"y":1504,"w":37,"h":138},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":54,"y":7,"w":37,"h":138},"sourceSize":{"w":160,"h":160}},"loot-melee-crowbar-scout.img":{"frame":{"x":1033,"y":1504,"w":37,"h":138},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":54,"y":7,"w":37,"h":138},"sourceSize":{"w":160,"h":160}},"part-book-01.img":{"frame":{"x":978,"y":988,"w":104,"h":138},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":20,"y":3,"w":104,"h":138},"sourceSize":{"w":144,"h":144}},"part-plate-01.img":{"frame":{"x":1004,"y":842,"w":138,"h":132},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":6,"w":138,"h":132},"sourceSize":{"w":144,"h":144}},"player-helmet-last-man-01.img":{"frame":{"x":984,"y":1130,"w":137,"h":136},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":28,"y":20,"w":137,"h":136},"sourceSize":{"w":176,"h":176}},"player-helmet-last-man-02.img":{"frame":{"x":1086,"y":978,"w":137,"h":136},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":28,"y":20,"w":137,"h":136},"sourceSize":{"w":176,"h":176}},"part-pot-01.img":{"frame":{"x":1125,"y":1118,"w":94,"h":136},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":25,"y":4,"w":94,"h":136},"sourceSize":{"w":144,"h":144}},"player-base-01.img":{"frame":{"x":969,"y":1792,"w":134,"h":134},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":134,"h":134},"sourceSize":{"w":140,"h":140}},"player-base-02.img":{"frame":{"x":1070,"y":1646,"w":134,"h":134},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":134,"h":134},"sourceSize":{"w":140,"h":140}},"player-base-outfitDC.img":{"frame":{"x":1074,"y":1504,"w":134,"h":134},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":134,"h":134},"sourceSize":{"w":140,"h":140}},"player-base-outfitHeaven.img":{"frame":{"x":1127,"y":1258,"w":134,"h":134},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":134,"h":134},"sourceSize":{"w":140,"h":140}},"player-base-outfitLumber.img":{"frame":{"x":1223,"y":1118,"w":134,"h":134},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":134,"h":134},"sourceSize":{"w":140,"h":140}},"player-base-outfitParmaPrestige.img":{"frame":{"x":1107,"y":1784,"w":134,"h":134},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":134,"h":134},"sourceSize":{"w":140,"h":140}},"player-base-outfitSpetsnaz.img":{"frame":{"x":1208,"y":1642,"w":134,"h":134},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":134,"h":134},"sourceSize":{"w":140,"h":140}},"player-base-outfitTurkey.img":{"frame":{"x":1212,"y":1396,"w":134,"h":134},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":134,"h":134},"sourceSize":{"w":140,"h":140}},"player-base-outfitWheat.img":{"frame":{"x":1265,"y":1256,"w":134,"h":134},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":134,"h":134},"sourceSize":{"w":140,"h":140}},"proj-strobe-armed.img":{"frame":{"x":1107,"y":1922,"w":134,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":26,"w":134,"h":118},"sourceSize":{"w":160,"h":160}},"proj-strobe-arming.img":{"frame":{"x":1245,"y":1780,"w":134,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":26,"w":134,"h":118},"sourceSize":{"w":160,"h":160}},"part-shell-01.img":{"frame":{"x":1245,"y":1902,"w":56,"h":133},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":56,"h":133},"sourceSize":{"w":56,"h":133}},"star-blue.img":{"frame":{"x":1305,"y":1902,"w":132,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":5,"w":132,"h":126},"sourceSize":{"w":148,"h":148}},"star-red.img":{"frame":{"x":1346,"y":1534,"w":132,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":5,"w":132,"h":126},"sourceSize":{"w":148,"h":148}},"part-splat-02.img":{"frame":{"x":1350,"y":1394,"w":124,"h":130},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":8,"w":124,"h":130},"sourceSize":{"w":144,"h":144}},"chicken-dinner.img":{"frame":{"x":1383,"y":1664,"w":128,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":3,"w":128,"h":122},"sourceSize":{"w":128,"h":128}},"face-angel-treat.img":{"frame":{"x":1441,"y":1790,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"fish.img":{"frame":{"x":984,"y":1270,"w":128,"h":92},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":18,"w":128,"h":92},"sourceSize":{"w":128,"h":128}},"flag-albania.img":{"frame":{"x":1573,"y":2,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-algeria.img":{"frame":{"x":1403,"y":2,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-argentina.img":{"frame":{"x":1270,"y":2,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-australia.img":{"frame":{"x":1705,"y":2,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-austria.img":{"frame":{"x":1837,"y":2,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-azerbaijan.img":{"frame":{"x":1573,"y":134,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-belarus.img":{"frame":{"x":1403,"y":134,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-belgium.img":{"frame":{"x":1270,"y":134,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-bolivia.img":{"frame":{"x":1705,"y":134,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-bosnia-and-herzegovina.img":{"frame":{"x":1837,"y":134,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-brazil.img":{"frame":{"x":1573,"y":266,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-canada.img":{"frame":{"x":1403,"y":266,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-chile.img":{"frame":{"x":1227,"y":266,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-china.img":{"frame":{"x":1023,"y":323,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-colombia.img":{"frame":{"x":1705,"y":266,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-croatia.img":{"frame":{"x":1837,"y":266,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-czech-republic.img":{"frame":{"x":1023,"y":455,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-denmark.img":{"frame":{"x":1023,"y":587,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-dominican-republic.img":{"frame":{"x":1146,"y":719,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-ecuador.img":{"frame":{"x":1227,"y":851,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-egypt.img":{"frame":{"x":1227,"y":983,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-estonia.img":{"frame":{"x":1155,"y":398,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-finland.img":{"frame":{"x":1155,"y":530,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-france.img":{"frame":{"x":1278,"y":662,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-georgia.img":{"frame":{"x":1287,"y":398,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-germany.img":{"frame":{"x":1287,"y":530,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-greece.img":{"frame":{"x":1359,"y":794,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-guatemala.img":{"frame":{"x":1410,"y":662,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-honduras.img":{"frame":{"x":1359,"y":926,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-hong-kong.img":{"frame":{"x":1361,"y":1058,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-hungary.img":{"frame":{"x":1403,"y":1190,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-india.img":{"frame":{"x":1478,"y":1322,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-indonesia.img":{"frame":{"x":1482,"y":1454,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-israel.img":{"frame":{"x":1515,"y":1586,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-italy.img":{"frame":{"x":1419,"y":398,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-japan.img":{"frame":{"x":1419,"y":530,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-kazakhstan.img":{"frame":{"x":1491,"y":794,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-latvia.img":{"frame":{"x":1491,"y":926,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-lithuania.img":{"frame":{"x":1542,"y":662,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-malaysia.img":{"frame":{"x":1493,"y":1058,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-mexico.img":{"frame":{"x":1535,"y":1190,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-moldova.img":{"frame":{"x":1610,"y":1322,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-morocco.img":{"frame":{"x":1614,"y":1454,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-netherlands.img":{"frame":{"x":1551,"y":398,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-new-zealand.img":{"frame":{"x":1551,"y":530,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-norway.img":{"frame":{"x":1623,"y":794,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-peru.img":{"frame":{"x":1623,"y":926,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-philippines.img":{"frame":{"x":1674,"y":662,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-portugal.img":{"frame":{"x":1625,"y":1058,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-republic-of-poland.img":{"frame":{"x":1667,"y":1190,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-romania.img":{"frame":{"x":1742,"y":1322,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-russia.img":{"frame":{"x":1874,"y":398,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-serbia.img":{"frame":{"x":1683,"y":530,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-singapore.img":{"frame":{"x":1683,"y":398,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-slovakia.img":{"frame":{"x":1874,"y":530,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-south-korea.img":{"frame":{"x":1874,"y":662,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-spain.img":{"frame":{"x":1874,"y":794,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-sweden.img":{"frame":{"x":1755,"y":926,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-switzerland.img":{"frame":{"x":1757,"y":1058,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-taiwan.img":{"frame":{"x":1799,"y":1190,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-thailand.img":{"frame":{"x":1887,"y":926,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-trinidad-and-tobago.img":{"frame":{"x":1889,"y":1058,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-turkey.img":{"frame":{"x":1874,"y":1322,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-ukraine.img":{"frame":{"x":1746,"y":1454,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-united-arab-emirates.img":{"frame":{"x":1878,"y":1454,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-united-kingdom.img":{"frame":{"x":1573,"y":1718,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-united-states-of-america.img":{"frame":{"x":1647,"y":1586,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-uruguay.img":{"frame":{"x":1573,"y":1850,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-venezuela.img":{"frame":{"x":1779,"y":1586,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-vietnam.img":{"frame":{"x":1911,"y":1586,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-palestine.img":{"frame":{"x":1705,"y":1718,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-transgender.img":{"frame":{"x":1705,"y":1850,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-pride.img":{"frame":{"x":1837,"y":1718,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-lesbian.img":{"frame":{"x":1837,"y":1850,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-gay.img":{"frame":{"x":1931,"y":1190,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-asexual.img":{"frame":{"x":1441,"y":1922,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-nonbinary.img":{"frame":{"x":2006,"y":1322,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"logo-caduceus.img":{"frame":{"x":2,"y":2008,"w":128,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":9,"w":128,"h":110},"sourceSize":{"w":128,"h":128}},"logo-chrysanthemum.img":{"frame":{"x":1305,"y":2032,"w":128,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":9,"w":128,"h":110},"sourceSize":{"w":128,"h":128}},"logo-cloud.img":{"frame":{"x":969,"y":1930,"w":128,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":9,"w":128,"h":110},"sourceSize":{"w":128,"h":128}},"logo-conch.img":{"frame":{"x":2010,"y":1454,"w":128,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":9,"w":128,"h":110},"sourceSize":{"w":128,"h":128}},"logo-crossing.img":{"frame":{"x":442,"y":2002,"w":128,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":9,"w":128,"h":110},"sourceSize":{"w":128,"h":128}},"logo-egg.img":{"frame":{"x":290,"y":2022,"w":128,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":9,"w":128,"h":110},"sourceSize":{"w":128,"h":128}},"logo-hatchet.img":{"frame":{"x":134,"y":2048,"w":128,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":9,"w":128,"h":110},"sourceSize":{"w":128,"h":128}},"logo-hydra.img":{"frame":{"x":2,"y":2122,"w":128,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":9,"w":128,"h":110},"sourceSize":{"w":128,"h":128}},"logo-meteor.img":{"frame":{"x":715,"y":1991,"w":128,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":9,"w":128,"h":110},"sourceSize":{"w":128,"h":128}},"logo-storm.img":{"frame":{"x":574,"y":2003,"w":128,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":9,"w":128,"h":110},"sourceSize":{"w":128,"h":128}},"logo-surviv.img":{"frame":{"x":422,"y":2116,"w":128,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":9,"w":128,"h":110},"sourceSize":{"w":128,"h":128}},"logo-swine.img":{"frame":{"x":266,"y":2136,"w":128,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":9,"w":128,"h":110},"sourceSize":{"w":128,"h":128}},"logo-twins.img":{"frame":{"x":134,"y":2162,"w":128,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":9,"w":128,"h":110},"sourceSize":{"w":128,"h":128}},"eye.img":{"frame":{"x":2,"y":2236,"w":128,"h":82},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":23,"w":128,"h":82},"sourceSize":{"w":128,"h":128}},"hamburger.img":{"frame":{"x":1212,"y":1534,"w":128,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":12,"w":128,"h":104},"sourceSize":{"w":128,"h":128}},"hide.img":{"frame":{"x":1969,"y":2,"w":128,"h":106},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":11,"w":128,"h":106},"sourceSize":{"w":128,"h":128}},"indicator.img":{"frame":{"x":1755,"y":794,"w":90,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":19,"y":0,"w":90,"h":128},"sourceSize":{"w":128,"h":128}},"link.img":{"frame":{"x":1969,"y":112,"w":128,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":9,"w":128,"h":110},"sourceSize":{"w":128,"h":128}},"loadout-crosshair.img":{"frame":{"x":1969,"y":226,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"ping-map-coming.img":{"frame":{"x":222,"y":592,"w":112,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":8,"w":112,"h":128},"sourceSize":{"w":128,"h":256}},"ping-map-danger.img":{"frame":{"x":1359,"y":266,"w":40,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":44,"y":0,"w":40,"h":128},"sourceSize":{"w":128,"h":128}},"timer.img":{"frame":{"x":847,"y":2044,"w":128,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":5,"w":128,"h":118},"sourceSize":{"w":128,"h":128}},"gun-mp220-01.img":{"frame":{"x":1806,"y":662,"w":38,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":38,"h":128},"sourceSize":{"w":40,"h":128}},"loot-ammo-box.img":{"frame":{"x":706,"y":2105,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"loot-perk-gotw.img":{"frame":{"x":554,"y":2117,"w":128,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":3,"w":128,"h":122},"sourceSize":{"w":128,"h":128}},"loot-perk-leadership.img":{"frame":{"x":398,"y":2230,"w":128,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":3,"w":128,"h":122},"sourceSize":{"w":128,"h":128}},"loot-scope-00.img":{"frame":{"x":266,"y":2250,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"loot-scope-01.img":{"frame":{"x":134,"y":2276,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"loot-scope-02.img":{"frame":{"x":2,"y":2322,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"loot-scope-03.img":{"frame":{"x":979,"y":2044,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"loot-scope-04.img":{"frame":{"x":838,"y":2166,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"loot-weapon-deagle-dual.img":{"frame":{"x":686,"y":2237,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"loot-weapon-flare-gun-dual.img":{"frame":{"x":530,"y":2243,"w":110,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":0,"w":110,"h":128},"sourceSize":{"w":128,"h":128}},"loot-weapon-m1911-dual.img":{"frame":{"x":398,"y":2356,"w":128,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":4,"w":128,"h":120},"sourceSize":{"w":128,"h":128}},"loot-weapon-m9-dual.img":{"frame":{"x":266,"y":2382,"w":128,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":5,"w":128,"h":118},"sourceSize":{"w":128,"h":128}},"loot-weapon-m93r-dual.img":{"frame":{"x":134,"y":2408,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"loot-weapon-m93r.img":{"frame":{"x":2,"y":2454,"w":100,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":0,"w":100,"h":128},"sourceSize":{"w":128,"h":128}},"loot-weapon-ots38-dual.img":{"frame":{"x":1111,"y":2044,"w":105,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":0,"w":105,"h":128},"sourceSize":{"w":128,"h":128}},"part-airdrop-04.img":{"frame":{"x":1815,"y":398,"w":54,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":54,"h":128},"sourceSize":{"w":54,"h":128}},"part-note-02.img":{"frame":{"x":2006,"y":358,"w":88,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":20,"y":0,"w":88,"h":128},"sourceSize":{"w":128,"h":128}},"face-headshot.img":{"frame":{"x":2006,"y":490,"w":127,"h":88},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":24,"w":127,"h":88},"sourceSize":{"w":128,"h":128}},"face-poo.img":{"frame":{"x":2098,"y":358,"w":126,"h":127},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":126,"h":127},"sourceSize":{"w":128,"h":128}},"loot-perk-aoe-heal.img":{"frame":{"x":2006,"y":582,"w":127,"h":127},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":127,"h":127},"sourceSize":{"w":128,"h":128}},"face-imp-trick.img":{"frame":{"x":2006,"y":713,"w":124,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":1,"w":124,"h":126},"sourceSize":{"w":128,"h":128}},"face-imp.img":{"frame":{"x":2019,"y":843,"w":126,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":2,"w":126,"h":124},"sourceSize":{"w":128,"h":128}},"face-thinking.img":{"frame":{"x":2134,"y":713,"w":124,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":124,"h":126},"sourceSize":{"w":128,"h":128}},"snowflake.img":{"frame":{"x":2021,"y":971,"w":114,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":1,"w":114,"h":126},"sourceSize":{"w":128,"h":128}},"pass.img":{"frame":{"x":2063,"y":1101,"w":126,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":126,"h":126},"sourceSize":{"w":128,"h":128}},"ping-team-airdrop.img":{"frame":{"x":2139,"y":971,"w":126,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":126,"h":126},"sourceSize":{"w":128,"h":128}},"ping-team-airstrike.img":{"frame":{"x":2138,"y":1231,"w":126,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":126,"h":126},"sourceSize":{"w":128,"h":128}},"ping-team-coming.img":{"frame":{"x":2193,"y":1101,"w":126,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":126,"h":126},"sourceSize":{"w":128,"h":128}},"ping-team-danger.img":{"frame":{"x":2137,"y":489,"w":126,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":126,"h":126},"sourceSize":{"w":128,"h":128}},"ping-team-help.img":{"frame":{"x":2262,"y":619,"w":126,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":126,"h":126},"sourceSize":{"w":128,"h":128}},"ping-team-unlock.img":{"frame":{"x":2262,"y":749,"w":126,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":126,"h":126},"sourceSize":{"w":128,"h":128}},"loot-perk-firepower.img":{"frame":{"x":2269,"y":879,"w":126,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":3,"w":126,"h":122},"sourceSize":{"w":128,"h":128}},"loot-perk-self-revive.img":{"frame":{"x":2138,"y":1361,"w":126,"h":66},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":31,"w":126,"h":66},"sourceSize":{"w":128,"h":128}},"loot-perk-treat-super.img":{"frame":{"x":2269,"y":1005,"w":126,"h":90},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":19,"w":126,"h":90},"sourceSize":{"w":128,"h":128}},"loot-weapon-bar.img":{"frame":{"x":2101,"y":2,"w":126,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":3,"w":126,"h":122},"sourceSize":{"w":128,"h":128}},"loot-weapon-colt45-dual.img":{"frame":{"x":2101,"y":128,"w":120,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":1,"w":120,"h":126},"sourceSize":{"w":128,"h":128}},"loot-weapon-dp28.img":{"frame":{"x":2225,"y":128,"w":114,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":1,"w":114,"h":126},"sourceSize":{"w":128,"h":128}},"loot-weapon-grozas.img":{"frame":{"x":2228,"y":258,"w":122,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":1,"w":122,"h":126},"sourceSize":{"w":128,"h":128}},"loot-weapon-m1014.img":{"frame":{"x":2267,"y":388,"w":110,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":1,"w":110,"h":126},"sourceSize":{"w":128,"h":128}},"loot-weapon-m4a1.img":{"frame":{"x":2343,"y":2,"w":116,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":1,"w":116,"h":126},"sourceSize":{"w":128,"h":128}},"loot-weapon-ot38-dual.img":{"frame":{"x":2354,"y":132,"w":122,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":1,"w":122,"h":126},"sourceSize":{"w":128,"h":128}},"loot-weapon-svd.img":{"frame":{"x":2463,"y":2,"w":110,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":1,"w":110,"h":126},"sourceSize":{"w":128,"h":128}},"loot-weapon-vss.img":{"frame":{"x":2381,"y":262,"w":108,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":1,"w":108,"h":126},"sourceSize":{"w":128,"h":128}},"player-helmet-captain.img":{"frame":{"x":2480,"y":132,"w":95,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":28,"y":25,"w":95,"h":126},"sourceSize":{"w":176,"h":176}},"player-helmet-bugler.img":{"frame":{"x":2577,"y":2,"w":95,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":28,"y":25,"w":95,"h":126},"sourceSize":{"w":176,"h":176}},"player-helmet-grenadier.img":{"frame":{"x":2381,"y":392,"w":95,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":28,"y":25,"w":95,"h":126},"sourceSize":{"w":176,"h":176}},"player-helmet-leader.img":{"frame":{"x":2392,"y":522,"w":95,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":28,"y":25,"w":95,"h":126},"sourceSize":{"w":176,"h":176}},"player-helmet-lieutenant.img":{"frame":{"x":2480,"y":392,"w":95,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":28,"y":25,"w":95,"h":126},"sourceSize":{"w":176,"h":176}},"player-helmet-marksman.img":{"frame":{"x":2493,"y":262,"w":95,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":28,"y":25,"w":95,"h":126},"sourceSize":{"w":176,"h":176}},"player-helmet-medic.img":{"frame":{"x":2579,"y":132,"w":95,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":28,"y":25,"w":95,"h":126},"sourceSize":{"w":176,"h":176}},"player-helmet-potato.img":{"frame":{"x":2676,"y":2,"w":97,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":28,"y":25,"w":97,"h":126},"sourceSize":{"w":176,"h":176}},"player-helmet-recon.img":{"frame":{"x":2392,"y":652,"w":95,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":28,"y":25,"w":95,"h":126},"sourceSize":{"w":176,"h":176}},"part-note-01.img":{"frame":{"x":2777,"y":2,"w":84,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":22,"y":1,"w":84,"h":126},"sourceSize":{"w":128,"h":128}},"part-splat-01.img":{"frame":{"x":2865,"y":2,"w":126,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":9,"w":126,"h":124},"sourceSize":{"w":144,"h":144}},"part-takedown-01.img":{"frame":{"x":2995,"y":2,"w":126,"h":102},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":13,"w":126,"h":102},"sourceSize":{"w":128,"h":128}},"face-alien.img":{"frame":{"x":3125,"y":2,"w":124,"h":125},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":124,"h":125},"sourceSize":{"w":128,"h":128}},"loot-weapon-mkg45.img":{"frame":{"x":2995,"y":108,"w":116,"h":125},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":1,"w":116,"h":125},"sourceSize":{"w":128,"h":128}},"loot-weapon-potato-smg.img":{"frame":{"x":2865,"y":130,"w":111,"h":125},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":2,"w":111,"h":125},"sourceSize":{"w":128,"h":128}},"campfire.img":{"frame":{"x":2678,"y":132,"w":116,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":2,"w":116,"h":124},"sourceSize":{"w":128,"h":128}},"face-angry.img":{"frame":{"x":3253,"y":2,"w":124,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":124,"h":124},"sourceSize":{"w":128,"h":128}},"face-bandaged.img":{"frame":{"x":3381,"y":2,"w":124,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":124,"h":124},"sourceSize":{"w":128,"h":128}},"face-disappoint.img":{"frame":{"x":3509,"y":2,"w":124,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":124,"h":124},"sourceSize":{"w":128,"h":128}},"face-happy.img":{"frame":{"x":3637,"y":2,"w":124,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":124,"h":124},"sourceSize":{"w":128,"h":128}},"face-heart.img":{"frame":{"x":3765,"y":2,"w":124,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":124,"h":124},"sourceSize":{"w":128,"h":128}},"face-joy.img":{"frame":{"x":3893,"y":2,"w":124,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":124,"h":124},"sourceSize":{"w":128,"h":128}},"face-monocle.img":{"frame":{"x":3253,"y":130,"w":124,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":124,"h":124},"sourceSize":{"w":128,"h":128}},"face-picasso.img":{"frame":{"x":3115,"y":131,"w":122,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":2,"w":122,"h":124},"sourceSize":{"w":128,"h":128}},"face-sad.img":{"frame":{"x":2980,"y":237,"w":124,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":124,"h":124},"sourceSize":{"w":128,"h":128}},"face-sob.img":{"frame":{"x":2798,"y":259,"w":124,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":124,"h":124},"sourceSize":{"w":128,"h":128}},"face-sunglass.img":{"frame":{"x":2592,"y":262,"w":124,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":124,"h":124},"sourceSize":{"w":128,"h":128}},"face-upsidedown.img":{"frame":{"x":3381,"y":130,"w":124,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":124,"h":124},"sourceSize":{"w":128,"h":128}},"heart.img":{"frame":{"x":3509,"y":130,"w":124,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":4,"w":124,"h":122},"sourceSize":{"w":128,"h":128}},"salt.img":{"frame":{"x":3637,"y":130,"w":124,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":5,"w":124,"h":118},"sourceSize":{"w":128,"h":128}},"sleepy.img":{"frame":{"x":3765,"y":130,"w":124,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":6,"w":124,"h":116},"sourceSize":{"w":128,"h":128}},"thumbs-up.img":{"frame":{"x":2149,"y":843,"w":104,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":2,"w":104,"h":124},"sourceSize":{"w":128,"h":128}},"bullets.img":{"frame":{"x":3893,"y":130,"w":86,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":21,"y":2,"w":86,"h":124},"sourceSize":{"w":128,"h":128}},"loadout-emote.img":{"frame":{"x":3765,"y":250,"w":124,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":124,"h":124},"sourceSize":{"w":128,"h":128}},"reload.img":{"frame":{"x":3983,"y":130,"w":108,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":2,"w":108,"h":124},"sourceSize":{"w":128,"h":128}},"trash.img":{"frame":{"x":3637,"y":252,"w":108,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":2,"w":108,"h":124},"sourceSize":{"w":128,"h":128}},"gun-deagle-01.img":{"frame":{"x":4021,"y":2,"w":40,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":108,"w":40,"h":124},"sourceSize":{"w":56,"h":232}},"gun-med-01.img":{"frame":{"x":4065,"y":2,"w":28,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":28,"h":124},"sourceSize":{"w":28,"h":124}},"loot-perk-splinter.img":{"frame":{"x":3509,"y":256,"w":116,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":2,"w":116,"h":124},"sourceSize":{"w":128,"h":128}},"loot-perk-targeting.img":{"frame":{"x":3893,"y":258,"w":124,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":124,"h":124},"sourceSize":{"w":128,"h":128}},"loot-weapon-an94.img":{"frame":{"x":3749,"y":378,"w":114,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":2,"w":114,"h":124},"sourceSize":{"w":128,"h":128}},"loot-weapon-m1a1.img":{"frame":{"x":3629,"y":380,"w":114,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":2,"w":114,"h":124},"sourceSize":{"w":128,"h":128}},"loot-weapon-p30l-dual.img":{"frame":{"x":3867,"y":386,"w":124,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":8,"w":124,"h":112},"sourceSize":{"w":128,"h":128}},"loot-weapon-pkp.img":{"frame":{"x":3867,"y":502,"w":114,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":2,"w":114,"h":124},"sourceSize":{"w":128,"h":128}},"loot-weapon-saiga.img":{"frame":{"x":3747,"y":506,"w":113,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":2,"w":113,"h":124},"sourceSize":{"w":128,"h":128}},"loot-weapon-scarssr.img":{"frame":{"x":3864,"y":630,"w":124,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":5,"w":124,"h":122},"sourceSize":{"w":128,"h":128}},"loot-weapon-scorpion.img":{"frame":{"x":3241,"y":258,"w":113,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":2,"w":113,"h":124},"sourceSize":{"w":128,"h":128}},"player-visor-scout.img":{"frame":{"x":3985,"y":502,"w":76,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":77,"y":26,"w":76,"h":124},"sourceSize":{"w":176,"h":176}},"part-boost-naturalize.img":{"frame":{"x":3992,"y":630,"w":92,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":18,"y":2,"w":92,"h":124},"sourceSize":{"w":128,"h":128}},"part-log-01.img":{"frame":{"x":3108,"y":259,"w":124,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":124,"h":124},"sourceSize":{"w":128,"h":128}},"proj-martyrdom-01.img":{"frame":{"x":3358,"y":258,"w":124,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":124,"h":124},"sourceSize":{"w":128,"h":128}},"police.img":{"frame":{"x":3486,"y":384,"w":100,"h":123},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":2,"w":100,"h":123},"sourceSize":{"w":128,"h":128}},"tombstone.img":{"frame":{"x":3590,"y":508,"w":112,"h":123},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":0,"w":112,"h":123},"sourceSize":{"w":128,"h":128}},"loadout-melee.img":{"frame":{"x":3706,"y":634,"w":123,"h":121},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":123,"h":121},"sourceSize":{"w":128,"h":128}},"part-splat-03.img":{"frame":{"x":3833,"y":756,"w":123,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":6,"w":123,"h":120},"sourceSize":{"w":144,"h":144}},"candy-corn.img":{"frame":{"x":2231,"y":2,"w":104,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":3,"w":104,"h":122},"sourceSize":{"w":128,"h":128}},"cupcake.img":{"frame":{"x":3960,"y":758,"w":108,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":3,"w":108,"h":122},"sourceSize":{"w":128,"h":128}},"ice-cream.img":{"frame":{"x":1146,"y":851,"w":66,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":31,"y":3,"w":66,"h":122},"sourceSize":{"w":128,"h":128}},"snowman.img":{"frame":{"x":2926,"y":365,"w":96,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":3,"w":96,"h":122},"sourceSize":{"w":128,"h":128}},"surviv.img":{"frame":{"x":2720,"y":387,"w":122,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":122,"h":122},"sourceSize":{"w":128,"h":128}},"emote.img":{"frame":{"x":2592,"y":390,"w":122,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":122,"h":122},"sourceSize":{"w":128,"h":128}},"loot-perk-hotw.img":{"frame":{"x":3236,"y":386,"w":106,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":3,"w":106,"h":122},"sourceSize":{"w":128,"h":128}},"loot-perk-hunted.img":{"frame":{"x":3346,"y":386,"w":122,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":122,"h":122},"sourceSize":{"w":128,"h":128}},"loot-perk-rare-potato.img":{"frame":{"x":3472,"y":511,"w":90,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":19,"y":3,"w":90,"h":122},"sourceSize":{"w":128,"h":128}},"loot-throwable-smoke.img":{"frame":{"x":3566,"y":635,"w":84,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":22,"y":3,"w":84,"h":122},"sourceSize":{"w":128,"h":128}},"loot-weapon-awc.img":{"frame":{"x":3654,"y":759,"w":122,"h":121},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":6,"w":122,"h":121},"sourceSize":{"w":128,"h":128}},"loot-weapon-bugle.img":{"frame":{"x":3780,"y":880,"w":122,"h":114},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":7,"w":122,"h":114},"sourceSize":{"w":128,"h":128}},"loot-weapon-glock-dual.img":{"frame":{"x":3906,"y":884,"w":122,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":9,"w":122,"h":110},"sourceSize":{"w":128,"h":128}},"loot-weapon-m249.img":{"frame":{"x":3026,"y":387,"w":116,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":3,"w":116,"h":122},"sourceSize":{"w":128,"h":128}},"loot-weapon-m39.img":{"frame":{"x":2846,"y":491,"w":108,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":3,"w":108,"h":122},"sourceSize":{"w":128,"h":128}},"loot-weapon-mk12.img":{"frame":{"x":2718,"y":513,"w":114,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":3,"w":114,"h":122},"sourceSize":{"w":128,"h":128}},"loot-weapon-potato-cannon.img":{"frame":{"x":2579,"y":516,"w":122,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":122,"h":122},"sourceSize":{"w":128,"h":128}},"part-heal-tomoe.img":{"frame":{"x":3146,"y":512,"w":102,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":3,"w":102,"h":122},"sourceSize":{"w":128,"h":128}},"part-leaf-01.img":{"frame":{"x":2958,"y":513,"w":122,"h":106},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":11,"w":122,"h":106},"sourceSize":{"w":128,"h":128}},"loot-weapon-sv98.img":{"frame":{"x":3252,"y":512,"w":121,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":7,"w":121,"h":118},"sourceSize":{"w":128,"h":128}},"loot-weapon-usas.img":{"frame":{"x":3252,"y":634,"w":121,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":121,"h":120},"sourceSize":{"w":128,"h":128}},"proj-frag-nopin-01.img":{"frame":{"x":2836,"y":617,"w":109,"h":121},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":19,"y":6,"w":109,"h":121},"sourceSize":{"w":128,"h":128}},"proj-frag-nopin-02.img":{"frame":{"x":2705,"y":639,"w":109,"h":121},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":19,"y":6,"w":109,"h":121},"sourceSize":{"w":128,"h":128}},"proj-frag-nopin-nolever-01.img":{"frame":{"x":3377,"y":512,"w":90,"h":121},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":19,"y":6,"w":90,"h":121},"sourceSize":{"w":128,"h":128}},"proj-frag-nopin-nolever-02.img":{"frame":{"x":3377,"y":637,"w":90,"h":121},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":19,"y":6,"w":90,"h":121},"sourceSize":{"w":128,"h":128}},"proj-frag-pin-01.img":{"frame":{"x":3471,"y":761,"w":110,"h":121},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":6,"w":110,"h":121},"sourceSize":{"w":128,"h":128}},"proj-frag-pin-02.img":{"frame":{"x":3585,"y":884,"w":110,"h":121},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":6,"w":110,"h":121},"sourceSize":{"w":128,"h":128}},"donut.img":{"frame":{"x":2949,"y":623,"w":120,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":120,"h":120},"sourceSize":{"w":128,"h":128}},"egg.img":{"frame":{"x":2818,"y":742,"w":98,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":15,"y":4,"w":98,"h":120},"sourceSize":{"w":128,"h":128}},"forest.img":{"frame":{"x":3073,"y":638,"w":120,"h":98},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":15,"w":120,"h":98},"sourceSize":{"w":128,"h":128}},"pilgrim-hat.img":{"frame":{"x":2137,"y":619,"w":120,"h":88},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":20,"w":120,"h":88},"sourceSize":{"w":128,"h":128}},"rainbow.img":{"frame":{"x":3073,"y":740,"w":119,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":4,"w":119,"h":120},"sourceSize":{"w":128,"h":128}},"turkey-animal.img":{"frame":{"x":2920,"y":747,"w":120,"h":102},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":13,"w":120,"h":102},"sourceSize":{"w":128,"h":128}},"loadout-kill-icon.img":{"frame":{"x":2920,"y":853,"w":120,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":5,"w":120,"h":118},"sourceSize":{"w":128,"h":128}},"player-medic.img":{"frame":{"x":3196,"y":758,"w":120,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":14,"w":120,"h":120},"sourceSize":{"w":148,"h":148}},"skull.img":{"frame":{"x":3320,"y":762,"w":120,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":5,"w":120,"h":118},"sourceSize":{"w":128,"h":128}},"gun-p30l-01.img":{"frame":{"x":3590,"y":384,"w":31,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":112,"w":31,"h":120},"sourceSize":{"w":56,"h":232}},"loot-chest-01.img":{"frame":{"x":3044,"y":864,"w":120,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":120,"h":120},"sourceSize":{"w":128,"h":128}},"loot-chest-02.img":{"frame":{"x":3471,"y":637,"w":76,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":26,"y":4,"w":76,"h":120},"sourceSize":{"w":128,"h":128}},"loot-medical-heart.img":{"frame":{"x":3168,"y":882,"w":120,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":12,"w":120,"h":104},"sourceSize":{"w":128,"h":128}},"loot-perk-bonus-45.img":{"frame":{"x":3292,"y":884,"w":120,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":12,"w":120,"h":104},"sourceSize":{"w":128,"h":128}},"loot-perk-bonus-9mm.img":{"frame":{"x":3416,"y":886,"w":120,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":12,"w":120,"h":104},"sourceSize":{"w":128,"h":128}},"loot-perk-bonus-assault.img":{"frame":{"x":2491,"y":642,"w":120,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":12,"w":120,"h":104},"sourceSize":{"w":128,"h":128}},"loot-perk-chambered.img":{"frame":{"x":2491,"y":750,"w":120,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":120,"h":120},"sourceSize":{"w":128,"h":128}},"loot-perk-halloween-mystery.img":{"frame":{"x":2615,"y":764,"w":108,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":2,"w":108,"h":120},"sourceSize":{"w":128,"h":128}},"loot-perk-treat-12g.img":{"frame":{"x":2727,"y":866,"w":120,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":12,"w":120,"h":104},"sourceSize":{"w":128,"h":128}},"loot-perk-treat-556.img":{"frame":{"x":2399,"y":874,"w":120,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":12,"w":120,"h":104},"sourceSize":{"w":128,"h":128}},"loot-perk-treat-762.img":{"frame":{"x":2523,"y":888,"w":120,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":12,"w":120,"h":104},"sourceSize":{"w":128,"h":128}},"loot-perk-treat-9mm.img":{"frame":{"x":2399,"y":982,"w":120,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":12,"w":120,"h":104},"sourceSize":{"w":128,"h":128}},"loot-perk-trick-m9.img":{"frame":{"x":2647,"y":974,"w":120,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":12,"w":120,"h":104},"sourceSize":{"w":128,"h":128}},"loot-weapon-ak.img":{"frame":{"x":2523,"y":996,"w":102,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":4,"w":102,"h":120},"sourceSize":{"w":128,"h":128}},"loot-weapon-colt45.img":{"frame":{"x":2399,"y":1090,"w":96,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":4,"w":96,"h":120},"sourceSize":{"w":128,"h":128}},"loot-weapon-l86.img":{"frame":{"x":2771,"y":974,"w":118,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":4,"w":118,"h":120},"sourceSize":{"w":128,"h":128}},"loot-weapon-m1911.img":{"frame":{"x":2629,"y":1082,"w":108,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":4,"w":108,"h":120},"sourceSize":{"w":128,"h":128}},"loot-weapon-m9-cursed.img":{"frame":{"x":2499,"y":1120,"w":98,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":15,"y":4,"w":98,"h":120},"sourceSize":{"w":128,"h":128}},"loot-weapon-ots38.img":{"frame":{"x":1220,"y":2044,"w":81,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":23,"y":4,"w":81,"h":120},"sourceSize":{"w":128,"h":128}},"loot-weapon-qbb97.img":{"frame":{"x":2893,"y":975,"w":118,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":4,"w":118,"h":120},"sourceSize":{"w":128,"h":128}},"part-feather-01.img":{"frame":{"x":2741,"y":1098,"w":120,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":120,"h":120},"sourceSize":{"w":128,"h":128}},"part-feather-02.img":{"frame":{"x":2601,"y":1206,"w":120,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":120,"h":120},"sourceSize":{"w":128,"h":128}},"part-potato-02.img":{"frame":{"x":3015,"y":988,"w":94,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":17,"y":4,"w":94,"h":120},"sourceSize":{"w":128,"h":128}},"loot-perk-windwalk.img":{"frame":{"x":1023,"y":719,"w":86,"h":119},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":21,"y":6,"w":86,"h":119},"sourceSize":{"w":128,"h":128}},"loot-weapon-hk416.img":{"frame":{"x":2865,"y":1099,"w":106,"h":119},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":4,"w":106,"h":119},"sourceSize":{"w":128,"h":128}},"loot-weapon-m1100.img":{"frame":{"x":2323,"y":1214,"w":119,"h":119},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":7,"w":119,"h":119},"sourceSize":{"w":128,"h":128}},"cattle.img":{"frame":{"x":2446,"y":1244,"w":118,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":8,"w":118,"h":112},"sourceSize":{"w":128,"h":128}},"emote-medical-healthkit.img":{"frame":{"x":2268,"y":1337,"w":118,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":12,"w":118,"h":104},"sourceSize":{"w":128,"h":128}},"ok.img":{"frame":{"x":2615,"y":642,"w":84,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":22,"y":5,"w":84,"h":118},"sourceSize":{"w":128,"h":128}},"whale.img":{"frame":{"x":2101,"y":258,"w":118,"h":94},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":17,"w":118,"h":94},"sourceSize":{"w":128,"h":128}},"danger.img":{"frame":{"x":2142,"y":1431,"w":118,"h":108},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":10,"w":118,"h":108},"sourceSize":{"w":128,"h":128}},"loadout-boost.img":{"frame":{"x":3113,"y":990,"w":116,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":5,"w":116,"h":118},"sourceSize":{"w":128,"h":128}},"mag-glass.img":{"frame":{"x":3233,"y":992,"w":118,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":5,"w":118,"h":118},"sourceSize":{"w":128,"h":128}},"loot-chest-03.img":{"frame":{"x":3355,"y":994,"w":96,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":5,"w":96,"h":118},"sourceSize":{"w":128,"h":128}},"loot-helmet-02.img":{"frame":{"x":2267,"y":522,"w":118,"h":76},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":26,"w":118,"h":76},"sourceSize":{"w":128,"h":128}},"loot-medical-healthkit.img":{"frame":{"x":3455,"y":994,"w":118,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":12,"w":118,"h":104},"sourceSize":{"w":128,"h":128}},"loot-medical-pill.img":{"frame":{"x":2975,"y":1112,"w":118,"h":90},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":19,"w":118,"h":90},"sourceSize":{"w":128,"h":128}},"loot-melee-bayonet-rugged.img":{"frame":{"x":3706,"y":508,"w":36,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":46,"y":5,"w":36,"h":118},"sourceSize":{"w":128,"h":128}},"loot-melee-bayonet-woodland.img":{"frame":{"x":3585,"y":761,"w":36,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":46,"y":5,"w":36,"h":118},"sourceSize":{"w":128,"h":128}},"loot-melee-bowie-frontier.img":{"frame":{"x":3654,"y":635,"w":42,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":43,"y":5,"w":42,"h":118},"sourceSize":{"w":128,"h":128}},"loot-melee-bowie-vintage.img":{"frame":{"x":1178,"y":162,"w":42,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":43,"y":5,"w":42,"h":118},"sourceSize":{"w":128,"h":128}},"loot-melee-pan-black.img":{"frame":{"x":3097,"y":1112,"w":118,"h":86},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":21,"w":118,"h":86},"sourceSize":{"w":128,"h":128}},"loot-pack-00.img":{"frame":{"x":3219,"y":1114,"w":90,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":19,"y":5,"w":90,"h":118},"sourceSize":{"w":128,"h":128}},"loot-pack-02.img":{"frame":{"x":3097,"y":1202,"w":88,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":20,"y":5,"w":88,"h":118},"sourceSize":{"w":128,"h":128}},"loot-perk-fabricate.img":{"frame":{"x":2975,"y":1206,"w":118,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":5,"w":118,"h":118},"sourceSize":{"w":128,"h":128}},"loot-perk-scavenger_adv.img":{"frame":{"x":2725,"y":1222,"w":118,"h":74},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":27,"w":118,"h":74},"sourceSize":{"w":128,"h":128}},"loot-perk-trick-drain.img":{"frame":{"x":2847,"y":1222,"w":118,"h":83},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":22,"w":118,"h":83},"sourceSize":{"w":128,"h":128}},"loot-weapon-famas.img":{"frame":{"x":2725,"y":1300,"w":112,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":5,"w":112,"h":118},"sourceSize":{"w":128,"h":128}},"loot-weapon-m870.img":{"frame":{"x":2841,"y":1309,"w":118,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":6,"w":118,"h":116},"sourceSize":{"w":128,"h":128}},"loot-weapon-m9.img":{"frame":{"x":2568,"y":1330,"w":96,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":5,"w":96,"h":118},"sourceSize":{"w":128,"h":128}},"loot-weapon-model94.img":{"frame":{"x":2668,"y":1422,"w":118,"h":109},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":9,"w":118,"h":109},"sourceSize":{"w":128,"h":128}},"loot-weapon-mosin.img":{"frame":{"x":2390,"y":1360,"w":118,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":6,"w":118,"h":116},"sourceSize":{"w":128,"h":128}},"loot-weapon-scout.img":{"frame":{"x":2264,"y":1445,"w":118,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":9,"w":118,"h":110},"sourceSize":{"w":128,"h":128}},"loot-weapon-ump9.img":{"frame":{"x":2142,"y":1543,"w":114,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":5,"w":114,"h":118},"sourceSize":{"w":128,"h":128}},"loot-weapon-vector45.img":{"frame":{"x":2512,"y":1452,"w":104,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":5,"w":104,"h":118},"sourceSize":{"w":128,"h":128}},"loot-xp-book-01.img":{"frame":{"x":2386,"y":1480,"w":96,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":5,"w":96,"h":118},"sourceSize":{"w":128,"h":128}},"loot-xp-book-02.img":{"frame":{"x":2260,"y":1559,"w":96,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":5,"w":96,"h":118},"sourceSize":{"w":128,"h":128}},"loot-xp-book-03.img":{"frame":{"x":2043,"y":1665,"w":96,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":5,"w":96,"h":118},"sourceSize":{"w":128,"h":128}},"loot-xp-book-04.img":{"frame":{"x":2143,"y":1665,"w":96,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":5,"w":96,"h":118},"sourceSize":{"w":128,"h":128}},"loot-xp-book-05.img":{"frame":{"x":3699,"y":998,"w":96,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":5,"w":96,"h":118},"sourceSize":{"w":128,"h":128}},"loot-xp-book-06.img":{"frame":{"x":3577,"y":1009,"w":96,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":5,"w":96,"h":118},"sourceSize":{"w":128,"h":128}},"loot-xp-stump-01.img":{"frame":{"x":3455,"y":1102,"w":118,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":5,"w":118,"h":118},"sourceSize":{"w":128,"h":128}},"part-boost-basic.img":{"frame":{"x":3313,"y":1116,"w":116,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":5,"w":116,"h":118},"sourceSize":{"w":128,"h":128}},"part-boost-star.img":{"frame":{"x":3189,"y":1236,"w":118,"h":114},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":7,"w":118,"h":114},"sourceSize":{"w":128,"h":128}},"loot-perk-steelskin.img":{"frame":{"x":733,"y":1411,"w":82,"h":117},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":23,"y":5,"w":82,"h":117},"sourceSize":{"w":128,"h":128}},"acorn.img":{"frame":{"x":2963,"y":1328,"w":104,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":6,"w":104,"h":116},"sourceSize":{"w":128,"h":128}},"bugle-inspiration-blue.img":{"frame":{"x":3097,"y":1324,"w":88,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":26,"y":6,"w":88,"h":116},"sourceSize":{"w":128,"h":128}},"bugle-inspiration-red.img":{"frame":{"x":2790,"y":1429,"w":88,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":26,"y":6,"w":88,"h":116},"sourceSize":{"w":128,"h":128}},"flex.img":{"frame":{"x":2620,"y":1535,"w":109,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":6,"w":109,"h":116},"sourceSize":{"w":128,"h":128}},"ghost-base.img":{"frame":{"x":2486,"y":1574,"w":104,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":6,"w":104,"h":116},"sourceSize":{"w":128,"h":128}},"cake.img":{"frame":{"x":2360,"y":1602,"w":102,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":2,"w":102,"h":116},"sourceSize":{"w":120,"h":120}},"gas.img":{"frame":{"x":3799,"y":998,"w":116,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":6,"w":116,"h":116},"sourceSize":{"w":128,"h":128}},"loadout-heal.img":{"frame":{"x":3919,"y":998,"w":116,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":6,"w":116,"h":116},"sourceSize":{"w":128,"h":128}},"loadout-outfit.img":{"frame":{"x":3799,"y":1118,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"player-patch-blue.img":{"frame":{"x":856,"y":266,"w":116,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":22,"y":50,"w":116,"h":60},"sourceSize":{"w":160,"h":160}},"player-patch-red.img":{"frame":{"x":858,"y":988,"w":116,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":22,"y":44,"w":116,"h":72},"sourceSize":{"w":160,"h":160}},"target.img":{"frame":{"x":3677,"y":1120,"w":116,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":6,"w":116,"h":116},"sourceSize":{"w":128,"h":128}},"loot-medical-bandage.img":{"frame":{"x":2243,"y":1681,"w":106,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":6,"w":106,"h":116},"sourceSize":{"w":128,"h":128}},"loot-melee-huntsman-burnished.img":{"frame":{"x":106,"y":2454,"w":24,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":52,"y":6,"w":24,"h":116},"sourceSize":{"w":128,"h":128}},"loot-melee-huntsman-rugged.img":{"frame":{"x":3197,"y":638,"w":24,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":52,"y":6,"w":24,"h":116},"sourceSize":{"w":128,"h":128}},"loot-pack-01.img":{"frame":{"x":3577,"y":1131,"w":94,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":17,"y":6,"w":94,"h":116},"sourceSize":{"w":128,"h":128}},"loot-perk-inspiration.img":{"frame":{"x":3433,"y":1224,"w":115,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":4,"w":115,"h":116},"sourceSize":{"w":128,"h":128}},"loot-shirt-01.img":{"frame":{"x":3311,"y":1238,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-shirt-outfitBase.img":{"frame":{"x":3919,"y":1118,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-shirt-outfitCamo.img":{"frame":{"x":1969,"y":1787,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-shirt-outfitCarbonFiber.img":{"frame":{"x":2089,"y":1787,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-shirt-outfitCobaltShell.img":{"frame":{"x":3797,"y":1234,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-shirt-outfitDarkGloves.img":{"frame":{"x":3675,"y":1240,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-shirt-outfitDarkShirt.img":{"frame":{"x":3552,"y":1251,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-shirt-outfitDesertCamo.img":{"frame":{"x":3431,"y":1344,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-shirt-outfitDev.img":{"frame":{"x":3917,"y":1234,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-shirt-outfitGD.img":{"frame":{"x":3189,"y":1354,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-shirt-outfitHeaven.img":{"frame":{"x":3309,"y":1354,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-shirt-outfitKeyLime.img":{"frame":{"x":3795,"y":1350,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-shirt-outfitLumber.img":{"frame":{"x":3672,"y":1356,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-shirt-outfitMod.img":{"frame":{"x":3551,"y":1367,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-shirt-outfitParma.img":{"frame":{"x":3429,"y":1460,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-shirt-outfitParmaPrestige.img":{"frame":{"x":3915,"y":1350,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-shirt-outfitRed.img":{"frame":{"x":3792,"y":1466,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-shirt-outfitRoyalFortune.img":{"frame":{"x":3671,"y":1472,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-shirt-outfitSpetsnaz.img":{"frame":{"x":3549,"y":1483,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-shirt-outfitTurkey.img":{"frame":{"x":3912,"y":1466,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-shirt-outfitWheat.img":{"frame":{"x":2882,"y":1448,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-shirt-outfitWhite.img":{"frame":{"x":2733,"y":1549,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-shirt-outfitWoodland.img":{"frame":{"x":2594,"y":1655,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-weapon-blr.img":{"frame":{"x":2466,"y":1694,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-weapon-flare-gun.img":{"frame":{"x":2491,"y":522,"w":82,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":23,"y":6,"w":82,"h":116},"sourceSize":{"w":128,"h":128}},"loot-weapon-scar.img":{"frame":{"x":2353,"y":1722,"w":104,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":6,"w":104,"h":116},"sourceSize":{"w":128,"h":128}},"part-boost-shuriken.img":{"frame":{"x":2209,"y":1801,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"part-heal-basic.img":{"frame":{"x":3002,"y":1448,"w":116,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":6,"w":116,"h":116},"sourceSize":{"w":128,"h":128}},"part-heal-heart.img":{"frame":{"x":2853,"y":1564,"w":116,"h":114},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":12,"w":116,"h":114},"sourceSize":{"w":128,"h":128}},"part-heal-moon.img":{"frame":{"x":2714,"y":1665,"w":112,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":6,"w":112,"h":116},"sourceSize":{"w":128,"h":128}},"part-leaf-03.img":{"frame":{"x":2586,"y":1771,"w":116,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":6,"w":116,"h":116},"sourceSize":{"w":128,"h":128}},"part-leaf-04.img":{"frame":{"x":2461,"y":1810,"w":116,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":6,"w":116,"h":116},"sourceSize":{"w":128,"h":128}},"part-leaf-05.img":{"frame":{"x":2329,"y":1842,"w":116,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":6,"w":116,"h":116},"sourceSize":{"w":128,"h":128}},"part-leaf-06.img":{"frame":{"x":1969,"y":1903,"w":116,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":6,"w":116,"h":116},"sourceSize":{"w":128,"h":128}},"part-spark-01.img":{"frame":{"x":2089,"y":1903,"w":116,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":116,"h":116},"sourceSize":{"w":120,"h":120}},"part-spark-02.img":{"frame":{"x":2209,"y":1917,"w":116,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":116,"h":116},"sourceSize":{"w":120,"h":120}},"player-patch-01.img":{"frame":{"x":3791,"y":1582,"w":116,"h":71},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":22,"y":1,"w":116,"h":71},"sourceSize":{"w":160,"h":160}},"player-patch-02.img":{"frame":{"x":3669,"y":1588,"w":116,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":22,"y":1,"w":116,"h":60},"sourceSize":{"w":160,"h":160}},"part-blossom-03.img":{"frame":{"x":3911,"y":1582,"w":115,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":10,"w":115,"h":112},"sourceSize":{"w":128,"h":128}},"part-blossom-04.img":{"frame":{"x":3122,"y":1470,"w":115,"h":113},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":9,"w":115,"h":113},"sourceSize":{"w":128,"h":128}},"bugle-final-blue.img":{"frame":{"x":2973,"y":1568,"w":104,"h":114},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":7,"w":104,"h":114},"sourceSize":{"w":128,"h":128}},"bugle-final-red.img":{"frame":{"x":2830,"y":1682,"w":104,"h":114},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":7,"w":104,"h":114},"sourceSize":{"w":128,"h":128}},"gg.img":{"frame":{"x":2706,"y":1785,"w":114,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":28,"w":114,"h":72},"sourceSize":{"w":128,"h":128}},"pumpkin.img":{"frame":{"x":3241,"y":1470,"w":108,"h":114},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":7,"w":108,"h":114},"sourceSize":{"w":128,"h":128}},"tap.img":{"frame":{"x":3081,"y":1587,"w":96,"h":114},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":7,"w":96,"h":114},"sourceSize":{"w":128,"h":128}},"loot-pack-03.img":{"frame":{"x":2938,"y":1686,"w":104,"h":114},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":7,"w":104,"h":114},"sourceSize":{"w":128,"h":128}},"loot-perk-final-bugle.img":{"frame":{"x":2824,"y":1800,"w":104,"h":114},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":3,"w":104,"h":114},"sourceSize":{"w":128,"h":128}},"loot-throwable-smoke-egg.img":{"frame":{"x":3146,"y":387,"w":82,"h":114},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":22,"y":3,"w":82,"h":114},"sourceSize":{"w":128,"h":128}},"loot-weapon-deagle.img":{"frame":{"x":2706,"y":1861,"w":104,"h":114},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":7,"w":104,"h":114},"sourceSize":{"w":128,"h":128}},"loot-weapon-garand.img":{"frame":{"x":2581,"y":1891,"w":112,"h":114},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":7,"w":112,"h":114},"sourceSize":{"w":128,"h":128}},"loot-weapon-mp220.img":{"frame":{"x":2449,"y":1930,"w":114,"h":106},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":11,"w":114,"h":106},"sourceSize":{"w":128,"h":128}},"loot-weapon-mp5.img":{"frame":{"x":2329,"y":1962,"w":96,"h":114},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":7,"w":96,"h":114},"sourceSize":{"w":128,"h":128}},"loot-weapon-ot38.img":{"frame":{"x":3353,"y":1576,"w":90,"h":114},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":19,"y":7,"w":90,"h":114},"sourceSize":{"w":128,"h":128}},"loot-weapon-spas12.img":{"frame":{"x":3447,"y":1576,"w":96,"h":114},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":7,"w":96,"h":114},"sourceSize":{"w":128,"h":128}},"santa-hat.img":{"frame":{"x":3547,"y":1599,"w":113,"h":109},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":15,"y":7,"w":113,"h":109},"sourceSize":{"w":128,"h":128}},"loot-melee-pan-black-side.img":{"frame":{"x":3486,"y":258,"w":19,"h":113},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":55,"y":7,"w":19,"h":113},"sourceSize":{"w":128,"h":128}},"loot-perk-broken-arrow.img":{"frame":{"x":3664,"y":1652,"w":113,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":5,"w":113,"h":112},"sourceSize":{"w":128,"h":128}},"ammo-12gauge.img":{"frame":{"x":3781,"y":1657,"w":112,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":8,"w":112,"h":112},"sourceSize":{"w":128,"h":128}},"ammo-308sub.img":{"frame":{"x":3181,"y":1588,"w":112,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":8,"w":112,"h":112},"sourceSize":{"w":128,"h":128}},"ammo-45acp.img":{"frame":{"x":3897,"y":1698,"w":112,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":8,"w":112,"h":112},"sourceSize":{"w":128,"h":128}},"ammo-50AE.img":{"frame":{"x":3297,"y":1694,"w":112,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":8,"w":112,"h":112},"sourceSize":{"w":128,"h":128}},"ammo-556mm.img":{"frame":{"x":3181,"y":1704,"w":112,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":8,"w":112,"h":112},"sourceSize":{"w":128,"h":128}},"ammo-762mm.img":{"frame":{"x":3413,"y":1694,"w":112,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":8,"w":112,"h":112},"sourceSize":{"w":128,"h":128}},"ammo-9mm.img":{"frame":{"x":3046,"y":1705,"w":112,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":8,"w":112,"h":112},"sourceSize":{"w":128,"h":128}},"ammo-box.img":{"frame":{"x":3529,"y":1712,"w":112,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":8,"w":112,"h":112},"sourceSize":{"w":128,"h":128}},"ammo-flare.img":{"frame":{"x":3645,"y":1768,"w":112,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":8,"w":112,"h":112},"sourceSize":{"w":128,"h":128}},"chick.img":{"frame":{"x":2932,"y":1804,"w":102,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":8,"w":102,"h":112},"sourceSize":{"w":128,"h":128}},"pineapple.img":{"frame":{"x":3995,"y":386,"w":68,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":30,"y":1,"w":68,"h":112},"sourceSize":{"w":128,"h":128}},"loadout-player-icon.img":{"frame":{"x":2814,"y":1918,"w":112,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":9,"w":112,"h":110},"sourceSize":{"w":128,"h":128}},"player-emote.img":{"frame":{"x":2697,"y":1979,"w":112,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":9,"w":112,"h":110},"sourceSize":{"w":128,"h":128}},"player-gui.img":{"frame":{"x":2567,"y":2009,"w":112,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":10,"w":112,"h":110},"sourceSize":{"w":128,"h":128}},"loot-helmet-01.img":{"frame":{"x":3761,"y":1773,"w":112,"h":102},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":13,"w":112,"h":102},"sourceSize":{"w":128,"h":128}},"loot-helmet-03.img":{"frame":{"x":2429,"y":2040,"w":112,"h":86},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":21,"w":112,"h":86},"sourceSize":{"w":128,"h":128}},"loot-perk-ap-rounds.img":{"frame":{"x":3877,"y":1814,"w":112,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":16,"w":112,"h":96},"sourceSize":{"w":128,"h":128}},"loot-perk-field-medic.img":{"frame":{"x":3993,"y":1814,"w":98,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":15,"y":11,"w":98,"h":112},"sourceSize":{"w":128,"h":128}},"loot-throwable-mirv.img":{"frame":{"x":3761,"y":1879,"w":82,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":23,"y":8,"w":82,"h":112},"sourceSize":{"w":128,"h":128}},"loot-weapon-p30l.img":{"frame":{"x":3847,"y":1914,"w":102,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":8,"w":102,"h":112},"sourceSize":{"w":128,"h":128}},"loot-weapon-vector.img":{"frame":{"x":3953,"y":1930,"w":110,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":8,"w":110,"h":112},"sourceSize":{"w":128,"h":128}},"loot-xp-bone-01.img":{"frame":{"x":3297,"y":1810,"w":102,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":10,"w":102,"h":112},"sourceSize":{"w":128,"h":128}},"player-visor-tank.img":{"frame":{"x":4013,"y":1698,"w":71,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":85,"y":32,"w":71,"h":112},"sourceSize":{"w":176,"h":176}},"proj-potato-01.img":{"frame":{"x":3403,"y":1810,"w":94,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":17,"y":8,"w":94,"h":112},"sourceSize":{"w":128,"h":128}},"proj-potato-02.img":{"frame":{"x":3162,"y":1820,"w":94,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":17,"y":8,"w":94,"h":112},"sourceSize":{"w":128,"h":128}},"loot-perk-small-arms.img":{"frame":{"x":3038,"y":1821,"w":107,"h":111},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":8,"w":107,"h":111},"sourceSize":{"w":128,"h":128}},"coconut.img":{"frame":{"x":3501,"y":1828,"w":110,"h":90},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":19,"w":110,"h":90},"sourceSize":{"w":128,"h":128}},"news.img":{"frame":{"x":3615,"y":1884,"w":110,"h":108},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":10,"w":110,"h":108},"sourceSize":{"w":128,"h":128}},"loot-medical-soda.img":{"frame":{"x":1155,"y":284,"w":60,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":34,"y":9,"w":60,"h":110},"sourceSize":{"w":128,"h":128}},"loot-perk-explosive.img":{"frame":{"x":3501,"y":1922,"w":110,"h":108},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":10,"w":110,"h":108},"sourceSize":{"w":128,"h":128}},"loot-perk-trick-chatty.img":{"frame":{"x":3729,"y":1995,"w":110,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":10,"w":110,"h":104},"sourceSize":{"w":128,"h":128}},"loot-weapon-glock.img":{"frame":{"x":2930,"y":1920,"w":90,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":19,"y":9,"w":90,"h":110},"sourceSize":{"w":128,"h":128}},"loot-xp-donut-01.img":{"frame":{"x":3615,"y":1996,"w":110,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":9,"w":110,"h":110},"sourceSize":{"w":128,"h":128}},"part-blossom-02.img":{"frame":{"x":3843,"y":2030,"w":105,"h":109},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":10,"w":105,"h":109},"sourceSize":{"w":128,"h":128}},"loot-perk-scavenger.img":{"frame":{"x":3729,"y":2103,"w":108,"h":100},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":14,"w":108,"h":100},"sourceSize":{"w":128,"h":128}},"loot-perk-turkey_shoot.img":{"frame":{"x":2813,"y":2032,"w":102,"h":108},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":10,"w":102,"h":108},"sourceSize":{"w":128,"h":128}},"player-visor-sniper.img":{"frame":{"x":2683,"y":2093,"w":101,"h":108},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":65,"y":34,"w":101,"h":108},"sourceSize":{"w":176,"h":176}},"part-blossom-01.img":{"frame":{"x":2545,"y":2123,"w":105,"h":108},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":10,"w":105,"h":108},"sourceSize":{"w":128,"h":128}},"part-leaf-01sv.img":{"frame":{"x":3952,"y":2046,"w":108,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":12,"w":108,"h":104},"sourceSize":{"w":128,"h":128}},"part-leaf-02.img":{"frame":{"x":3260,"y":1926,"w":108,"h":108},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":10,"w":108,"h":108},"sourceSize":{"w":128,"h":128}},"teabag.img":{"frame":{"x":3841,"y":2143,"w":107,"h":91},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":20,"y":19,"w":107,"h":91},"sourceSize":{"w":128,"h":128}},"eggplant.img":{"frame":{"x":3372,"y":1926,"w":106,"h":102},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":13,"w":106,"h":102},"sourceSize":{"w":128,"h":128}},"leek.img":{"frame":{"x":3372,"y":2032,"w":106,"h":106},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":11,"w":106,"h":106},"sourceSize":{"w":128,"h":128}},"trunk.img":{"frame":{"x":3482,"y":2034,"w":106,"h":100},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":14,"w":106,"h":100},"sourceSize":{"w":128,"h":128}},"chicken.img":{"frame":{"x":3592,"y":2110,"w":106,"h":82},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":23,"w":106,"h":82},"sourceSize":{"w":128,"h":128}},"ping-map-airdrop.img":{"frame":{"x":2720,"y":260,"w":74,"h":106},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":27,"y":10,"w":74,"h":106},"sourceSize":{"w":128,"h":128}},"player-captain.img":{"frame":{"x":3482,"y":2138,"w":106,"h":106},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":21,"y":21,"w":106,"h":106},"sourceSize":{"w":148,"h":148}},"loot-perk-martyrdom.img":{"frame":{"x":3592,"y":2196,"w":106,"h":102},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":13,"w":106,"h":102},"sourceSize":{"w":128,"h":128}},"loot-perk-takedown.img":{"frame":{"x":3702,"y":2207,"w":106,"h":106},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":11,"w":106,"h":106},"sourceSize":{"w":128,"h":128}},"loot-perk-trick-nothing.img":{"frame":{"x":3952,"y":2154,"w":106,"h":106},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":11,"w":106,"h":106},"sourceSize":{"w":128,"h":128}},"loot-perk-trick-size.img":{"frame":{"x":3812,"y":2238,"w":106,"h":106},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":11,"w":106,"h":106},"sourceSize":{"w":128,"h":128}},"loot-throwable-frag-egg.img":{"frame":{"x":3922,"y":2264,"w":94,"h":106},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":18,"y":11,"w":94,"h":106},"sourceSize":{"w":128,"h":128}},"part-pumpkin-01.img":{"frame":{"x":3024,"y":1936,"w":106,"h":94},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":17,"w":106,"h":94},"sourceSize":{"w":128,"h":128}},"proj-snowball-01.img":{"frame":{"x":3134,"y":1936,"w":106,"h":106},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":11,"w":106,"h":106},"sourceSize":{"w":128,"h":128}},"proj-snowball-02.img":{"frame":{"x":3244,"y":2038,"w":106,"h":106},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":11,"w":106,"h":106},"sourceSize":{"w":128,"h":128}},"loot-perk-flak-jacket.img":{"frame":{"x":3354,"y":2142,"w":102,"h":105},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":8,"w":102,"h":105},"sourceSize":{"w":128,"h":128}},"keyboard.img":{"frame":{"x":3460,"y":2248,"w":104,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":33,"w":104,"h":62},"sourceSize":{"w":128,"h":128}},"movement.img":{"frame":{"x":3568,"y":2302,"w":104,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":12,"w":104,"h":104},"sourceSize":{"w":128,"h":128}},"ribbon-blue.img":{"frame":{"x":3676,"y":2317,"w":98,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":25,"y":22,"w":98,"h":104},"sourceSize":{"w":148,"h":148}},"ribbon-red.img":{"frame":{"x":3778,"y":2348,"w":98,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":25,"y":22,"w":98,"h":104},"sourceSize":{"w":148,"h":148}},"loot-throwable-potato.img":{"frame":{"x":2919,"y":2034,"w":92,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":18,"y":12,"w":92,"h":104},"sourceSize":{"w":128,"h":128}},"loot-throwable-strobe.img":{"frame":{"x":3015,"y":2034,"w":104,"h":89},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":23,"w":104,"h":89},"sourceSize":{"w":128,"h":128}},"loot-weapon-groza.img":{"frame":{"x":3123,"y":2046,"w":104,"h":100},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":14,"w":104,"h":100},"sourceSize":{"w":128,"h":128}},"loot-weapon-mac10.img":{"frame":{"x":3015,"y":2127,"w":103,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":12,"w":103,"h":104},"sourceSize":{"w":128,"h":128}},"loot-xp-glasses-01.img":{"frame":{"x":3231,"y":2148,"w":104,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":12,"w":104,"h":104},"sourceSize":{"w":128,"h":128}},"player-visor-assault.img":{"frame":{"x":3122,"y":2150,"w":102,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":68,"y":36,"w":102,"h":104},"sourceSize":{"w":176,"h":176}},"player-visor-healer.img":{"frame":{"x":1127,"y":1396,"w":63,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":95,"y":36,"w":63,"h":104},"sourceSize":{"w":176,"h":176}},"ping-map-airstrike.img":{"frame":{"x":2851,"y":866,"w":44,"h":103},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":42,"y":13,"w":44,"h":103},"sourceSize":{"w":128,"h":128}},"question.img":{"frame":{"x":3353,"y":1470,"w":68,"h":102},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":30,"y":13,"w":68,"h":102},"sourceSize":{"w":128,"h":128}},"ping-map-help.img":{"frame":{"x":3339,"y":2251,"w":100,"h":102},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":13,"w":100,"h":102},"sourceSize":{"w":128,"h":128}},"loot-perk-endless-ammo.img":{"frame":{"x":3228,"y":2256,"w":102,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":15,"w":102,"h":96},"sourceSize":{"w":128,"h":128}},"loot-throwable-frag.img":{"frame":{"x":3443,"y":2314,"w":100,"h":102},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":13,"w":100,"h":102},"sourceSize":{"w":128,"h":128}},"crab.img":{"frame":{"x":3547,"y":2410,"w":100,"h":100},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":14,"w":100,"h":100},"sourceSize":{"w":128,"h":128}},"potato.img":{"frame":{"x":3651,"y":2425,"w":100,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":16,"w":100,"h":96},"sourceSize":{"w":128,"h":128}},"gun-ots38-01.img":{"frame":{"x":175,"y":1163,"w":34,"h":100},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":132,"w":34,"h":100},"sourceSize":{"w":56,"h":232}},"loot-melee-karambit-drowned.img":{"frame":{"x":863,"y":1976,"w":100,"h":42},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":43,"w":100,"h":42},"sourceSize":{"w":128,"h":128}},"loot-melee-karambit-prismatic.img":{"frame":{"x":1155,"y":662,"w":100,"h":42},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":43,"w":100,"h":42},"sourceSize":{"w":128,"h":128}},"loot-melee-karambit-rugged.img":{"frame":{"x":3880,"y":2374,"w":100,"h":42},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":43,"w":100,"h":42},"sourceSize":{"w":128,"h":128}},"baguette.img":{"frame":{"x":3984,"y":2374,"w":98,"h":98},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":15,"y":15,"w":98,"h":98},"sourceSize":{"w":128,"h":128}},"player-visor-demo.img":{"frame":{"x":2727,"y":764,"w":65,"h":98},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":85,"y":39,"w":65,"h":98},"sourceSize":{"w":176,"h":176}},"crosshair.img":{"frame":{"x":3880,"y":2420,"w":97,"h":97},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":97,"h":97},"sourceSize":{"w":97,"h":97}},"copy.img":{"frame":{"x":2919,"y":2142,"w":88,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":20,"y":16,"w":88,"h":96},"sourceSize":{"w":128,"h":128}},"gun-flare-01.img":{"frame":{"x":2228,"y":388,"w":24,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":136,"w":24,"h":96},"sourceSize":{"w":56,"h":232}},"gun-short-01.img":{"frame":{"x":3729,"y":1884,"w":28,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":28,"h":96},"sourceSize":{"w":28,"h":96}},"loot-perk-tree-climbing.img":{"frame":{"x":3011,"y":2235,"w":94,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":17,"y":16,"w":94,"h":96},"sourceSize":{"w":128,"h":128}},"loot-xp-compass-01.img":{"frame":{"x":3981,"y":2476,"w":96,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":16,"w":96,"h":96},"sourceSize":{"w":128,"h":128}},"part-airdrop-01.img":{"frame":{"x":3109,"y":2258,"w":96,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":96,"h":96},"sourceSize":{"w":96,"h":96}},"part-airdrop-01x.img":{"frame":{"x":3755,"y":2456,"w":96,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":96,"h":96},"sourceSize":{"w":96,"h":96}},"minimize.img":{"frame":{"x":3855,"y":2521,"w":95,"h":95},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":17,"y":16,"w":95,"h":95},"sourceSize":{"w":128,"h":128}},"skull-leader.img":{"frame":{"x":3209,"y":2356,"w":90,"h":95},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":1,"w":90,"h":95},"sourceSize":{"w":96,"h":96}},"loot-perk-assume-leadership.img":{"frame":{"x":2788,"y":2144,"w":94,"h":94},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":17,"y":17,"w":94,"h":94},"sourceSize":{"w":128,"h":128}},"audio-off.img":{"frame":{"x":759,"y":842,"w":92,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":18,"y":24,"w":92,"h":80},"sourceSize":{"w":128,"h":128}},"audio-on.img":{"frame":{"x":2392,"y":782,"w":92,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":18,"y":24,"w":92,"h":80},"sourceSize":{"w":128,"h":128}},"ping-map-woods-king.img":{"frame":{"x":2043,"y":1568,"w":92,"h":84},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":18,"y":22,"w":92,"h":84},"sourceSize":{"w":128,"h":128}},"loot-melee-knuckles-heroic.img":{"frame":{"x":2654,"y":2205,"w":92,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":18,"y":35,"w":92,"h":58},"sourceSize":{"w":128,"h":128}},"loot-melee-knuckles-rusted.img":{"frame":{"x":3303,"y":2357,"w":92,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":18,"y":35,"w":92,"h":58},"sourceSize":{"w":128,"h":128}},"part-flare-01.img":{"frame":{"x":3303,"y":2419,"w":92,"h":88},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":6,"w":92,"h":88},"sourceSize":{"w":100,"h":100}},"ping-indicator.img":{"frame":{"x":3954,"y":2576,"w":88,"h":68},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":20,"y":60,"w":88,"h":68},"sourceSize":{"w":128,"h":128}},"ping-part-quarter-highlight.img":{"frame":{"x":3399,"y":2420,"w":88,"h":51},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":20,"y":1,"w":88,"h":51},"sourceSize":{"w":128,"h":128}},"ping-part-quarter.img":{"frame":{"x":3399,"y":2475,"w":88,"h":51},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":20,"y":1,"w":88,"h":51},"sourceSize":{"w":128,"h":128}},"cog.img":{"frame":{"x":3491,"y":2514,"w":84,"h":84},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":22,"y":22,"w":84,"h":84},"sourceSize":{"w":128,"h":128}},"loot-throwable-snowball.img":{"frame":{"x":3579,"y":2525,"w":84,"h":84},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":22,"y":22,"w":84,"h":84},"sourceSize":{"w":128,"h":128}},"proj-mirv-mini-01.img":{"frame":{"x":3667,"y":2525,"w":84,"h":76},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":10,"w":84,"h":76},"sourceSize":{"w":96,"h":96}},"proj-mirv-mini-02.img":{"frame":{"x":3755,"y":2556,"w":84,"h":76},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":10,"w":84,"h":76},"sourceSize":{"w":96,"h":96}},"loot-weapon-fists.img":{"frame":{"x":4020,"y":2264,"w":74,"h":79},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":27,"y":24,"w":74,"h":79},"sourceSize":{"w":128,"h":128}},"ping-map-unlock.img":{"frame":{"x":668,"y":1263,"w":60,"h":78},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":34,"y":25,"w":60,"h":78},"sourceSize":{"w":128,"h":128}},"loot-melee-hook-silver.img":{"frame":{"x":1224,"y":162,"w":42,"h":78},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":43,"y":25,"w":42,"h":78},"sourceSize":{"w":128,"h":128}},"gun-pkp-bot-01.img":{"frame":{"x":2846,"y":387,"w":76,"h":44},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":76,"h":44},"sourceSize":{"w":76,"h":44}},"player-map-downed.img":{"frame":{"x":2323,"y":1099,"w":72,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":7,"w":72,"h":62},"sourceSize":{"w":72,"h":72}},"player-map-inner.img":{"frame":{"x":4021,"y":258,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":72,"h":72}},"player-map-outer.img":{"frame":{"x":2647,"y":888,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":72,"h":72}},"quit.img":{"frame":{"x":270,"y":1561,"w":68,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":30,"y":28,"w":68,"h":72},"sourceSize":{"w":128,"h":128}},"timer-background.img":{"frame":{"x":3699,"y":884,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":72,"h":72}},"gun-m249-bot-01.img":{"frame":{"x":2323,"y":1165,"w":72,"h":40},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":40},"sourceSize":{"w":72,"h":40}},"part-cloth-01.img":{"frame":{"x":2063,"y":1231,"w":70,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":70,"h":72},"sourceSize":{"w":72,"h":72}},"player-hands-01.img":{"frame":{"x":3667,"y":2605,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":72,"h":72},"sourceSize":{"w":76,"h":76}},"player-hands-02.img":{"frame":{"x":3843,"y":2620,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":72,"h":72},"sourceSize":{"w":76,"h":76}},"gun-dp28-top-01.img":{"frame":{"x":3743,"y":2636,"w":70,"h":70},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":70,"h":70},"sourceSize":{"w":70,"h":70}},"close.img":{"frame":{"x":1403,"y":1322,"w":68,"h":68},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":68,"h":68},"sourceSize":{"w":72,"h":72}},"part-smoke-01.img":{"frame":{"x":3919,"y":2648,"w":68,"h":66},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":3,"w":68,"h":66},"sourceSize":{"w":72,"h":72}},"part-snow-01.img":{"frame":{"x":3817,"y":2696,"w":68,"h":68},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":68,"h":68},"sourceSize":{"w":72,"h":72}},"checked.img":{"frame":{"x":3991,"y":2648,"w":66,"h":66},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":66,"h":66},"sourceSize":{"w":72,"h":72}},"resume.img":{"frame":{"x":4030,"y":1582,"w":64,"h":66},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":36,"y":31,"w":64,"h":66},"sourceSize":{"w":128,"h":128}},"submit.img":{"frame":{"x":3889,"y":2718,"w":66,"h":66},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":66,"h":66},"sourceSize":{"w":72,"h":72}},"part-frag-burst-01.img":{"frame":{"x":3959,"y":2718,"w":66,"h":66},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":66,"h":66},"sourceSize":{"w":72,"h":72}},"part-frag-burst-02.img":{"frame":{"x":2750,"y":2242,"w":66,"h":66},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":66,"h":66},"sourceSize":{"w":72,"h":72}},"part-potato-01.img":{"frame":{"x":2820,"y":2242,"w":66,"h":66},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":66,"h":66},"sourceSize":{"w":72,"h":72}},"part-pulse-01.img":{"frame":{"x":2890,"y":2242,"w":66,"h":66},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":66,"h":66},"sourceSize":{"w":72,"h":72}},"part-strobe-01.img":{"frame":{"x":1573,"y":1982,"w":66,"h":66},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":66,"h":66},"sourceSize":{"w":72,"h":72}},"lock.img":{"frame":{"x":4046,"y":2576,"w":48,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":0,"w":48,"h":64},"sourceSize":{"w":64,"h":64}},"unlock.img":{"frame":{"x":3780,"y":759,"w":48,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":0,"w":48,"h":64},"sourceSize":{"w":64,"h":64}},"gun-potato-smg-top-01.img":{"frame":{"x":1969,"y":1718,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":8,"w":64,"h":64},"sourceSize":{"w":80,"h":80}},"globe.img":{"frame":{"x":4032,"y":884,"w":62,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":62,"h":62},"sourceSize":{"w":64,"h":64}},"skull-outlined.img":{"frame":{"x":342,"y":1720,"w":52,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":2,"w":52,"h":60},"sourceSize":{"w":64,"h":64}},"gun-qbb97-bot-01.img":{"frame":{"x":519,"y":1384,"w":60,"h":30},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":1,"w":60,"h":30},"sourceSize":{"w":64,"h":32}},"part-frag-pin-01.img":{"frame":{"x":3084,"y":513,"w":58,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":35,"y":35,"w":58,"h":58},"sourceSize":{"w":128,"h":128}},"proj-frag-pin-part.img":{"frame":{"x":3084,"y":575,"w":58,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":35,"y":35,"w":58,"h":58},"sourceSize":{"w":128,"h":128}},"skull-team.img":{"frame":{"x":2926,"y":259,"w":48,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":4,"w":48,"h":56},"sourceSize":{"w":64,"h":64}},"crown.img":{"frame":{"x":1383,"y":1790,"w":54,"h":46},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":9,"w":54,"h":46},"sourceSize":{"w":64,"h":64}},"player-bullet-trail-03.img":{"frame":{"x":136,"y":1341,"w":35,"h":54},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":35,"h":54},"sourceSize":{"w":36,"h":56}},"dc.img":{"frame":{"x":2512,"y":1360,"w":52,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":6,"w":52,"h":52},"sourceSize":{"w":64,"h":64}},"down.img":{"frame":{"x":3297,"y":1588,"w":52,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":6,"w":52,"h":52},"sourceSize":{"w":64,"h":64}},"ping-part-eighth-highlight.img":{"frame":{"x":2268,"y":1231,"w":51,"h":43},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":20,"w":51,"h":43},"sourceSize":{"w":128,"h":128}},"ping-part-eighth.img":{"frame":{"x":2268,"y":1278,"w":51,"h":43},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":20,"w":51,"h":43},"sourceSize":{"w":128,"h":128}},"part-frag-lever-01.img":{"frame":{"x":3780,"y":827,"w":48,"h":40},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":40,"y":44,"w":48,"h":40},"sourceSize":{"w":128,"h":128}},"hatchet.img":{"frame":{"x":2620,"y":1452,"w":44,"h":38},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":5,"w":44,"h":38},"sourceSize":{"w":48,"h":48}},"pumpkin-play.img":{"frame":{"x":550,"y":1855,"w":40,"h":43},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":1,"w":40,"h":43},"sourceSize":{"w":48,"h":48}},"cobalt.img":{"frame":{"x":4030,"y":1652,"w":42,"h":42},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":42,"h":42},"sourceSize":{"w":48,"h":48}},"part-frag-burst-03.img":{"frame":{"x":398,"y":1924,"w":36,"h":36},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":36,"h":36},"sourceSize":{"w":36,"h":36}},"player-bullet-trail-02.img":{"frame":{"x":466,"y":1300,"w":35,"h":36},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":35,"h":36},"sourceSize":{"w":36,"h":36}},"player-feet-01.img":{"frame":{"x":1969,"y":358,"w":24,"h":36},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":1,"w":24,"h":36},"sourceSize":{"w":38,"h":38}},"player-feet-02.img":{"frame":{"x":2601,"y":1120,"w":24,"h":36},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":1,"w":24,"h":36},"sourceSize":{"w":38,"h":38}},"dot.img":{"frame":{"x":926,"y":1792,"w":32,"h":32},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":32,"h":32},"sourceSize":{"w":36,"h":36}},"ping-part-circle-auto-highlight.img":{"frame":{"x":1482,"y":1586,"w":29,"h":29},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":29,"h":29},"sourceSize":{"w":29,"h":29}},"ping-part-circle-auto-outer.img":{"frame":{"x":2446,"y":1214,"w":28,"h":26},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":28,"h":26},"sourceSize":{"w":28,"h":28}},"ping-part-circle-auto.img":{"frame":{"x":848,"y":1648,"w":28,"h":28},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":28,"h":28},"sourceSize":{"w":28,"h":28}},"ping-part-circle-highlight.img":{"frame":{"x":880,"y":1648,"w":28,"h":28},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":50,"y":50,"w":28,"h":28},"sourceSize":{"w":128,"h":128}},"ping-part-circle.img":{"frame":{"x":1113,"y":719,"w":28,"h":28},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":50,"y":50,"w":28,"h":28},"sourceSize":{"w":128,"h":128}},"mobile-gas.img":{"frame":{"x":2818,"y":639,"w":14,"h":13},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":14,"h":13},"sourceSize":{"w":14,"h":13}}}}],"shared":[{"meta":{"image":"assets/shared-0-100-b9f4268e.png","size":{"w":4096,"h":4096},"scale":1},"frames":{"map-building-police-floor-01.img":{"frame":{"x":2,"y":2,"w":2112,"h":1568},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":2112,"h":1568},"sourceSize":{"w":2112,"h":1568}},"map-building-mansion-floor-01b.img":{"frame":{"x":2118,"y":2,"w":1824,"h":1216},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":1824,"h":1216},"sourceSize":{"w":1824,"h":1216}},"map-building-bank-floor-01.img":{"frame":{"x":2118,"y":1222,"w":1696,"h":802},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":1696,"h":802},"sourceSize":{"w":1696,"h":802}},"map-building-barn-floor-01.img":{"frame":{"x":2,"y":1574,"w":1600,"h":1088},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":1600,"h":1088},"sourceSize":{"w":1600,"h":1088}},"map-building-bathhouse-basement-01e.img":{"frame":{"x":1606,"y":2028,"w":1432,"h":1592},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":1432,"h":1592},"sourceSize":{"w":1432,"h":1592}},"map-building-club-floor-01c.img":{"frame":{"x":2,"y":2666,"w":1442,"h":866},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":1442,"h":866},"sourceSize":{"w":1442,"h":866}},"map-bunker-conch-chamber-floor-01.img":{"frame":{"x":2,"y":3624,"w":1393,"h":382},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":43,"y":43,"w":1393,"h":382},"sourceSize":{"w":1520,"h":432}},"map-bunker-conch-chamber-floor-02.img":{"frame":{"x":1399,"y":3624,"w":1236,"h":410},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":27,"w":1236,"h":410},"sourceSize":{"w":1304,"h":464}},"map-building-mansion-floor-01d.img":{"frame":{"x":2639,"y":3624,"w":1089,"h":186},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":1089,"h":186},"sourceSize":{"w":1090,"h":194}},"map-building-police-ceiling-02.img":{"frame":{"x":3042,"y":2028,"w":528,"h":1080},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":528,"h":1080},"sourceSize":{"w":528,"h":1080}},"map-building-police-ceiling-01.img":{"frame":{"x":3042,"y":3112,"w":1008,"h":480},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":1008,"h":480},"sourceSize":{"w":1008,"h":480}},"map-building-hut-floor-02.img":{"frame":{"x":3946,"y":2,"w":130,"h":767},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":0,"w":130,"h":767},"sourceSize":{"w":136,"h":768}},"map-building-container-open-floor.img":{"frame":{"x":3818,"y":1222,"w":180,"h":684},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":3,"w":180,"h":684},"sourceSize":{"w":180,"h":692}},"map-pipes-03.img":{"frame":{"x":2639,"y":3814,"w":684,"h":236},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":684,"h":236},"sourceSize":{"w":684,"h":236}},"map-building-dock-floor-01b.img":{"frame":{"x":3818,"y":1910,"w":162,"h":663},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":162,"h":663},"sourceSize":{"w":162,"h":664}},"map-bunker-conch-floor-01.img":{"frame":{"x":3327,"y":3814,"w":580,"h":252},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":2,"w":580,"h":252},"sourceSize":{"w":600,"h":256}},"map-wall-18.img":{"frame":{"x":4054,"y":773,"w":32,"h":576},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":576},"sourceSize":{"w":32,"h":576}},"map-building-container-floor-01.img":{"frame":{"x":3574,"y":2577,"w":180,"h":531},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":180,"h":531},"sourceSize":{"w":180,"h":536}},"map-bunker-conch-chamber-ceiling-01.img":{"frame":{"x":1606,"y":1574,"w":496,"h":192},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":496,"h":192},"sourceSize":{"w":496,"h":192}},"map-snow-07.img":{"frame":{"x":1606,"y":1770,"w":496,"h":168},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":12,"w":496,"h":168},"sourceSize":{"w":512,"h":192}},"map-club-bar-01.img":{"frame":{"x":3758,"y":2028,"w":54,"h":480},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":54,"h":480},"sourceSize":{"w":54,"h":480}},"map-wall-14-rounded.img":{"frame":{"x":4054,"y":1353,"w":32,"h":448},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":448},"sourceSize":{"w":32,"h":448}},"map-wall-14.img":{"frame":{"x":4054,"y":1805,"w":32,"h":448},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":448},"sourceSize":{"w":32,"h":448}},"map-wall-13-rounded.img":{"frame":{"x":4054,"y":2257,"w":32,"h":416},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":416},"sourceSize":{"w":32,"h":416}},"map-wall-13.img":{"frame":{"x":4054,"y":2677,"w":32,"h":416},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":416},"sourceSize":{"w":32,"h":416}},"map-building-barn-basement-stairs.img":{"frame":{"x":3758,"y":2577,"w":288,"h":384},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":288,"h":384},"sourceSize":{"w":288,"h":384}},"map-wall-12-rounded.img":{"frame":{"x":4054,"y":3097,"w":32,"h":384},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":384},"sourceSize":{"w":32,"h":384}},"map-wall-12.img":{"frame":{"x":4054,"y":3485,"w":32,"h":384},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":384},"sourceSize":{"w":32,"h":384}},"map-wall-glass-12-2.img":{"frame":{"x":3984,"y":1910,"w":64,"h":384},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":384},"sourceSize":{"w":64,"h":384}},"map-wall-glass-12.img":{"frame":{"x":4002,"y":773,"w":32,"h":384},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":384},"sourceSize":{"w":32,"h":384}},"map-building-container-ceiling-01.img":{"frame":{"x":3574,"y":2028,"w":180,"h":380},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":180,"h":380},"sourceSize":{"w":180,"h":536}},"map-wall-shack-top.img":{"frame":{"x":2,"y":4070,"w":360,"h":24},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":360,"h":24},"sourceSize":{"w":360,"h":24}},"map-decal-club-02.img":{"frame":{"x":3911,"y":3596,"w":100,"h":358},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":0,"w":100,"h":358},"sourceSize":{"w":104,"h":360}},"map-pipes-04.img":{"frame":{"x":1448,"y":2666,"w":88,"h":352},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":88,"h":352},"sourceSize":{"w":88,"h":352}},"map-wall-11-rounded.img":{"frame":{"x":4015,"y":3596,"w":32,"h":352},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":352},"sourceSize":{"w":32,"h":352}},"map-wall-11.img":{"frame":{"x":4002,"y":1161,"w":32,"h":352},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":352},"sourceSize":{"w":32,"h":352}},"map-saloon-bar-01.img":{"frame":{"x":1540,"y":2666,"w":54,"h":324},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":54,"h":324},"sourceSize":{"w":54,"h":324}},"map-wall-10-rounded.img":{"frame":{"x":4002,"y":1517,"w":32,"h":320},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":320},"sourceSize":{"w":32,"h":320}},"map-wall-10.img":{"frame":{"x":3946,"y":773,"w":32,"h":320},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":320},"sourceSize":{"w":32,"h":320}},"map-wall-glass-10.img":{"frame":{"x":1540,"y":2994,"w":32,"h":320},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":320},"sourceSize":{"w":32,"h":320}},"map-couch-01.img":{"frame":{"x":3758,"y":2965,"w":288,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":288,"h":96},"sourceSize":{"w":288,"h":96}},"map-pipes-01.img":{"frame":{"x":1448,"y":3318,"w":90,"h":288},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":90,"h":288},"sourceSize":{"w":90,"h":288}},"map-wall-09-rounded.img":{"frame":{"x":1448,"y":3022,"w":32,"h":288},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":288},"sourceSize":{"w":32,"h":288}},"map-wall-09.img":{"frame":{"x":1484,"y":3022,"w":32,"h":288},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":288},"sourceSize":{"w":32,"h":288}},"map-wall-glass-9.img":{"frame":{"x":1542,"y":3318,"w":32,"h":288},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":288},"sourceSize":{"w":32,"h":288}},"map-screen-01.img":{"frame":{"x":2,"y":4010,"w":256,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":256,"h":48},"sourceSize":{"w":256,"h":48}},"map-wall-08-rounded.img":{"frame":{"x":3984,"y":2298,"w":32,"h":256},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":256},"sourceSize":{"w":32,"h":256}},"map-wall-shack-bot.img":{"frame":{"x":366,"y":4070,"w":242,"h":24},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":242,"h":24},"sourceSize":{"w":242,"h":24}},"map-wall-shack-right.img":{"frame":{"x":1578,"y":2994,"w":24,"h":242},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":24,"h":242},"sourceSize":{"w":24,"h":242}},"map-piano-01.img":{"frame":{"x":1606,"y":1942,"w":240,"h":75},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":240,"h":75},"sourceSize":{"w":240,"h":75}},"map-bookshelf-01.img":{"frame":{"x":1850,"y":1942,"w":224,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":224,"h":64},"sourceSize":{"w":224,"h":64}},"map-bookshelf-02.img":{"frame":{"x":2,"y":3536,"w":224,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":224,"h":64},"sourceSize":{"w":224,"h":64}},"map-wall-shack-left.img":{"frame":{"x":1578,"y":3240,"w":24,"h":222},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":24,"h":222},"sourceSize":{"w":24,"h":222}},"map-wall-outhouse-top.img":{"frame":{"x":3042,"y":3596,"w":204,"h":24},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":204,"h":24},"sourceSize":{"w":204,"h":24}},"map-wall-outhouse-side.img":{"frame":{"x":4020,"y":2298,"w":24,"h":198},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":24,"h":198},"sourceSize":{"w":24,"h":198}},"map-building-barn-basement-ceiling-02.img":{"frame":{"x":3732,"y":3596,"w":164,"h":192},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":16,"w":164,"h":192},"sourceSize":{"w":164,"h":208}},"map-towelrack-01.img":{"frame":{"x":612,"y":4010,"w":192,"h":76},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":10,"w":192,"h":76},"sourceSize":{"w":192,"h":96}},"map-wall-06-rounded.img":{"frame":{"x":4051,"y":3873,"w":32,"h":192},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":192},"sourceSize":{"w":32,"h":192}},"map-crate-mil-01.img":{"frame":{"x":3574,"y":2412,"w":172,"h":89},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":172,"h":89},"sourceSize":{"w":172,"h":89}},"map-deposit-box-01.img":{"frame":{"x":230,"y":3536,"w":160,"h":74},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":74},"sourceSize":{"w":160,"h":74}},"map-deposit-box-02.img":{"frame":{"x":808,"y":4010,"w":160,"h":74},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":74},"sourceSize":{"w":160,"h":74}},"map-building-cabin-ceiling-01b.img":{"frame":{"x":394,"y":3536,"w":148,"h":74},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":148,"h":74},"sourceSize":{"w":148,"h":76}},"map-gun-mount-01.img":{"frame":{"x":262,"y":4010,"w":144,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":48},"sourceSize":{"w":144,"h":56}},"map-gun-mount-05.img":{"frame":{"x":972,"y":4038,"w":144,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":48},"sourceSize":{"w":144,"h":56}},"map-door-slot-02.img":{"frame":{"x":3911,"y":3958,"w":38,"h":136},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":38,"h":136},"sourceSize":{"w":38,"h":136}},"map-door-slot-01.img":{"frame":{"x":3953,"y":3958,"w":38,"h":134},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":38,"h":134},"sourceSize":{"w":38,"h":134}},"map-building-porch-01.img":{"frame":{"x":3574,"y":2505,"w":128,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":64},"sourceSize":{"w":128,"h":64}},"map-door-01.img":{"frame":{"x":1578,"y":3466,"w":24,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":24,"h":128},"sourceSize":{"w":24,"h":128}},"map-door-05.img":{"frame":{"x":4015,"y":3952,"w":24,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":24,"h":128},"sourceSize":{"w":24,"h":128}},"map-gun-mount-02.img":{"frame":{"x":410,"y":4010,"w":128,"h":44},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":44},"sourceSize":{"w":128,"h":56}},"map-gun-mount-03.img":{"frame":{"x":1120,"y":4038,"w":128,"h":44},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":44},"sourceSize":{"w":128,"h":56}},"map-gun-mount-04.img":{"frame":{"x":1252,"y":4038,"w":128,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":56},"sourceSize":{"w":128,"h":56}},"map-woodpile-res-02.img":{"frame":{"x":1384,"y":4038,"w":121,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":5,"w":121,"h":56},"sourceSize":{"w":128,"h":64}},"map-screen-res-01.img":{"frame":{"x":546,"y":3536,"w":116,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":0,"w":116,"h":58},"sourceSize":{"w":124,"h":58}},"map-building-boarded-window-01.img":{"frame":{"x":3946,"y":1097,"w":44,"h":113},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":7,"w":44,"h":113},"sourceSize":{"w":48,"h":128}},"map-locker-01.img":{"frame":{"x":1509,"y":4038,"w":96,"h":49},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":96,"h":49},"sourceSize":{"w":96,"h":50}},"map-locker-02.img":{"frame":{"x":1609,"y":4038,"w":96,"h":49},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":96,"h":49},"sourceSize":{"w":96,"h":50}},"map-locker-03.img":{"frame":{"x":1709,"y":4038,"w":96,"h":49},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":96,"h":49},"sourceSize":{"w":96,"h":50}},"map-drawers-res.img":{"frame":{"x":3706,"y":2512,"w":93,"h":57},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":5,"w":93,"h":57},"sourceSize":{"w":96,"h":64}},"map-vending-res.img":{"frame":{"x":666,"y":3536,"w":93,"h":82},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":5,"w":93,"h":82},"sourceSize":{"w":108,"h":94}},"map-barrel-03.img":{"frame":{"x":1809,"y":4054,"w":89,"h":35},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":89,"h":35},"sourceSize":{"w":89,"h":35}},"map-barrel-04.img":{"frame":{"x":1902,"y":4054,"w":89,"h":35},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":89,"h":35},"sourceSize":{"w":89,"h":35}},"map-bunker-vent-01.img":{"frame":{"x":763,"y":3536,"w":82,"h":84},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":82,"h":84},"sourceSize":{"w":84,"h":84}},"map-fire-ext-01.img":{"frame":{"x":849,"y":3536,"w":83,"h":65},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":83,"h":65},"sourceSize":{"w":84,"h":70}},"map-pot-res-01.img":{"frame":{"x":936,"y":3536,"w":80,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":32,"y":32,"w":80,"h":80},"sourceSize":{"w":144,"h":144}},"map-recorder-03.img":{"frame":{"x":1020,"y":3536,"w":48,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":48,"h":80},"sourceSize":{"w":48,"h":80}},"map-recorder-04.img":{"frame":{"x":1072,"y":3536,"w":48,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":48,"h":80},"sourceSize":{"w":48,"h":80}},"map-wall-02-5-rounded.img":{"frame":{"x":2078,"y":1942,"w":32,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":80},"sourceSize":{"w":32,"h":80}},"map-squash-res-03.img":{"frame":{"x":1124,"y":3536,"w":77,"h":76},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":20,"w":77,"h":76},"sourceSize":{"w":144,"h":144}},"map-barrel-res-03.img":{"frame":{"x":1995,"y":4038,"w":76,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":34,"y":86,"w":76,"h":52},"sourceSize":{"w":144,"h":144}},"map-power-box-01.img":{"frame":{"x":1205,"y":3536,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":72,"h":72}},"map-wall-outhouse-bot.img":{"frame":{"x":3250,"y":3596,"w":72,"h":24},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":24},"sourceSize":{"w":72,"h":24}},"map-woodpile-res-01.img":{"frame":{"x":2075,"y":4038,"w":72,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":22,"w":72,"h":52},"sourceSize":{"w":96,"h":96}},"map-potato-res.img":{"frame":{"x":1281,"y":3536,"w":56,"h":68},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":20,"y":14,"w":56,"h":68},"sourceSize":{"w":96,"h":96}},"map-bush-res-06.img":{"frame":{"x":1341,"y":3536,"w":65,"h":65},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":40,"y":40,"w":65,"h":65},"sourceSize":{"w":144,"h":144}},"map-wall-02-rounded.img":{"frame":{"x":4002,"y":1841,"w":32,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":64},"sourceSize":{"w":32,"h":64}},"map-wall-02.img":{"frame":{"x":1410,"y":3536,"w":32,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":64},"sourceSize":{"w":32,"h":64}},"map-decal-oil-05.img":{"frame":{"x":542,"y":4010,"w":34,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":15,"y":4,"w":34,"h":56},"sourceSize":{"w":64,"h":64}},"map-fire-ext-res.img":{"frame":{"x":2151,"y":4038,"w":46,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":36,"y":8,"w":46,"h":56},"sourceSize":{"w":84,"h":70}},"map-decal-oil-04.img":{"frame":{"x":2201,"y":4038,"w":54,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":8,"w":54,"h":48},"sourceSize":{"w":64,"h":64}},"map-bush-res-01.img":{"frame":{"x":2259,"y":4038,"w":52,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":46,"y":48,"w":52,"h":48},"sourceSize":{"w":144,"h":144}},"map-candle-01.img":{"frame":{"x":2315,"y":4038,"w":50,"h":50},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":50,"h":50},"sourceSize":{"w":52,"h":52}},"map-bush-res-04.img":{"frame":{"x":2369,"y":4038,"w":48,"h":46},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":48,"h":46},"sourceSize":{"w":54,"h":54}},"map-tree-res-01.img":{"frame":{"x":2421,"y":4038,"w":48,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":48,"h":48},"sourceSize":{"w":48,"h":48}},"map-building-bank-window-res-01.img":{"frame":{"x":3758,"y":3065,"w":44,"h":43},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":46,"y":55,"w":44,"h":43},"sourceSize":{"w":144,"h":144}},"map-switch-01.img":{"frame":{"x":4020,"y":2500,"w":30,"h":34},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":30,"h":34},"sourceSize":{"w":30,"h":34}},"map-switch-03.img":{"frame":{"x":4020,"y":2538,"w":30,"h":34},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":30,"h":34},"sourceSize":{"w":30,"h":34}},"map-bottle-01.img":{"frame":{"x":2473,"y":4054,"w":32,"h":32},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":32},"sourceSize":{"w":32,"h":32}},"map-bottle-02.img":{"frame":{"x":2509,"y":4054,"w":32,"h":32},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":32},"sourceSize":{"w":32,"h":32}},"map-bottle-03.img":{"frame":{"x":2545,"y":4054,"w":32,"h":32},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":32},"sourceSize":{"w":32,"h":32}},"map-bottle-04.img":{"frame":{"x":2581,"y":4054,"w":32,"h":32},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":32},"sourceSize":{"w":32,"h":32}},"map-bottle-05.img":{"frame":{"x":2617,"y":4054,"w":32,"h":32},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":32},"sourceSize":{"w":32,"h":32}},"map-switch-02.img":{"frame":{"x":2653,"y":4054,"w":30,"h":32},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":30,"h":32},"sourceSize":{"w":30,"h":34}},"map-wall-01-rounded.img":{"frame":{"x":2687,"y":4054,"w":32,"h":32},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":32},"sourceSize":{"w":32,"h":32}}}},{"meta":{"image":"assets/shared-1-100-8b8c4eb7.png","size":{"w":4096,"h":4096},"scale":1},"frames":{"map-building-bathhouse-basement-01b.img":{"frame":{"x":2,"y":2,"w":1304,"h":918},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":1304,"h":918},"sourceSize":{"w":1304,"h":920}},"map-bunker-storm-chamber-floor-01a.img":{"frame":{"x":2,"y":924,"w":1268,"h":696},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":0,"w":1268,"h":696},"sourceSize":{"w":1280,"h":704}},"map-building-cabin-floor.img":{"frame":{"x":2,"y":1624,"w":1216,"h":992},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":1216,"h":992},"sourceSize":{"w":1216,"h":992}},"map-building-bathhouse-sideroom-02.img":{"frame":{"x":2,"y":2620,"w":1110,"h":727},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":2,"w":1110,"h":727},"sourceSize":{"w":1112,"h":729}},"map-building-bridge-lg-ceiling.img":{"frame":{"x":2,"y":3351,"w":1088,"h":544},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":16,"w":1088,"h":544},"sourceSize":{"w":1088,"h":576}},"map-building-bridge-lg-floor.img":{"frame":{"x":1094,"y":3351,"w":1011,"h":704},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":2,"w":1011,"h":704},"sourceSize":{"w":1012,"h":708}},"map-building-warehouse-floor-01.img":{"frame":{"x":1222,"y":1624,"w":1000,"h":800},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":1000,"h":800},"sourceSize":{"w":1000,"h":800}},"map-building-house-floor-01.img":{"frame":{"x":1222,"y":2428,"w":960,"h":864},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":960,"h":864},"sourceSize":{"w":960,"h":864}},"map-building-house-floor-02.img":{"frame":{"x":1310,"y":2,"w":960,"h":864},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":960,"h":864},"sourceSize":{"w":960,"h":864}},"map-bunker-conch-compartment-floor-01a.img":{"frame":{"x":2186,"y":2428,"w":942,"h":880},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":50,"y":0,"w":942,"h":880},"sourceSize":{"w":992,"h":880}},"map-building-teahouse-ceiling-01.img":{"frame":{"x":3132,"y":2,"w":934,"h":608},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":16,"w":934,"h":608},"sourceSize":{"w":960,"h":640}},"map-building-cabin-ceiling-01a.img":{"frame":{"x":3132,"y":614,"w":912,"h":576},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":912,"h":576},"sourceSize":{"w":912,"h":576}},"map-building-mansion-ceiling.img":{"frame":{"x":3132,"y":1194,"w":912,"h":800},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":32,"w":912,"h":800},"sourceSize":{"w":1024,"h":864}},"map-building-bridge-md-floor.img":{"frame":{"x":2226,"y":870,"w":896,"h":368},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":896,"h":368},"sourceSize":{"w":896,"h":368}},"map-building-teahouse-floor-01.img":{"frame":{"x":2226,"y":1242,"w":896,"h":576},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":896,"h":576},"sourceSize":{"w":896,"h":576}},"map-building-bank-ceiling-02.img":{"frame":{"x":3132,"y":1998,"w":556,"h":888},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":50,"w":556,"h":888},"sourceSize":{"w":556,"h":940}},"map-building-warehouse-floor-02.img":{"frame":{"x":3132,"y":2890,"w":880,"h":800},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":880,"h":800},"sourceSize":{"w":880,"h":800}},"map-building-bank-floor-02.img":{"frame":{"x":2226,"y":1822,"w":864,"h":448},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":864,"h":448},"sourceSize":{"w":1088,"h":448}},"map-building-warehouse-ceiling-01.img":{"frame":{"x":2274,"y":2,"w":832,"h":432},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":832,"h":432},"sourceSize":{"w":832,"h":432}},"map-building-barn-ceiling-01.img":{"frame":{"x":2274,"y":438,"w":800,"h":416},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":800,"h":416},"sourceSize":{"w":800,"h":416}},"map-building-club-floor-01g.img":{"frame":{"x":1310,"y":870,"w":800,"h":578},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":800,"h":578},"sourceSize":{"w":802,"h":578}},"map-building-mansion-floor-01a.img":{"frame":{"x":2109,"y":3694,"w":800,"h":318},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":6,"w":800,"h":318},"sourceSize":{"w":800,"h":324}},"map-bunker-storm-chamber-ceiling-01.img":{"frame":{"x":2109,"y":3312,"w":592,"h":304},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":112,"w":592,"h":304},"sourceSize":{"w":592,"h":416}},"map-building-bathhouse-basement-01c.img":{"frame":{"x":2913,"y":3694,"w":565,"h":344},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":565,"h":344},"sourceSize":{"w":567,"h":348}},"map-building-bathhouse-sideroom-ceiling-02.img":{"frame":{"x":3482,"y":3694,"w":512,"h":336},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":512,"h":336},"sourceSize":{"w":512,"h":336}},"map-bunker-conch-chamber-ceiling-02.img":{"frame":{"x":2,"y":3899,"w":488,"h":176},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":488,"h":176},"sourceSize":{"w":488,"h":176}},"map-building-club-floor-01e.img":{"frame":{"x":3692,"y":1998,"w":353,"h":482},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":353,"h":482},"sourceSize":{"w":354,"h":482}},"map-building-shack-ceiling-03.img":{"frame":{"x":2705,"y":3312,"w":408,"h":288},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":24,"y":0,"w":408,"h":288},"sourceSize":{"w":432,"h":336}},"map-building-hut-ceiling-01.img":{"frame":{"x":3692,"y":2484,"w":379,"h":393},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":15,"y":15,"w":379,"h":393},"sourceSize":{"w":408,"h":408}},"map-woodpile-02.img":{"frame":{"x":494,"y":3899,"w":384,"h":192},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":384,"h":192},"sourceSize":{"w":384,"h":192}},"map-building-mansion-cellar-01c.img":{"frame":{"x":2226,"y":2274,"w":354,"h":129},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":354,"h":129},"sourceSize":{"w":354,"h":130}},"map-building-barn-ceiling-02.img":{"frame":{"x":2584,"y":2274,"w":312,"h":108},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":312,"h":108},"sourceSize":{"w":312,"h":108}},"map-wheel-01.img":{"frame":{"x":1274,"y":1452,"w":312,"h":156},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":312,"h":156},"sourceSize":{"w":312,"h":156}},"map-wheel-03.img":{"frame":{"x":1590,"y":1452,"w":312,"h":149},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":312,"h":149},"sourceSize":{"w":312,"h":156}},"map-wheel-02.img":{"frame":{"x":1906,"y":1452,"w":297,"h":149},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":0,"w":297,"h":149},"sourceSize":{"w":312,"h":156}},"map-door-02.img":{"frame":{"x":3998,"y":3694,"w":80,"h":224},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":224},"sourceSize":{"w":80,"h":224}},"map-wall-07-rounded.img":{"frame":{"x":1274,"y":924,"w":32,"h":224},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":224},"sourceSize":{"w":32,"h":224}},"map-wall-07.img":{"frame":{"x":1274,"y":1152,"w":32,"h":224},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":224},"sourceSize":{"w":32,"h":224}},"map-bed-01.img":{"frame":{"x":1116,"y":2620,"w":96,"h":216},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":96,"h":216},"sourceSize":{"w":96,"h":216}},"map-stove-01.img":{"frame":{"x":882,"y":3899,"w":208,"h":162},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":8,"w":208,"h":162},"sourceSize":{"w":224,"h":176}},"map-building-club-floor-01f.img":{"frame":{"x":2900,"y":2274,"w":194,"h":130},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":194,"h":130},"sourceSize":{"w":194,"h":130}},"map-pipes-05.img":{"frame":{"x":1116,"y":2840,"w":90,"h":192},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":90,"h":192},"sourceSize":{"w":90,"h":192}},"map-wall-06.img":{"frame":{"x":3094,"y":1822,"w":32,"h":192},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":192},"sourceSize":{"w":32,"h":192}},"map-wall-04-cobalt.img":{"frame":{"x":4049,"y":614,"w":40,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":40,"h":160},"sourceSize":{"w":40,"h":160}},"map-wall-04-stone.img":{"frame":{"x":4049,"y":778,"w":40,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":40,"h":160},"sourceSize":{"w":40,"h":160}},"map-wall-05-rounded.img":{"frame":{"x":3094,"y":2018,"w":32,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":160},"sourceSize":{"w":32,"h":160}},"map-wall-05.img":{"frame":{"x":3998,"y":3922,"w":32,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":160},"sourceSize":{"w":32,"h":160}},"map-bed-res-01.img":{"frame":{"x":1116,"y":3036,"w":89,"h":158},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":16,"w":89,"h":158},"sourceSize":{"w":96,"h":192}},"map-bed-res-02.img":{"frame":{"x":2114,"y":870,"w":89,"h":158},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":16,"w":89,"h":158},"sourceSize":{"w":96,"h":192}},"map-door-04.img":{"frame":{"x":4034,"y":3922,"w":54,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":54,"h":128},"sourceSize":{"w":54,"h":128}},"map-wall-04-rounded.img":{"frame":{"x":4049,"y":942,"w":32,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":128},"sourceSize":{"w":32,"h":128}},"map-wall-04.img":{"frame":{"x":4049,"y":1074,"w":32,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":128},"sourceSize":{"w":32,"h":128}},"map-toilet-01.img":{"frame":{"x":1116,"y":3198,"w":96,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":2,"w":96,"h":124},"sourceSize":{"w":128,"h":128}},"map-toilet-02.img":{"frame":{"x":2114,"y":1032,"w":96,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":2,"w":96,"h":124},"sourceSize":{"w":128,"h":128}},"map-decal-oil-01.img":{"frame":{"x":2114,"y":1160,"w":86,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":21,"y":3,"w":86,"h":122},"sourceSize":{"w":128,"h":128}},"map-vat-res.img":{"frame":{"x":2114,"y":1286,"w":108,"h":121},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":20,"y":11,"w":108,"h":121},"sourceSize":{"w":144,"h":144}},"map-door-03.img":{"frame":{"x":4049,"y":1206,"w":32,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":112},"sourceSize":{"w":32,"h":112}},"map-building-bank-window-01.img":{"frame":{"x":4016,"y":2881,"w":56,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":56,"h":104},"sourceSize":{"w":56,"h":104}},"map-building-house-window-01.img":{"frame":{"x":4049,"y":1322,"w":32,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":104},"sourceSize":{"w":32,"h":104}},"map-building-house-window-res-01.img":{"frame":{"x":4049,"y":1430,"w":32,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":104},"sourceSize":{"w":32,"h":104}},"map-toilet-03.img":{"frame":{"x":4016,"y":2989,"w":66,"h":98},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":17,"y":1,"w":66,"h":98},"sourceSize":{"w":100,"h":100}},"map-toilet-04.img":{"frame":{"x":4016,"y":3091,"w":66,"h":98},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":17,"y":1,"w":66,"h":98},"sourceSize":{"w":100,"h":100}},"map-recorder-01.img":{"frame":{"x":4016,"y":3193,"w":64,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":96},"sourceSize":{"w":64,"h":96}},"map-recorder-02.img":{"frame":{"x":4016,"y":3293,"w":64,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":96},"sourceSize":{"w":64,"h":96}},"map-wall-03-rounded.img":{"frame":{"x":4049,"y":1538,"w":32,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":96},"sourceSize":{"w":32,"h":96}},"map-wall-03.img":{"frame":{"x":4049,"y":1638,"w":32,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":96},"sourceSize":{"w":32,"h":96}},"map-decal-oil-06.img":{"frame":{"x":2705,"y":3604,"w":94,"h":86},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":17,"y":21,"w":94,"h":86},"sourceSize":{"w":128,"h":128}},"map-saloon-bar-02.img":{"frame":{"x":4016,"y":3393,"w":54,"h":92},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":54,"h":92},"sourceSize":{"w":54,"h":92}},"map-couch-res-01.img":{"frame":{"x":2803,"y":3604,"w":80,"h":86},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":5,"w":80,"h":86},"sourceSize":{"w":96,"h":96}},"map-column-01.img":{"frame":{"x":2109,"y":3620,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"map-bathhouse-pool-01.img":{"frame":{"x":3482,"y":4034,"w":36,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":36,"h":60},"sourceSize":{"w":36,"h":60}},"map-bush-res-02.img":{"frame":{"x":3522,"y":4034,"w":59,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":42,"y":45,"w":59,"h":60},"sourceSize":{"w":144,"h":144}}}},{"meta":{"image":"assets/shared-2-100-e853d264.png","size":{"w":4096,"h":4096},"scale":1},"frames":{"map-building-mansion-cellar-01a.img":{"frame":{"x":2,"y":2,"w":865,"h":801},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":865,"h":801},"sourceSize":{"w":866,"h":802}},"map-building-club-ceiling-01a.img":{"frame":{"x":871,"y":2,"w":737,"h":593},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":737,"h":593},"sourceSize":{"w":738,"h":594}},"map-bunker-egg-chamber-floor-01a.img":{"frame":{"x":871,"y":599,"w":727,"h":699},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":0,"w":727,"h":699},"sourceSize":{"w":738,"h":706}},"map-building-house-ceiling.img":{"frame":{"x":2,"y":1302,"w":720,"h":648},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":720,"h":648},"sourceSize":{"w":720,"h":648}},"map-building-warehouse-ceiling-02.img":{"frame":{"x":2,"y":807,"w":720,"h":432},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":720,"h":432},"sourceSize":{"w":720,"h":432}},"map-building-barn-basement-floor-01.img":{"frame":{"x":726,"y":1302,"w":662,"h":468},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":2,"w":662,"h":468},"sourceSize":{"w":664,"h":472}},"map-building-police-floor-02.img":{"frame":{"x":1392,"y":1302,"w":609,"h":640},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":65,"w":609,"h":640},"sourceSize":{"w":610,"h":1570}},"map-building-shack-floor-03.img":{"frame":{"x":726,"y":1774,"w":568,"h":408},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":0,"w":568,"h":408},"sourceSize":{"w":576,"h":448}},"map-bunker-conch-compartment-ceiling-01.img":{"frame":{"x":1602,"y":599,"w":488,"h":560},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":488,"h":560},"sourceSize":{"w":488,"h":560}},"map-building-bank-ceiling-01.img":{"frame":{"x":1612,"y":2,"w":504,"h":552},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":48,"w":504,"h":552},"sourceSize":{"w":505,"h":600}},"map-building-bathhouse-sideroom-01.img":{"frame":{"x":2,"y":1954,"w":536,"h":536},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":536,"h":536},"sourceSize":{"w":536,"h":536}},"map-tree-08.img":{"frame":{"x":2,"y":2494,"w":512,"h":510},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":512,"h":510},"sourceSize":{"w":512,"h":512}},"map-tree-08su.img":{"frame":{"x":2,"y":3008,"w":512,"h":510},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":512,"h":510},"sourceSize":{"w":512,"h":512}},"map-building-police-ceiling-03.img":{"frame":{"x":2,"y":3522,"w":504,"h":480},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":504,"h":480},"sourceSize":{"w":504,"h":480}},"map-silo-01.img":{"frame":{"x":510,"y":3522,"w":504,"h":504},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":504,"h":504},"sourceSize":{"w":512,"h":512}},"map-building-barn-basement-floor-02.img":{"frame":{"x":518,"y":2494,"w":374,"h":468},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":374,"h":468},"sourceSize":{"w":376,"h":472}},"map-building-hut-floor-01.img":{"frame":{"x":518,"y":2966,"w":448,"h":448},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":32,"y":32,"w":448,"h":448},"sourceSize":{"w":512,"h":512}},"map-building-club-ceiling-01c.img":{"frame":{"x":896,"y":2186,"w":400,"h":433},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":400,"h":433},"sourceSize":{"w":402,"h":434}},"map-bunker-conch-compartment-floor-01b.img":{"frame":{"x":970,"y":2623,"w":400,"h":430},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":400,"h":430},"sourceSize":{"w":400,"h":448}},"map-building-hut-ceiling-02.img":{"frame":{"x":970,"y":3057,"w":379,"h":393},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":15,"y":15,"w":379,"h":393},"sourceSize":{"w":408,"h":408}},"map-building-hut-ceiling-03.img":{"frame":{"x":1018,"y":3454,"w":379,"h":393},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":15,"w":379,"h":393},"sourceSize":{"w":408,"h":408}},"map-building-panicroom-ceiling.img":{"frame":{"x":1353,"y":3057,"w":288,"h":384},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":288,"h":384},"sourceSize":{"w":288,"h":384}},"map-building-panicroom-floor.img":{"frame":{"x":1401,"y":3445,"w":288,"h":384},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":288,"h":384},"sourceSize":{"w":288,"h":384}},"map-building-shack-floor-01.img":{"frame":{"x":1300,"y":1946,"w":382,"h":320},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":19,"y":20,"w":382,"h":320},"sourceSize":{"w":420,"h":340}},"map-building-container-ceiling-02.img":{"frame":{"x":542,"y":1954,"w":180,"h":380},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":180,"h":380},"sourceSize":{"w":180,"h":536}},"map-building-container-ceiling-03.img":{"frame":{"x":1374,"y":2270,"w":180,"h":380},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":180,"h":380},"sourceSize":{"w":180,"h":536}},"map-building-container-ceiling-05.img":{"frame":{"x":1374,"y":2654,"w":180,"h":380},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":180,"h":380},"sourceSize":{"w":180,"h":536}},"map-building-container-open-ceiling-01.img":{"frame":{"x":1558,"y":2270,"w":180,"h":380},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":156,"w":180,"h":380},"sourceSize":{"w":180,"h":692}},"map-bunker-conch-ceiling-01.img":{"frame":{"x":1018,"y":3851,"w":380,"h":180},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":380,"h":180},"sourceSize":{"w":380,"h":180}},"map-bunker-storm-floor-02.img":{"frame":{"x":1558,"y":2654,"w":320,"h":380},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":320,"h":380},"sourceSize":{"w":320,"h":384}},"map-building-bank-ceiling-03.img":{"frame":{"x":1645,"y":3038,"w":216,"h":360},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":192,"w":216,"h":360},"sourceSize":{"w":216,"h":552}},"map-building-saferoom-ceiling.img":{"frame":{"x":1402,"y":3833,"w":352,"h":224},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":352,"h":224},"sourceSize":{"w":352,"h":224}},"map-building-saferoom-floor.img":{"frame":{"x":1686,"y":1946,"w":352,"h":224},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":352,"h":224},"sourceSize":{"w":352,"h":224}},"map-building-vault-ceiling.img":{"frame":{"x":1693,"y":3402,"w":321,"h":337},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":321,"h":337},"sourceSize":{"w":433,"h":337}},"map-building-club-floor-01d.img":{"frame":{"x":1758,"y":3743,"w":322,"h":193},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":322,"h":193},"sourceSize":{"w":322,"h":194}},"map-building-club-floor-01h.img":{"frame":{"x":1865,"y":3038,"w":321,"h":289},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":321,"h":289},"sourceSize":{"w":322,"h":290}},"map-building-shack-floor-02.img":{"frame":{"x":2018,"y":3331,"w":320,"h":320},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":320,"h":320},"sourceSize":{"w":320,"h":320}},"map-bunker-egg-chamber-ceiling-01.img":{"frame":{"x":2084,"y":3655,"w":320,"h":304},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":144,"w":320,"h":304},"sourceSize":{"w":320,"h":448}},"map-building-shack-ceiling-01.img":{"frame":{"x":1742,"y":2174,"w":315,"h":207},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":315,"h":207},"sourceSize":{"w":315,"h":255}},"map-building-outhouse-floor.img":{"frame":{"x":1882,"y":2385,"w":241,"h":308},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":80,"y":4,"w":241,"h":308},"sourceSize":{"w":400,"h":316}},"map-shack-res-01.img":{"frame":{"x":1882,"y":2697,"w":305,"h":181},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":60,"y":49,"w":305,"h":181},"sourceSize":{"w":420,"h":340}},"map-building-barn-basement-ceiling-01.img":{"frame":{"x":2190,"y":2882,"w":304,"h":192},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":16,"w":304,"h":192},"sourceSize":{"w":304,"h":208}},"map-bunker-generic-floor-01.img":{"frame":{"x":2342,"y":3078,"w":295,"h":281},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":0,"w":295,"h":281},"sourceSize":{"w":320,"h":288}},"map-bunker-generic-floor-02.img":{"frame":{"x":2342,"y":3363,"w":295,"h":281},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":0,"w":295,"h":281},"sourceSize":{"w":320,"h":288}},"map-building-bathhouse-basement-01a.img":{"frame":{"x":2408,"y":3648,"w":225,"h":290},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":225,"h":290},"sourceSize":{"w":226,"h":290}},"map-stone-res-06.img":{"frame":{"x":1758,"y":3963,"w":288,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":288,"h":128},"sourceSize":{"w":288,"h":128}},"map-table-02.img":{"frame":{"x":2637,"y":3648,"w":288,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":288,"h":160},"sourceSize":{"w":288,"h":160}},"map-building-teahouse-res-01.img":{"frame":{"x":2637,"y":3812,"w":282,"h":208},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":115,"y":152,"w":282,"h":208},"sourceSize":{"w":512,"h":512}},"map-stone-03.img":{"frame":{"x":2923,"y":3812,"w":275,"h":273},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":8,"w":275,"h":273},"sourceSize":{"w":289,"h":289}},"map-stone-03tr.img":{"frame":{"x":2005,"y":1163,"w":274,"h":271},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":274,"h":271},"sourceSize":{"w":274,"h":271}},"map-building-outhouse-ceiling.img":{"frame":{"x":2005,"y":1438,"w":272,"h":224},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":64,"y":0,"w":272,"h":224},"sourceSize":{"w":400,"h":316}},"map-building-bathhouse-basement-01d.img":{"frame":{"x":2005,"y":1666,"w":258,"h":193},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":258,"h":193},"sourceSize":{"w":258,"h":194}},"map-building-bathhouse-sideroom-ceiling-01.img":{"frame":{"x":2042,"y":1863,"w":256,"h":224},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":256,"h":224},"sourceSize":{"w":256,"h":224}},"map-sandbags-01.img":{"frame":{"x":542,"y":2338,"w":256,"h":146},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":256,"h":146},"sourceSize":{"w":256,"h":148}},"map-tree-07.img":{"frame":{"x":2061,"y":2091,"w":256,"h":256},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":256,"h":256},"sourceSize":{"w":256,"h":256}},"map-tree-03.img":{"frame":{"x":2127,"y":2351,"w":256,"h":256},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":256,"h":256},"sourceSize":{"w":256,"h":256}},"map-tree-07su.img":{"frame":{"x":2191,"y":2611,"w":256,"h":256},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":256,"h":256},"sourceSize":{"w":256,"h":256}},"map-building-club-ceiling-01b.img":{"frame":{"x":2281,"y":1438,"w":177,"h":242},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":177,"h":242},"sourceSize":{"w":178,"h":242}},"map-building-shack-ceiling-02.img":{"frame":{"x":2302,"y":1684,"w":240,"h":192},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":240,"h":192},"sourceSize":{"w":240,"h":240}},"map-hut-res-01.img":{"frame":{"x":2321,"y":1880,"w":236,"h":236},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":130,"y":136,"w":236,"h":236},"sourceSize":{"w":512,"h":512}},"map-pipes-02.img":{"frame":{"x":2321,"y":2120,"w":236,"h":172},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":236,"h":172},"sourceSize":{"w":238,"h":172}},"map-chute-01.img":{"frame":{"x":2387,"y":2296,"w":232,"h":232},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":12,"w":232,"h":232},"sourceSize":{"w":256,"h":256}},"map-building-mansion-cellar-01b.img":{"frame":{"x":2451,"y":2532,"w":225,"h":230},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":225,"h":230},"sourceSize":{"w":226,"h":230}},"map-bunker-generic-ceiling-01.img":{"frame":{"x":2498,"y":2766,"w":193,"h":230},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":64,"y":0,"w":193,"h":230},"sourceSize":{"w":320,"h":288}},"map-bunker-generic-ceiling-02.img":{"frame":{"x":2094,"y":558,"w":160,"h":230},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":230},"sourceSize":{"w":160,"h":230}},"map-bunker-generic-floor-03.img":{"frame":{"x":2094,"y":792,"w":160,"h":230},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":230},"sourceSize":{"w":160,"h":230}},"map-building-mansion-floor-01c.img":{"frame":{"x":2120,"y":2,"w":225,"h":228},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":225,"h":228},"sourceSize":{"w":226,"h":228}},"map-building-club-floor-01a.img":{"frame":{"x":2120,"y":234,"w":225,"h":226},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":225,"h":226},"sourceSize":{"w":226,"h":226}},"map-shack-res-02.img":{"frame":{"x":2641,"y":3000,"w":220,"h":176},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":100,"y":69,"w":220,"h":176},"sourceSize":{"w":420,"h":340}},"map-shack-res-03.img":{"frame":{"x":2641,"y":3180,"w":220,"h":176},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":100,"y":69,"w":220,"h":176},"sourceSize":{"w":420,"h":340}},"map-bed-02.img":{"frame":{"x":2641,"y":3360,"w":176,"h":216},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":176,"h":216},"sourceSize":{"w":176,"h":216}},"map-crate-res-03.img":{"frame":{"x":2821,"y":3360,"w":216,"h":154},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":216,"h":154},"sourceSize":{"w":216,"h":156}},"map-stone-res-02.img":{"frame":{"x":2929,"y":3518,"w":200,"h":200},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":200,"h":200},"sourceSize":{"w":200,"h":200}},"map-vat-02.img":{"frame":{"x":2258,"y":464,"w":200,"h":200},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":200,"h":200},"sourceSize":{"w":200,"h":200}},"map-building-club-floor-01b.img":{"frame":{"x":2349,"y":2,"w":194,"h":193},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":194,"h":193},"sourceSize":{"w":194,"h":194}},"map-bunker-egg-chamber-floor-01b.img":{"frame":{"x":2349,"y":199,"w":192,"h":179},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":192,"h":179},"sourceSize":{"w":194,"h":180}},"map-bunker-storm-chamber-floor-01b.img":{"frame":{"x":2258,"y":668,"w":192,"h":177},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":192,"h":177},"sourceSize":{"w":194,"h":178}},"map-control-panel-06.img":{"frame":{"x":518,"y":3418,"w":192,"h":94},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":192,"h":94},"sourceSize":{"w":192,"h":94}},"map-couch-02.img":{"frame":{"x":714,"y":3418,"w":192,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":192,"h":96},"sourceSize":{"w":192,"h":96}},"map-hedgehog-01.img":{"frame":{"x":2258,"y":849,"w":192,"h":192},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":192,"h":192},"sourceSize":{"w":192,"h":192}},"map-bush-06tr.img":{"frame":{"x":2283,"y":1045,"w":186,"h":188},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":186,"h":188},"sourceSize":{"w":186,"h":188}},"map-smoke-res.img":{"frame":{"x":2283,"y":1237,"w":170,"h":178},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":47,"y":39,"w":170,"h":178},"sourceSize":{"w":256,"h":256}},"map-building-club-vault-ceiling.img":{"frame":{"x":2457,"y":1237,"w":160,"h":176},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":176},"sourceSize":{"w":160,"h":176}},"map-crate-mil-02.img":{"frame":{"x":2094,"y":1045,"w":172,"h":89},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":172,"h":89},"sourceSize":{"w":172,"h":89}},"map-crate-mil-03.img":{"frame":{"x":2050,"y":3963,"w":172,"h":89},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":172,"h":89},"sourceSize":{"w":172,"h":89}},"map-crate-mil-04.img":{"frame":{"x":2226,"y":3963,"w":172,"h":89},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":172,"h":89},"sourceSize":{"w":172,"h":89}},"map-crate-mil-05.img":{"frame":{"x":2402,"y":3963,"w":172,"h":89},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":172,"h":89},"sourceSize":{"w":172,"h":89}},"map-crate-04.img":{"frame":{"x":2462,"y":1417,"w":164,"h":164},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":164,"h":164},"sourceSize":{"w":164,"h":164}},"map-crate-06.img":{"frame":{"x":726,"y":2186,"w":164,"h":100},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":164,"h":100},"sourceSize":{"w":164,"h":100}},"map-building-dock-floor-01a.img":{"frame":{"x":2546,"y":1585,"w":160,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":2,"w":160,"h":160},"sourceSize":{"w":160,"h":162}},"map-airdrop-01.img":{"frame":{"x":2454,"y":668,"w":160,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":160},"sourceSize":{"w":160,"h":160}},"map-airdrop-02.img":{"frame":{"x":2454,"y":832,"w":160,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":160},"sourceSize":{"w":160,"h":160}},"map-drawers-01.img":{"frame":{"x":2546,"y":1749,"w":160,"h":90},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":90},"sourceSize":{"w":160,"h":90}},"map-drawers-02.img":{"frame":{"x":1602,"y":1163,"w":160,"h":90},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":90},"sourceSize":{"w":160,"h":90}},"map-squash-02.img":{"frame":{"x":2473,"y":996,"w":160,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":160},"sourceSize":{"w":160,"h":160}},"map-stairs-broken-01.img":{"frame":{"x":1766,"y":1163,"w":160,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":128},"sourceSize":{"w":160,"h":128}},"map-table-01.img":{"frame":{"x":1882,"y":2882,"w":160,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":128},"sourceSize":{"w":160,"h":128}},"map-table-03.img":{"frame":{"x":2621,"y":1160,"w":160,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":160},"sourceSize":{"w":160,"h":160}},"map-case-chrys-01.img":{"frame":{"x":2630,"y":1324,"w":156,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":156,"h":120},"sourceSize":{"w":156,"h":120}},"map-case-ring-01.img":{"frame":{"x":2630,"y":1448,"w":156,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":156,"h":120},"sourceSize":{"w":156,"h":120}},"map-crate-14.img":{"frame":{"x":2462,"y":382,"w":156,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":156,"h":144},"sourceSize":{"w":156,"h":144}},"map-crate-14a.img":{"frame":{"x":2545,"y":199,"w":156,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":156,"h":144},"sourceSize":{"w":156,"h":144}},"map-outhouse-res.img":{"frame":{"x":2462,"y":530,"w":150,"h":132},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":125,"y":42,"w":150,"h":132},"sourceSize":{"w":400,"h":312}},"map-case-basement-01.img":{"frame":{"x":2190,"y":3078,"w":148,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":148,"h":112},"sourceSize":{"w":148,"h":112}},"map-crate-10.img":{"frame":{"x":2547,"y":2,"w":148,"h":148},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":148,"h":148},"sourceSize":{"w":148,"h":148}},"map-crate-11.img":{"frame":{"x":2699,"y":2,"w":148,"h":148},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":148,"h":148},"sourceSize":{"w":148,"h":148}},"map-sandbags-02.img":{"frame":{"x":2046,"y":2882,"w":114,"h":146},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":17,"y":1,"w":114,"h":146},"sourceSize":{"w":148,"h":148}},"map-case-deagle-01.img":{"frame":{"x":2190,"y":3194,"w":144,"h":108},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":108},"sourceSize":{"w":144,"h":108}},"map-case-deagle-02.img":{"frame":{"x":2616,"y":530,"w":144,"h":108},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":108},"sourceSize":{"w":144,"h":108}},"map-control-panel-01.img":{"frame":{"x":2622,"y":347,"w":144,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":110},"sourceSize":{"w":144,"h":110}},"map-control-panel-02.img":{"frame":{"x":2705,"y":154,"w":144,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":110},"sourceSize":{"w":144,"h":110}},"map-control-panel-04.img":{"frame":{"x":2851,"y":2,"w":144,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":110},"sourceSize":{"w":144,"h":110}},"map-control-panel-05.img":{"frame":{"x":2618,"y":642,"w":144,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":110},"sourceSize":{"w":144,"h":110}},"map-crate-01.img":{"frame":{"x":2764,"y":461,"w":144,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":144},"sourceSize":{"w":144,"h":144}},"map-crate-02.img":{"frame":{"x":2770,"y":268,"w":144,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":144},"sourceSize":{"w":144,"h":144}},"map-crate-02sv.img":{"frame":{"x":2853,"y":116,"w":144,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":144},"sourceSize":{"w":144,"h":144}},"map-crate-03.img":{"frame":{"x":2618,"y":756,"w":144,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":144},"sourceSize":{"w":144,"h":144}},"map-crate-07.img":{"frame":{"x":2637,"y":904,"w":144,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":144},"sourceSize":{"w":144,"h":144}},"map-crate-08.img":{"frame":{"x":2766,"y":609,"w":144,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":144},"sourceSize":{"w":144,"h":144}},"map-crate-09.img":{"frame":{"x":2912,"y":416,"w":144,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":144},"sourceSize":{"w":144,"h":144}},"map-stone-04.img":{"frame":{"x":2918,"y":264,"w":144,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":144},"sourceSize":{"w":144,"h":144}},"map-stone-05.img":{"frame":{"x":3001,"y":2,"w":144,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":144},"sourceSize":{"w":144,"h":144}},"map-bush-07.img":{"frame":{"x":2766,"y":757,"w":135,"h":143},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":0,"w":135,"h":143},"sourceSize":{"w":144,"h":144}},"map-barrel-01.img":{"frame":{"x":2785,"y":904,"w":142,"h":142},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":142,"h":142},"sourceSize":{"w":144,"h":144}},"map-barrel-02.img":{"frame":{"x":2905,"y":757,"w":142,"h":142},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":142,"h":142},"sourceSize":{"w":144,"h":144}},"map-stone-01.img":{"frame":{"x":2914,"y":564,"w":142,"h":142},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":142,"h":142},"sourceSize":{"w":144,"h":144}},"map-case-flare-01.img":{"frame":{"x":726,"y":807,"w":140,"h":102},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":140,"h":102},"sourceSize":{"w":140,"h":102}},"map-case-hatchet-01.img":{"frame":{"x":726,"y":913,"w":140,"h":102},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":140,"h":102},"sourceSize":{"w":140,"h":102}},"map-chest-01.img":{"frame":{"x":726,"y":1019,"w":140,"h":102},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":140,"h":102},"sourceSize":{"w":140,"h":102}},"map-chest-02.img":{"frame":{"x":726,"y":1125,"w":140,"h":102},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":140,"h":102},"sourceSize":{"w":140,"h":102}},"map-chest-03.img":{"frame":{"x":2637,"y":1052,"w":140,"h":102},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":140,"h":102},"sourceSize":{"w":140,"h":102}},"map-chest-03tr.img":{"frame":{"x":2781,"y":1052,"w":140,"h":102},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":140,"h":102},"sourceSize":{"w":140,"h":102}},"map-crate-res-01.img":{"frame":{"x":2785,"y":1158,"w":138,"h":129},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":9,"w":138,"h":129},"sourceSize":{"w":144,"h":144}},"map-bunker-vent-02.img":{"frame":{"x":1742,"y":2385,"w":132,"h":134},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":1,"w":132,"h":134},"sourceSize":{"w":136,"h":136}},"map-bunker-vent-03.img":{"frame":{"x":2561,"y":1843,"w":132,"h":134},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":1,"w":132,"h":134},"sourceSize":{"w":136,"h":136}},"map-table-res.img":{"frame":{"x":2561,"y":1981,"w":131,"h":132},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":5,"w":131,"h":132},"sourceSize":{"w":144,"h":144}},"map-barrel-res-02.img":{"frame":{"x":1742,"y":2523,"w":130,"h":127},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":6,"w":130,"h":127},"sourceSize":{"w":144,"h":144}},"map-bush-07x.img":{"frame":{"x":2561,"y":2117,"w":126,"h":130},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":7,"w":126,"h":130},"sourceSize":{"w":144,"h":144}},"map-bathhouse-column-01.img":{"frame":{"x":2623,"y":2251,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"map-building-teahouse-floor-02.img":{"frame":{"x":2,"y":4006,"w":128,"h":88},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":88},"sourceSize":{"w":128,"h":88}},"map-case-flare-res-01.img":{"frame":{"x":2691,"y":2117,"w":128,"h":115},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":10,"w":128,"h":115},"sourceSize":{"w":144,"h":144}},"map-case-hatchet-res-01.img":{"frame":{"x":2696,"y":1981,"w":128,"h":115},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":10,"w":128,"h":115},"sourceSize":{"w":144,"h":144}},"map-vat-01.img":{"frame":{"x":2697,"y":1843,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":8,"w":128,"h":128},"sourceSize":{"w":144,"h":144}},"map-crate-05.img":{"frame":{"x":2623,"y":2383,"w":124,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":124,"h":124},"sourceSize":{"w":124,"h":124}},"map-squash-03.img":{"frame":{"x":2680,"y":2511,"w":121,"h":121},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":12,"w":121,"h":121},"sourceSize":{"w":144,"h":144}},"map-chimney-01.img":{"frame":{"x":2751,"y":2383,"w":120,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":120,"h":118},"sourceSize":{"w":120,"h":120}},"map-decal-initiative.img":{"frame":{"x":2680,"y":2636,"w":120,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":120,"h":120},"sourceSize":{"w":128,"h":128}},"map-grill-01.img":{"frame":{"x":2925,"y":1050,"w":120,"h":102},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":13,"w":120,"h":102},"sourceSize":{"w":128,"h":128}},"map-stone-res-01.img":{"frame":{"x":2755,"y":2236,"w":118,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":118,"h":118},"sourceSize":{"w":120,"h":120}},"map-stone-res-04.img":{"frame":{"x":2823,"y":2100,"w":116,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":116,"h":116},"sourceSize":{"w":120,"h":120}},"map-bollard-01.img":{"frame":{"x":3001,"y":150,"w":112,"h":108},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":18,"w":112,"h":108},"sourceSize":{"w":144,"h":144}},"map-tree-04.img":{"frame":{"x":2828,"y":1975,"w":112,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":112,"h":112},"sourceSize":{"w":112,"h":112}},"map-tree-09.img":{"frame":{"x":2931,"y":903,"w":112,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":112,"h":112},"sourceSize":{"w":112,"h":112}},"map-crate-20.img":{"frame":{"x":3047,"y":903,"w":108,"h":108},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":108,"h":108},"sourceSize":{"w":108,"h":108}},"map-oven-01.img":{"frame":{"x":3051,"y":710,"w":108,"h":94},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":108,"h":94},"sourceSize":{"w":108,"h":94}},"map-refrigerator-01.img":{"frame":{"x":2695,"y":2760,"w":108,"h":94},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":108,"h":94},"sourceSize":{"w":108,"h":94}},"map-toilet-res-01.img":{"frame":{"x":2821,"y":3518,"w":98,"h":108},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":15,"y":7,"w":98,"h":108},"sourceSize":{"w":128,"h":128}},"map-vending-soda-01.img":{"frame":{"x":2804,"y":2636,"w":108,"h":94},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":108,"h":94},"sourceSize":{"w":108,"h":94}},"map-decal-club-01.img":{"frame":{"x":2805,"y":2505,"w":100,"h":106},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":115,"w":100,"h":106},"sourceSize":{"w":104,"h":360}},"map-stove-02.img":{"frame":{"x":2695,"y":2858,"w":98,"h":105},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":7,"w":98,"h":105},"sourceSize":{"w":112,"h":112}},"map-decal-oil-02.img":{"frame":{"x":1298,"y":1774,"w":90,"h":100},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":19,"y":14,"w":90,"h":100},"sourceSize":{"w":128,"h":128}},"map-bathrocks-01.img":{"frame":{"x":2797,"y":2858,"w":96,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":96,"h":96},"sourceSize":{"w":96,"h":96}},"map-control-panel-03.img":{"frame":{"x":2807,"y":2734,"w":96,"h":94},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":96,"h":94},"sourceSize":{"w":96,"h":94}},"map-couch-03.img":{"frame":{"x":2875,"y":2358,"w":96,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":96,"h":96},"sourceSize":{"w":96,"h":96}},"map-squash-res-02.img":{"frame":{"x":2877,"y":2220,"w":96,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":15,"w":96,"h":96},"sourceSize":{"w":160,"h":160}},"map-tree-res-02.img":{"frame":{"x":2943,"y":2091,"w":96,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":96,"h":96},"sourceSize":{"w":96,"h":96}},"map-woodpile-01.img":{"frame":{"x":2909,"y":2458,"w":96,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":96,"h":96},"sourceSize":{"w":96,"h":96}},"map-pot-01.img":{"frame":{"x":2975,"y":2320,"w":94,"h":94},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":94,"h":94},"sourceSize":{"w":96,"h":96}},"map-pot-02.img":{"frame":{"x":2977,"y":2191,"w":94,"h":94},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":94,"h":94},"sourceSize":{"w":96,"h":96}},"map-pot-03.img":{"frame":{"x":2710,"y":1572,"w":94,"h":94},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":94,"h":94},"sourceSize":{"w":96,"h":96}},"map-pot-04.img":{"frame":{"x":2710,"y":1670,"w":94,"h":94},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":94,"h":94},"sourceSize":{"w":96,"h":96}},"map-pot-05.img":{"frame":{"x":2790,"y":1291,"w":94,"h":94},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":94,"h":94},"sourceSize":{"w":96,"h":96}},"map-toilet-res-02.img":{"frame":{"x":2462,"y":1585,"w":80,"h":94},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":24,"y":17,"w":80,"h":94},"sourceSize":{"w":128,"h":128}},"map-decal-oil-03.img":{"frame":{"x":802,"y":2290,"w":88,"h":92},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":20,"y":18,"w":88,"h":92},"sourceSize":{"w":128,"h":128}},"map-stand-01.img":{"frame":{"x":2120,"y":464,"w":80,"h":90},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":90},"sourceSize":{"w":80,"h":90}}}}],"main":[{"meta":{"image":"assets/main-0-100-77b62dcc.png","size":{"w":4096,"h":4096},"scale":1},"frames":{"map-bunker-crossing-chamber-floor-01a.img":{"frame":{"x":2,"y":2,"w":1828,"h":352},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":1828,"h":352},"sourceSize":{"w":1830,"h":354}},"map-bunker-hydra-compartment-floor-02.img":{"frame":{"x":2,"y":358,"w":1695,"h":1448},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":0,"w":1695,"h":1448},"sourceSize":{"w":1704,"h":1448}},"map-bunker-crossing-compartment-floor-01.img":{"frame":{"x":1834,"y":2,"w":1504,"h":928},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":1504,"h":928},"sourceSize":{"w":1504,"h":928}},"map-bunker-crossing-chamber-ceiling-01.img":{"frame":{"x":1701,"y":934,"w":1136,"h":240},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":1136,"h":240},"sourceSize":{"w":1136,"h":240}},"map-bunker-chrys-chamber-floor-01b.img":{"frame":{"x":2841,"y":934,"w":930,"h":626},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":0,"w":930,"h":626},"sourceSize":{"w":932,"h":628}},"map-bunker-chrys-compartment-floor-03a.img":{"frame":{"x":1701,"y":1178,"w":768,"h":864},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":768,"h":864},"sourceSize":{"w":768,"h":864}},"map-bunker-hydra-floor-01.img":{"frame":{"x":2473,"y":1564,"w":863,"h":608},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":863,"h":608},"sourceSize":{"w":863,"h":608}},"map-building-greenhouse-floor-01.img":{"frame":{"x":2,"y":1810,"w":832,"h":641},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":832,"h":641},"sourceSize":{"w":834,"h":642}},"map-bunker-chrys-compartment-floor-01b.img":{"frame":{"x":838,"y":1810,"w":800,"h":772},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":800,"h":772},"sourceSize":{"w":804,"h":804}},"map-bunker-hydra-compartment-ceiling-02.img":{"frame":{"x":1642,"y":2046,"w":800,"h":656},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":800,"h":656},"sourceSize":{"w":816,"h":720}},"map-bunker-hydra-chamber-floor-03.img":{"frame":{"x":3342,"y":2,"w":704,"h":798},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":32,"w":704,"h":798},"sourceSize":{"w":704,"h":832}},"map-bunker-chrys-compartment-floor-02a.img":{"frame":{"x":2,"y":2455,"w":768,"h":628},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":0,"w":768,"h":628},"sourceSize":{"w":772,"h":628}},"map-bunker-hydra-chamber-floor-02.img":{"frame":{"x":2,"y":3087,"w":337,"h":740},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":44,"y":0,"w":337,"h":740},"sourceSize":{"w":392,"h":744}},"map-bunker-hydra-chamber-floor-01b.img":{"frame":{"x":3340,"y":1564,"w":706,"h":738},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":706,"h":738},"sourceSize":{"w":706,"h":738}},"map-bunker-crossing-compartment-ceiling-01b.img":{"frame":{"x":774,"y":2586,"w":720,"h":496},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":720,"h":496},"sourceSize":{"w":720,"h":496}},"map-bunker-crossing-chamber-floor-02.img":{"frame":{"x":2,"y":3831,"w":704,"h":253},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":32,"y":320,"w":704,"h":253},"sourceSize":{"w":736,"h":576}},"map-bunker-crossing-chamber-floor-03.img":{"frame":{"x":2446,"y":2176,"w":704,"h":250},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":32,"y":323,"w":704,"h":250},"sourceSize":{"w":736,"h":576}},"map-bunker-hydra-compartment-floor-01.img":{"frame":{"x":343,"y":3087,"w":704,"h":640},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":704,"h":640},"sourceSize":{"w":704,"h":640}},"map-bunker-hydra-compartment-floor-03.img":{"frame":{"x":3154,"y":2306,"w":704,"h":507},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":704,"h":507},"sourceSize":{"w":704,"h":512}},"map-bunker-chrys-compartment-floor-01a.img":{"frame":{"x":3862,"y":2306,"w":228,"h":608},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":34,"w":228,"h":608},"sourceSize":{"w":228,"h":644}},"map-bunker-crossing-compartment-floor-02.img":{"frame":{"x":3775,"y":804,"w":318,"h":608},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":0,"w":318,"h":608},"sourceSize":{"w":320,"h":608}},"map-bunker-crossing-chamber-floor-01b.img":{"frame":{"x":2446,"y":2430,"w":574,"h":194},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":0,"w":574,"h":194},"sourceSize":{"w":610,"h":194}},"map-complex-warehouse-floor-02.img":{"frame":{"x":1701,"y":358,"w":60,"h":528},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":60,"h":528},"sourceSize":{"w":60,"h":528}},"map-bunker-chrys-compartment-floor-02b.img":{"frame":{"x":710,"y":3731,"w":512,"h":180},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":18,"y":0,"w":512,"h":180},"sourceSize":{"w":548,"h":180}},"map-tree-08sp.img":{"frame":{"x":1051,"y":3086,"w":512,"h":510},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":512,"h":510},"sourceSize":{"w":512,"h":512}},"map-bunker-chrys-chamber-ceiling-01.img":{"frame":{"x":1498,"y":2706,"w":448,"h":272},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":448,"h":272},"sourceSize":{"w":448,"h":272}},"map-bunker-hydra-ceiling-01.img":{"frame":{"x":1226,"y":3600,"w":432,"h":304},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":432,"h":304},"sourceSize":{"w":432,"h":304}},"map-building-greenhouse-ceiling-01.img":{"frame":{"x":1567,"y":2982,"w":401,"h":314},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":401,"h":314},"sourceSize":{"w":404,"h":316}},"map-bunker-hydra-chamber-ceiling-03.img":{"frame":{"x":1950,"y":2706,"w":400,"h":272},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":400,"h":272},"sourceSize":{"w":400,"h":272}},"map-bunker-chrys-compartment-ceiling-01b.img":{"frame":{"x":2473,"y":1178,"w":354,"h":368},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":2,"w":354,"h":368},"sourceSize":{"w":356,"h":372}},"map-bunker-hydra-compartment-ceiling-01.img":{"frame":{"x":2446,"y":2628,"w":320,"h":360},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":320,"h":360},"sourceSize":{"w":320,"h":360}},"map-bunker-chrys-compartment-ceiling-02b.img":{"frame":{"x":2770,"y":2628,"w":352,"h":258},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":0,"w":352,"h":258},"sourceSize":{"w":356,"h":260}},"map-bunker-chrys-compartment-ceiling-03b.img":{"frame":{"x":1972,"y":2982,"w":352,"h":306},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":352,"h":306},"sourceSize":{"w":356,"h":308}},"map-bunker-hydra-chamber-ceiling-02.img":{"frame":{"x":1662,"y":3300,"w":192,"h":350},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":192,"h":350},"sourceSize":{"w":192,"h":350}},"map-bunker-hydra-chamber-ceiling-01.img":{"frame":{"x":1662,"y":3654,"w":320,"h":344},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":320,"h":344},"sourceSize":{"w":432,"h":352}},"map-bunker-crossing-floor-01.img":{"frame":{"x":1858,"y":3300,"w":320,"h":320},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":320,"h":320},"sourceSize":{"w":320,"h":320}},"map-bunker-hydra-compartment-ceiling-03.img":{"frame":{"x":1986,"y":3624,"w":320,"h":270},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":320,"h":270},"sourceSize":{"w":320,"h":270}},"map-bunker-crossing-compartment-ceiling-01a.img":{"frame":{"x":2182,"y":3292,"w":128,"h":304},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":304},"sourceSize":{"w":128,"h":304}},"map-building-crossing-bathroom-ceiling.img":{"frame":{"x":1986,"y":3898,"w":288,"h":192},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":288,"h":192},"sourceSize":{"w":288,"h":192}},"map-planter-01.img":{"frame":{"x":2310,"y":3600,"w":144,"h":272},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":272},"sourceSize":{"w":144,"h":272}},"map-planter-02.img":{"frame":{"x":2314,"y":3292,"w":144,"h":272},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":272},"sourceSize":{"w":144,"h":272}},"map-planter-03.img":{"frame":{"x":2328,"y":2992,"w":144,"h":272},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":272},"sourceSize":{"w":144,"h":272}},"map-tree-07sp.img":{"frame":{"x":2458,"y":3568,"w":256,"h":256},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":256,"h":256},"sourceSize":{"w":256,"h":256}},"map-bunker-crossing-ceiling-01.img":{"frame":{"x":2458,"y":3828,"w":193,"h":230},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":64,"y":0,"w":193,"h":230},"sourceSize":{"w":320,"h":288}},"map-bunker-chrys-compartment-ceiling-02a.img":{"frame":{"x":343,"y":3731,"w":224,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":224,"h":96},"sourceSize":{"w":224,"h":96}},"map-bunker-chrys-compartment-ceiling-03a.img":{"frame":{"x":3342,"y":804,"w":224,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":224,"h":96},"sourceSize":{"w":224,"h":96}},"map-complex-warehouse-floor-01.img":{"frame":{"x":1765,"y":358,"w":60,"h":224},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":60,"h":224},"sourceSize":{"w":60,"h":224}},"map-complex-warehouse-floor-03.img":{"frame":{"x":1765,"y":586,"w":60,"h":224},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":60,"h":224},"sourceSize":{"w":60,"h":224}},"map-bunker-hydra-floor-04.img":{"frame":{"x":2655,"y":3828,"w":200,"h":200},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":200,"h":200},"sourceSize":{"w":200,"h":200}},"map-bunker-hydra-chamber-floor-01a.img":{"frame":{"x":2462,"y":3268,"w":194,"h":192},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":194,"h":192},"sourceSize":{"w":194,"h":194}},"map-bunker-crossing-chamber-floor-01c.img":{"frame":{"x":2476,"y":2992,"w":192,"h":193},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":1,"w":192,"h":193},"sourceSize":{"w":230,"h":194}},"map-bunker-chrys-compartment-ceiling-01a.img":{"frame":{"x":3024,"y":2430,"w":112,"h":192},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":112,"h":192},"sourceSize":{"w":112,"h":192}},"map-bunker-chrys-chamber-floor-01a.img":{"frame":{"x":2278,"y":3898,"w":159,"h":148},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":31,"w":159,"h":148},"sourceSize":{"w":159,"h":179}},"map-planter-res-01.img":{"frame":{"x":3775,"y":1416,"w":76,"h":134},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":1,"w":76,"h":134},"sourceSize":{"w":86,"h":136}},"map-planter-04.img":{"frame":{"x":2462,"y":3464,"w":100,"h":100},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":100,"h":100},"sourceSize":{"w":100,"h":100}},"map-planter-05.img":{"frame":{"x":2566,"y":3464,"w":100,"h":100},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":100,"h":100},"sourceSize":{"w":100,"h":100}}}}],"desert":[{"meta":{"image":"assets/desert-0-100-899c3e60.png","size":{"w":4096,"h":4096},"scale":1},"frames":{"map-building-saloon-floor-01.img":{"frame":{"x":2,"y":2,"w":1312,"h":1312},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":1312,"h":1312},"sourceSize":{"w":1312,"h":1312}},"map-building-saloon-cellar-01.img":{"frame":{"x":2,"y":1318,"w":1056,"h":672},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":1056,"h":672},"sourceSize":{"w":1056,"h":672}},"map-complex-warehouse-floor-05.img":{"frame":{"x":1318,"y":2,"w":522,"h":932},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1008,"w":522,"h":932},"sourceSize":{"w":1296,"h":2048}},"map-bunker-chrys-chamber-floor-01b.img":{"frame":{"x":1062,"y":1318,"w":930,"h":626},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":0,"w":930,"h":626},"sourceSize":{"w":932,"h":628}},"map-bunker-chrys-compartment-floor-03a.img":{"frame":{"x":1844,"y":2,"w":768,"h":864},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":768,"h":864},"sourceSize":{"w":768,"h":864}},"map-building-greenhouse-floor-02.img":{"frame":{"x":2616,"y":2,"w":832,"h":642},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":832,"h":642},"sourceSize":{"w":834,"h":642}},"map-bunker-chrys-compartment-floor-01c.img":{"frame":{"x":2616,"y":648,"w":800,"h":772},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":800,"h":772},"sourceSize":{"w":804,"h":804}},"map-bunker-chrys-compartment-floor-02a.img":{"frame":{"x":1996,"y":1424,"w":768,"h":628},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":0,"w":768,"h":628},"sourceSize":{"w":772,"h":628}},"map-building-archway-ceiling-01.img":{"frame":{"x":3420,"y":648,"w":672,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":672,"h":128},"sourceSize":{"w":672,"h":128}},"map-building-saloon-ceiling-01.img":{"frame":{"x":3452,"y":2,"w":625,"h":624},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":625,"h":624},"sourceSize":{"w":656,"h":656}},"map-building-greenhouse-ceiling-02.img":{"frame":{"x":3420,"y":780,"w":400,"h":624},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":400,"h":624},"sourceSize":{"w":400,"h":624}},"map-bunker-chrys-compartment-floor-01a.img":{"frame":{"x":3824,"y":780,"w":228,"h":608},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":34,"w":228,"h":608},"sourceSize":{"w":228,"h":644}},"map-bunker-statue-chamber-floor-01.img":{"frame":{"x":1996,"y":870,"w":250,"h":541},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":32,"w":250,"h":541},"sourceSize":{"w":256,"h":576}},"map-bunker-chrys-compartment-floor-02c.img":{"frame":{"x":3420,"y":1408,"w":512,"h":180},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":18,"y":0,"w":512,"h":180},"sourceSize":{"w":548,"h":180}},"map-tree-05c.img":{"frame":{"x":2768,"y":1424,"w":470,"h":492},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":21,"y":10,"w":470,"h":492},"sourceSize":{"w":512,"h":512}},"map-bunker-chrys-chamber-ceiling-01.img":{"frame":{"x":1318,"y":938,"w":448,"h":272},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":448,"h":272},"sourceSize":{"w":448,"h":272}},"map-bunker-chrys-compartment-ceiling-01b.img":{"frame":{"x":2250,"y":870,"w":354,"h":368},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":2,"w":354,"h":368},"sourceSize":{"w":356,"h":372}},"map-archway-res-01.img":{"frame":{"x":2250,"y":1242,"w":359,"h":91},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":2,"w":359,"h":91},"sourceSize":{"w":360,"h":96}},"map-bunker-chrys-compartment-ceiling-02b.img":{"frame":{"x":3242,"y":1592,"w":352,"h":258},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":0,"w":352,"h":258},"sourceSize":{"w":356,"h":260}},"map-bunker-chrys-compartment-ceiling-03b.img":{"frame":{"x":3598,"y":1592,"w":352,"h":306},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":352,"h":306},"sourceSize":{"w":356,"h":308}},"map-statue-03.img":{"frame":{"x":3242,"y":1854,"w":288,"h":282},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":67,"y":67,"w":288,"h":282},"sourceSize":{"w":416,"h":416}},"map-statue-04.img":{"frame":{"x":2768,"y":1920,"w":288,"h":282},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":67,"y":67,"w":288,"h":282},"sourceSize":{"w":416,"h":416}},"map-stone-06.img":{"frame":{"x":3534,"y":1902,"w":288,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":288,"h":128},"sourceSize":{"w":288,"h":128}},"map-stone-03b.img":{"frame":{"x":3534,"y":2034,"w":276,"h":272},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":276,"h":272},"sourceSize":{"w":288,"h":288}},"map-planter-06.img":{"frame":{"x":1844,"y":870,"w":144,"h":272},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":272},"sourceSize":{"w":144,"h":272}},"map-tree-06.img":{"frame":{"x":3826,"y":1902,"w":256,"h":256},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":256,"h":256},"sourceSize":{"w":256,"h":256}},"map-bunker-chrys-compartment-ceiling-02a.img":{"frame":{"x":1318,"y":1214,"w":224,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":224,"h":96},"sourceSize":{"w":224,"h":96}},"map-bunker-chrys-compartment-ceiling-03a.img":{"frame":{"x":1546,"y":1214,"w":224,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":224,"h":96},"sourceSize":{"w":224,"h":96}},"map-building-saloon-ceiling-02.img":{"frame":{"x":1774,"y":1146,"w":192,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":192,"h":160},"sourceSize":{"w":192,"h":160}},"map-bunker-chrys-compartment-ceiling-01a.img":{"frame":{"x":3936,"y":1392,"w":112,"h":192},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":112,"h":192},"sourceSize":{"w":112,"h":192}},"map-bunker-chrys-chamber-floor-01a.img":{"frame":{"x":3242,"y":1424,"w":159,"h":148},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":31,"w":159,"h":148},"sourceSize":{"w":159,"h":179}},"map-crate-18.img":{"frame":{"x":3060,"y":1920,"w":144,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":144},"sourceSize":{"w":144,"h":144}},"map-crate-22.img":{"frame":{"x":3060,"y":2068,"w":144,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":144},"sourceSize":{"w":144,"h":144}},"map-crate-02f.img":{"frame":{"x":3814,"y":2162,"w":144,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":144},"sourceSize":{"w":144,"h":144}},"map-bush-05.img":{"frame":{"x":3954,"y":1588,"w":140,"h":140},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":140,"h":140},"sourceSize":{"w":144,"h":144}},"map-chest-03d.img":{"frame":{"x":3954,"y":1732,"w":140,"h":102},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":140,"h":102},"sourceSize":{"w":140,"h":102}},"map-case-meteor-01.img":{"frame":{"x":3208,"y":2140,"w":140,"h":102},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":140,"h":102},"sourceSize":{"w":140,"h":102}},"map-planter-res-02.img":{"frame":{"x":3962,"y":2162,"w":76,"h":134},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":1,"w":76,"h":134},"sourceSize":{"w":86,"h":136}},"map-case-meteor-res-01.img":{"frame":{"x":3962,"y":2300,"w":128,"h":115},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":10,"w":128,"h":115},"sourceSize":{"w":144,"h":144}},"map-stone-res-01b.img":{"frame":{"x":3352,"y":2140,"w":118,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":118,"h":118},"sourceSize":{"w":120,"h":120}},"map-planter-07.img":{"frame":{"x":1062,"y":1948,"w":100,"h":100},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":100,"h":100},"sourceSize":{"w":100,"h":100}},"map-planter-res-03.img":{"frame":{"x":2250,"y":1337,"w":82,"h":74},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":6,"w":82,"h":74},"sourceSize":{"w":86,"h":86}},"map-bush-res-05.img":{"frame":{"x":3474,"y":2140,"w":56,"h":50},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":44,"y":47,"w":56,"h":50},"sourceSize":{"w":144,"h":144}}}}],"faction":[{"meta":{"image":"assets/faction-0-100-d34e6617.png","size":{"w":4096,"h":4096},"scale":1},"frames":{"map-building-bridge-xlg-floor.img":{"frame":{"x":2,"y":2,"w":2464,"h":960},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":2464,"h":960},"sourceSize":{"w":2464,"h":960}},"map-complex-warehouse-floor-04.img":{"frame":{"x":2470,"y":2,"w":1296,"h":2048},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":1296,"h":2048},"sourceSize":{"w":1296,"h":2048}},"map-bunker-chrys-chamber-floor-01b.img":{"frame":{"x":2,"y":2054,"w":930,"h":626},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":0,"w":930,"h":626},"sourceSize":{"w":932,"h":628}},"map-bunker-chrys-compartment-floor-03a.img":{"frame":{"x":2,"y":966,"w":768,"h":864},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":768,"h":864},"sourceSize":{"w":768,"h":864}},"map-building-greenhouse-floor-01.img":{"frame":{"x":774,"y":966,"w":832,"h":641},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":832,"h":641},"sourceSize":{"w":834,"h":642}},"map-bunker-chrys-compartment-floor-01b.img":{"frame":{"x":1610,"y":966,"w":800,"h":772},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":800,"h":772},"sourceSize":{"w":804,"h":804}},"map-bunker-chrys-compartment-floor-02a.img":{"frame":{"x":936,"y":1742,"w":768,"h":628},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":0,"w":768,"h":628},"sourceSize":{"w":772,"h":628}},"map-bunker-chrys-compartment-floor-01a.img":{"frame":{"x":3770,"y":2,"w":228,"h":608},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":34,"w":228,"h":608},"sourceSize":{"w":228,"h":644}},"map-complex-warehouse-floor-02.img":{"frame":{"x":4002,"y":2,"w":60,"h":528},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":60,"h":528},"sourceSize":{"w":60,"h":528}},"map-bunker-chrys-compartment-floor-02b.img":{"frame":{"x":2,"y":1834,"w":512,"h":180},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":18,"y":0,"w":512,"h":180},"sourceSize":{"w":548,"h":180}},"map-tree-08f.img":{"frame":{"x":1708,"y":1742,"w":512,"h":510},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":512,"h":510},"sourceSize":{"w":512,"h":512}},"map-bunker-chrys-chamber-ceiling-01.img":{"frame":{"x":2,"y":2684,"w":448,"h":272},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":448,"h":272},"sourceSize":{"w":448,"h":272}},"map-building-greenhouse-ceiling-01.img":{"frame":{"x":2,"y":2960,"w":401,"h":314},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":401,"h":314},"sourceSize":{"w":404,"h":316}},"map-bunker-chrys-compartment-ceiling-01b.img":{"frame":{"x":2,"y":3278,"w":354,"h":368},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":2,"w":354,"h":368},"sourceSize":{"w":356,"h":372}},"map-bunker-chrys-compartment-ceiling-02b.img":{"frame":{"x":2,"y":3650,"w":352,"h":258},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":0,"w":352,"h":258},"sourceSize":{"w":356,"h":260}},"map-bunker-chrys-compartment-ceiling-03b.img":{"frame":{"x":358,"y":3650,"w":352,"h":306},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":352,"h":306},"sourceSize":{"w":356,"h":308}},"map-statue-01.img":{"frame":{"x":3770,"y":614,"w":282,"h":282},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":67,"y":67,"w":282,"h":282},"sourceSize":{"w":416,"h":416}},"map-statue-top-01.img":{"frame":{"x":2,"y":3912,"w":279,"h":142},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":131,"y":133,"w":279,"h":142},"sourceSize":{"w":416,"h":416}},"map-statue-top-02.img":{"frame":{"x":3770,"y":900,"w":279,"h":142},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":131,"y":133,"w":279,"h":142},"sourceSize":{"w":416,"h":416}},"map-stone-03f.img":{"frame":{"x":3770,"y":1046,"w":276,"h":272},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":276,"h":272},"sourceSize":{"w":288,"h":288}},"map-planter-01.img":{"frame":{"x":774,"y":1611,"w":144,"h":272},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":272},"sourceSize":{"w":144,"h":272}},"map-planter-02.img":{"frame":{"x":360,"y":3278,"w":144,"h":272},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":272},"sourceSize":{"w":144,"h":272}},"map-planter-03.img":{"frame":{"x":407,"y":2960,"w":144,"h":272},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":272},"sourceSize":{"w":144,"h":272}},"map-airdrop-03.img":{"frame":{"x":454,"y":2684,"w":256,"h":256},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":256,"h":256},"sourceSize":{"w":256,"h":256}},"map-airdrop-04.img":{"frame":{"x":3770,"y":1322,"w":256,"h":256},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":256,"h":256},"sourceSize":{"w":256,"h":256}},"map-crate-12.img":{"frame":{"x":2224,"y":1742,"w":240,"h":240},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":240,"h":240},"sourceSize":{"w":240,"h":240}},"map-crate-13.img":{"frame":{"x":2224,"y":1986,"w":240,"h":240},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":240,"h":240},"sourceSize":{"w":240,"h":240}},"map-bunker-chrys-compartment-ceiling-02a.img":{"frame":{"x":518,"y":1834,"w":224,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":224,"h":96},"sourceSize":{"w":224,"h":96}},"map-bunker-chrys-compartment-ceiling-03a.img":{"frame":{"x":518,"y":1934,"w":224,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":224,"h":96},"sourceSize":{"w":224,"h":96}},"map-complex-warehouse-floor-01.img":{"frame":{"x":4030,"y":1322,"w":60,"h":224},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":60,"h":224},"sourceSize":{"w":60,"h":224}},"map-complex-warehouse-floor-03.img":{"frame":{"x":4030,"y":1550,"w":60,"h":224},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":60,"h":224},"sourceSize":{"w":60,"h":224}},"map-stone-res-02f.img":{"frame":{"x":3770,"y":1582,"w":200,"h":200},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":200,"h":200},"sourceSize":{"w":200,"h":200}},"map-bunker-chrys-compartment-ceiling-01a.img":{"frame":{"x":3974,"y":1778,"w":112,"h":192},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":112,"h":192},"sourceSize":{"w":112,"h":192}},"map-bunker-chrys-chamber-floor-01a.img":{"frame":{"x":746,"y":1887,"w":159,"h":148},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":31,"w":159,"h":148},"sourceSize":{"w":159,"h":179}},"map-crate-02f.img":{"frame":{"x":3770,"y":1786,"w":144,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":144},"sourceSize":{"w":144,"h":144}},"map-crate-22.img":{"frame":{"x":3770,"y":1934,"w":144,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":144},"sourceSize":{"w":144,"h":144}},"map-chest-03f.img":{"frame":{"x":922,"y":1611,"w":140,"h":102},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":140,"h":102},"sourceSize":{"w":140,"h":102}},"map-planter-res-01.img":{"frame":{"x":285,"y":3960,"w":76,"h":134},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":1,"w":76,"h":134},"sourceSize":{"w":86,"h":136}},"map-bush-01f.img":{"frame":{"x":365,"y":3960,"w":126,"h":130},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":7,"w":126,"h":130},"sourceSize":{"w":144,"h":144}},"map-planter-04.img":{"frame":{"x":1066,"y":1611,"w":100,"h":100},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":100,"h":100},"sourceSize":{"w":100,"h":100}},"map-planter-05.img":{"frame":{"x":1170,"y":1611,"w":100,"h":100},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":100,"h":100},"sourceSize":{"w":100,"h":100}}}}],"halloween":[{"meta":{"image":"assets/halloween-0-100-4694c5f4.png","size":{"w":2048,"h":2048},"scale":1},"frames":{"map-bunker-eye-chamber-floor-01a.img":{"frame":{"x":2,"y":2,"w":704,"h":1344},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":32,"w":704,"h":1344},"sourceSize":{"w":704,"h":1376}},"map-bunker-eye-compartment-floor-01.img":{"frame":{"x":710,"y":2,"w":704,"h":704},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":704,"h":704},"sourceSize":{"w":704,"h":704}},"map-bunker-eye-chamber-ceiling-01.img":{"frame":{"x":2,"y":1350,"w":320,"h":544},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":320,"h":544},"sourceSize":{"w":320,"h":544}},"map-tree-08.img":{"frame":{"x":1418,"y":2,"w":512,"h":510},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":512,"h":510},"sourceSize":{"w":512,"h":512}},"map-tree-05.img":{"frame":{"x":1418,"y":516,"w":490,"h":480},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":17,"w":490,"h":480},"sourceSize":{"w":512,"h":512}},"map-bunker-eye-compartment-ceiling-01.img":{"frame":{"x":326,"y":1350,"w":320,"h":320},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":320,"h":320},"sourceSize":{"w":320,"h":320}},"map-bunker-eye-chamber-floor-01b.img":{"frame":{"x":326,"y":1674,"w":192,"h":256},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":192,"h":256},"sourceSize":{"w":192,"h":256}},"map-tree-07.img":{"frame":{"x":522,"y":1674,"w":256,"h":256},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":256,"h":256},"sourceSize":{"w":256,"h":256}},"map-bush-06.img":{"frame":{"x":650,"y":1350,"w":190,"h":188},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":2,"w":190,"h":188},"sourceSize":{"w":192,"h":192}},"map-airdrop-01h.img":{"frame":{"x":710,"y":1000,"w":160,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":160},"sourceSize":{"w":160,"h":160}},"map-airdrop-02h.img":{"frame":{"x":710,"y":1164,"w":160,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":160},"sourceSize":{"w":160,"h":160}},"map-web-01.img":{"frame":{"x":710,"y":710,"w":152,"h":158},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":152,"h":158},"sourceSize":{"w":152,"h":160}},"map-crate-11h.img":{"frame":{"x":2,"y":1898,"w":146,"h":146},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":146,"h":146},"sourceSize":{"w":148,"h":148}},"map-bush-07sp.img":{"frame":{"x":152,"y":1898,"w":135,"h":143},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":0,"w":135,"h":143},"sourceSize":{"w":144,"h":144}},"map-pumpkin-01.img":{"frame":{"x":866,"y":710,"w":140,"h":140},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":140,"h":140},"sourceSize":{"w":144,"h":144}},"map-pumpkin-02.img":{"frame":{"x":866,"y":854,"w":140,"h":140},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":140,"h":140},"sourceSize":{"w":144,"h":144}},"map-pumpkin-res-01.img":{"frame":{"x":1010,"y":710,"w":135,"h":132},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":8,"w":135,"h":132},"sourceSize":{"w":144,"h":144}},"map-tree-04h.img":{"frame":{"x":1934,"y":2,"w":112,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":112,"h":112},"sourceSize":{"w":112,"h":112}},"map-pumpkin-04.img":{"frame":{"x":291,"y":1934,"w":95,"h":97},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":22,"y":25,"w":95,"h":97},"sourceSize":{"w":144,"h":144}},"part-airdrop-01h.img":{"frame":{"x":1934,"y":118,"w":88,"h":88},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":88,"h":88},"sourceSize":{"w":96,"h":96}},"part-airdrop-02h.img":{"frame":{"x":390,"y":1934,"w":80,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":80},"sourceSize":{"w":80,"h":80}},"map-pumpkin-res-04.img":{"frame":{"x":1934,"y":210,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":25,"y":21,"w":72,"h":72},"sourceSize":{"w":144,"h":144}},"map-bush-res-06.img":{"frame":{"x":474,"y":1934,"w":65,"h":65},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":40,"y":40,"w":65,"h":65},"sourceSize":{"w":144,"h":144}}}}],"potato":[{"meta":{"image":"assets/potato-0-100-44c4d4d7.png","size":{"w":2048,"h":2048},"scale":1},"frames":{"map-building-shilo-ceiling-01.img":{"frame":{"x":2,"y":2,"w":960,"h":768},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":960,"h":768},"sourceSize":{"w":960,"h":768}},"map-building-shilo-floor-01.img":{"frame":{"x":966,"y":2,"w":960,"h":768},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":960,"h":768},"sourceSize":{"w":960,"h":768}},"map-egg-01.img":{"frame":{"x":1930,"y":2,"w":94,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":15,"y":1,"w":94,"h":122},"sourceSize":{"w":124,"h":124}},"map-egg-02.img":{"frame":{"x":1930,"y":128,"w":94,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":15,"y":1,"w":94,"h":122},"sourceSize":{"w":124,"h":124}},"map-egg-03.img":{"frame":{"x":1930,"y":254,"w":94,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":15,"y":1,"w":94,"h":122},"sourceSize":{"w":124,"h":124}},"map-egg-04.img":{"frame":{"x":1930,"y":380,"w":94,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":15,"y":1,"w":94,"h":122},"sourceSize":{"w":124,"h":124}},"map-egg-res-01.img":{"frame":{"x":1930,"y":506,"w":92,"h":88},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":6,"w":92,"h":88},"sourceSize":{"w":100,"h":100}},"map-potato-res-01.img":{"frame":{"x":1930,"y":598,"w":85,"h":83},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":29,"y":36,"w":85,"h":83},"sourceSize":{"w":144,"h":144}},"map-potato-01.img":{"frame":{"x":1930,"y":685,"w":72,"h":70},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":72,"h":70},"sourceSize":{"w":72,"h":72}},"map-potato-02.img":{"frame":{"x":1930,"y":759,"w":72,"h":70},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":72,"h":70},"sourceSize":{"w":72,"h":72}},"map-potato-03.img":{"frame":{"x":2,"y":833,"w":72,"h":70},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":72,"h":70},"sourceSize":{"w":72,"h":72}}}}],"snow":[{"meta":{"image":"assets/snow-0-100-4ed2f44b.png","size":{"w":4096,"h":4096},"scale":1},"frames":{"map-bunker-hydra-compartment-floor-02.img":{"frame":{"x":2,"y":2,"w":1695,"h":1448},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":0,"w":1695,"h":1448},"sourceSize":{"w":1704,"h":1448}},"map-bunker-chrys-chamber-floor-01b.img":{"frame":{"x":1701,"y":2,"w":930,"h":626},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":0,"w":930,"h":626},"sourceSize":{"w":932,"h":628}},"map-bunker-chrys-compartment-floor-03a.img":{"frame":{"x":2635,"y":2,"w":768,"h":864},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":768,"h":864},"sourceSize":{"w":768,"h":864}},"map-bunker-hydra-floor-01.img":{"frame":{"x":1701,"y":632,"w":863,"h":608},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":863,"h":608},"sourceSize":{"w":863,"h":608}},"map-building-greenhouse-floor-02.img":{"frame":{"x":2568,"y":870,"w":832,"h":642},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":832,"h":642},"sourceSize":{"w":834,"h":642}},"map-bunker-hydra-compartment-ceiling-02.img":{"frame":{"x":1701,"y":1244,"w":800,"h":656},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":800,"h":656},"sourceSize":{"w":816,"h":720}},"map-bunker-chrys-compartment-floor-01c.img":{"frame":{"x":2505,"y":1516,"w":800,"h":772},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":800,"h":772},"sourceSize":{"w":804,"h":804}},"map-bunker-hydra-chamber-floor-03.img":{"frame":{"x":3309,"y":1516,"w":704,"h":798},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":32,"w":704,"h":798},"sourceSize":{"w":704,"h":832}},"map-bunker-chrys-compartment-floor-02a.img":{"frame":{"x":2,"y":1454,"w":768,"h":628},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":0,"w":768,"h":628},"sourceSize":{"w":772,"h":628}},"map-bunker-hydra-chamber-floor-02.img":{"frame":{"x":3407,"y":2,"w":337,"h":740},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":44,"y":0,"w":337,"h":740},"sourceSize":{"w":392,"h":744}},"map-bunker-hydra-chamber-floor-01b.img":{"frame":{"x":774,"y":1454,"w":706,"h":738},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":706,"h":738},"sourceSize":{"w":706,"h":738}},"map-bunker-hydra-compartment-floor-01.img":{"frame":{"x":2,"y":2086,"w":704,"h":640},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":704,"h":640},"sourceSize":{"w":704,"h":640}},"map-bunker-hydra-compartment-floor-03.img":{"frame":{"x":1484,"y":1904,"w":704,"h":507},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":704,"h":507},"sourceSize":{"w":704,"h":512}},"map-building-greenhouse-ceiling-02.img":{"frame":{"x":3404,"y":870,"w":400,"h":624},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":400,"h":624},"sourceSize":{"w":400,"h":624}},"map-bunker-chrys-compartment-floor-01a.img":{"frame":{"x":3808,"y":2,"w":228,"h":608},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":34,"w":228,"h":608},"sourceSize":{"w":228,"h":644}},"map-complex-warehouse-floor-02.img":{"frame":{"x":710,"y":2086,"w":60,"h":528},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":60,"h":528},"sourceSize":{"w":60,"h":528}},"map-bunker-chrys-compartment-floor-02c.img":{"frame":{"x":774,"y":2196,"w":512,"h":180},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":18,"y":0,"w":512,"h":180},"sourceSize":{"w":548,"h":180}},"map-bunker-chrys-chamber-ceiling-01.img":{"frame":{"x":774,"y":2380,"w":448,"h":272},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":448,"h":272},"sourceSize":{"w":448,"h":272}},"map-bunker-hydra-ceiling-01.img":{"frame":{"x":2192,"y":2292,"w":432,"h":304},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":432,"h":304},"sourceSize":{"w":432,"h":304}},"map-bunker-hydra-chamber-ceiling-03.img":{"frame":{"x":2628,"y":2292,"w":400,"h":272},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":400,"h":272},"sourceSize":{"w":400,"h":272}},"map-bunker-chrys-compartment-ceiling-01b.img":{"frame":{"x":1226,"y":2415,"w":354,"h":368},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":2,"w":354,"h":368},"sourceSize":{"w":356,"h":372}},"map-bunker-hydra-compartment-ceiling-01.img":{"frame":{"x":710,"y":2656,"w":320,"h":360},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":320,"h":360},"sourceSize":{"w":320,"h":360}},"map-bunker-chrys-compartment-ceiling-02b.img":{"frame":{"x":1584,"y":2415,"w":352,"h":258},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":0,"w":352,"h":258},"sourceSize":{"w":356,"h":260}},"map-bunker-chrys-compartment-ceiling-03b.img":{"frame":{"x":2,"y":2730,"w":352,"h":306},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":352,"h":306},"sourceSize":{"w":356,"h":308}},"map-bunker-hydra-chamber-ceiling-02.img":{"frame":{"x":1484,"y":1454,"w":192,"h":350},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":192,"h":350},"sourceSize":{"w":192,"h":350}},"map-bunker-hydra-chamber-ceiling-01.img":{"frame":{"x":358,"y":2730,"w":320,"h":344},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":320,"h":344},"sourceSize":{"w":432,"h":352}},"map-bunker-hydra-compartment-ceiling-03.img":{"frame":{"x":2,"y":3040,"w":320,"h":270},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":320,"h":270},"sourceSize":{"w":320,"h":270}},"map-snow-03.img":{"frame":{"x":3748,"y":614,"w":312,"h":178},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":24,"y":7,"w":312,"h":178},"sourceSize":{"w":360,"h":192}},"map-table-02x.img":{"frame":{"x":2192,"y":1904,"w":288,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":288,"h":160},"sourceSize":{"w":288,"h":160}},"map-stone-03x.img":{"frame":{"x":3808,"y":796,"w":276,"h":272},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":276,"h":272},"sourceSize":{"w":288,"h":288}},"map-planter-06.img":{"frame":{"x":1034,"y":2656,"w":144,"h":272},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":272},"sourceSize":{"w":144,"h":272}},"map-tree-10.img":{"frame":{"x":3032,"y":2292,"w":254,"h":254},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":254,"h":254},"sourceSize":{"w":256,"h":256}},"map-tree-11.img":{"frame":{"x":3808,"y":1072,"w":250,"h":250},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":250,"h":250},"sourceSize":{"w":256,"h":256}},"map-chute-01x.img":{"frame":{"x":1940,"y":2415,"w":232,"h":232},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":12,"w":232,"h":232},"sourceSize":{"w":256,"h":256}},"map-complex-warehouse-floor-01.img":{"frame":{"x":2568,"y":632,"w":60,"h":224},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":60,"h":224},"sourceSize":{"w":60,"h":224}},"map-complex-warehouse-floor-03.img":{"frame":{"x":4017,"y":1326,"w":60,"h":224},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":60,"h":224},"sourceSize":{"w":60,"h":224}},"map-bunker-chrys-compartment-ceiling-02a.img":{"frame":{"x":3407,"y":746,"w":224,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":224,"h":96},"sourceSize":{"w":224,"h":96}},"map-bunker-chrys-compartment-ceiling-03a.img":{"frame":{"x":2192,"y":2068,"w":224,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":224,"h":96},"sourceSize":{"w":224,"h":96}},"map-snow-01.img":{"frame":{"x":3290,"y":2318,"w":212,"h":174},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":22,"y":41,"w":212,"h":174},"sourceSize":{"w":256,"h":256}},"map-snow-02.img":{"frame":{"x":3506,"y":2318,"w":208,"h":208},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":24,"y":24,"w":208,"h":208},"sourceSize":{"w":256,"h":256}},"map-bunker-hydra-floor-04.img":{"frame":{"x":3290,"y":2496,"w":200,"h":200},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":200,"h":200},"sourceSize":{"w":200,"h":200}},"map-stone-res-02x.img":{"frame":{"x":3032,"y":2550,"w":200,"h":200},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":200,"h":200},"sourceSize":{"w":200,"h":200}},"map-bunker-hydra-chamber-floor-01a.img":{"frame":{"x":3718,"y":2318,"w":194,"h":192},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":194,"h":192},"sourceSize":{"w":194,"h":194}},"map-bunker-chrys-compartment-ceiling-01a.img":{"frame":{"x":1290,"y":2196,"w":112,"h":192},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":112,"h":192},"sourceSize":{"w":112,"h":192}},"map-snow-06.img":{"frame":{"x":3916,"y":2318,"w":178,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":8,"w":178,"h":112},"sourceSize":{"w":192,"h":128}},"map-airdrop-01x.img":{"frame":{"x":3916,"y":2434,"w":160,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":160},"sourceSize":{"w":160,"h":160}},"map-airdrop-02x.img":{"frame":{"x":3808,"y":1326,"w":160,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":160},"sourceSize":{"w":160,"h":160}},"map-table-01x.img":{"frame":{"x":3718,"y":2514,"w":160,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":128},"sourceSize":{"w":160,"h":128}},"map-table-03x.img":{"frame":{"x":3882,"y":2598,"w":160,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":160},"sourceSize":{"w":160,"h":160}},"map-bunker-chrys-chamber-floor-01a.img":{"frame":{"x":3494,"y":2530,"w":159,"h":148},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":31,"w":159,"h":148},"sourceSize":{"w":159,"h":179}},"map-crate-01x.img":{"frame":{"x":3657,"y":2646,"w":152,"h":152},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":152,"h":152},"sourceSize":{"w":160,"h":160}},"map-stone-01x.img":{"frame":{"x":3494,"y":2682,"w":151,"h":149},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":2,"w":151,"h":149},"sourceSize":{"w":160,"h":160}},"map-crate-03x.img":{"frame":{"x":3236,"y":2700,"w":148,"h":148},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":148,"h":148},"sourceSize":{"w":148,"h":148}},"map-crate-02x.img":{"frame":{"x":3813,"y":2762,"w":144,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":144},"sourceSize":{"w":144,"h":144}},"map-chest-03x.img":{"frame":{"x":2192,"y":2168,"w":140,"h":102},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":140,"h":102},"sourceSize":{"w":140,"h":102}},"map-planter-res-02.img":{"frame":{"x":4017,"y":1554,"w":76,"h":134},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":1,"w":76,"h":134},"sourceSize":{"w":86,"h":136}},"map-bush-01x.img":{"frame":{"x":3961,"y":2762,"w":126,"h":130},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":7,"w":126,"h":130},"sourceSize":{"w":144,"h":144}},"map-stone-res-01x.img":{"frame":{"x":2336,"y":2168,"w":118,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":118,"h":118},"sourceSize":{"w":120,"h":120}},"map-snow-05.img":{"frame":{"x":3388,"y":2700,"w":90,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":19,"y":12,"w":90,"h":104},"sourceSize":{"w":128,"h":128}},"map-planter-07.img":{"frame":{"x":3388,"y":2808,"w":100,"h":100},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":100,"h":100},"sourceSize":{"w":100,"h":100}},"map-snow-04.img":{"frame":{"x":3635,"y":746,"w":100,"h":98},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":15,"w":100,"h":98},"sourceSize":{"w":128,"h":128}},"map-planter-res-03.img":{"frame":{"x":1484,"y":1808,"w":82,"h":74},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":6,"w":82,"h":74},"sourceSize":{"w":86,"h":86}},"map-snowball-res.img":{"frame":{"x":3813,"y":2646,"w":64,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":17,"y":11,"w":64,"h":72},"sourceSize":{"w":96,"h":96}}}}],"woods":[{"meta":{"image":"assets/woods-0-100-a842c650.png","size":{"w":4096,"h":4096},"scale":1},"frames":{"map-bunker-eye-chamber-floor-01a.img":{"frame":{"x":2,"y":2,"w":704,"h":1344},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":32,"w":704,"h":1344},"sourceSize":{"w":704,"h":1376}},"map-bunker-hatchet-compartment-floor-01.img":{"frame":{"x":710,"y":2,"w":1184,"h":925},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":1184,"h":925},"sourceSize":{"w":1184,"h":928}},"map-bunker-hatchet-compartment-floor-02a.img":{"frame":{"x":2,"y":1350,"w":898,"h":590},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":898,"h":590},"sourceSize":{"w":898,"h":594}},"map-bunker-hatchet-compartment-floor-03b.img":{"frame":{"x":904,"y":931,"w":732,"h":508},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":6,"w":732,"h":508},"sourceSize":{"w":738,"h":514}},"map-bunker-hatchet-chamber-floor-01a.img":{"frame":{"x":2,"y":1944,"w":729,"h":697},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":729,"h":697},"sourceSize":{"w":738,"h":706}},"map-bunker-eye-compartment-floor-01.img":{"frame":{"x":2,"y":2645,"w":704,"h":704},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":704,"h":704},"sourceSize":{"w":704,"h":704}},"map-bunker-hatchet-compartment-floor-02b.img":{"frame":{"x":2,"y":3353,"w":670,"h":322},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":670,"h":322},"sourceSize":{"w":690,"h":322}},"map-bunker-hatchet-compartment-floor-02c.img":{"frame":{"x":676,"y":3353,"w":254,"h":654},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":0,"w":254,"h":654},"sourceSize":{"w":258,"h":674}},"map-building-pavilion-ceiling-01.img":{"frame":{"x":710,"y":2645,"w":623,"h":608},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":16,"w":623,"h":608},"sourceSize":{"w":640,"h":640}},"map-bunker-hatchet-compartment-ceiling-03.img":{"frame":{"x":2,"y":3679,"w":608,"h":304},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":608,"h":304},"sourceSize":{"w":608,"h":304}},"map-building-pavilion-floor-01.img":{"frame":{"x":735,"y":1944,"w":576,"h":576},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":576,"h":576},"sourceSize":{"w":576,"h":576}},"map-bunker-eye-chamber-ceiling-01.img":{"frame":{"x":934,"y":3257,"w":320,"h":544},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":320,"h":544},"sourceSize":{"w":320,"h":544}},"map-bunker-hatchet-compartment-ceiling-01.img":{"frame":{"x":904,"y":1443,"w":512,"h":400},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":512,"h":400},"sourceSize":{"w":512,"h":400}},"map-bunker-hatchet-compartment-ceiling-02.img":{"frame":{"x":1315,"y":1847,"w":512,"h":496},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":512,"h":496},"sourceSize":{"w":512,"h":496}},"map-tree-08sp.img":{"frame":{"x":1258,"y":3257,"w":512,"h":510},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":512,"h":510},"sourceSize":{"w":512,"h":512}},"map-bunker-hatchet-compartment-floor-03d.img":{"frame":{"x":1337,"y":2347,"w":380,"h":508},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":22,"w":380,"h":508},"sourceSize":{"w":386,"h":530}},"map-tree-05.img":{"frame":{"x":1721,"y":2347,"w":490,"h":480},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":17,"w":490,"h":480},"sourceSize":{"w":512,"h":512}},"map-bunker-hatchet-chamber-ceiling-01.img":{"frame":{"x":1258,"y":3771,"w":416,"h":304},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":416,"h":304},"sourceSize":{"w":416,"h":304}},"map-bunker-hatchet-compartment-floor-02d.img":{"frame":{"x":1678,"y":3771,"w":378,"h":210},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":20,"y":0,"w":378,"h":210},"sourceSize":{"w":401,"h":210}},"map-bunker-hatchet-compartment-floor-03a.img":{"frame":{"x":1337,"y":2859,"w":374,"h":226},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":0,"w":374,"h":226},"sourceSize":{"w":386,"h":226}},"map-bunker-hatchet-chamber-floor-01c.img":{"frame":{"x":1715,"y":2859,"w":226,"h":368},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":9,"w":226,"h":368},"sourceSize":{"w":226,"h":385}},"map-bunker-eye-compartment-ceiling-01.img":{"frame":{"x":1420,"y":1443,"w":320,"h":320},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":320,"h":320},"sourceSize":{"w":320,"h":320}},"map-table-02x.img":{"frame":{"x":1337,"y":3089,"w":288,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":288,"h":160},"sourceSize":{"w":288,"h":160}},"map-bunker-hatchet-compartment-floor-03c.img":{"frame":{"x":934,"y":3805,"w":193,"h":276},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":23,"w":193,"h":276},"sourceSize":{"w":193,"h":306}},"map-stone-03x.img":{"frame":{"x":1640,"y":931,"w":276,"h":272},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":276,"h":272},"sourceSize":{"w":288,"h":288}},"map-bunker-eye-chamber-floor-01b.img":{"frame":{"x":1774,"y":3231,"w":192,"h":256},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":192,"h":256},"sourceSize":{"w":192,"h":256}},"map-tree-07sp.img":{"frame":{"x":1774,"y":3491,"w":256,"h":256},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":256,"h":256},"sourceSize":{"w":256,"h":256}},"map-tree-10.img":{"frame":{"x":1945,"y":2831,"w":254,"h":254},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":254,"h":254},"sourceSize":{"w":256,"h":256}},"map-tree-11.img":{"frame":{"x":1970,"y":3089,"w":250,"h":250},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":250,"h":250},"sourceSize":{"w":256,"h":256}},"map-stone-res-02x.img":{"frame":{"x":1640,"y":1207,"w":200,"h":200},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":200,"h":200},"sourceSize":{"w":200,"h":200}},"map-bunker-hatchet-chamber-floor-01b.img":{"frame":{"x":2203,"y":2831,"w":192,"h":176},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":192,"h":176},"sourceSize":{"w":194,"h":177}},"map-bush-06.img":{"frame":{"x":710,"y":931,"w":190,"h":188},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":2,"w":190,"h":188},"sourceSize":{"w":192,"h":192}},"map-building-pavilion-res-01.img":{"frame":{"x":710,"y":1123,"w":178,"h":188},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":167,"y":162,"w":178,"h":188},"sourceSize":{"w":512,"h":512}},"map-table-01x.img":{"frame":{"x":1970,"y":3343,"w":160,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":128},"sourceSize":{"w":160,"h":128}},"map-table-03x.img":{"frame":{"x":2034,"y":3475,"w":160,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":160},"sourceSize":{"w":160,"h":160}},"map-crate-01x.img":{"frame":{"x":1744,"y":1411,"w":152,"h":152},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":152,"h":152},"sourceSize":{"w":160,"h":160}},"map-stone-01x.img":{"frame":{"x":1844,"y":1207,"w":151,"h":149},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":2,"w":151,"h":149},"sourceSize":{"w":160,"h":160}},"map-crate-03x.img":{"frame":{"x":1744,"y":1567,"w":148,"h":148},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":148,"h":148},"sourceSize":{"w":148,"h":148}},"map-crate-02x.img":{"frame":{"x":2060,"y":3639,"w":144,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":144},"sourceSize":{"w":144,"h":144}},"map-crate-19.img":{"frame":{"x":2198,"y":3343,"w":144,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":144},"sourceSize":{"w":144,"h":144}},"map-bush-07sp.img":{"frame":{"x":2198,"y":3491,"w":135,"h":143},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":0,"w":135,"h":143},"sourceSize":{"w":144,"h":144}},"map-chest-03x.img":{"frame":{"x":2,"y":3987,"w":140,"h":102},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":140,"h":102},"sourceSize":{"w":140,"h":102}},"map-bush-01x.img":{"frame":{"x":2060,"y":3787,"w":126,"h":130},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":7,"w":126,"h":130},"sourceSize":{"w":144,"h":144}},"map-stone-res-01x.img":{"frame":{"x":1131,"y":3805,"w":118,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":118,"h":118},"sourceSize":{"w":120,"h":120}},"map-snowball-res.img":{"frame":{"x":2203,"y":3011,"w":64,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":17,"y":11,"w":64,"h":72},"sourceSize":{"w":96,"h":96}}}}],"cobalt":[{"meta":{"image":"assets/cobalt-0-100-81f844f3.png","size":{"w":4096,"h":4096},"scale":1},"frames":{"map-bunker-crossing-chamber-floor-01a.img":{"frame":{"x":2,"y":2,"w":1828,"h":352},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":1828,"h":352},"sourceSize":{"w":1830,"h":354}},"map-bunker-hydra-compartment-floor-02.img":{"frame":{"x":2,"y":358,"w":1695,"h":1448},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":0,"w":1695,"h":1448},"sourceSize":{"w":1704,"h":1448}},"map-bunker-crossing-compartment-floor-01.img":{"frame":{"x":1834,"y":2,"w":1504,"h":928},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":1504,"h":928},"sourceSize":{"w":1504,"h":928}},"map-bunker-twins-chamber-floor-01.img":{"frame":{"x":1701,"y":934,"w":1472,"h":1154},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":96,"y":127,"w":1472,"h":1154},"sourceSize":{"w":1664,"h":1408}},"map-bunker-crossing-chamber-ceiling-01.img":{"frame":{"x":2,"y":1810,"w":1136,"h":240},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":1136,"h":240},"sourceSize":{"w":1136,"h":240}},"map-bunker-hydra-floor-01.img":{"frame":{"x":3177,"y":934,"w":863,"h":608},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":863,"h":608},"sourceSize":{"w":863,"h":608}},"map-bunker-hydra-compartment-ceiling-02.img":{"frame":{"x":3177,"y":1546,"w":800,"h":656},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":800,"h":656},"sourceSize":{"w":816,"h":720}},"map-bunker-hydra-chamber-floor-03.img":{"frame":{"x":3342,"y":2,"w":704,"h":798},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":32,"w":704,"h":798},"sourceSize":{"w":704,"h":832}},"map-bunker-hydra-chamber-floor-02.img":{"frame":{"x":1142,"y":1810,"w":337,"h":740},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":44,"y":0,"w":337,"h":740},"sourceSize":{"w":392,"h":744}},"map-bunker-hydra-chamber-floor-01b.img":{"frame":{"x":2,"y":2054,"w":706,"h":738},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":706,"h":738},"sourceSize":{"w":706,"h":738}},"map-bunker-crossing-compartment-ceiling-01b.img":{"frame":{"x":2,"y":2796,"w":720,"h":496},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":720,"h":496},"sourceSize":{"w":720,"h":496}},"map-bunker-crossing-chamber-floor-02.img":{"frame":{"x":2,"y":3296,"w":704,"h":253},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":32,"y":320,"w":704,"h":253},"sourceSize":{"w":736,"h":576}},"map-bunker-crossing-chamber-floor-03.img":{"frame":{"x":2,"y":3553,"w":704,"h":250},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":32,"y":323,"w":704,"h":250},"sourceSize":{"w":736,"h":576}},"map-bunker-hydra-compartment-floor-01.img":{"frame":{"x":710,"y":3296,"w":704,"h":640},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":704,"h":640},"sourceSize":{"w":704,"h":640}},"map-bunker-hydra-compartment-floor-03.img":{"frame":{"x":726,"y":2554,"w":704,"h":507},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":704,"h":507},"sourceSize":{"w":704,"h":512}},"map-bunker-crossing-compartment-floor-02.img":{"frame":{"x":1418,"y":3065,"w":318,"h":608},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":0,"w":318,"h":608},"sourceSize":{"w":320,"h":608}},"map-bunker-crossing-chamber-floor-01b.img":{"frame":{"x":726,"y":3065,"w":574,"h":194},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":0,"w":574,"h":194},"sourceSize":{"w":610,"h":194}},"map-complex-warehouse-floor-02.img":{"frame":{"x":1701,"y":358,"w":60,"h":528},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":60,"h":528},"sourceSize":{"w":60,"h":528}},"map-bunker-twins-chamber-ceiling-01.img":{"frame":{"x":1418,"y":3677,"w":512,"h":352},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":512,"h":352},"sourceSize":{"w":512,"h":352}},"map-bunker-hydra-ceiling-01.img":{"frame":{"x":1434,"y":2554,"w":432,"h":304},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":432,"h":304},"sourceSize":{"w":432,"h":304}},"map-bunker-hydra-chamber-ceiling-03.img":{"frame":{"x":2,"y":3807,"w":400,"h":272},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":400,"h":272},"sourceSize":{"w":400,"h":272}},"map-bunker-hydra-compartment-ceiling-01.img":{"frame":{"x":1483,"y":2092,"w":320,"h":360},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":320,"h":360},"sourceSize":{"w":320,"h":360}},"map-bunker-hydra-chamber-ceiling-02.img":{"frame":{"x":1807,"y":2092,"w":192,"h":350},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":192,"h":350},"sourceSize":{"w":192,"h":350}},"map-bunker-hydra-chamber-ceiling-01.img":{"frame":{"x":712,"y":2054,"w":320,"h":344},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":320,"h":344},"sourceSize":{"w":432,"h":352}},"map-bunker-crossing-floor-01.img":{"frame":{"x":1740,"y":2862,"w":320,"h":320},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":320,"h":320},"sourceSize":{"w":320,"h":320}},"map-bunker-hydra-compartment-ceiling-03.img":{"frame":{"x":1870,"y":2446,"w":320,"h":270},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":320,"h":270},"sourceSize":{"w":320,"h":270}},"map-bunker-crossing-compartment-ceiling-01a.img":{"frame":{"x":2003,"y":2092,"w":128,"h":304},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":304},"sourceSize":{"w":128,"h":304}},"map-building-crossing-bathroom-ceiling.img":{"frame":{"x":1434,"y":2862,"w":288,"h":192},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":288,"h":192},"sourceSize":{"w":288,"h":192}},"map-stone-03cb.img":{"frame":{"x":406,"y":3807,"w":278,"h":278},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":5,"w":278,"h":278},"sourceSize":{"w":288,"h":288}},"map-tree-03cb.img":{"frame":{"x":2135,"y":2092,"w":254,"h":252},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":2,"w":254,"h":252},"sourceSize":{"w":256,"h":256}},"map-bunker-crossing-ceiling-01.img":{"frame":{"x":1483,"y":1810,"w":193,"h":230},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":64,"y":0,"w":193,"h":230},"sourceSize":{"w":320,"h":288}},"map-bunker-twins-ceiling-01.img":{"frame":{"x":1740,"y":3186,"w":193,"h":230},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":64,"y":0,"w":193,"h":230},"sourceSize":{"w":320,"h":288}},"map-complex-warehouse-floor-01.img":{"frame":{"x":1304,"y":3065,"w":60,"h":224},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":60,"h":224},"sourceSize":{"w":60,"h":224}},"map-complex-warehouse-floor-03.img":{"frame":{"x":1765,"y":358,"w":60,"h":224},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":60,"h":224},"sourceSize":{"w":60,"h":224}},"map-bunker-hydra-floor-04.img":{"frame":{"x":1740,"y":3420,"w":200,"h":200},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":200,"h":200},"sourceSize":{"w":200,"h":200}},"map-stone-res-02cb.img":{"frame":{"x":1937,"y":3186,"w":200,"h":200},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":200,"h":200},"sourceSize":{"w":200,"h":200}},"map-bunker-hydra-chamber-floor-01a.img":{"frame":{"x":2064,"y":2720,"w":194,"h":192},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":194,"h":192},"sourceSize":{"w":194,"h":194}},"map-bunker-crossing-chamber-floor-01c.img":{"frame":{"x":2064,"y":2916,"w":192,"h":193},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":1,"w":192,"h":193},"sourceSize":{"w":230,"h":194}},"map-class-shell-01a.img":{"frame":{"x":712,"y":2402,"w":146,"h":146},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":7,"w":146,"h":146},"sourceSize":{"w":160,"h":160}},"map-class-shell-01b.img":{"frame":{"x":862,"y":2402,"w":146,"h":146},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":7,"w":146,"h":146},"sourceSize":{"w":160,"h":160}},"map-class-shell-02a.img":{"frame":{"x":688,"y":3940,"w":146,"h":146},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":7,"w":146,"h":146},"sourceSize":{"w":160,"h":160}},"map-class-shell-02b.img":{"frame":{"x":838,"y":3940,"w":146,"h":146},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":7,"w":146,"h":146},"sourceSize":{"w":160,"h":160}},"map-class-shell-03a.img":{"frame":{"x":988,"y":3940,"w":146,"h":146},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":7,"w":146,"h":146},"sourceSize":{"w":160,"h":160}},"map-class-shell-03b.img":{"frame":{"x":1138,"y":3940,"w":146,"h":146},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":7,"w":146,"h":146},"sourceSize":{"w":160,"h":160}},"map-stone-01cb.img":{"frame":{"x":2194,"y":2348,"w":144,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":144},"sourceSize":{"w":144,"h":144}},"map-class-crate-assault.img":{"frame":{"x":2194,"y":2496,"w":142,"h":142},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":142,"h":142},"sourceSize":{"w":148,"h":148}},"map-class-crate-demo.img":{"frame":{"x":1934,"y":3624,"w":142,"h":142},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":142,"h":142},"sourceSize":{"w":148,"h":148}},"map-class-crate-healer.img":{"frame":{"x":1944,"y":3390,"w":142,"h":142},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":142,"h":142},"sourceSize":{"w":148,"h":148}},"map-class-crate-scout.img":{"frame":{"x":1934,"y":3770,"w":142,"h":142},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":142,"h":142},"sourceSize":{"w":148,"h":148}},"map-class-crate-sniper.img":{"frame":{"x":1934,"y":3916,"w":142,"h":142},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":142,"h":142},"sourceSize":{"w":148,"h":148}},"map-class-crate-tank.img":{"frame":{"x":2080,"y":3536,"w":142,"h":142},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":142,"h":142},"sourceSize":{"w":148,"h":148}},"map-class-crate-03.img":{"frame":{"x":1870,"y":2720,"w":134,"h":134},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":7,"w":134,"h":134},"sourceSize":{"w":148,"h":148}},"map-class-crate-res-01.img":{"frame":{"x":1012,"y":2402,"w":125,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":15,"w":125,"h":128},"sourceSize":{"w":148,"h":148}},"map-stone-res-01cb.img":{"frame":{"x":3342,"y":804,"w":118,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":118,"h":118},"sourceSize":{"w":120,"h":120}},"part-class-shell-01a.img":{"frame":{"x":1483,"y":2456,"w":88,"h":88},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":88,"h":88},"sourceSize":{"w":96,"h":96}},"part-class-shell-02a.img":{"frame":{"x":1575,"y":2456,"w":88,"h":88},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":88,"h":88},"sourceSize":{"w":96,"h":96}},"part-class-shell-03a.img":{"frame":{"x":1667,"y":2456,"w":88,"h":88},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":88,"h":88},"sourceSize":{"w":96,"h":96}},"part-class-shell-01b.img":{"frame":{"x":2008,"y":2720,"w":52,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":52,"h":64},"sourceSize":{"w":52,"h":64}},"part-class-shell-02b.img":{"frame":{"x":2008,"y":2788,"w":52,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":52,"h":64},"sourceSize":{"w":52,"h":64}},"part-class-shell-03b.img":{"frame":{"x":2135,"y":2348,"w":52,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":52,"h":64},"sourceSize":{"w":52,"h":64}}}}],"savannah":[{"meta":{"image":"assets/savannah-0-100-eca9dfc0.png","size":{"w":2048,"h":2048},"scale":1},"frames":{"map-tree-12.img":{"frame":{"x":2,"y":2,"w":508,"h":508},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":508,"h":508},"sourceSize":{"w":512,"h":512}},"map-stone-07.img":{"frame":{"x":2,"y":514,"w":504,"h":506},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":3,"w":504,"h":506},"sourceSize":{"w":512,"h":512}},"map-stone-res-07.img":{"frame":{"x":510,"y":514,"w":410,"h":412},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":4,"w":410,"h":412},"sourceSize":{"w":420,"h":420}},"map-building-perch-floor.img":{"frame":{"x":514,"y":2,"w":400,"h":320},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":400,"h":320},"sourceSize":{"w":400,"h":320}},"map-building-perch-ceiling.img":{"frame":{"x":918,"y":2,"w":363,"h":345},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":23,"w":363,"h":345},"sourceSize":{"w":400,"h":384}},"map-tree-03sv.img":{"frame":{"x":1285,"y":2,"w":256,"h":256},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":256,"h":256},"sourceSize":{"w":256,"h":256}},"map-wall-08-grassy.img":{"frame":{"x":1545,"y":2,"w":45,"h":256},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":0,"w":45,"h":256},"sourceSize":{"w":64,"h":256}},"map-wall-08-grassy-res.img":{"frame":{"x":1594,"y":2,"w":20,"h":252},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":22,"y":2,"w":20,"h":252},"sourceSize":{"w":64,"h":256}},"map-brush-01sv.img":{"frame":{"x":514,"y":326,"w":186,"h":184},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":186,"h":184},"sourceSize":{"w":192,"h":192}},"map-brush-02sv.img":{"frame":{"x":704,"y":326,"w":182,"h":184},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":4,"w":182,"h":184},"sourceSize":{"w":192,"h":192}},"map-perch-res-01.img":{"frame":{"x":890,"y":351,"w":176,"h":158},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":40,"y":49,"w":176,"h":158},"sourceSize":{"w":256,"h":256}},"map-crate-21.img":{"frame":{"x":1618,"y":2,"w":144,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":144},"sourceSize":{"w":144,"h":144}},"map-bush-01sv.img":{"frame":{"x":1766,"y":2,"w":140,"h":140},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":140,"h":140},"sourceSize":{"w":144,"h":144}},"map-propane-01.img":{"frame":{"x":1910,"y":2,"w":96,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":96,"h":96},"sourceSize":{"w":96,"h":96}},"map-wall-03-grassy.img":{"frame":{"x":2010,"y":2,"w":34,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":15,"y":0,"w":34,"h":96},"sourceSize":{"w":64,"h":96}},"map-wall-03-grassy-res.img":{"frame":{"x":1910,"y":102,"w":20,"h":92},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":22,"y":2,"w":20,"h":92},"sourceSize":{"w":64,"h":96}},"map-tree-res-12.img":{"frame":{"x":1934,"y":102,"w":79,"h":71},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":13,"w":79,"h":71},"sourceSize":{"w":96,"h":96}},"map-brush-res-02sv.img":{"frame":{"x":1934,"y":177,"w":62,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":17,"y":17,"w":62,"h":62},"sourceSize":{"w":96,"h":96}},"map-bush-res-01sv.img":{"frame":{"x":2000,"y":177,"w":44,"h":34},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":50,"y":55,"w":44,"h":34},"sourceSize":{"w":144,"h":144}}}}]}')
  , Go = JSON.parse('{"gradient":[{"meta":{"image":"assets/gradient-0-50-5e7a79da.png","size":{"w":512,"h":512},"scale":0.5},"frames":{"map-building-club-gradient-01.img":{"frame":{"x":1,"y":1,"w":116,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":17,"y":5,"w":116,"h":128},"sourceSize":{"w":146,"h":140}},"map-building-mansion-gradient-01.img":{"frame":{"x":119,"y":1,"w":116,"h":101},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":5,"w":116,"h":101},"sourceSize":{"w":124,"h":110}},"map-barrel-res-01.img":{"frame":{"x":1,"y":131,"w":113,"h":108},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":11,"w":113,"h":108},"sourceSize":{"w":128,"h":128}},"map-plane-01.img":{"frame":{"x":116,"y":131,"w":89,"h":99},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":20,"y":6,"w":89,"h":99},"sourceSize":{"w":128,"h":128}},"map-plane-02.img":{"frame":{"x":207,"y":104,"w":42,"h":85},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":43,"y":1,"w":42,"h":85},"sourceSize":{"w":128,"h":128}},"map-bush-03.img":{"frame":{"x":237,"y":1,"w":74,"h":76},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":74,"h":76},"sourceSize":{"w":76,"h":76}},"map-bush-01cb.img":{"frame":{"x":313,"y":1,"w":71,"h":71},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":71,"h":71},"sourceSize":{"w":72,"h":72}},"map-light-01.img":{"frame":{"x":386,"y":1,"w":70,"h":70},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":70,"h":70},"sourceSize":{"w":72,"h":72}},"map-bush-04.img":{"frame":{"x":386,"y":73,"w":68,"h":65},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":5,"w":68,"h":65},"sourceSize":{"w":75,"h":75}},"map-bush-04cb.img":{"frame":{"x":313,"y":74,"w":68,"h":65},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":5,"w":68,"h":65},"sourceSize":{"w":75,"h":75}},"map-bush-01.img":{"frame":{"x":383,"y":140,"w":63,"h":65},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":63,"h":65},"sourceSize":{"w":72,"h":72}},"map-decal-flyer-01.img":{"frame":{"x":237,"y":79,"w":18,"h":22},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":1,"w":18,"h":22},"sourceSize":{"w":24,"h":24}}}}],"loadout":[{"meta":{"image":"assets/loadout-0-50-22cdb257.png","size":{"w":2048,"h":2048},"scale":0.5},"frames":{"ping-map-pulse.img":{"frame":{"x":1,"y":1,"w":251,"h":251},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":251,"h":251},"sourceSize":{"w":256,"h":256}},"loot-melee-naginata.img":{"frame":{"x":254,"y":1,"w":173,"h":19},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":7,"w":173,"h":19},"sourceSize":{"w":175,"h":27}},"part-aura-circle-01.img":{"frame":{"x":254,"y":22,"w":142,"h":141},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":2,"w":142,"h":141},"sourceSize":{"w":144,"h":144}},"part-shell-05.img":{"frame":{"x":429,"y":1,"w":32,"h":130},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":130},"sourceSize":{"w":32,"h":130}},"loot-melee-warhammer-tank.img":{"frame":{"x":254,"y":165,"w":128,"h":66},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":9,"w":128,"h":66},"sourceSize":{"w":132,"h":76}},"emote-circle-outer.img":{"frame":{"x":384,"y":165,"w":126,"h":127},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":126,"h":127},"sourceSize":{"w":128,"h":128}},"part-smoke-02.img":{"frame":{"x":254,"y":233,"w":127,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":2,"w":127,"h":124},"sourceSize":{"w":128,"h":128}},"part-smoke-03.img":{"frame":{"x":383,"y":294,"w":127,"h":125},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":1,"w":127,"h":125},"sourceSize":{"w":128,"h":128}},"gun-potato-cannon-01.img":{"frame":{"x":398,"y":22,"w":28,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":28,"h":124},"sourceSize":{"w":28,"h":124}},"gun-scarssr-01.img":{"frame":{"x":462,"y":1,"w":30,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":30,"h":124},"sourceSize":{"w":30,"h":124}},"gun-dp28-01.img":{"frame":{"x":494,"y":1,"w":17,"h":114},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":2,"w":17,"h":114},"sourceSize":{"w":28,"h":116}},"gun-awc-01.img":{"frame":{"x":1,"y":359,"w":23,"h":113},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":5,"w":23,"h":113},"sourceSize":{"w":30,"h":118}},"gun-awc-02.img":{"frame":{"x":26,"y":359,"w":23,"h":113},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":5,"w":23,"h":113},"sourceSize":{"w":30,"h":118}},"loot-melee-katana-demo.img":{"frame":{"x":1,"y":474,"w":113,"h":19},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":113,"h":19},"sourceSize":{"w":115,"h":20}},"loot-melee-katana-orchid.img":{"frame":{"x":116,"y":254,"w":113,"h":19},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":113,"h":19},"sourceSize":{"w":115,"h":20}},"loot-melee-katana-rusted.img":{"frame":{"x":1,"y":254,"w":113,"h":19},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":113,"h":19},"sourceSize":{"w":115,"h":20}},"loot-melee-katana.img":{"frame":{"x":116,"y":275,"w":113,"h":19},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":113,"h":19},"sourceSize":{"w":115,"h":20}},"gun-bar-01.img":{"frame":{"x":50,"y":359,"w":30,"h":108},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":24,"y":16,"w":30,"h":108},"sourceSize":{"w":88,"h":124}},"gun-m249-top-01.img":{"frame":{"x":231,"y":254,"w":18,"h":107},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":9,"w":18,"h":107},"sourceSize":{"w":28,"h":116}},"gun-garand-01.img":{"frame":{"x":82,"y":363,"w":16,"h":106},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":10,"w":16,"h":106},"sourceSize":{"w":24,"h":116}},"gun-potato-smg-01.img":{"frame":{"x":100,"y":363,"w":50,"h":105},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":19,"w":50,"h":105},"sourceSize":{"w":88,"h":124}},"pad.img":{"frame":{"x":251,"y":359,"w":104,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":104,"h":104},"sourceSize":{"w":104,"h":104}},"gun-usas-01.img":{"frame":{"x":357,"y":359,"w":21,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":12,"w":21,"h":104},"sourceSize":{"w":28,"h":116}},"gun-vss-01.img":{"frame":{"x":151,"y":363,"w":19,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":0,"w":19,"h":104},"sourceSize":{"w":24,"h":104}},"gun-an94-01.img":{"frame":{"x":172,"y":296,"w":21,"h":102},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":14,"w":21,"h":102},"sourceSize":{"w":28,"h":116}},"gun-scorpion-01.img":{"frame":{"x":172,"y":400,"w":20,"h":99},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":5,"w":20,"h":99},"sourceSize":{"w":24,"h":104}},"gun-m1014-01.img":{"frame":{"x":195,"y":296,"w":23,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":20,"w":23,"h":96},"sourceSize":{"w":28,"h":116}},"gun-pkp-top-01.img":{"frame":{"x":219,"y":363,"w":17,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":20,"w":17,"h":96},"sourceSize":{"w":28,"h":116}},"part-shell-02.img":{"frame":{"x":116,"y":470,"w":32,"h":95},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":95},"sourceSize":{"w":32,"h":95}},"gun-grozas-01.img":{"frame":{"x":151,"y":469,"w":19,"h":95},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":10,"w":19,"h":95},"sourceSize":{"w":24,"h":104}},"gun-m4a1-01.img":{"frame":{"x":195,"y":394,"w":21,"h":94},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":5,"w":21,"h":94},"sourceSize":{"w":24,"h":98}},"gun-long-01.img":{"frame":{"x":218,"y":461,"w":14,"h":92},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":14,"h":92},"sourceSize":{"w":14,"h":92}},"part-shell-03.img":{"frame":{"x":172,"y":501,"w":32,"h":90},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":90},"sourceSize":{"w":32,"h":90}},"player-helmet-forest.img":{"frame":{"x":1,"y":495,"w":74,"h":88},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":74,"h":88},"sourceSize":{"w":88,"h":88}},"gun-saiga-01.img":{"frame":{"x":150,"y":566,"w":20,"h":87},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":3,"w":20,"h":87},"sourceSize":{"w":24,"h":98}},"part-wedge-01.img":{"frame":{"x":82,"y":275,"w":28,"h":85},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":28,"h":85},"sourceSize":{"w":32,"h":90}},"proj-wedge-01.img":{"frame":{"x":77,"y":495,"w":28,"h":85},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":28,"h":85},"sourceSize":{"w":32,"h":90}},"player-wading-01.img":{"frame":{"x":1,"y":585,"w":85,"h":84},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":85,"h":84},"sourceSize":{"w":86,"h":86}},"gun-qbb97-top-01.img":{"frame":{"x":107,"y":567,"w":16,"h":84},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":20,"w":16,"h":84},"sourceSize":{"w":24,"h":104}},"gun-famas-01.img":{"frame":{"x":125,"y":567,"w":18,"h":83},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":21,"w":18,"h":83},"sourceSize":{"w":24,"h":104}},"role-assault.img":{"frame":{"x":1,"y":671,"w":65,"h":83},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":3,"w":65,"h":83},"sourceSize":{"w":88,"h":88}},"loot-melee-machete-taiga.img":{"frame":{"x":125,"y":652,"w":22,"h":82},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":30,"y":2,"w":22,"h":82},"sourceSize":{"w":84,"h":84}},"part-shell-04.img":{"frame":{"x":88,"y":653,"w":28,"h":82},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":28,"h":82},"sourceSize":{"w":28,"h":82}},"role-demo.img":{"frame":{"x":1,"y":275,"w":65,"h":81},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":3,"w":65,"h":81},"sourceSize":{"w":88,"h":88}},"role-healer.img":{"frame":{"x":1,"y":755,"w":65,"h":81},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":3,"w":65,"h":81},"sourceSize":{"w":88,"h":88}},"role-scout.img":{"frame":{"x":1,"y":838,"w":65,"h":81},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":3,"w":65,"h":81},"sourceSize":{"w":88,"h":88}},"role-sniper.img":{"frame":{"x":1,"y":921,"w":65,"h":81},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":3,"w":65,"h":81},"sourceSize":{"w":88,"h":88}},"role-tank.img":{"frame":{"x":68,"y":737,"w":65,"h":81},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":3,"w":65,"h":81},"sourceSize":{"w":88,"h":88}},"part-airdrop-02.img":{"frame":{"x":68,"y":820,"w":19,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":19,"h":80},"sourceSize":{"w":19,"h":80}},"part-airdrop-02x.img":{"frame":{"x":68,"y":902,"w":19,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":19,"h":80},"sourceSize":{"w":19,"h":80}},"part-airdrop-03.img":{"frame":{"x":89,"y":820,"w":80,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":80},"sourceSize":{"w":80,"h":80}},"player-mash-01.img":{"frame":{"x":494,"y":117,"w":80,"h":43},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":43},"sourceSize":{"w":80,"h":80}},"player-snow-01.img":{"frame":{"x":135,"y":736,"w":80,"h":43},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":43},"sourceSize":{"w":80,"h":80}},"proj-bomb-iron-01.img":{"frame":{"x":149,"y":655,"w":33,"h":79},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":24,"y":1,"w":33,"h":79},"sourceSize":{"w":80,"h":80}},"loot-melee-kukri-sniper.img":{"frame":{"x":513,"y":1,"w":20,"h":78},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":27,"y":1,"w":20,"h":78},"sourceSize":{"w":80,"h":80}},"loot-melee-kukri-trad.img":{"frame":{"x":535,"y":1,"w":20,"h":78},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":27,"y":1,"w":20,"h":78},"sourceSize":{"w":80,"h":80}},"proj-smoke-nopin.img":{"frame":{"x":557,"y":1,"w":76,"h":78},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":1,"w":76,"h":78},"sourceSize":{"w":80,"h":80}},"proj-smoke-pin.img":{"frame":{"x":89,"y":902,"w":76,"h":78},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":1,"w":76,"h":78},"sourceSize":{"w":80,"h":80}},"loot-melee-bonesaw-healer.img":{"frame":{"x":167,"y":902,"w":30,"h":78},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":32,"y":5,"w":30,"h":78},"sourceSize":{"w":84,"h":84}},"loot-melee-bonesaw-rusted.img":{"frame":{"x":171,"y":781,"w":27,"h":78},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":41,"y":11,"w":27,"h":78},"sourceSize":{"w":96,"h":96}},"loot-melee-fireaxe.img":{"frame":{"x":68,"y":984,"w":75,"h":38},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":75,"h":38},"sourceSize":{"w":76,"h":38}},"loot-melee-spade-assault.img":{"frame":{"x":184,"y":593,"w":27,"h":75},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":27,"y":3,"w":27,"h":75},"sourceSize":{"w":80,"h":80}},"player-star.img":{"frame":{"x":199,"y":860,"w":74,"h":71},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":2,"w":74,"h":71},"sourceSize":{"w":74,"h":74}},"star.img":{"frame":{"x":200,"y":781,"w":74,"h":71},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":2,"w":74,"h":71},"sourceSize":{"w":74,"h":74}},"loot-melee-sledgehammer.img":{"frame":{"x":513,"y":81,"w":74,"h":29},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":74,"h":29},"sourceSize":{"w":74,"h":29}},"loot-melee-stonehammer.img":{"frame":{"x":205,"y":555,"w":74,"h":28},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":2,"w":74,"h":28},"sourceSize":{"w":74,"h":30}},"loot-melee-woodaxe-bloody.img":{"frame":{"x":145,"y":982,"w":74,"h":27},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":74,"h":27},"sourceSize":{"w":74,"h":27}},"loot-melee-woodaxe.img":{"frame":{"x":199,"y":933,"w":74,"h":27},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":74,"h":27},"sourceSize":{"w":74,"h":27}},"player-mash-03.img":{"frame":{"x":221,"y":962,"w":74,"h":37},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":0,"w":74,"h":37},"sourceSize":{"w":80,"h":80}},"player-snow-03.img":{"frame":{"x":184,"y":670,"w":74,"h":37},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":0,"w":74,"h":37},"sourceSize":{"w":80,"h":80}},"proj-strobe-unarmed.img":{"frame":{"x":217,"y":709,"w":74,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":13,"w":74,"h":63},"sourceSize":{"w":80,"h":80}},"gun-groza-01.img":{"frame":{"x":213,"y":585,"w":19,"h":73},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":31,"w":19,"h":73},"sourceSize":{"w":24,"h":104}},"loot-circle-outer-03.img":{"frame":{"x":233,"y":585,"w":73,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":5,"w":73,"h":63},"sourceSize":{"w":73,"h":73}},"proj-smoke-nopin-nolever.img":{"frame":{"x":234,"y":465,"w":38,"h":73},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":21,"y":4,"w":38,"h":73},"sourceSize":{"w":80,"h":80}},"player-mash-02.img":{"frame":{"x":260,"y":650,"w":73,"h":40},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":0,"w":73,"h":40},"sourceSize":{"w":80,"h":80}},"player-snow-02.img":{"frame":{"x":274,"y":465,"w":73,"h":40},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":0,"w":73,"h":40},"sourceSize":{"w":80,"h":80}},"face-dab.img":{"frame":{"x":281,"y":507,"w":72,"h":49},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":12,"w":72,"h":49},"sourceSize":{"w":72,"h":72}},"ping-border.img":{"frame":{"x":308,"y":558,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":72,"h":72}},"loot-circle-outer-01.img":{"frame":{"x":355,"y":465,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":72,"h":72},"sourceSize":{"w":73,"h":73}},"loot-circle-outer-02.img":{"frame":{"x":275,"y":854,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":72,"h":72},"sourceSize":{"w":73,"h":73}},"loot-circle-outer-05.img":{"frame":{"x":276,"y":774,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":72,"h":72},"sourceSize":{"w":73,"h":73}},"loot-circle-outer-06.img":{"frame":{"x":293,"y":692,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":72,"h":72},"sourceSize":{"w":73,"h":73}},"player-helmet-moon.img":{"frame":{"x":297,"y":928,"w":59,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":8,"w":59,"h":72},"sourceSize":{"w":88,"h":88}},"player-armor-base-01.img":{"frame":{"x":349,"y":848,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":72,"h":72},"sourceSize":{"w":74,"h":74}},"player-circle-base-01.img":{"frame":{"x":350,"y":766,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":72,"h":72},"sourceSize":{"w":74,"h":74}},"player-circle-base-02.img":{"frame":{"x":358,"y":922,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":72,"h":72},"sourceSize":{"w":74,"h":74}},"proj-mirv-nopin-nolever.img":{"frame":{"x":423,"y":840,"w":38,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":1,"w":38,"h":72},"sourceSize":{"w":64,"h":74}},"proj-mirv-nopin.img":{"frame":{"x":432,"y":914,"w":51,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":1,"w":51,"h":72},"sourceSize":{"w":64,"h":74}},"proj-mirv-pin.img":{"frame":{"x":367,"y":632,"w":51,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":51,"h":72},"sourceSize":{"w":64,"h":74}},"gun-bugle-01.img":{"frame":{"x":382,"y":539,"w":32,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":45,"w":32,"h":72},"sourceSize":{"w":48,"h":116}},"part-panel-01.img":{"frame":{"x":416,"y":539,"w":71,"h":71},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":71,"h":71},"sourceSize":{"w":72,"h":72}},"part-plank-01.img":{"frame":{"x":429,"y":421,"w":71,"h":71},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":71,"h":71},"sourceSize":{"w":72,"h":72}},"part-woodchip-01.img":{"frame":{"x":420,"y":612,"w":71,"h":70},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":71,"h":70},"sourceSize":{"w":72,"h":72}},"player-king-woods.img":{"frame":{"x":420,"y":684,"w":70,"h":67},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":4,"w":70,"h":67},"sourceSize":{"w":74,"h":74}},"player-the-hunted.img":{"frame":{"x":424,"y":752,"w":70,"h":70},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":70,"h":70},"sourceSize":{"w":72,"h":72}},"loot-circle-outer-04.img":{"frame":{"x":492,"y":684,"w":70,"h":67},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":0,"w":70,"h":67},"sourceSize":{"w":73,"h":73}},"player-ripple-01.img":{"frame":{"x":463,"y":824,"w":70,"h":70},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":70,"h":70},"sourceSize":{"w":71,"h":71}},"loot-melee-crowbar-recon.img":{"frame":{"x":496,"y":752,"w":19,"h":69},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":27,"y":4,"w":19,"h":69},"sourceSize":{"w":80,"h":80}},"loot-melee-crowbar-scout.img":{"frame":{"x":517,"y":752,"w":19,"h":69},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":27,"y":4,"w":19,"h":69},"sourceSize":{"w":80,"h":80}},"part-book-01.img":{"frame":{"x":489,"y":494,"w":52,"h":69},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":2,"w":52,"h":69},"sourceSize":{"w":72,"h":72}},"part-plate-01.img":{"frame":{"x":502,"y":421,"w":69,"h":66},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":3,"w":69,"h":66},"sourceSize":{"w":72,"h":72}},"player-helmet-last-man-01.img":{"frame":{"x":492,"y":565,"w":69,"h":68},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":10,"w":69,"h":68},"sourceSize":{"w":88,"h":88}},"player-helmet-last-man-02.img":{"frame":{"x":543,"y":489,"w":69,"h":68},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":10,"w":69,"h":68},"sourceSize":{"w":88,"h":88}},"part-pot-01.img":{"frame":{"x":563,"y":559,"w":47,"h":68},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":2,"w":47,"h":68},"sourceSize":{"w":72,"h":72}},"player-base-01.img":{"frame":{"x":485,"y":896,"w":67,"h":67},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":67,"h":67},"sourceSize":{"w":70,"h":70}},"player-base-02.img":{"frame":{"x":535,"y":823,"w":67,"h":67},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":67,"h":67},"sourceSize":{"w":70,"h":70}},"player-base-outfitDC.img":{"frame":{"x":537,"y":752,"w":67,"h":67},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":67,"h":67},"sourceSize":{"w":70,"h":70}},"player-base-outfitHeaven.img":{"frame":{"x":564,"y":629,"w":67,"h":67},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":67,"h":67},"sourceSize":{"w":70,"h":70}},"player-base-outfitLumber.img":{"frame":{"x":612,"y":559,"w":67,"h":67},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":67,"h":67},"sourceSize":{"w":70,"h":70}},"player-base-outfitParmaPrestige.img":{"frame":{"x":554,"y":892,"w":67,"h":67},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":67,"h":67},"sourceSize":{"w":70,"h":70}},"player-base-outfitSpetsnaz.img":{"frame":{"x":604,"y":821,"w":67,"h":67},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":67,"h":67},"sourceSize":{"w":70,"h":70}},"player-base-outfitTurkey.img":{"frame":{"x":606,"y":698,"w":67,"h":67},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":67,"h":67},"sourceSize":{"w":70,"h":70}},"player-base-outfitWheat.img":{"frame":{"x":633,"y":628,"w":67,"h":67},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":67,"h":67},"sourceSize":{"w":70,"h":70}},"proj-strobe-armed.img":{"frame":{"x":554,"y":961,"w":67,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":13,"w":67,"h":59},"sourceSize":{"w":80,"h":80}},"proj-strobe-arming.img":{"frame":{"x":623,"y":890,"w":67,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":13,"w":67,"h":59},"sourceSize":{"w":80,"h":80}},"part-shell-01.img":{"frame":{"x":623,"y":951,"w":28,"h":67},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":28,"h":67},"sourceSize":{"w":28,"h":67}},"star-blue.img":{"frame":{"x":653,"y":951,"w":66,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":3,"w":66,"h":63},"sourceSize":{"w":74,"h":74}},"star-red.img":{"frame":{"x":673,"y":767,"w":66,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":3,"w":66,"h":63},"sourceSize":{"w":74,"h":74}},"part-splat-02.img":{"frame":{"x":675,"y":697,"w":62,"h":65},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":4,"w":62,"h":65},"sourceSize":{"w":72,"h":72}},"chicken-dinner.img":{"frame":{"x":692,"y":832,"w":64,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":2,"w":64,"h":61},"sourceSize":{"w":64,"h":64}},"face-angel-treat.img":{"frame":{"x":721,"y":895,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"fish.img":{"frame":{"x":492,"y":635,"w":64,"h":46},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":9,"w":64,"h":46},"sourceSize":{"w":64,"h":64}},"flag-albania.img":{"frame":{"x":787,"y":1,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-algeria.img":{"frame":{"x":702,"y":1,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-argentina.img":{"frame":{"x":635,"y":1,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-australia.img":{"frame":{"x":853,"y":1,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-austria.img":{"frame":{"x":919,"y":1,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-azerbaijan.img":{"frame":{"x":787,"y":67,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-belarus.img":{"frame":{"x":702,"y":67,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-belgium.img":{"frame":{"x":635,"y":67,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-bolivia.img":{"frame":{"x":853,"y":67,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-bosnia-and-herzegovina.img":{"frame":{"x":919,"y":67,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-brazil.img":{"frame":{"x":787,"y":133,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-canada.img":{"frame":{"x":702,"y":133,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-chile.img":{"frame":{"x":614,"y":133,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-china.img":{"frame":{"x":512,"y":162,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-colombia.img":{"frame":{"x":853,"y":133,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-croatia.img":{"frame":{"x":919,"y":133,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-czech-republic.img":{"frame":{"x":512,"y":228,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-denmark.img":{"frame":{"x":512,"y":294,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-dominican-republic.img":{"frame":{"x":573,"y":360,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-ecuador.img":{"frame":{"x":614,"y":426,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-egypt.img":{"frame":{"x":614,"y":492,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-estonia.img":{"frame":{"x":578,"y":199,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-finland.img":{"frame":{"x":578,"y":265,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-france.img":{"frame":{"x":639,"y":331,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-georgia.img":{"frame":{"x":644,"y":199,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-germany.img":{"frame":{"x":644,"y":265,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-greece.img":{"frame":{"x":680,"y":397,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-guatemala.img":{"frame":{"x":705,"y":331,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-honduras.img":{"frame":{"x":680,"y":463,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-hong-kong.img":{"frame":{"x":681,"y":529,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-hungary.img":{"frame":{"x":702,"y":595,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-india.img":{"frame":{"x":739,"y":661,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-indonesia.img":{"frame":{"x":741,"y":727,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-israel.img":{"frame":{"x":758,"y":793,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-italy.img":{"frame":{"x":710,"y":199,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-japan.img":{"frame":{"x":710,"y":265,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-kazakhstan.img":{"frame":{"x":746,"y":397,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-latvia.img":{"frame":{"x":746,"y":463,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-lithuania.img":{"frame":{"x":771,"y":331,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-malaysia.img":{"frame":{"x":747,"y":529,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-mexico.img":{"frame":{"x":768,"y":595,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-moldova.img":{"frame":{"x":805,"y":661,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-morocco.img":{"frame":{"x":807,"y":727,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-netherlands.img":{"frame":{"x":776,"y":199,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-new-zealand.img":{"frame":{"x":776,"y":265,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-norway.img":{"frame":{"x":812,"y":397,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-peru.img":{"frame":{"x":812,"y":463,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-philippines.img":{"frame":{"x":837,"y":331,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-portugal.img":{"frame":{"x":813,"y":529,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-republic-of-poland.img":{"frame":{"x":834,"y":595,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-romania.img":{"frame":{"x":871,"y":661,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-russia.img":{"frame":{"x":937,"y":199,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-serbia.img":{"frame":{"x":842,"y":265,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-singapore.img":{"frame":{"x":842,"y":199,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-slovakia.img":{"frame":{"x":937,"y":265,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-south-korea.img":{"frame":{"x":937,"y":331,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-spain.img":{"frame":{"x":937,"y":397,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-sweden.img":{"frame":{"x":878,"y":463,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-switzerland.img":{"frame":{"x":879,"y":529,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-taiwan.img":{"frame":{"x":900,"y":595,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-thailand.img":{"frame":{"x":944,"y":463,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-trinidad-and-tobago.img":{"frame":{"x":945,"y":529,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-turkey.img":{"frame":{"x":937,"y":661,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-ukraine.img":{"frame":{"x":873,"y":727,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-united-arab-emirates.img":{"frame":{"x":939,"y":727,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-united-kingdom.img":{"frame":{"x":787,"y":859,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-united-states-of-america.img":{"frame":{"x":824,"y":793,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-uruguay.img":{"frame":{"x":787,"y":925,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-venezuela.img":{"frame":{"x":890,"y":793,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-vietnam.img":{"frame":{"x":956,"y":793,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-palestine.img":{"frame":{"x":853,"y":859,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-transgender.img":{"frame":{"x":853,"y":925,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-pride.img":{"frame":{"x":919,"y":859,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-lesbian.img":{"frame":{"x":919,"y":925,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-gay.img":{"frame":{"x":966,"y":595,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-asexual.img":{"frame":{"x":721,"y":961,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-nonbinary.img":{"frame":{"x":1003,"y":661,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"logo-caduceus.img":{"frame":{"x":1,"y":1004,"w":64,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":5,"w":64,"h":55},"sourceSize":{"w":64,"h":64}},"logo-chrysanthemum.img":{"frame":{"x":653,"y":1016,"w":64,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":5,"w":64,"h":55},"sourceSize":{"w":64,"h":64}},"logo-cloud.img":{"frame":{"x":485,"y":965,"w":64,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":5,"w":64,"h":55},"sourceSize":{"w":64,"h":64}},"logo-conch.img":{"frame":{"x":1005,"y":727,"w":64,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":5,"w":64,"h":55},"sourceSize":{"w":64,"h":64}},"logo-crossing.img":{"frame":{"x":221,"y":1001,"w":64,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":5,"w":64,"h":55},"sourceSize":{"w":64,"h":64}},"logo-egg.img":{"frame":{"x":145,"y":1011,"w":64,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":5,"w":64,"h":55},"sourceSize":{"w":64,"h":64}},"logo-hatchet.img":{"frame":{"x":67,"y":1024,"w":64,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":5,"w":64,"h":55},"sourceSize":{"w":64,"h":64}},"logo-hydra.img":{"frame":{"x":1,"y":1061,"w":64,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":5,"w":64,"h":55},"sourceSize":{"w":64,"h":64}},"logo-meteor.img":{"frame":{"x":358,"y":996,"w":64,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":5,"w":64,"h":55},"sourceSize":{"w":64,"h":64}},"logo-storm.img":{"frame":{"x":287,"y":1002,"w":64,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":5,"w":64,"h":55},"sourceSize":{"w":64,"h":64}},"logo-surviv.img":{"frame":{"x":211,"y":1058,"w":64,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":5,"w":64,"h":55},"sourceSize":{"w":64,"h":64}},"logo-swine.img":{"frame":{"x":133,"y":1068,"w":64,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":5,"w":64,"h":55},"sourceSize":{"w":64,"h":64}},"logo-twins.img":{"frame":{"x":67,"y":1081,"w":64,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":5,"w":64,"h":55},"sourceSize":{"w":64,"h":64}},"eye.img":{"frame":{"x":1,"y":1118,"w":64,"h":41},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":12,"w":64,"h":41},"sourceSize":{"w":64,"h":64}},"hamburger.img":{"frame":{"x":606,"y":767,"w":64,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":6,"w":64,"h":52},"sourceSize":{"w":64,"h":64}},"hide.img":{"frame":{"x":985,"y":1,"w":64,"h":53},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":6,"w":64,"h":53},"sourceSize":{"w":64,"h":64}},"indicator.img":{"frame":{"x":878,"y":397,"w":45,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":0,"w":45,"h":64},"sourceSize":{"w":64,"h":64}},"link.img":{"frame":{"x":985,"y":56,"w":64,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":5,"w":64,"h":55},"sourceSize":{"w":64,"h":64}},"loadout-crosshair.img":{"frame":{"x":985,"y":113,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"ping-map-coming.img":{"frame":{"x":111,"y":296,"w":56,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":56,"h":64},"sourceSize":{"w":64,"h":128}},"ping-map-danger.img":{"frame":{"x":680,"y":133,"w":20,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":22,"y":0,"w":20,"h":64},"sourceSize":{"w":64,"h":64}},"timer.img":{"frame":{"x":424,"y":1022,"w":64,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":3,"w":64,"h":59},"sourceSize":{"w":64,"h":64}},"gun-mp220-01.img":{"frame":{"x":903,"y":331,"w":19,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":19,"h":64},"sourceSize":{"w":20,"h":64}},"loot-ammo-box.img":{"frame":{"x":353,"y":1053,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"loot-perk-gotw.img":{"frame":{"x":277,"y":1059,"w":64,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":2,"w":64,"h":61},"sourceSize":{"w":64,"h":64}},"loot-perk-leadership.img":{"frame":{"x":199,"y":1115,"w":64,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":2,"w":64,"h":61},"sourceSize":{"w":64,"h":64}},"loot-scope-00.img":{"frame":{"x":133,"y":1125,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"loot-scope-01.img":{"frame":{"x":67,"y":1138,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"loot-scope-02.img":{"frame":{"x":1,"y":1161,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"loot-scope-03.img":{"frame":{"x":490,"y":1022,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"loot-scope-04.img":{"frame":{"x":419,"y":1083,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"loot-weapon-deagle-dual.img":{"frame":{"x":343,"y":1119,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"loot-weapon-flare-gun-dual.img":{"frame":{"x":265,"y":1122,"w":55,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":0,"w":55,"h":64},"sourceSize":{"w":64,"h":64}},"loot-weapon-m1911-dual.img":{"frame":{"x":199,"y":1178,"w":64,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":2,"w":64,"h":60},"sourceSize":{"w":64,"h":64}},"loot-weapon-m9-dual.img":{"frame":{"x":133,"y":1191,"w":64,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":3,"w":64,"h":59},"sourceSize":{"w":64,"h":64}},"loot-weapon-m93r-dual.img":{"frame":{"x":67,"y":1204,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"loot-weapon-m93r.img":{"frame":{"x":1,"y":1227,"w":50,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":0,"w":50,"h":64},"sourceSize":{"w":64,"h":64}},"loot-weapon-ots38-dual.img":{"frame":{"x":556,"y":1022,"w":53,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":0,"w":53,"h":64},"sourceSize":{"w":64,"h":64}},"part-airdrop-04.img":{"frame":{"x":908,"y":199,"w":27,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":27,"h":64},"sourceSize":{"w":27,"h":64}},"part-note-02.img":{"frame":{"x":1003,"y":179,"w":44,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":0,"w":44,"h":64},"sourceSize":{"w":64,"h":64}},"face-headshot.img":{"frame":{"x":1003,"y":245,"w":64,"h":44},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":12,"w":64,"h":44},"sourceSize":{"w":64,"h":64}},"face-poo.img":{"frame":{"x":1049,"y":179,"w":63,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":63,"h":64},"sourceSize":{"w":64,"h":64}},"loot-perk-aoe-heal.img":{"frame":{"x":1003,"y":291,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"face-imp-trick.img":{"frame":{"x":1003,"y":357,"w":62,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":62,"h":63},"sourceSize":{"w":64,"h":64}},"face-imp.img":{"frame":{"x":1010,"y":422,"w":63,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":63,"h":62},"sourceSize":{"w":64,"h":64}},"face-thinking.img":{"frame":{"x":1067,"y":357,"w":62,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":62,"h":63},"sourceSize":{"w":64,"h":64}},"snowflake.img":{"frame":{"x":1011,"y":486,"w":57,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":1,"w":57,"h":63},"sourceSize":{"w":64,"h":64}},"pass.img":{"frame":{"x":1032,"y":551,"w":63,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":63,"h":63},"sourceSize":{"w":64,"h":64}},"ping-team-airdrop.img":{"frame":{"x":1070,"y":486,"w":63,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":63,"h":63},"sourceSize":{"w":64,"h":64}},"ping-team-airstrike.img":{"frame":{"x":1069,"y":616,"w":63,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":63,"h":63},"sourceSize":{"w":64,"h":64}},"ping-team-coming.img":{"frame":{"x":1097,"y":551,"w":63,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":63,"h":63},"sourceSize":{"w":64,"h":64}},"ping-team-danger.img":{"frame":{"x":1069,"y":245,"w":63,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":63,"h":63},"sourceSize":{"w":64,"h":64}},"ping-team-help.img":{"frame":{"x":1131,"y":310,"w":63,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":63,"h":63},"sourceSize":{"w":64,"h":64}},"ping-team-unlock.img":{"frame":{"x":1131,"y":375,"w":63,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":63,"h":63},"sourceSize":{"w":64,"h":64}},"loot-perk-firepower.img":{"frame":{"x":1135,"y":440,"w":63,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":2,"w":63,"h":61},"sourceSize":{"w":64,"h":64}},"loot-perk-self-revive.img":{"frame":{"x":1069,"y":681,"w":63,"h":33},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":16,"w":63,"h":33},"sourceSize":{"w":64,"h":64}},"loot-perk-treat-super.img":{"frame":{"x":1135,"y":503,"w":63,"h":45},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":10,"w":63,"h":45},"sourceSize":{"w":64,"h":64}},"loot-weapon-bar.img":{"frame":{"x":1051,"y":1,"w":63,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":2,"w":63,"h":61},"sourceSize":{"w":64,"h":64}},"loot-weapon-colt45-dual.img":{"frame":{"x":1051,"y":64,"w":60,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":1,"w":60,"h":63},"sourceSize":{"w":64,"h":64}},"loot-weapon-dp28.img":{"frame":{"x":1113,"y":64,"w":57,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":1,"w":57,"h":63},"sourceSize":{"w":64,"h":64}},"loot-weapon-grozas.img":{"frame":{"x":1114,"y":129,"w":61,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":1,"w":61,"h":63},"sourceSize":{"w":64,"h":64}},"loot-weapon-m1014.img":{"frame":{"x":1134,"y":194,"w":55,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":1,"w":55,"h":63},"sourceSize":{"w":64,"h":64}},"loot-weapon-m4a1.img":{"frame":{"x":1172,"y":1,"w":58,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":1,"w":58,"h":63},"sourceSize":{"w":64,"h":64}},"loot-weapon-ot38-dual.img":{"frame":{"x":1177,"y":66,"w":61,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":1,"w":61,"h":63},"sourceSize":{"w":64,"h":64}},"loot-weapon-svd.img":{"frame":{"x":1232,"y":1,"w":55,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":1,"w":55,"h":63},"sourceSize":{"w":64,"h":64}},"loot-weapon-vss.img":{"frame":{"x":1191,"y":131,"w":54,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":1,"w":54,"h":63},"sourceSize":{"w":64,"h":64}},"player-helmet-captain.img":{"frame":{"x":1240,"y":66,"w":48,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":13,"w":48,"h":63},"sourceSize":{"w":88,"h":88}},"player-helmet-bugler.img":{"frame":{"x":1289,"y":1,"w":48,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":13,"w":48,"h":63},"sourceSize":{"w":88,"h":88}},"player-helmet-grenadier.img":{"frame":{"x":1191,"y":196,"w":48,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":13,"w":48,"h":63},"sourceSize":{"w":88,"h":88}},"player-helmet-leader.img":{"frame":{"x":1196,"y":261,"w":48,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":13,"w":48,"h":63},"sourceSize":{"w":88,"h":88}},"player-helmet-lieutenant.img":{"frame":{"x":1240,"y":196,"w":48,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":13,"w":48,"h":63},"sourceSize":{"w":88,"h":88}},"player-helmet-marksman.img":{"frame":{"x":1247,"y":131,"w":48,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":13,"w":48,"h":63},"sourceSize":{"w":88,"h":88}},"player-helmet-medic.img":{"frame":{"x":1290,"y":66,"w":48,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":13,"w":48,"h":63},"sourceSize":{"w":88,"h":88}},"player-helmet-potato.img":{"frame":{"x":1338,"y":1,"w":49,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":13,"w":49,"h":63},"sourceSize":{"w":88,"h":88}},"player-helmet-recon.img":{"frame":{"x":1196,"y":326,"w":48,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":13,"w":48,"h":63},"sourceSize":{"w":88,"h":88}},"part-note-01.img":{"frame":{"x":1389,"y":1,"w":42,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":1,"w":42,"h":63},"sourceSize":{"w":64,"h":64}},"part-splat-01.img":{"frame":{"x":1433,"y":1,"w":63,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":5,"w":63,"h":62},"sourceSize":{"w":72,"h":72}},"part-takedown-01.img":{"frame":{"x":1498,"y":1,"w":63,"h":51},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":7,"w":63,"h":51},"sourceSize":{"w":64,"h":64}},"face-alien.img":{"frame":{"x":1563,"y":1,"w":62,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":62,"h":63},"sourceSize":{"w":64,"h":64}},"loot-weapon-mkg45.img":{"frame":{"x":1498,"y":54,"w":58,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":1,"w":58,"h":63},"sourceSize":{"w":64,"h":64}},"loot-weapon-potato-smg.img":{"frame":{"x":1433,"y":65,"w":56,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":1,"w":56,"h":63},"sourceSize":{"w":64,"h":64}},"campfire.img":{"frame":{"x":1339,"y":66,"w":58,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":1,"w":58,"h":62},"sourceSize":{"w":64,"h":64}},"face-angry.img":{"frame":{"x":1627,"y":1,"w":62,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":62,"h":62},"sourceSize":{"w":64,"h":64}},"face-bandaged.img":{"frame":{"x":1691,"y":1,"w":62,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":62,"h":62},"sourceSize":{"w":64,"h":64}},"face-disappoint.img":{"frame":{"x":1755,"y":1,"w":62,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":62,"h":62},"sourceSize":{"w":64,"h":64}},"face-happy.img":{"frame":{"x":1819,"y":1,"w":62,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":62,"h":62},"sourceSize":{"w":64,"h":64}},"face-heart.img":{"frame":{"x":1883,"y":1,"w":62,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":62,"h":62},"sourceSize":{"w":64,"h":64}},"face-joy.img":{"frame":{"x":1947,"y":1,"w":62,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":62,"h":62},"sourceSize":{"w":64,"h":64}},"face-monocle.img":{"frame":{"x":1627,"y":65,"w":62,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":62,"h":62},"sourceSize":{"w":64,"h":64}},"face-picasso.img":{"frame":{"x":1558,"y":66,"w":61,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":1,"w":61,"h":62},"sourceSize":{"w":64,"h":64}},"face-sad.img":{"frame":{"x":1490,"y":119,"w":62,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":62,"h":62},"sourceSize":{"w":64,"h":64}},"face-sob.img":{"frame":{"x":1399,"y":130,"w":62,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":62,"h":62},"sourceSize":{"w":64,"h":64}},"face-sunglass.img":{"frame":{"x":1296,"y":131,"w":62,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":62,"h":62},"sourceSize":{"w":64,"h":64}},"face-upsidedown.img":{"frame":{"x":1691,"y":65,"w":62,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":62,"h":62},"sourceSize":{"w":64,"h":64}},"heart.img":{"frame":{"x":1755,"y":65,"w":62,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":2,"w":62,"h":61},"sourceSize":{"w":64,"h":64}},"salt.img":{"frame":{"x":1819,"y":65,"w":62,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":3,"w":62,"h":59},"sourceSize":{"w":64,"h":64}},"sleepy.img":{"frame":{"x":1883,"y":65,"w":62,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":3,"w":62,"h":58},"sourceSize":{"w":64,"h":64}},"thumbs-up.img":{"frame":{"x":1075,"y":422,"w":52,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":1,"w":52,"h":62},"sourceSize":{"w":64,"h":64}},"bullets.img":{"frame":{"x":1947,"y":65,"w":43,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":1,"w":43,"h":62},"sourceSize":{"w":64,"h":64}},"loadout-emote.img":{"frame":{"x":1883,"y":125,"w":62,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":62,"h":62},"sourceSize":{"w":64,"h":64}},"reload.img":{"frame":{"x":1992,"y":65,"w":54,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":1,"w":54,"h":62},"sourceSize":{"w":64,"h":64}},"trash.img":{"frame":{"x":1819,"y":126,"w":54,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":1,"w":54,"h":62},"sourceSize":{"w":64,"h":64}},"gun-deagle-01.img":{"frame":{"x":2011,"y":1,"w":20,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":54,"w":20,"h":62},"sourceSize":{"w":28,"h":116}},"gun-med-01.img":{"frame":{"x":2033,"y":1,"w":14,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":14,"h":62},"sourceSize":{"w":14,"h":62}},"loot-perk-splinter.img":{"frame":{"x":1755,"y":128,"w":58,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":1,"w":58,"h":62},"sourceSize":{"w":64,"h":64}},"loot-perk-targeting.img":{"frame":{"x":1947,"y":129,"w":62,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":62,"h":62},"sourceSize":{"w":64,"h":64}},"loot-weapon-an94.img":{"frame":{"x":1875,"y":189,"w":57,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":1,"w":57,"h":62},"sourceSize":{"w":64,"h":64}},"loot-weapon-m1a1.img":{"frame":{"x":1815,"y":190,"w":57,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":1,"w":57,"h":62},"sourceSize":{"w":64,"h":64}},"loot-weapon-p30l-dual.img":{"frame":{"x":1934,"y":193,"w":62,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":4,"w":62,"h":56},"sourceSize":{"w":64,"h":64}},"loot-weapon-pkp.img":{"frame":{"x":1934,"y":251,"w":57,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":1,"w":57,"h":62},"sourceSize":{"w":64,"h":64}},"loot-weapon-saiga.img":{"frame":{"x":1874,"y":253,"w":57,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":1,"w":57,"h":62},"sourceSize":{"w":64,"h":64}},"loot-weapon-scarssr.img":{"frame":{"x":1932,"y":315,"w":62,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":3,"w":62,"h":61},"sourceSize":{"w":64,"h":64}},"loot-weapon-scorpion.img":{"frame":{"x":1621,"y":129,"w":57,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":1,"w":57,"h":62},"sourceSize":{"w":64,"h":64}},"player-visor-scout.img":{"frame":{"x":1993,"y":251,"w":38,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":39,"y":13,"w":38,"h":62},"sourceSize":{"w":88,"h":88}},"part-boost-naturalize.img":{"frame":{"x":1996,"y":315,"w":46,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":1,"w":46,"h":62},"sourceSize":{"w":64,"h":64}},"part-log-01.img":{"frame":{"x":1554,"y":130,"w":62,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":62,"h":62},"sourceSize":{"w":64,"h":64}},"proj-martyrdom-01.img":{"frame":{"x":1679,"y":129,"w":62,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":62,"h":62},"sourceSize":{"w":64,"h":64}},"police.img":{"frame":{"x":1743,"y":192,"w":50,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":1,"w":50,"h":62},"sourceSize":{"w":64,"h":64}},"tombstone.img":{"frame":{"x":1795,"y":254,"w":56,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":0,"w":56,"h":62},"sourceSize":{"w":64,"h":64}},"loadout-melee.img":{"frame":{"x":1853,"y":317,"w":62,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":62,"h":61},"sourceSize":{"w":64,"h":64}},"part-splat-03.img":{"frame":{"x":1917,"y":378,"w":62,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":3,"w":62,"h":60},"sourceSize":{"w":72,"h":72}},"candy-corn.img":{"frame":{"x":1116,"y":1,"w":52,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":2,"w":52,"h":61},"sourceSize":{"w":64,"h":64}},"cupcake.img":{"frame":{"x":1980,"y":379,"w":54,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":2,"w":54,"h":61},"sourceSize":{"w":64,"h":64}},"ice-cream.img":{"frame":{"x":573,"y":426,"w":33,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":2,"w":33,"h":61},"sourceSize":{"w":64,"h":64}},"snowman.img":{"frame":{"x":1463,"y":183,"w":48,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":2,"w":48,"h":61},"sourceSize":{"w":64,"h":64}},"surviv.img":{"frame":{"x":1360,"y":194,"w":61,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":61,"h":61},"sourceSize":{"w":64,"h":64}},"emote.img":{"frame":{"x":1296,"y":195,"w":61,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":61,"h":61},"sourceSize":{"w":64,"h":64}},"loot-perk-hotw.img":{"frame":{"x":1618,"y":193,"w":53,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":2,"w":53,"h":61},"sourceSize":{"w":64,"h":64}},"loot-perk-hunted.img":{"frame":{"x":1673,"y":193,"w":61,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":61,"h":61},"sourceSize":{"w":64,"h":64}},"loot-perk-rare-potato.img":{"frame":{"x":1736,"y":256,"w":45,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":2,"w":45,"h":61},"sourceSize":{"w":64,"h":64}},"loot-throwable-smoke.img":{"frame":{"x":1783,"y":318,"w":42,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":2,"w":42,"h":61},"sourceSize":{"w":64,"h":64}},"loot-weapon-awc.img":{"frame":{"x":1827,"y":380,"w":61,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":3,"w":61,"h":61},"sourceSize":{"w":64,"h":64}},"loot-weapon-bugle.img":{"frame":{"x":1890,"y":440,"w":61,"h":57},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":4,"w":61,"h":57},"sourceSize":{"w":64,"h":64}},"loot-weapon-glock-dual.img":{"frame":{"x":1953,"y":442,"w":61,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":5,"w":61,"h":55},"sourceSize":{"w":64,"h":64}},"loot-weapon-m249.img":{"frame":{"x":1513,"y":194,"w":58,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":2,"w":58,"h":61},"sourceSize":{"w":64,"h":64}},"loot-weapon-m39.img":{"frame":{"x":1423,"y":246,"w":54,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":2,"w":54,"h":61},"sourceSize":{"w":64,"h":64}},"loot-weapon-mk12.img":{"frame":{"x":1359,"y":257,"w":57,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":2,"w":57,"h":61},"sourceSize":{"w":64,"h":64}},"loot-weapon-potato-cannon.img":{"frame":{"x":1290,"y":258,"w":61,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":61,"h":61},"sourceSize":{"w":64,"h":64}},"part-heal-tomoe.img":{"frame":{"x":1573,"y":256,"w":51,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":2,"w":51,"h":61},"sourceSize":{"w":64,"h":64}},"part-leaf-01.img":{"frame":{"x":1479,"y":257,"w":61,"h":53},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":6,"w":61,"h":53},"sourceSize":{"w":64,"h":64}},"loot-weapon-sv98.img":{"frame":{"x":1626,"y":256,"w":61,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":4,"w":61,"h":59},"sourceSize":{"w":64,"h":64}},"loot-weapon-usas.img":{"frame":{"x":1626,"y":317,"w":61,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":61,"h":60},"sourceSize":{"w":64,"h":64}},"proj-frag-nopin-01.img":{"frame":{"x":1418,"y":309,"w":55,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":3,"w":55,"h":61},"sourceSize":{"w":64,"h":64}},"proj-frag-nopin-02.img":{"frame":{"x":1353,"y":320,"w":55,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":3,"w":55,"h":61},"sourceSize":{"w":64,"h":64}},"proj-frag-nopin-nolever-01.img":{"frame":{"x":1689,"y":256,"w":45,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":3,"w":45,"h":61},"sourceSize":{"w":64,"h":64}},"proj-frag-nopin-nolever-02.img":{"frame":{"x":1689,"y":319,"w":45,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":3,"w":45,"h":61},"sourceSize":{"w":64,"h":64}},"proj-frag-pin-01.img":{"frame":{"x":1736,"y":381,"w":55,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":3,"w":55,"h":61},"sourceSize":{"w":64,"h":64}},"proj-frag-pin-02.img":{"frame":{"x":1793,"y":442,"w":55,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":3,"w":55,"h":61},"sourceSize":{"w":64,"h":64}},"donut.img":{"frame":{"x":1475,"y":312,"w":60,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":60,"h":60},"sourceSize":{"w":64,"h":64}},"egg.img":{"frame":{"x":1409,"y":371,"w":49,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":2,"w":49,"h":60},"sourceSize":{"w":64,"h":64}},"forest.img":{"frame":{"x":1537,"y":319,"w":60,"h":49},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":8,"w":60,"h":49},"sourceSize":{"w":64,"h":64}},"pilgrim-hat.img":{"frame":{"x":1069,"y":310,"w":60,"h":44},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":10,"w":60,"h":44},"sourceSize":{"w":64,"h":64}},"rainbow.img":{"frame":{"x":1537,"y":370,"w":60,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":2,"w":60,"h":60},"sourceSize":{"w":64,"h":64}},"turkey-animal.img":{"frame":{"x":1460,"y":374,"w":60,"h":51},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":7,"w":60,"h":51},"sourceSize":{"w":64,"h":64}},"loadout-kill-icon.img":{"frame":{"x":1460,"y":427,"w":60,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":3,"w":60,"h":59},"sourceSize":{"w":64,"h":64}},"player-medic.img":{"frame":{"x":1598,"y":379,"w":60,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":7,"w":60,"h":60},"sourceSize":{"w":74,"h":74}},"skull.img":{"frame":{"x":1660,"y":381,"w":60,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":3,"w":60,"h":59},"sourceSize":{"w":64,"h":64}},"gun-p30l-01.img":{"frame":{"x":1795,"y":192,"w":16,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":56,"w":16,"h":60},"sourceSize":{"w":28,"h":116}},"loot-chest-01.img":{"frame":{"x":1522,"y":432,"w":60,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":60,"h":60},"sourceSize":{"w":64,"h":64}},"loot-chest-02.img":{"frame":{"x":1736,"y":319,"w":38,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":2,"w":38,"h":60},"sourceSize":{"w":64,"h":64}},"loot-medical-heart.img":{"frame":{"x":1584,"y":441,"w":60,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":6,"w":60,"h":52},"sourceSize":{"w":64,"h":64}},"loot-perk-bonus-45.img":{"frame":{"x":1646,"y":442,"w":60,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":6,"w":60,"h":52},"sourceSize":{"w":64,"h":64}},"loot-perk-bonus-9mm.img":{"frame":{"x":1708,"y":443,"w":60,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":6,"w":60,"h":52},"sourceSize":{"w":64,"h":64}},"loot-perk-bonus-assault.img":{"frame":{"x":1246,"y":321,"w":60,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":6,"w":60,"h":52},"sourceSize":{"w":64,"h":64}},"loot-perk-chambered.img":{"frame":{"x":1246,"y":375,"w":60,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":60,"h":60},"sourceSize":{"w":64,"h":64}},"loot-perk-halloween-mystery.img":{"frame":{"x":1308,"y":382,"w":54,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":1,"w":54,"h":60},"sourceSize":{"w":64,"h":64}},"loot-perk-treat-12g.img":{"frame":{"x":1364,"y":433,"w":60,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":6,"w":60,"h":52},"sourceSize":{"w":64,"h":64}},"loot-perk-treat-556.img":{"frame":{"x":1200,"y":437,"w":60,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":6,"w":60,"h":52},"sourceSize":{"w":64,"h":64}},"loot-perk-treat-762.img":{"frame":{"x":1262,"y":444,"w":60,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":6,"w":60,"h":52},"sourceSize":{"w":64,"h":64}},"loot-perk-treat-9mm.img":{"frame":{"x":1200,"y":491,"w":60,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":6,"w":60,"h":52},"sourceSize":{"w":64,"h":64}},"loot-perk-trick-m9.img":{"frame":{"x":1324,"y":487,"w":60,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":6,"w":60,"h":52},"sourceSize":{"w":64,"h":64}},"loot-weapon-ak.img":{"frame":{"x":1262,"y":498,"w":51,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":2,"w":51,"h":60},"sourceSize":{"w":64,"h":64}},"loot-weapon-colt45.img":{"frame":{"x":1200,"y":545,"w":48,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":2,"w":48,"h":60},"sourceSize":{"w":64,"h":64}},"loot-weapon-l86.img":{"frame":{"x":1386,"y":487,"w":59,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":2,"w":59,"h":60},"sourceSize":{"w":64,"h":64}},"loot-weapon-m1911.img":{"frame":{"x":1315,"y":541,"w":54,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":2,"w":54,"h":60},"sourceSize":{"w":64,"h":64}},"loot-weapon-m9-cursed.img":{"frame":{"x":1250,"y":560,"w":49,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":2,"w":49,"h":60},"sourceSize":{"w":64,"h":64}},"loot-weapon-ots38.img":{"frame":{"x":610,"y":1022,"w":41,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":2,"w":41,"h":60},"sourceSize":{"w":64,"h":64}},"loot-weapon-qbb97.img":{"frame":{"x":1447,"y":488,"w":59,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":2,"w":59,"h":60},"sourceSize":{"w":64,"h":64}},"part-feather-01.img":{"frame":{"x":1371,"y":549,"w":60,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":60,"h":60},"sourceSize":{"w":64,"h":64}},"part-feather-02.img":{"frame":{"x":1301,"y":603,"w":60,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":60,"h":60},"sourceSize":{"w":64,"h":64}},"part-potato-02.img":{"frame":{"x":1508,"y":494,"w":47,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":2,"w":47,"h":60},"sourceSize":{"w":64,"h":64}},"loot-perk-windwalk.img":{"frame":{"x":512,"y":360,"w":43,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":3,"w":43,"h":60},"sourceSize":{"w":64,"h":64}},"loot-weapon-hk416.img":{"frame":{"x":1433,"y":550,"w":53,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":2,"w":53,"h":60},"sourceSize":{"w":64,"h":64}},"loot-weapon-m1100.img":{"frame":{"x":1162,"y":607,"w":60,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":4,"w":60,"h":60},"sourceSize":{"w":64,"h":64}},"cattle.img":{"frame":{"x":1223,"y":622,"w":59,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":59,"h":56},"sourceSize":{"w":64,"h":64}},"emote-medical-healthkit.img":{"frame":{"x":1134,"y":669,"w":59,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":6,"w":59,"h":52},"sourceSize":{"w":64,"h":64}},"ok.img":{"frame":{"x":1308,"y":321,"w":42,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":3,"w":42,"h":59},"sourceSize":{"w":64,"h":64}},"whale.img":{"frame":{"x":1051,"y":129,"w":59,"h":47},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":9,"w":59,"h":47},"sourceSize":{"w":64,"h":64}},"danger.img":{"frame":{"x":1071,"y":716,"w":59,"h":54},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":5,"w":59,"h":54},"sourceSize":{"w":64,"h":64}},"loadout-boost.img":{"frame":{"x":1557,"y":495,"w":58,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":58,"h":59},"sourceSize":{"w":64,"h":64}},"mag-glass.img":{"frame":{"x":1617,"y":496,"w":59,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":59,"h":59},"sourceSize":{"w":64,"h":64}},"loot-chest-03.img":{"frame":{"x":1678,"y":497,"w":48,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":3,"w":48,"h":59},"sourceSize":{"w":64,"h":64}},"loot-helmet-02.img":{"frame":{"x":1134,"y":261,"w":59,"h":38},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":13,"w":59,"h":38},"sourceSize":{"w":64,"h":64}},"loot-medical-healthkit.img":{"frame":{"x":1728,"y":497,"w":59,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":6,"w":59,"h":52},"sourceSize":{"w":64,"h":64}},"loot-medical-pill.img":{"frame":{"x":1488,"y":556,"w":59,"h":45},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":10,"w":59,"h":45},"sourceSize":{"w":64,"h":64}},"loot-melee-bayonet-rugged.img":{"frame":{"x":1853,"y":254,"w":18,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":23,"y":3,"w":18,"h":59},"sourceSize":{"w":64,"h":64}},"loot-melee-bayonet-woodland.img":{"frame":{"x":1793,"y":381,"w":18,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":23,"y":3,"w":18,"h":59},"sourceSize":{"w":64,"h":64}},"loot-melee-bowie-frontier.img":{"frame":{"x":1827,"y":318,"w":21,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":22,"y":3,"w":21,"h":59},"sourceSize":{"w":64,"h":64}},"loot-melee-bowie-vintage.img":{"frame":{"x":589,"y":81,"w":21,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":22,"y":3,"w":21,"h":59},"sourceSize":{"w":64,"h":64}},"loot-melee-pan-black.img":{"frame":{"x":1549,"y":556,"w":59,"h":43},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":11,"w":59,"h":43},"sourceSize":{"w":64,"h":64}},"loot-pack-00.img":{"frame":{"x":1610,"y":557,"w":45,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":3,"w":45,"h":59},"sourceSize":{"w":64,"h":64}},"loot-pack-02.img":{"frame":{"x":1549,"y":601,"w":44,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":3,"w":44,"h":59},"sourceSize":{"w":64,"h":64}},"loot-perk-fabricate.img":{"frame":{"x":1488,"y":603,"w":59,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":59,"h":59},"sourceSize":{"w":64,"h":64}},"loot-perk-scavenger_adv.img":{"frame":{"x":1363,"y":611,"w":59,"h":37},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":14,"w":59,"h":37},"sourceSize":{"w":64,"h":64}},"loot-perk-trick-drain.img":{"frame":{"x":1424,"y":611,"w":59,"h":42},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":11,"w":59,"h":42},"sourceSize":{"w":64,"h":64}},"loot-weapon-famas.img":{"frame":{"x":1363,"y":650,"w":56,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":3,"w":56,"h":59},"sourceSize":{"w":64,"h":64}},"loot-weapon-m870.img":{"frame":{"x":1421,"y":655,"w":59,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":59,"h":58},"sourceSize":{"w":64,"h":64}},"loot-weapon-m9.img":{"frame":{"x":1284,"y":665,"w":48,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":3,"w":48,"h":59},"sourceSize":{"w":64,"h":64}},"loot-weapon-model94.img":{"frame":{"x":1334,"y":711,"w":59,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":5,"w":59,"h":55},"sourceSize":{"w":64,"h":64}},"loot-weapon-mosin.img":{"frame":{"x":1195,"y":680,"w":59,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":59,"h":58},"sourceSize":{"w":64,"h":64}},"loot-weapon-scout.img":{"frame":{"x":1132,"y":723,"w":59,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":5,"w":59,"h":55},"sourceSize":{"w":64,"h":64}},"loot-weapon-ump9.img":{"frame":{"x":1071,"y":772,"w":57,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":3,"w":57,"h":59},"sourceSize":{"w":64,"h":64}},"loot-weapon-vector45.img":{"frame":{"x":1256,"y":726,"w":52,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":3,"w":52,"h":59},"sourceSize":{"w":64,"h":64}},"loot-xp-book-01.img":{"frame":{"x":1193,"y":740,"w":48,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":3,"w":48,"h":59},"sourceSize":{"w":64,"h":64}},"loot-xp-book-02.img":{"frame":{"x":1130,"y":780,"w":48,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":3,"w":48,"h":59},"sourceSize":{"w":64,"h":64}},"loot-xp-book-03.img":{"frame":{"x":1022,"y":833,"w":48,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":3,"w":48,"h":59},"sourceSize":{"w":64,"h":64}},"loot-xp-book-04.img":{"frame":{"x":1072,"y":833,"w":48,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":3,"w":48,"h":59},"sourceSize":{"w":64,"h":64}},"loot-xp-book-05.img":{"frame":{"x":1850,"y":499,"w":48,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":3,"w":48,"h":59},"sourceSize":{"w":64,"h":64}},"loot-xp-book-06.img":{"frame":{"x":1789,"y":505,"w":48,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":3,"w":48,"h":59},"sourceSize":{"w":64,"h":64}},"loot-xp-stump-01.img":{"frame":{"x":1728,"y":551,"w":59,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":59,"h":59},"sourceSize":{"w":64,"h":64}},"part-boost-basic.img":{"frame":{"x":1657,"y":558,"w":58,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":58,"h":59},"sourceSize":{"w":64,"h":64}},"part-boost-star.img":{"frame":{"x":1595,"y":618,"w":59,"h":57},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":59,"h":57},"sourceSize":{"w":64,"h":64}},"loot-perk-steelskin.img":{"frame":{"x":367,"y":706,"w":41,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":3,"w":41,"h":59},"sourceSize":{"w":64,"h":64}},"acorn.img":{"frame":{"x":1482,"y":664,"w":52,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":3,"w":52,"h":58},"sourceSize":{"w":64,"h":64}},"bugle-inspiration-blue.img":{"frame":{"x":1549,"y":662,"w":44,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":3,"w":44,"h":58},"sourceSize":{"w":64,"h":64}},"bugle-inspiration-red.img":{"frame":{"x":1395,"y":715,"w":44,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":3,"w":44,"h":58},"sourceSize":{"w":64,"h":64}},"flex.img":{"frame":{"x":1310,"y":768,"w":55,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":3,"w":55,"h":58},"sourceSize":{"w":64,"h":64}},"ghost-base.img":{"frame":{"x":1243,"y":787,"w":52,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":3,"w":52,"h":58},"sourceSize":{"w":64,"h":64}},"cake.img":{"frame":{"x":1180,"y":801,"w":51,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":1,"w":51,"h":58},"sourceSize":{"w":60,"h":60}},"gas.img":{"frame":{"x":1900,"y":499,"w":58,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":58,"h":58},"sourceSize":{"w":64,"h":64}},"loadout-heal.img":{"frame":{"x":1960,"y":499,"w":58,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":58,"h":58},"sourceSize":{"w":64,"h":64}},"loadout-outfit.img":{"frame":{"x":1900,"y":559,"w":58,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":58,"h":56},"sourceSize":{"w":64,"h":64}},"player-patch-blue.img":{"frame":{"x":428,"y":133,"w":58,"h":30},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":25,"w":58,"h":30},"sourceSize":{"w":80,"h":80}},"player-patch-red.img":{"frame":{"x":429,"y":494,"w":58,"h":36},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":22,"w":58,"h":36},"sourceSize":{"w":80,"h":80}},"target.img":{"frame":{"x":1839,"y":560,"w":58,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":58,"h":58},"sourceSize":{"w":64,"h":64}},"loot-medical-bandage.img":{"frame":{"x":1122,"y":841,"w":53,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":3,"w":53,"h":58},"sourceSize":{"w":64,"h":64}},"loot-melee-huntsman-burnished.img":{"frame":{"x":53,"y":1227,"w":12,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":26,"y":3,"w":12,"h":58},"sourceSize":{"w":64,"h":64}},"loot-melee-huntsman-rugged.img":{"frame":{"x":1599,"y":319,"w":12,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":26,"y":3,"w":12,"h":58},"sourceSize":{"w":64,"h":64}},"loot-pack-01.img":{"frame":{"x":1789,"y":566,"w":47,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":3,"w":47,"h":58},"sourceSize":{"w":64,"h":64}},"loot-perk-inspiration.img":{"frame":{"x":1717,"y":612,"w":58,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":2,"w":58,"h":58},"sourceSize":{"w":64,"h":64}},"loot-shirt-01.img":{"frame":{"x":1656,"y":619,"w":58,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":58,"h":56},"sourceSize":{"w":64,"h":64}},"loot-shirt-outfitBase.img":{"frame":{"x":1960,"y":559,"w":58,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":58,"h":56},"sourceSize":{"w":64,"h":64}},"loot-shirt-outfitCamo.img":{"frame":{"x":985,"y":894,"w":58,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":58,"h":56},"sourceSize":{"w":64,"h":64}},"loot-shirt-outfitCarbonFiber.img":{"frame":{"x":1045,"y":894,"w":58,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":58,"h":56},"sourceSize":{"w":64,"h":64}},"loot-shirt-outfitCobaltShell.img":{"frame":{"x":1899,"y":617,"w":58,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":58,"h":56},"sourceSize":{"w":64,"h":64}},"loot-shirt-outfitDarkGloves.img":{"frame":{"x":1838,"y":620,"w":58,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":58,"h":56},"sourceSize":{"w":64,"h":64}},"loot-shirt-outfitDarkShirt.img":{"frame":{"x":1776,"y":626,"w":58,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":58,"h":56},"sourceSize":{"w":64,"h":64}},"loot-shirt-outfitDesertCamo.img":{"frame":{"x":1716,"y":672,"w":58,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":58,"h":56},"sourceSize":{"w":64,"h":64}},"loot-shirt-outfitDev.img":{"frame":{"x":1959,"y":617,"w":58,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":58,"h":56},"sourceSize":{"w":64,"h":64}},"loot-shirt-outfitGD.img":{"frame":{"x":1595,"y":677,"w":58,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":58,"h":56},"sourceSize":{"w":64,"h":64}},"loot-shirt-outfitHeaven.img":{"frame":{"x":1655,"y":677,"w":58,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":58,"h":56},"sourceSize":{"w":64,"h":64}},"loot-shirt-outfitKeyLime.img":{"frame":{"x":1898,"y":675,"w":58,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":58,"h":56},"sourceSize":{"w":64,"h":64}},"loot-shirt-outfitLumber.img":{"frame":{"x":1836,"y":678,"w":58,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":58,"h":56},"sourceSize":{"w":64,"h":64}},"loot-shirt-outfitMod.img":{"frame":{"x":1776,"y":684,"w":58,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":58,"h":56},"sourceSize":{"w":64,"h":64}},"loot-shirt-outfitParma.img":{"frame":{"x":1715,"y":730,"w":58,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":58,"h":56},"sourceSize":{"w":64,"h":64}},"loot-shirt-outfitParmaPrestige.img":{"frame":{"x":1958,"y":675,"w":58,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":58,"h":56},"sourceSize":{"w":64,"h":64}},"loot-shirt-outfitRed.img":{"frame":{"x":1896,"y":733,"w":58,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":58,"h":56},"sourceSize":{"w":64,"h":64}},"loot-shirt-outfitRoyalFortune.img":{"frame":{"x":1836,"y":736,"w":58,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":58,"h":56},"sourceSize":{"w":64,"h":64}},"loot-shirt-outfitSpetsnaz.img":{"frame":{"x":1775,"y":742,"w":58,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":58,"h":56},"sourceSize":{"w":64,"h":64}},"loot-shirt-outfitTurkey.img":{"frame":{"x":1956,"y":733,"w":58,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":58,"h":56},"sourceSize":{"w":64,"h":64}},"loot-shirt-outfitWheat.img":{"frame":{"x":1441,"y":724,"w":58,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":58,"h":56},"sourceSize":{"w":64,"h":64}},"loot-shirt-outfitWhite.img":{"frame":{"x":1367,"y":775,"w":58,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":58,"h":56},"sourceSize":{"w":64,"h":64}},"loot-shirt-outfitWoodland.img":{"frame":{"x":1297,"y":828,"w":58,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":58,"h":56},"sourceSize":{"w":64,"h":64}},"loot-weapon-blr.img":{"frame":{"x":1233,"y":847,"w":58,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":58,"h":56},"sourceSize":{"w":64,"h":64}},"loot-weapon-flare-gun.img":{"frame":{"x":1246,"y":261,"w":41,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":3,"w":41,"h":58},"sourceSize":{"w":64,"h":64}},"loot-weapon-scar.img":{"frame":{"x":1177,"y":861,"w":52,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":3,"w":52,"h":58},"sourceSize":{"w":64,"h":64}},"part-boost-shuriken.img":{"frame":{"x":1105,"y":901,"w":58,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":58,"h":56},"sourceSize":{"w":64,"h":64}},"part-heal-basic.img":{"frame":{"x":1501,"y":724,"w":58,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":58,"h":58},"sourceSize":{"w":64,"h":64}},"part-heal-heart.img":{"frame":{"x":1427,"y":782,"w":58,"h":57},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":6,"w":58,"h":57},"sourceSize":{"w":64,"h":64}},"part-heal-moon.img":{"frame":{"x":1357,"y":833,"w":56,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":3,"w":56,"h":58},"sourceSize":{"w":64,"h":64}},"part-leaf-03.img":{"frame":{"x":1293,"y":886,"w":58,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":58,"h":58},"sourceSize":{"w":64,"h":64}},"part-leaf-04.img":{"frame":{"x":1231,"y":905,"w":58,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":58,"h":58},"sourceSize":{"w":64,"h":64}},"part-leaf-05.img":{"frame":{"x":1165,"y":921,"w":58,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":58,"h":58},"sourceSize":{"w":64,"h":64}},"part-leaf-06.img":{"frame":{"x":985,"y":952,"w":58,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":58,"h":58},"sourceSize":{"w":64,"h":64}},"part-spark-01.img":{"frame":{"x":1045,"y":952,"w":58,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":58,"h":58},"sourceSize":{"w":60,"h":60}},"part-spark-02.img":{"frame":{"x":1105,"y":959,"w":58,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":58,"h":58},"sourceSize":{"w":60,"h":60}},"player-patch-01.img":{"frame":{"x":1896,"y":791,"w":58,"h":36},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":1,"w":58,"h":36},"sourceSize":{"w":80,"h":80}},"player-patch-02.img":{"frame":{"x":1835,"y":794,"w":58,"h":30},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":1,"w":58,"h":30},"sourceSize":{"w":80,"h":80}},"part-blossom-03.img":{"frame":{"x":1956,"y":791,"w":58,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":5,"w":58,"h":56},"sourceSize":{"w":64,"h":64}},"part-blossom-04.img":{"frame":{"x":1561,"y":735,"w":58,"h":57},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":5,"w":58,"h":57},"sourceSize":{"w":64,"h":64}},"bugle-final-blue.img":{"frame":{"x":1487,"y":784,"w":52,"h":57},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":4,"w":52,"h":57},"sourceSize":{"w":64,"h":64}},"bugle-final-red.img":{"frame":{"x":1415,"y":841,"w":52,"h":57},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":4,"w":52,"h":57},"sourceSize":{"w":64,"h":64}},"gg.img":{"frame":{"x":1353,"y":893,"w":57,"h":36},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":14,"w":57,"h":36},"sourceSize":{"w":64,"h":64}},"pumpkin.img":{"frame":{"x":1621,"y":735,"w":54,"h":57},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":4,"w":54,"h":57},"sourceSize":{"w":64,"h":64}},"tap.img":{"frame":{"x":1541,"y":794,"w":48,"h":57},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":4,"w":48,"h":57},"sourceSize":{"w":64,"h":64}},"loot-pack-03.img":{"frame":{"x":1469,"y":843,"w":52,"h":57},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":4,"w":52,"h":57},"sourceSize":{"w":64,"h":64}},"loot-perk-final-bugle.img":{"frame":{"x":1412,"y":900,"w":52,"h":57},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":2,"w":52,"h":57},"sourceSize":{"w":64,"h":64}},"loot-throwable-smoke-egg.img":{"frame":{"x":1573,"y":194,"w":41,"h":57},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":2,"w":41,"h":57},"sourceSize":{"w":64,"h":64}},"loot-weapon-deagle.img":{"frame":{"x":1353,"y":931,"w":52,"h":57},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":4,"w":52,"h":57},"sourceSize":{"w":64,"h":64}},"loot-weapon-garand.img":{"frame":{"x":1291,"y":946,"w":56,"h":57},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":56,"h":57},"sourceSize":{"w":64,"h":64}},"loot-weapon-mp220.img":{"frame":{"x":1225,"y":965,"w":57,"h":53},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":6,"w":57,"h":53},"sourceSize":{"w":64,"h":64}},"loot-weapon-mp5.img":{"frame":{"x":1165,"y":981,"w":48,"h":57},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":4,"w":48,"h":57},"sourceSize":{"w":64,"h":64}},"loot-weapon-ot38.img":{"frame":{"x":1677,"y":788,"w":45,"h":57},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":4,"w":45,"h":57},"sourceSize":{"w":64,"h":64}},"loot-weapon-spas12.img":{"frame":{"x":1724,"y":788,"w":48,"h":57},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":4,"w":48,"h":57},"sourceSize":{"w":64,"h":64}},"santa-hat.img":{"frame":{"x":1774,"y":800,"w":57,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":4,"w":57,"h":55},"sourceSize":{"w":64,"h":64}},"loot-melee-pan-black-side.img":{"frame":{"x":1743,"y":129,"w":10,"h":57},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":28,"y":4,"w":10,"h":57},"sourceSize":{"w":64,"h":64}},"loot-perk-broken-arrow.img":{"frame":{"x":1832,"y":826,"w":57,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":3,"w":57,"h":56},"sourceSize":{"w":64,"h":64}},"ammo-12gauge.img":{"frame":{"x":1891,"y":829,"w":56,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":56,"h":56},"sourceSize":{"w":64,"h":64}},"ammo-308sub.img":{"frame":{"x":1591,"y":794,"w":56,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":56,"h":56},"sourceSize":{"w":64,"h":64}},"ammo-45acp.img":{"frame":{"x":1949,"y":849,"w":56,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":56,"h":56},"sourceSize":{"w":64,"h":64}},"ammo-50AE.img":{"frame":{"x":1649,"y":847,"w":56,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":56,"h":56},"sourceSize":{"w":64,"h":64}},"ammo-556mm.img":{"frame":{"x":1591,"y":852,"w":56,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":56,"h":56},"sourceSize":{"w":64,"h":64}},"ammo-762mm.img":{"frame":{"x":1707,"y":847,"w":56,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":56,"h":56},"sourceSize":{"w":64,"h":64}},"ammo-9mm.img":{"frame":{"x":1523,"y":853,"w":56,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":56,"h":56},"sourceSize":{"w":64,"h":64}},"ammo-box.img":{"frame":{"x":1765,"y":856,"w":56,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":56,"h":56},"sourceSize":{"w":64,"h":64}},"ammo-flare.img":{"frame":{"x":1823,"y":884,"w":56,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":56,"h":56},"sourceSize":{"w":64,"h":64}},"chick.img":{"frame":{"x":1466,"y":902,"w":51,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":4,"w":51,"h":56},"sourceSize":{"w":64,"h":64}},"pineapple.img":{"frame":{"x":1998,"y":193,"w":34,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":15,"y":1,"w":34,"h":56},"sourceSize":{"w":64,"h":64}},"loadout-player-icon.img":{"frame":{"x":1407,"y":959,"w":56,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":5,"w":56,"h":55},"sourceSize":{"w":64,"h":64}},"player-emote.img":{"frame":{"x":1349,"y":990,"w":56,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":5,"w":56,"h":55},"sourceSize":{"w":64,"h":64}},"player-gui.img":{"frame":{"x":1284,"y":1005,"w":56,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":5,"w":56,"h":55},"sourceSize":{"w":64,"h":64}},"loot-helmet-01.img":{"frame":{"x":1881,"y":887,"w":56,"h":51},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":7,"w":56,"h":51},"sourceSize":{"w":64,"h":64}},"loot-helmet-03.img":{"frame":{"x":1215,"y":1020,"w":56,"h":43},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":11,"w":56,"h":43},"sourceSize":{"w":64,"h":64}},"loot-perk-ap-rounds.img":{"frame":{"x":1939,"y":907,"w":56,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":8,"w":56,"h":48},"sourceSize":{"w":64,"h":64}},"loot-perk-field-medic.img":{"frame":{"x":1997,"y":907,"w":49,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":6,"w":49,"h":56},"sourceSize":{"w":64,"h":64}},"loot-throwable-mirv.img":{"frame":{"x":1881,"y":940,"w":41,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":4,"w":41,"h":56},"sourceSize":{"w":64,"h":64}},"loot-weapon-p30l.img":{"frame":{"x":1924,"y":957,"w":51,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":4,"w":51,"h":56},"sourceSize":{"w":64,"h":64}},"loot-weapon-vector.img":{"frame":{"x":1977,"y":965,"w":55,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":4,"w":55,"h":56},"sourceSize":{"w":64,"h":64}},"loot-xp-bone-01.img":{"frame":{"x":1649,"y":905,"w":51,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":5,"w":51,"h":56},"sourceSize":{"w":64,"h":64}},"player-visor-tank.img":{"frame":{"x":2007,"y":849,"w":36,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":43,"y":16,"w":36,"h":56},"sourceSize":{"w":88,"h":88}},"proj-potato-01.img":{"frame":{"x":1702,"y":905,"w":47,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":4,"w":47,"h":56},"sourceSize":{"w":64,"h":64}},"proj-potato-02.img":{"frame":{"x":1581,"y":910,"w":47,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":4,"w":47,"h":56},"sourceSize":{"w":64,"h":64}},"loot-perk-small-arms.img":{"frame":{"x":1519,"y":911,"w":54,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":4,"w":54,"h":56},"sourceSize":{"w":64,"h":64}},"coconut.img":{"frame":{"x":1751,"y":914,"w":55,"h":45},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":10,"w":55,"h":45},"sourceSize":{"w":64,"h":64}},"news.img":{"frame":{"x":1808,"y":942,"w":55,"h":54},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":5,"w":55,"h":54},"sourceSize":{"w":64,"h":64}},"loot-medical-soda.img":{"frame":{"x":578,"y":142,"w":30,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":17,"y":5,"w":30,"h":55},"sourceSize":{"w":64,"h":64}},"loot-perk-explosive.img":{"frame":{"x":1751,"y":961,"w":55,"h":54},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":5,"w":55,"h":54},"sourceSize":{"w":64,"h":64}},"loot-perk-trick-chatty.img":{"frame":{"x":1865,"y":998,"w":55,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":5,"w":55,"h":52},"sourceSize":{"w":64,"h":64}},"loot-weapon-glock.img":{"frame":{"x":1465,"y":960,"w":45,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":5,"w":45,"h":55},"sourceSize":{"w":64,"h":64}},"loot-xp-donut-01.img":{"frame":{"x":1808,"y":998,"w":55,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":5,"w":55,"h":55},"sourceSize":{"w":64,"h":64}},"part-blossom-02.img":{"frame":{"x":1922,"y":1015,"w":53,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":5,"w":53,"h":55},"sourceSize":{"w":64,"h":64}},"loot-perk-scavenger.img":{"frame":{"x":1865,"y":1052,"w":54,"h":50},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":7,"w":54,"h":50},"sourceSize":{"w":64,"h":64}},"loot-perk-turkey_shoot.img":{"frame":{"x":1407,"y":1016,"w":51,"h":54},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":5,"w":51,"h":54},"sourceSize":{"w":64,"h":64}},"player-visor-sniper.img":{"frame":{"x":1342,"y":1047,"w":51,"h":54},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":33,"y":17,"w":51,"h":54},"sourceSize":{"w":88,"h":88}},"part-blossom-01.img":{"frame":{"x":1273,"y":1062,"w":53,"h":54},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":5,"w":53,"h":54},"sourceSize":{"w":64,"h":64}},"part-leaf-01sv.img":{"frame":{"x":1976,"y":1023,"w":54,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":6,"w":54,"h":52},"sourceSize":{"w":64,"h":64}},"part-leaf-02.img":{"frame":{"x":1630,"y":963,"w":54,"h":54},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":5,"w":54,"h":54},"sourceSize":{"w":64,"h":64}},"teabag.img":{"frame":{"x":1921,"y":1072,"w":54,"h":46},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":10,"w":54,"h":46},"sourceSize":{"w":64,"h":64}},"eggplant.img":{"frame":{"x":1686,"y":963,"w":53,"h":51},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":7,"w":53,"h":51},"sourceSize":{"w":64,"h":64}},"leek.img":{"frame":{"x":1686,"y":1016,"w":53,"h":53},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":6,"w":53,"h":53},"sourceSize":{"w":64,"h":64}},"trunk.img":{"frame":{"x":1741,"y":1017,"w":53,"h":50},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":7,"w":53,"h":50},"sourceSize":{"w":64,"h":64}},"chicken.img":{"frame":{"x":1796,"y":1055,"w":53,"h":41},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":12,"w":53,"h":41},"sourceSize":{"w":64,"h":64}},"ping-map-airdrop.img":{"frame":{"x":1360,"y":130,"w":37,"h":53},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":5,"w":37,"h":53},"sourceSize":{"w":64,"h":64}},"player-captain.img":{"frame":{"x":1741,"y":1069,"w":53,"h":53},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":11,"w":53,"h":53},"sourceSize":{"w":74,"h":74}},"loot-perk-martyrdom.img":{"frame":{"x":1796,"y":1098,"w":53,"h":51},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":7,"w":53,"h":51},"sourceSize":{"w":64,"h":64}},"loot-perk-takedown.img":{"frame":{"x":1851,"y":1104,"w":53,"h":53},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":6,"w":53,"h":53},"sourceSize":{"w":64,"h":64}},"loot-perk-trick-nothing.img":{"frame":{"x":1976,"y":1077,"w":53,"h":53},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":6,"w":53,"h":53},"sourceSize":{"w":64,"h":64}},"loot-perk-trick-size.img":{"frame":{"x":1906,"y":1119,"w":53,"h":53},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":6,"w":53,"h":53},"sourceSize":{"w":64,"h":64}},"loot-throwable-frag-egg.img":{"frame":{"x":1961,"y":1132,"w":47,"h":53},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":6,"w":47,"h":53},"sourceSize":{"w":64,"h":64}},"part-pumpkin-01.img":{"frame":{"x":1512,"y":968,"w":53,"h":47},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":9,"w":53,"h":47},"sourceSize":{"w":64,"h":64}},"proj-snowball-01.img":{"frame":{"x":1567,"y":968,"w":53,"h":53},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":6,"w":53,"h":53},"sourceSize":{"w":64,"h":64}},"proj-snowball-02.img":{"frame":{"x":1622,"y":1019,"w":53,"h":53},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":6,"w":53,"h":53},"sourceSize":{"w":64,"h":64}},"loot-perk-flak-jacket.img":{"frame":{"x":1677,"y":1071,"w":51,"h":53},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":4,"w":51,"h":53},"sourceSize":{"w":64,"h":64}},"keyboard.img":{"frame":{"x":1730,"y":1124,"w":52,"h":31},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":17,"w":52,"h":31},"sourceSize":{"w":64,"h":64}},"movement.img":{"frame":{"x":1784,"y":1151,"w":52,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":6,"w":52,"h":52},"sourceSize":{"w":64,"h":64}},"ribbon-blue.img":{"frame":{"x":1838,"y":1159,"w":49,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":11,"w":49,"h":52},"sourceSize":{"w":74,"h":74}},"ribbon-red.img":{"frame":{"x":1889,"y":1174,"w":49,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":11,"w":49,"h":52},"sourceSize":{"w":74,"h":74}},"loot-throwable-potato.img":{"frame":{"x":1460,"y":1017,"w":46,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":6,"w":46,"h":52},"sourceSize":{"w":64,"h":64}},"loot-throwable-strobe.img":{"frame":{"x":1508,"y":1017,"w":52,"h":45},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":12,"w":52,"h":45},"sourceSize":{"w":64,"h":64}},"loot-weapon-groza.img":{"frame":{"x":1562,"y":1023,"w":52,"h":50},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":7,"w":52,"h":50},"sourceSize":{"w":64,"h":64}},"loot-weapon-mac10.img":{"frame":{"x":1508,"y":1064,"w":52,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":6,"w":52,"h":52},"sourceSize":{"w":64,"h":64}},"loot-xp-glasses-01.img":{"frame":{"x":1616,"y":1074,"w":52,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":6,"w":52,"h":52},"sourceSize":{"w":64,"h":64}},"player-visor-assault.img":{"frame":{"x":1561,"y":1075,"w":51,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":34,"y":18,"w":51,"h":52},"sourceSize":{"w":88,"h":88}},"player-visor-healer.img":{"frame":{"x":564,"y":698,"w":32,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":48,"y":18,"w":32,"h":52},"sourceSize":{"w":88,"h":88}},"ping-map-airstrike.img":{"frame":{"x":1426,"y":433,"w":22,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":21,"y":7,"w":22,"h":52},"sourceSize":{"w":64,"h":64}},"question.img":{"frame":{"x":1677,"y":735,"w":34,"h":51},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":15,"y":7,"w":34,"h":51},"sourceSize":{"w":64,"h":64}},"ping-map-help.img":{"frame":{"x":1670,"y":1126,"w":50,"h":51},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":7,"w":50,"h":51},"sourceSize":{"w":64,"h":64}},"loot-perk-endless-ammo.img":{"frame":{"x":1614,"y":1128,"w":51,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":8,"w":51,"h":48},"sourceSize":{"w":64,"h":64}},"loot-throwable-frag.img":{"frame":{"x":1722,"y":1157,"w":50,"h":51},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":7,"w":50,"h":51},"sourceSize":{"w":64,"h":64}},"crab.img":{"frame":{"x":1774,"y":1205,"w":50,"h":50},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":7,"w":50,"h":50},"sourceSize":{"w":64,"h":64}},"potato.img":{"frame":{"x":1826,"y":1213,"w":50,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":8,"w":50,"h":48},"sourceSize":{"w":64,"h":64}},"gun-ots38-01.img":{"frame":{"x":88,"y":582,"w":17,"h":50},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":66,"w":17,"h":50},"sourceSize":{"w":28,"h":116}},"loot-melee-karambit-drowned.img":{"frame":{"x":432,"y":988,"w":50,"h":21},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":22,"w":50,"h":21},"sourceSize":{"w":64,"h":64}},"loot-melee-karambit-prismatic.img":{"frame":{"x":578,"y":331,"w":50,"h":21},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":22,"w":50,"h":21},"sourceSize":{"w":64,"h":64}},"loot-melee-karambit-rugged.img":{"frame":{"x":1940,"y":1187,"w":50,"h":21},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":22,"w":50,"h":21},"sourceSize":{"w":64,"h":64}},"baguette.img":{"frame":{"x":1992,"y":1187,"w":49,"h":49},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":8,"w":49,"h":49},"sourceSize":{"w":64,"h":64}},"player-visor-demo.img":{"frame":{"x":1364,"y":382,"w":33,"h":49},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":43,"y":20,"w":33,"h":49},"sourceSize":{"w":88,"h":88}},"crosshair.img":{"frame":{"x":1940,"y":1210,"w":49,"h":49},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":49,"h":49},"sourceSize":{"w":49,"h":49}},"copy.img":{"frame":{"x":1460,"y":1071,"w":44,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":8,"w":44,"h":48},"sourceSize":{"w":64,"h":64}},"gun-flare-01.img":{"frame":{"x":1114,"y":194,"w":12,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":68,"w":12,"h":48},"sourceSize":{"w":28,"h":116}},"gun-short-01.img":{"frame":{"x":1865,"y":942,"w":14,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":14,"h":48},"sourceSize":{"w":14,"h":48}},"loot-perk-tree-climbing.img":{"frame":{"x":1506,"y":1118,"w":47,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":8,"w":47,"h":48},"sourceSize":{"w":64,"h":64}},"loot-xp-compass-01.img":{"frame":{"x":1991,"y":1238,"w":48,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":8,"w":48,"h":48},"sourceSize":{"w":64,"h":64}},"part-airdrop-01.img":{"frame":{"x":1555,"y":1129,"w":48,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":48,"h":48},"sourceSize":{"w":48,"h":48}},"part-airdrop-01x.img":{"frame":{"x":1878,"y":1228,"w":48,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":48,"h":48},"sourceSize":{"w":48,"h":48}},"minimize.img":{"frame":{"x":1928,"y":1261,"w":48,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":8,"w":48,"h":48},"sourceSize":{"w":64,"h":64}},"skull-leader.img":{"frame":{"x":1605,"y":1178,"w":45,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":1,"w":45,"h":48},"sourceSize":{"w":48,"h":48}},"loot-perk-assume-leadership.img":{"frame":{"x":1394,"y":1072,"w":47,"h":47},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":9,"w":47,"h":47},"sourceSize":{"w":64,"h":64}},"audio-off.img":{"frame":{"x":380,"y":421,"w":46,"h":40},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":12,"w":46,"h":40},"sourceSize":{"w":64,"h":64}},"audio-on.img":{"frame":{"x":1196,"y":391,"w":46,"h":40},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":12,"w":46,"h":40},"sourceSize":{"w":64,"h":64}},"ping-map-woods-king.img":{"frame":{"x":1022,"y":784,"w":46,"h":42},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":11,"w":46,"h":42},"sourceSize":{"w":64,"h":64}},"loot-melee-knuckles-heroic.img":{"frame":{"x":1327,"y":1103,"w":46,"h":29},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":18,"w":46,"h":29},"sourceSize":{"w":64,"h":64}},"loot-melee-knuckles-rusted.img":{"frame":{"x":1652,"y":1179,"w":46,"h":29},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":18,"w":46,"h":29},"sourceSize":{"w":64,"h":64}},"part-flare-01.img":{"frame":{"x":1652,"y":1210,"w":46,"h":44},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":3,"w":46,"h":44},"sourceSize":{"w":50,"h":50}},"ping-indicator.img":{"frame":{"x":1977,"y":1288,"w":44,"h":34},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":30,"w":44,"h":34},"sourceSize":{"w":64,"h":64}},"ping-part-quarter-highlight.img":{"frame":{"x":1700,"y":1210,"w":44,"h":26},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":1,"w":44,"h":26},"sourceSize":{"w":64,"h":64}},"ping-part-quarter.img":{"frame":{"x":1700,"y":1238,"w":44,"h":26},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":1,"w":44,"h":26},"sourceSize":{"w":64,"h":64}},"cog.img":{"frame":{"x":1746,"y":1257,"w":42,"h":42},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":11,"w":42,"h":42},"sourceSize":{"w":64,"h":64}},"loot-throwable-snowball.img":{"frame":{"x":1790,"y":1263,"w":42,"h":42},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":11,"w":42,"h":42},"sourceSize":{"w":64,"h":64}},"proj-mirv-mini-01.img":{"frame":{"x":1834,"y":1263,"w":42,"h":38},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":5,"w":42,"h":38},"sourceSize":{"w":48,"h":48}},"proj-mirv-mini-02.img":{"frame":{"x":1878,"y":1278,"w":42,"h":38},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":5,"w":42,"h":38},"sourceSize":{"w":48,"h":48}},"loot-weapon-fists.img":{"frame":{"x":2010,"y":1132,"w":37,"h":40},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":12,"w":37,"h":40},"sourceSize":{"w":64,"h":64}},"ping-map-unlock.img":{"frame":{"x":334,"y":632,"w":30,"h":39},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":17,"y":13,"w":30,"h":39},"sourceSize":{"w":64,"h":64}},"loot-melee-hook-silver.img":{"frame":{"x":612,"y":81,"w":21,"h":39},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":22,"y":13,"w":21,"h":39},"sourceSize":{"w":64,"h":64}},"gun-pkp-bot-01.img":{"frame":{"x":1423,"y":194,"w":38,"h":22},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":38,"h":22},"sourceSize":{"w":38,"h":22}},"player-map-downed.img":{"frame":{"x":1162,"y":550,"w":36,"h":31},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":4,"w":36,"h":31},"sourceSize":{"w":36,"h":36}},"player-map-inner.img":{"frame":{"x":2011,"y":129,"w":36,"h":36},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":36,"h":36},"sourceSize":{"w":36,"h":36}},"player-map-outer.img":{"frame":{"x":1324,"y":444,"w":36,"h":36},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":36,"h":36},"sourceSize":{"w":36,"h":36}},"quit.img":{"frame":{"x":135,"y":781,"w":34,"h":36},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":15,"y":14,"w":34,"h":36},"sourceSize":{"w":64,"h":64}},"timer-background.img":{"frame":{"x":1850,"y":442,"w":36,"h":36},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":36,"h":36},"sourceSize":{"w":36,"h":36}},"gun-m249-bot-01.img":{"frame":{"x":1162,"y":583,"w":36,"h":20},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":36,"h":20},"sourceSize":{"w":36,"h":20}},"part-cloth-01.img":{"frame":{"x":1032,"y":616,"w":35,"h":36},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":35,"h":36},"sourceSize":{"w":36,"h":36}},"player-hands-01.img":{"frame":{"x":1834,"y":1303,"w":36,"h":36},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":36,"h":36},"sourceSize":{"w":38,"h":38}},"player-hands-02.img":{"frame":{"x":1922,"y":1310,"w":36,"h":36},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":36,"h":36},"sourceSize":{"w":38,"h":38}},"gun-dp28-top-01.img":{"frame":{"x":1872,"y":1318,"w":35,"h":35},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":35,"h":35},"sourceSize":{"w":35,"h":35}},"close.img":{"frame":{"x":702,"y":661,"w":34,"h":34},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":34,"h":34},"sourceSize":{"w":36,"h":36}},"part-smoke-01.img":{"frame":{"x":1960,"y":1324,"w":34,"h":33},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":2,"w":34,"h":33},"sourceSize":{"w":36,"h":36}},"part-snow-01.img":{"frame":{"x":1909,"y":1348,"w":34,"h":34},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":34,"h":34},"sourceSize":{"w":36,"h":36}},"checked.img":{"frame":{"x":1996,"y":1324,"w":33,"h":33},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":33,"h":33},"sourceSize":{"w":36,"h":36}},"resume.img":{"frame":{"x":2015,"y":791,"w":32,"h":33},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":18,"y":16,"w":32,"h":33},"sourceSize":{"w":64,"h":64}},"submit.img":{"frame":{"x":1945,"y":1359,"w":33,"h":33},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":33,"h":33},"sourceSize":{"w":36,"h":36}},"part-frag-burst-01.img":{"frame":{"x":1980,"y":1359,"w":33,"h":33},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":33,"h":33},"sourceSize":{"w":36,"h":36}},"part-frag-burst-02.img":{"frame":{"x":1375,"y":1121,"w":33,"h":33},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":33,"h":33},"sourceSize":{"w":36,"h":36}},"part-potato-01.img":{"frame":{"x":1410,"y":1121,"w":33,"h":33},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":33,"h":33},"sourceSize":{"w":36,"h":36}},"part-pulse-01.img":{"frame":{"x":1445,"y":1121,"w":33,"h":33},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":33,"h":33},"sourceSize":{"w":36,"h":36}},"part-strobe-01.img":{"frame":{"x":787,"y":991,"w":33,"h":33},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":33,"h":33},"sourceSize":{"w":36,"h":36}},"lock.img":{"frame":{"x":2023,"y":1288,"w":24,"h":32},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":0,"w":24,"h":32},"sourceSize":{"w":32,"h":32}},"unlock.img":{"frame":{"x":1890,"y":380,"w":24,"h":32},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":0,"w":24,"h":32},"sourceSize":{"w":32,"h":32}},"gun-potato-smg-top-01.img":{"frame":{"x":985,"y":859,"w":32,"h":32},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":32,"h":32},"sourceSize":{"w":40,"h":40}},"globe.img":{"frame":{"x":2016,"y":442,"w":31,"h":31},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":31,"h":31},"sourceSize":{"w":32,"h":32}},"skull-outlined.img":{"frame":{"x":171,"y":860,"w":26,"h":30},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":1,"w":26,"h":30},"sourceSize":{"w":32,"h":32}},"gun-qbb97-bot-01.img":{"frame":{"x":260,"y":692,"w":30,"h":15},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":30,"h":15},"sourceSize":{"w":32,"h":16}},"part-frag-pin-01.img":{"frame":{"x":1542,"y":257,"w":29,"h":29},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":18,"y":18,"w":29,"h":29},"sourceSize":{"w":64,"h":64}},"proj-frag-pin-part.img":{"frame":{"x":1542,"y":288,"w":29,"h":29},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":18,"y":18,"w":29,"h":29},"sourceSize":{"w":64,"h":64}},"skull-team.img":{"frame":{"x":1463,"y":130,"w":24,"h":28},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":2,"w":24,"h":28},"sourceSize":{"w":32,"h":32}},"crown.img":{"frame":{"x":692,"y":895,"w":27,"h":23},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":5,"w":27,"h":23},"sourceSize":{"w":32,"h":32}},"player-bullet-trail-03.img":{"frame":{"x":68,"y":671,"w":18,"h":27},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":18,"h":27},"sourceSize":{"w":18,"h":28}},"dc.img":{"frame":{"x":1256,"y":680,"w":26,"h":26},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":26,"h":26},"sourceSize":{"w":32,"h":32}},"down.img":{"frame":{"x":1649,"y":794,"w":26,"h":26},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":26,"h":26},"sourceSize":{"w":32,"h":32}},"ping-part-eighth-highlight.img":{"frame":{"x":1134,"y":616,"w":26,"h":22},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":10,"w":26,"h":22},"sourceSize":{"w":64,"h":64}},"ping-part-eighth.img":{"frame":{"x":1134,"y":639,"w":26,"h":22},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":10,"w":26,"h":22},"sourceSize":{"w":64,"h":64}},"part-frag-lever-01.img":{"frame":{"x":1890,"y":414,"w":24,"h":20},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":20,"y":22,"w":24,"h":20},"sourceSize":{"w":64,"h":64}},"hatchet.img":{"frame":{"x":1310,"y":726,"w":22,"h":19},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":3,"w":22,"h":19},"sourceSize":{"w":24,"h":24}},"pumpkin-play.img":{"frame":{"x":275,"y":928,"w":20,"h":22},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":1,"w":20,"h":22},"sourceSize":{"w":24,"h":24}},"cobalt.img":{"frame":{"x":2015,"y":826,"w":21,"h":21},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":21,"h":21},"sourceSize":{"w":24,"h":24}},"part-frag-burst-03.img":{"frame":{"x":199,"y":962,"w":18,"h":18},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":18,"h":18},"sourceSize":{"w":18,"h":18}},"player-bullet-trail-02.img":{"frame":{"x":233,"y":650,"w":18,"h":18},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":18,"h":18},"sourceSize":{"w":18,"h":18}},"player-feet-01.img":{"frame":{"x":985,"y":179,"w":12,"h":18},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":1,"w":12,"h":18},"sourceSize":{"w":19,"h":19}},"player-feet-02.img":{"frame":{"x":1301,"y":560,"w":12,"h":18},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":1,"w":12,"h":18},"sourceSize":{"w":19,"h":19}},"dot.img":{"frame":{"x":463,"y":896,"w":16,"h":16},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":16,"h":16},"sourceSize":{"w":18,"h":18}},"ping-part-circle-auto-highlight.img":{"frame":{"x":741,"y":793,"w":15,"h":15},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":15,"h":15},"sourceSize":{"w":15,"h":15}},"ping-part-circle-auto-outer.img":{"frame":{"x":1223,"y":607,"w":14,"h":13},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":14,"h":13},"sourceSize":{"w":14,"h":14}},"ping-part-circle-auto.img":{"frame":{"x":424,"y":824,"w":14,"h":14},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":14,"h":14},"sourceSize":{"w":14,"h":14}},"ping-part-circle-highlight.img":{"frame":{"x":440,"y":824,"w":14,"h":14},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":25,"y":25,"w":14,"h":14},"sourceSize":{"w":64,"h":64}},"ping-part-circle.img":{"frame":{"x":557,"y":360,"w":14,"h":14},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":25,"y":25,"w":14,"h":14},"sourceSize":{"w":64,"h":64}},"mobile-gas.img":{"frame":{"x":1409,"y":320,"w":7,"h":7},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":7,"h":7},"sourceSize":{"w":7,"h":7}}}}],"shared":[{"meta":{"image":"assets/shared-0-50-50587c7d.png","size":{"w":2048,"h":2048},"scale":0.5},"frames":{"map-building-police-floor-01.img":{"frame":{"x":1,"y":1,"w":1056,"h":784},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":1056,"h":784},"sourceSize":{"w":1056,"h":784}},"map-building-mansion-floor-01b.img":{"frame":{"x":1059,"y":1,"w":912,"h":608},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":912,"h":608},"sourceSize":{"w":912,"h":608}},"map-building-bank-floor-01.img":{"frame":{"x":1059,"y":611,"w":848,"h":401},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":848,"h":401},"sourceSize":{"w":848,"h":401}},"map-building-barn-floor-01.img":{"frame":{"x":1,"y":787,"w":800,"h":544},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":800,"h":544},"sourceSize":{"w":800,"h":544}},"map-building-bathhouse-basement-01e.img":{"frame":{"x":803,"y":1014,"w":716,"h":796},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":716,"h":796},"sourceSize":{"w":716,"h":796}},"map-building-club-floor-01c.img":{"frame":{"x":1,"y":1333,"w":721,"h":433},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":721,"h":433},"sourceSize":{"w":721,"h":433}},"map-bunker-conch-chamber-floor-01.img":{"frame":{"x":1,"y":1812,"w":697,"h":191},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":22,"y":22,"w":697,"h":191},"sourceSize":{"w":760,"h":216}},"map-bunker-conch-chamber-floor-02.img":{"frame":{"x":700,"y":1812,"w":618,"h":205},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":14,"w":618,"h":205},"sourceSize":{"w":652,"h":232}},"map-building-mansion-floor-01d.img":{"frame":{"x":1320,"y":1812,"w":545,"h":93},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":545,"h":93},"sourceSize":{"w":545,"h":97}},"map-building-police-ceiling-02.img":{"frame":{"x":1521,"y":1014,"w":264,"h":540},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":264,"h":540},"sourceSize":{"w":264,"h":540}},"map-building-police-ceiling-01.img":{"frame":{"x":1521,"y":1556,"w":504,"h":240},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":504,"h":240},"sourceSize":{"w":504,"h":240}},"map-building-hut-floor-02.img":{"frame":{"x":1973,"y":1,"w":65,"h":384},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":0,"w":65,"h":384},"sourceSize":{"w":68,"h":384}},"map-building-container-open-floor.img":{"frame":{"x":1909,"y":611,"w":90,"h":342},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":2,"w":90,"h":342},"sourceSize":{"w":90,"h":346}},"map-pipes-03.img":{"frame":{"x":1320,"y":1907,"w":342,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":342,"h":118},"sourceSize":{"w":342,"h":118}},"map-building-dock-floor-01b.img":{"frame":{"x":1909,"y":955,"w":81,"h":332},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":81,"h":332},"sourceSize":{"w":81,"h":332}},"map-bunker-conch-floor-01.img":{"frame":{"x":1664,"y":1907,"w":290,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":1,"w":290,"h":126},"sourceSize":{"w":300,"h":128}},"map-wall-18.img":{"frame":{"x":2027,"y":387,"w":16,"h":288},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":288},"sourceSize":{"w":16,"h":288}},"map-building-container-floor-01.img":{"frame":{"x":1787,"y":1289,"w":90,"h":266},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":90,"h":266},"sourceSize":{"w":90,"h":268}},"map-bunker-conch-chamber-ceiling-01.img":{"frame":{"x":803,"y":787,"w":248,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":248,"h":96},"sourceSize":{"w":248,"h":96}},"map-snow-07.img":{"frame":{"x":803,"y":885,"w":248,"h":84},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":6,"w":248,"h":84},"sourceSize":{"w":256,"h":96}},"map-club-bar-01.img":{"frame":{"x":1879,"y":1014,"w":27,"h":240},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":27,"h":240},"sourceSize":{"w":27,"h":240}},"map-wall-14-rounded.img":{"frame":{"x":2027,"y":677,"w":16,"h":224},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":224},"sourceSize":{"w":16,"h":224}},"map-wall-14.img":{"frame":{"x":2027,"y":903,"w":16,"h":224},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":224},"sourceSize":{"w":16,"h":224}},"map-wall-13-rounded.img":{"frame":{"x":2027,"y":1129,"w":16,"h":208},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":208},"sourceSize":{"w":16,"h":208}},"map-wall-13.img":{"frame":{"x":2027,"y":1339,"w":16,"h":208},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":208},"sourceSize":{"w":16,"h":208}},"map-building-barn-basement-stairs.img":{"frame":{"x":1879,"y":1289,"w":144,"h":192},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":192},"sourceSize":{"w":144,"h":192}},"map-wall-12-rounded.img":{"frame":{"x":2027,"y":1549,"w":16,"h":192},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":192},"sourceSize":{"w":16,"h":192}},"map-wall-12.img":{"frame":{"x":2027,"y":1743,"w":16,"h":192},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":192},"sourceSize":{"w":16,"h":192}},"map-wall-glass-12-2.img":{"frame":{"x":1992,"y":955,"w":32,"h":192},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":192},"sourceSize":{"w":32,"h":192}},"map-wall-glass-12.img":{"frame":{"x":2001,"y":387,"w":16,"h":192},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":192},"sourceSize":{"w":16,"h":192}},"map-building-container-ceiling-01.img":{"frame":{"x":1787,"y":1014,"w":90,"h":190},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":90,"h":190},"sourceSize":{"w":90,"h":268}},"map-wall-shack-top.img":{"frame":{"x":1,"y":2035,"w":180,"h":12},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":180,"h":12},"sourceSize":{"w":180,"h":12}},"map-decal-club-02.img":{"frame":{"x":1956,"y":1798,"w":50,"h":179},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":50,"h":179},"sourceSize":{"w":52,"h":180}},"map-pipes-04.img":{"frame":{"x":724,"y":1333,"w":44,"h":176},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":44,"h":176},"sourceSize":{"w":44,"h":176}},"map-wall-11-rounded.img":{"frame":{"x":2008,"y":1798,"w":16,"h":176},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":176},"sourceSize":{"w":16,"h":176}},"map-wall-11.img":{"frame":{"x":2001,"y":581,"w":16,"h":176},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":176},"sourceSize":{"w":16,"h":176}},"map-saloon-bar-01.img":{"frame":{"x":770,"y":1333,"w":27,"h":162},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":27,"h":162},"sourceSize":{"w":27,"h":162}},"map-wall-10-rounded.img":{"frame":{"x":2001,"y":759,"w":16,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":160},"sourceSize":{"w":16,"h":160}},"map-wall-10.img":{"frame":{"x":1973,"y":387,"w":16,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":160},"sourceSize":{"w":16,"h":160}},"map-wall-glass-10.img":{"frame":{"x":770,"y":1497,"w":16,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":160},"sourceSize":{"w":16,"h":160}},"map-couch-01.img":{"frame":{"x":1879,"y":1483,"w":144,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":48},"sourceSize":{"w":144,"h":48}},"map-pipes-01.img":{"frame":{"x":724,"y":1659,"w":45,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":45,"h":144},"sourceSize":{"w":45,"h":144}},"map-wall-09-rounded.img":{"frame":{"x":724,"y":1511,"w":16,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":144},"sourceSize":{"w":16,"h":144}},"map-wall-09.img":{"frame":{"x":742,"y":1511,"w":16,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":144},"sourceSize":{"w":16,"h":144}},"map-wall-glass-9.img":{"frame":{"x":771,"y":1659,"w":16,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":144},"sourceSize":{"w":16,"h":144}},"map-screen-01.img":{"frame":{"x":1,"y":2005,"w":128,"h":24},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":24},"sourceSize":{"w":128,"h":24}},"map-wall-08-rounded.img":{"frame":{"x":1992,"y":1149,"w":16,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":128},"sourceSize":{"w":16,"h":128}},"map-wall-shack-bot.img":{"frame":{"x":183,"y":2035,"w":121,"h":12},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":121,"h":12},"sourceSize":{"w":121,"h":12}},"map-wall-shack-right.img":{"frame":{"x":789,"y":1497,"w":12,"h":121},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":12,"h":121},"sourceSize":{"w":12,"h":121}},"map-piano-01.img":{"frame":{"x":803,"y":971,"w":120,"h":38},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":120,"h":38},"sourceSize":{"w":120,"h":38}},"map-bookshelf-01.img":{"frame":{"x":925,"y":971,"w":112,"h":32},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":112,"h":32},"sourceSize":{"w":112,"h":32}},"map-bookshelf-02.img":{"frame":{"x":1,"y":1768,"w":112,"h":32},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":112,"h":32},"sourceSize":{"w":112,"h":32}},"map-wall-shack-left.img":{"frame":{"x":789,"y":1620,"w":12,"h":111},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":12,"h":111},"sourceSize":{"w":12,"h":111}},"map-wall-outhouse-top.img":{"frame":{"x":1521,"y":1798,"w":102,"h":12},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":102,"h":12},"sourceSize":{"w":102,"h":12}},"map-wall-outhouse-side.img":{"frame":{"x":2010,"y":1149,"w":12,"h":99},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":12,"h":99},"sourceSize":{"w":12,"h":99}},"map-building-barn-basement-ceiling-02.img":{"frame":{"x":1866,"y":1798,"w":82,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":8,"w":82,"h":96},"sourceSize":{"w":82,"h":104}},"map-towelrack-01.img":{"frame":{"x":306,"y":2005,"w":96,"h":38},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":5,"w":96,"h":38},"sourceSize":{"w":96,"h":48}},"map-wall-06-rounded.img":{"frame":{"x":2026,"y":1937,"w":16,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":96},"sourceSize":{"w":16,"h":96}},"map-crate-mil-01.img":{"frame":{"x":1787,"y":1206,"w":86,"h":45},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":86,"h":45},"sourceSize":{"w":86,"h":45}},"map-deposit-box-01.img":{"frame":{"x":115,"y":1768,"w":80,"h":37},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":37},"sourceSize":{"w":80,"h":37}},"map-deposit-box-02.img":{"frame":{"x":404,"y":2005,"w":80,"h":37},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":37},"sourceSize":{"w":80,"h":37}},"map-building-cabin-ceiling-01b.img":{"frame":{"x":197,"y":1768,"w":74,"h":37},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":74,"h":37},"sourceSize":{"w":74,"h":38}},"map-gun-mount-01.img":{"frame":{"x":131,"y":2005,"w":72,"h":24},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":24},"sourceSize":{"w":72,"h":28}},"map-gun-mount-05.img":{"frame":{"x":486,"y":2019,"w":72,"h":24},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":24},"sourceSize":{"w":72,"h":28}},"map-door-slot-02.img":{"frame":{"x":1956,"y":1979,"w":19,"h":68},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":19,"h":68},"sourceSize":{"w":19,"h":68}},"map-door-slot-01.img":{"frame":{"x":1977,"y":1979,"w":19,"h":67},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":19,"h":67},"sourceSize":{"w":19,"h":67}},"map-building-porch-01.img":{"frame":{"x":1787,"y":1253,"w":64,"h":32},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":32},"sourceSize":{"w":64,"h":32}},"map-door-01.img":{"frame":{"x":789,"y":1733,"w":12,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":12,"h":64},"sourceSize":{"w":12,"h":64}},"map-door-05.img":{"frame":{"x":2008,"y":1976,"w":12,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":12,"h":64},"sourceSize":{"w":12,"h":64}},"map-gun-mount-02.img":{"frame":{"x":205,"y":2005,"w":64,"h":22},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":22},"sourceSize":{"w":64,"h":28}},"map-gun-mount-03.img":{"frame":{"x":560,"y":2019,"w":64,"h":22},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":22},"sourceSize":{"w":64,"h":28}},"map-gun-mount-04.img":{"frame":{"x":626,"y":2019,"w":64,"h":28},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":28},"sourceSize":{"w":64,"h":28}},"map-woodpile-res-02.img":{"frame":{"x":692,"y":2019,"w":61,"h":28},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":3,"w":61,"h":28},"sourceSize":{"w":64,"h":32}},"map-screen-res-01.img":{"frame":{"x":273,"y":1768,"w":58,"h":29},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":0,"w":58,"h":29},"sourceSize":{"w":62,"h":29}},"map-building-boarded-window-01.img":{"frame":{"x":1973,"y":549,"w":22,"h":57},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":4,"w":22,"h":57},"sourceSize":{"w":24,"h":64}},"map-locker-01.img":{"frame":{"x":755,"y":2019,"w":48,"h":25},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":48,"h":25},"sourceSize":{"w":48,"h":25}},"map-locker-02.img":{"frame":{"x":805,"y":2019,"w":48,"h":25},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":48,"h":25},"sourceSize":{"w":48,"h":25}},"map-locker-03.img":{"frame":{"x":855,"y":2019,"w":48,"h":25},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":48,"h":25},"sourceSize":{"w":48,"h":25}},"map-drawers-res.img":{"frame":{"x":1853,"y":1256,"w":47,"h":29},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":3,"w":47,"h":29},"sourceSize":{"w":48,"h":32}},"map-vending-res.img":{"frame":{"x":333,"y":1768,"w":47,"h":41},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":3,"w":47,"h":41},"sourceSize":{"w":54,"h":47}},"map-barrel-03.img":{"frame":{"x":905,"y":2027,"w":45,"h":18},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":45,"h":18},"sourceSize":{"w":45,"h":18}},"map-barrel-04.img":{"frame":{"x":951,"y":2027,"w":45,"h":18},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":45,"h":18},"sourceSize":{"w":45,"h":18}},"map-bunker-vent-01.img":{"frame":{"x":382,"y":1768,"w":41,"h":42},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":41,"h":42},"sourceSize":{"w":42,"h":42}},"map-fire-ext-01.img":{"frame":{"x":425,"y":1768,"w":42,"h":33},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":42,"h":33},"sourceSize":{"w":42,"h":35}},"map-pot-res-01.img":{"frame":{"x":468,"y":1768,"w":40,"h":40},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":16,"w":40,"h":40},"sourceSize":{"w":72,"h":72}},"map-recorder-03.img":{"frame":{"x":510,"y":1768,"w":24,"h":40},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":24,"h":40},"sourceSize":{"w":24,"h":40}},"map-recorder-04.img":{"frame":{"x":536,"y":1768,"w":24,"h":40},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":24,"h":40},"sourceSize":{"w":24,"h":40}},"map-wall-02-5-rounded.img":{"frame":{"x":1039,"y":971,"w":16,"h":40},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":40},"sourceSize":{"w":16,"h":40}},"map-squash-res-03.img":{"frame":{"x":562,"y":1768,"w":39,"h":38},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":10,"w":39,"h":38},"sourceSize":{"w":72,"h":72}},"map-barrel-res-03.img":{"frame":{"x":998,"y":2019,"w":38,"h":26},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":17,"y":43,"w":38,"h":26},"sourceSize":{"w":72,"h":72}},"map-power-box-01.img":{"frame":{"x":603,"y":1768,"w":36,"h":36},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":36,"h":36},"sourceSize":{"w":36,"h":36}},"map-wall-outhouse-bot.img":{"frame":{"x":1625,"y":1798,"w":36,"h":12},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":36,"h":12},"sourceSize":{"w":36,"h":12}},"map-woodpile-res-01.img":{"frame":{"x":1038,"y":2019,"w":36,"h":26},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":11,"w":36,"h":26},"sourceSize":{"w":48,"h":48}},"map-potato-res.img":{"frame":{"x":641,"y":1768,"w":28,"h":34},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":7,"w":28,"h":34},"sourceSize":{"w":48,"h":48}},"map-bush-res-06.img":{"frame":{"x":671,"y":1768,"w":33,"h":33},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":20,"y":20,"w":33,"h":33},"sourceSize":{"w":72,"h":72}},"map-wall-02-rounded.img":{"frame":{"x":2001,"y":921,"w":16,"h":32},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":32},"sourceSize":{"w":16,"h":32}},"map-wall-02.img":{"frame":{"x":705,"y":1768,"w":16,"h":32},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":32},"sourceSize":{"w":16,"h":32}},"map-decal-oil-05.img":{"frame":{"x":271,"y":2005,"w":17,"h":28},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":2,"w":17,"h":28},"sourceSize":{"w":32,"h":32}},"map-fire-ext-res.img":{"frame":{"x":1076,"y":2019,"w":23,"h":28},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":18,"y":4,"w":23,"h":28},"sourceSize":{"w":42,"h":35}},"map-decal-oil-04.img":{"frame":{"x":1101,"y":2019,"w":27,"h":24},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":27,"h":24},"sourceSize":{"w":32,"h":32}},"map-bush-res-01.img":{"frame":{"x":1130,"y":2019,"w":26,"h":24},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":23,"y":24,"w":26,"h":24},"sourceSize":{"w":72,"h":72}},"map-candle-01.img":{"frame":{"x":1158,"y":2019,"w":25,"h":25},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":25,"h":25},"sourceSize":{"w":26,"h":26}},"map-bush-res-04.img":{"frame":{"x":1185,"y":2019,"w":24,"h":23},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":24,"h":23},"sourceSize":{"w":27,"h":27}},"map-tree-res-01.img":{"frame":{"x":1211,"y":2019,"w":24,"h":24},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":24,"h":24},"sourceSize":{"w":24,"h":24}},"map-building-bank-window-res-01.img":{"frame":{"x":1879,"y":1533,"w":22,"h":22},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":23,"y":28,"w":22,"h":22},"sourceSize":{"w":72,"h":72}},"map-switch-01.img":{"frame":{"x":2010,"y":1250,"w":15,"h":17},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":15,"h":17},"sourceSize":{"w":15,"h":17}},"map-switch-03.img":{"frame":{"x":2010,"y":1269,"w":15,"h":17},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":15,"h":17},"sourceSize":{"w":15,"h":17}},"map-bottle-01.img":{"frame":{"x":1237,"y":2027,"w":16,"h":16},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":16},"sourceSize":{"w":16,"h":16}},"map-bottle-02.img":{"frame":{"x":1255,"y":2027,"w":16,"h":16},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":16},"sourceSize":{"w":16,"h":16}},"map-bottle-03.img":{"frame":{"x":1273,"y":2027,"w":16,"h":16},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":16},"sourceSize":{"w":16,"h":16}},"map-bottle-04.img":{"frame":{"x":1291,"y":2027,"w":16,"h":16},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":16},"sourceSize":{"w":16,"h":16}},"map-bottle-05.img":{"frame":{"x":1309,"y":2027,"w":16,"h":16},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":16},"sourceSize":{"w":16,"h":16}},"map-switch-02.img":{"frame":{"x":1327,"y":2027,"w":15,"h":16},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":15,"h":16},"sourceSize":{"w":15,"h":17}},"map-wall-01-rounded.img":{"frame":{"x":1344,"y":2027,"w":16,"h":16},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":16},"sourceSize":{"w":16,"h":16}}}},{"meta":{"image":"assets/shared-1-50-19d04fae.png","size":{"w":2048,"h":2048},"scale":0.5},"frames":{"map-building-bathhouse-basement-01b.img":{"frame":{"x":1,"y":1,"w":652,"h":459},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":652,"h":459},"sourceSize":{"w":652,"h":460}},"map-bunker-storm-chamber-floor-01a.img":{"frame":{"x":1,"y":462,"w":634,"h":348},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":0,"w":634,"h":348},"sourceSize":{"w":640,"h":352}},"map-building-cabin-floor.img":{"frame":{"x":1,"y":812,"w":608,"h":496},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":608,"h":496},"sourceSize":{"w":608,"h":496}},"map-building-bathhouse-sideroom-02.img":{"frame":{"x":1,"y":1310,"w":555,"h":364},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":555,"h":364},"sourceSize":{"w":556,"h":365}},"map-building-bridge-lg-ceiling.img":{"frame":{"x":1,"y":1676,"w":544,"h":272},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":8,"w":544,"h":272},"sourceSize":{"w":544,"h":288}},"map-building-bridge-lg-floor.img":{"frame":{"x":547,"y":1676,"w":506,"h":352},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":506,"h":352},"sourceSize":{"w":506,"h":354}},"map-building-warehouse-floor-01.img":{"frame":{"x":611,"y":812,"w":500,"h":400},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":500,"h":400},"sourceSize":{"w":500,"h":400}},"map-building-house-floor-01.img":{"frame":{"x":611,"y":1214,"w":480,"h":432},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":480,"h":432},"sourceSize":{"w":480,"h":432}},"map-building-house-floor-02.img":{"frame":{"x":655,"y":1,"w":480,"h":432},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":480,"h":432},"sourceSize":{"w":480,"h":432}},"map-bunker-conch-compartment-floor-01a.img":{"frame":{"x":1093,"y":1214,"w":471,"h":440},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":25,"y":0,"w":471,"h":440},"sourceSize":{"w":496,"h":440}},"map-building-teahouse-ceiling-01.img":{"frame":{"x":1566,"y":1,"w":467,"h":304},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":8,"w":467,"h":304},"sourceSize":{"w":480,"h":320}},"map-building-cabin-ceiling-01a.img":{"frame":{"x":1566,"y":307,"w":456,"h":288},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":456,"h":288},"sourceSize":{"w":456,"h":288}},"map-building-mansion-ceiling.img":{"frame":{"x":1566,"y":597,"w":456,"h":400},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":16,"w":456,"h":400},"sourceSize":{"w":512,"h":432}},"map-building-bridge-md-floor.img":{"frame":{"x":1113,"y":435,"w":448,"h":184},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":448,"h":184},"sourceSize":{"w":448,"h":184}},"map-building-teahouse-floor-01.img":{"frame":{"x":1113,"y":621,"w":448,"h":288},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":448,"h":288},"sourceSize":{"w":448,"h":288}},"map-building-bank-ceiling-02.img":{"frame":{"x":1566,"y":999,"w":278,"h":444},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":25,"w":278,"h":444},"sourceSize":{"w":278,"h":470}},"map-building-warehouse-floor-02.img":{"frame":{"x":1566,"y":1445,"w":440,"h":400},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":440,"h":400},"sourceSize":{"w":440,"h":400}},"map-building-bank-floor-02.img":{"frame":{"x":1113,"y":911,"w":432,"h":224},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":432,"h":224},"sourceSize":{"w":544,"h":224}},"map-building-warehouse-ceiling-01.img":{"frame":{"x":1137,"y":1,"w":416,"h":216},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":416,"h":216},"sourceSize":{"w":416,"h":216}},"map-building-barn-ceiling-01.img":{"frame":{"x":1137,"y":219,"w":400,"h":208},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":400,"h":208},"sourceSize":{"w":400,"h":208}},"map-building-club-floor-01g.img":{"frame":{"x":655,"y":435,"w":400,"h":289},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":400,"h":289},"sourceSize":{"w":401,"h":289}},"map-building-mansion-floor-01a.img":{"frame":{"x":1055,"y":1847,"w":400,"h":159},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":3,"w":400,"h":159},"sourceSize":{"w":400,"h":162}},"map-bunker-storm-chamber-ceiling-01.img":{"frame":{"x":1055,"y":1656,"w":296,"h":152},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":56,"w":296,"h":152},"sourceSize":{"w":296,"h":208}},"map-building-bathhouse-basement-01c.img":{"frame":{"x":1457,"y":1847,"w":283,"h":172},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":283,"h":172},"sourceSize":{"w":284,"h":174}},"map-building-bathhouse-sideroom-ceiling-02.img":{"frame":{"x":1741,"y":1847,"w":256,"h":168},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":256,"h":168},"sourceSize":{"w":256,"h":168}},"map-bunker-conch-chamber-ceiling-02.img":{"frame":{"x":1,"y":1950,"w":244,"h":88},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":244,"h":88},"sourceSize":{"w":244,"h":88}},"map-building-club-floor-01e.img":{"frame":{"x":1846,"y":999,"w":177,"h":241},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":177,"h":241},"sourceSize":{"w":177,"h":241}},"map-building-shack-ceiling-03.img":{"frame":{"x":1353,"y":1656,"w":204,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":0,"w":204,"h":144},"sourceSize":{"w":216,"h":168}},"map-building-hut-ceiling-01.img":{"frame":{"x":1846,"y":1242,"w":190,"h":197},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":8,"w":190,"h":197},"sourceSize":{"w":204,"h":204}},"map-woodpile-02.img":{"frame":{"x":247,"y":1950,"w":192,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":192,"h":96},"sourceSize":{"w":192,"h":96}},"map-building-mansion-cellar-01c.img":{"frame":{"x":1113,"y":1137,"w":177,"h":65},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":177,"h":65},"sourceSize":{"w":177,"h":65}},"map-building-barn-ceiling-02.img":{"frame":{"x":1292,"y":1137,"w":156,"h":54},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":156,"h":54},"sourceSize":{"w":156,"h":54}},"map-wheel-01.img":{"frame":{"x":637,"y":726,"w":156,"h":78},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":156,"h":78},"sourceSize":{"w":156,"h":78}},"map-wheel-03.img":{"frame":{"x":795,"y":726,"w":156,"h":75},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":156,"h":75},"sourceSize":{"w":156,"h":78}},"map-wheel-02.img":{"frame":{"x":953,"y":726,"w":149,"h":75},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":0,"w":149,"h":75},"sourceSize":{"w":156,"h":78}},"map-door-02.img":{"frame":{"x":1999,"y":1847,"w":40,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":40,"h":112},"sourceSize":{"w":40,"h":112}},"map-wall-07-rounded.img":{"frame":{"x":637,"y":462,"w":16,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":112},"sourceSize":{"w":16,"h":112}},"map-wall-07.img":{"frame":{"x":637,"y":576,"w":16,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":112},"sourceSize":{"w":16,"h":112}},"map-bed-01.img":{"frame":{"x":558,"y":1310,"w":48,"h":108},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":48,"h":108},"sourceSize":{"w":48,"h":108}},"map-stove-01.img":{"frame":{"x":441,"y":1950,"w":104,"h":81},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":104,"h":81},"sourceSize":{"w":112,"h":88}},"map-building-club-floor-01f.img":{"frame":{"x":1450,"y":1137,"w":97,"h":65},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":97,"h":65},"sourceSize":{"w":97,"h":65}},"map-pipes-05.img":{"frame":{"x":558,"y":1420,"w":45,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":45,"h":96},"sourceSize":{"w":45,"h":96}},"map-wall-06.img":{"frame":{"x":1547,"y":911,"w":16,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":96},"sourceSize":{"w":16,"h":96}},"map-wall-04-cobalt.img":{"frame":{"x":2025,"y":307,"w":20,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":20,"h":80},"sourceSize":{"w":20,"h":80}},"map-wall-04-stone.img":{"frame":{"x":2025,"y":389,"w":20,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":20,"h":80},"sourceSize":{"w":20,"h":80}},"map-wall-05-rounded.img":{"frame":{"x":1547,"y":1009,"w":16,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":80},"sourceSize":{"w":16,"h":80}},"map-wall-05.img":{"frame":{"x":1999,"y":1961,"w":16,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":80},"sourceSize":{"w":16,"h":80}},"map-bed-res-01.img":{"frame":{"x":558,"y":1518,"w":45,"h":79},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":8,"w":45,"h":79},"sourceSize":{"w":48,"h":96}},"map-bed-res-02.img":{"frame":{"x":1057,"y":435,"w":45,"h":79},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":8,"w":45,"h":79},"sourceSize":{"w":48,"h":96}},"map-door-04.img":{"frame":{"x":2017,"y":1961,"w":27,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":27,"h":64},"sourceSize":{"w":27,"h":64}},"map-wall-04-rounded.img":{"frame":{"x":2025,"y":471,"w":16,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":64},"sourceSize":{"w":16,"h":64}},"map-wall-04.img":{"frame":{"x":2025,"y":537,"w":16,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":64},"sourceSize":{"w":16,"h":64}},"map-toilet-01.img":{"frame":{"x":558,"y":1599,"w":48,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":1,"w":48,"h":62},"sourceSize":{"w":64,"h":64}},"map-toilet-02.img":{"frame":{"x":1057,"y":516,"w":48,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":1,"w":48,"h":62},"sourceSize":{"w":64,"h":64}},"map-decal-oil-01.img":{"frame":{"x":1057,"y":580,"w":43,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":2,"w":43,"h":61},"sourceSize":{"w":64,"h":64}},"map-vat-res.img":{"frame":{"x":1057,"y":643,"w":54,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":6,"w":54,"h":61},"sourceSize":{"w":72,"h":72}},"map-door-03.img":{"frame":{"x":2025,"y":603,"w":16,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":56},"sourceSize":{"w":16,"h":56}},"map-building-bank-window-01.img":{"frame":{"x":2008,"y":1441,"w":28,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":28,"h":52},"sourceSize":{"w":28,"h":52}},"map-building-house-window-01.img":{"frame":{"x":2025,"y":661,"w":16,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":52},"sourceSize":{"w":16,"h":52}},"map-building-house-window-res-01.img":{"frame":{"x":2025,"y":715,"w":16,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":52},"sourceSize":{"w":16,"h":52}},"map-toilet-03.img":{"frame":{"x":2008,"y":1495,"w":33,"h":49},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":1,"w":33,"h":49},"sourceSize":{"w":50,"h":50}},"map-toilet-04.img":{"frame":{"x":2008,"y":1546,"w":33,"h":49},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":1,"w":33,"h":49},"sourceSize":{"w":50,"h":50}},"map-recorder-01.img":{"frame":{"x":2008,"y":1597,"w":32,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":48},"sourceSize":{"w":32,"h":48}},"map-recorder-02.img":{"frame":{"x":2008,"y":1647,"w":32,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":48},"sourceSize":{"w":32,"h":48}},"map-wall-03-rounded.img":{"frame":{"x":2025,"y":769,"w":16,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":48},"sourceSize":{"w":16,"h":48}},"map-wall-03.img":{"frame":{"x":2025,"y":819,"w":16,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":48},"sourceSize":{"w":16,"h":48}},"map-decal-oil-06.img":{"frame":{"x":1353,"y":1802,"w":47,"h":43},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":11,"w":47,"h":43},"sourceSize":{"w":64,"h":64}},"map-saloon-bar-02.img":{"frame":{"x":2008,"y":1697,"w":27,"h":46},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":27,"h":46},"sourceSize":{"w":27,"h":46}},"map-couch-res-01.img":{"frame":{"x":1402,"y":1802,"w":40,"h":43},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":3,"w":40,"h":43},"sourceSize":{"w":48,"h":48}},"map-column-01.img":{"frame":{"x":1055,"y":1810,"w":32,"h":32},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":32},"sourceSize":{"w":32,"h":32}},"map-bathhouse-pool-01.img":{"frame":{"x":1741,"y":2017,"w":18,"h":30},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":18,"h":30},"sourceSize":{"w":18,"h":30}},"map-bush-res-02.img":{"frame":{"x":1761,"y":2017,"w":30,"h":30},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":21,"y":23,"w":30,"h":30},"sourceSize":{"w":72,"h":72}}}},{"meta":{"image":"assets/shared-2-50-b66278a0.png","size":{"w":2048,"h":2048},"scale":0.5},"frames":{"map-building-mansion-cellar-01a.img":{"frame":{"x":1,"y":1,"w":433,"h":401},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":433,"h":401},"sourceSize":{"w":433,"h":401}},"map-building-club-ceiling-01a.img":{"frame":{"x":436,"y":1,"w":369,"h":297},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":369,"h":297},"sourceSize":{"w":369,"h":297}},"map-bunker-egg-chamber-floor-01a.img":{"frame":{"x":436,"y":300,"w":364,"h":350},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":0,"w":364,"h":350},"sourceSize":{"w":369,"h":353}},"map-building-house-ceiling.img":{"frame":{"x":1,"y":651,"w":360,"h":324},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":360,"h":324},"sourceSize":{"w":360,"h":324}},"map-building-warehouse-ceiling-02.img":{"frame":{"x":1,"y":404,"w":360,"h":216},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":360,"h":216},"sourceSize":{"w":360,"h":216}},"map-building-barn-basement-floor-01.img":{"frame":{"x":363,"y":651,"w":331,"h":234},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":331,"h":234},"sourceSize":{"w":332,"h":236}},"map-building-police-floor-02.img":{"frame":{"x":696,"y":651,"w":305,"h":320},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":33,"w":305,"h":320},"sourceSize":{"w":305,"h":785}},"map-building-shack-floor-03.img":{"frame":{"x":363,"y":887,"w":284,"h":204},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":0,"w":284,"h":204},"sourceSize":{"w":288,"h":224}},"map-bunker-conch-compartment-ceiling-01.img":{"frame":{"x":801,"y":300,"w":244,"h":280},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":244,"h":280},"sourceSize":{"w":244,"h":280}},"map-building-bank-ceiling-01.img":{"frame":{"x":806,"y":1,"w":252,"h":276},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":24,"w":252,"h":276},"sourceSize":{"w":253,"h":300}},"map-building-bathhouse-sideroom-01.img":{"frame":{"x":1,"y":977,"w":268,"h":268},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":268,"h":268},"sourceSize":{"w":268,"h":268}},"map-tree-08.img":{"frame":{"x":1,"y":1247,"w":256,"h":255},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":256,"h":255},"sourceSize":{"w":256,"h":256}},"map-tree-08su.img":{"frame":{"x":1,"y":1504,"w":256,"h":255},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":256,"h":255},"sourceSize":{"w":256,"h":256}},"map-building-police-ceiling-03.img":{"frame":{"x":1,"y":1761,"w":252,"h":240},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":252,"h":240},"sourceSize":{"w":252,"h":240}},"map-silo-01.img":{"frame":{"x":255,"y":1761,"w":252,"h":252},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":252,"h":252},"sourceSize":{"w":256,"h":256}},"map-building-barn-basement-floor-02.img":{"frame":{"x":259,"y":1247,"w":187,"h":234},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":187,"h":234},"sourceSize":{"w":188,"h":236}},"map-building-hut-floor-01.img":{"frame":{"x":259,"y":1483,"w":224,"h":224},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":16,"w":224,"h":224},"sourceSize":{"w":256,"h":256}},"map-building-club-ceiling-01c.img":{"frame":{"x":448,"y":1093,"w":200,"h":217},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":200,"h":217},"sourceSize":{"w":201,"h":217}},"map-bunker-conch-compartment-floor-01b.img":{"frame":{"x":485,"y":1312,"w":200,"h":215},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":200,"h":215},"sourceSize":{"w":200,"h":224}},"map-building-hut-ceiling-02.img":{"frame":{"x":485,"y":1529,"w":190,"h":197},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":8,"w":190,"h":197},"sourceSize":{"w":204,"h":204}},"map-building-hut-ceiling-03.img":{"frame":{"x":509,"y":1727,"w":190,"h":197},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":8,"w":190,"h":197},"sourceSize":{"w":204,"h":204}},"map-building-panicroom-ceiling.img":{"frame":{"x":677,"y":1529,"w":144,"h":192},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":192},"sourceSize":{"w":144,"h":192}},"map-building-panicroom-floor.img":{"frame":{"x":701,"y":1723,"w":144,"h":192},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":192},"sourceSize":{"w":144,"h":192}},"map-building-shack-floor-01.img":{"frame":{"x":650,"y":973,"w":191,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":10,"w":191,"h":160},"sourceSize":{"w":210,"h":170}},"map-building-container-ceiling-02.img":{"frame":{"x":271,"y":977,"w":90,"h":190},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":90,"h":190},"sourceSize":{"w":90,"h":268}},"map-building-container-ceiling-03.img":{"frame":{"x":687,"y":1135,"w":90,"h":190},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":90,"h":190},"sourceSize":{"w":90,"h":268}},"map-building-container-ceiling-05.img":{"frame":{"x":687,"y":1327,"w":90,"h":190},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":90,"h":190},"sourceSize":{"w":90,"h":268}},"map-building-container-open-ceiling-01.img":{"frame":{"x":779,"y":1135,"w":90,"h":190},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":78,"w":90,"h":190},"sourceSize":{"w":90,"h":346}},"map-bunker-conch-ceiling-01.img":{"frame":{"x":509,"y":1926,"w":190,"h":90},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":190,"h":90},"sourceSize":{"w":190,"h":90}},"map-bunker-storm-floor-02.img":{"frame":{"x":779,"y":1327,"w":160,"h":190},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":190},"sourceSize":{"w":160,"h":192}},"map-building-bank-ceiling-03.img":{"frame":{"x":823,"y":1519,"w":108,"h":180},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":96,"w":108,"h":180},"sourceSize":{"w":108,"h":276}},"map-building-saferoom-ceiling.img":{"frame":{"x":701,"y":1917,"w":176,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":176,"h":112},"sourceSize":{"w":176,"h":112}},"map-building-saferoom-floor.img":{"frame":{"x":843,"y":973,"w":176,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":176,"h":112},"sourceSize":{"w":176,"h":112}},"map-building-vault-ceiling.img":{"frame":{"x":847,"y":1701,"w":161,"h":169},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":161,"h":169},"sourceSize":{"w":217,"h":169}},"map-building-club-floor-01d.img":{"frame":{"x":879,"y":1872,"w":161,"h":97},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":161,"h":97},"sourceSize":{"w":161,"h":97}},"map-building-club-floor-01h.img":{"frame":{"x":933,"y":1519,"w":161,"h":145},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":161,"h":145},"sourceSize":{"w":161,"h":145}},"map-building-shack-floor-02.img":{"frame":{"x":1009,"y":1666,"w":160,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":160},"sourceSize":{"w":160,"h":160}},"map-bunker-egg-chamber-ceiling-01.img":{"frame":{"x":1042,"y":1828,"w":160,"h":152},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":72,"w":160,"h":152},"sourceSize":{"w":160,"h":224}},"map-building-shack-ceiling-01.img":{"frame":{"x":871,"y":1087,"w":158,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":158,"h":104},"sourceSize":{"w":158,"h":128}},"map-building-outhouse-floor.img":{"frame":{"x":941,"y":1193,"w":121,"h":154},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":40,"y":2,"w":121,"h":154},"sourceSize":{"w":200,"h":158}},"map-shack-res-01.img":{"frame":{"x":941,"y":1349,"w":153,"h":91},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":30,"y":25,"w":153,"h":91},"sourceSize":{"w":210,"h":170}},"map-building-barn-basement-ceiling-01.img":{"frame":{"x":1095,"y":1441,"w":152,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":8,"w":152,"h":96},"sourceSize":{"w":152,"h":104}},"map-bunker-generic-floor-01.img":{"frame":{"x":1171,"y":1539,"w":148,"h":141},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":0,"w":148,"h":141},"sourceSize":{"w":160,"h":144}},"map-bunker-generic-floor-02.img":{"frame":{"x":1171,"y":1682,"w":148,"h":141},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":0,"w":148,"h":141},"sourceSize":{"w":160,"h":144}},"map-building-bathhouse-basement-01a.img":{"frame":{"x":1204,"y":1824,"w":113,"h":145},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":113,"h":145},"sourceSize":{"w":113,"h":145}},"map-stone-res-06.img":{"frame":{"x":879,"y":1982,"w":144,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":64},"sourceSize":{"w":144,"h":64}},"map-table-02.img":{"frame":{"x":1319,"y":1824,"w":144,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":80},"sourceSize":{"w":144,"h":80}},"map-building-teahouse-res-01.img":{"frame":{"x":1319,"y":1906,"w":141,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":58,"y":76,"w":141,"h":104},"sourceSize":{"w":256,"h":256}},"map-stone-03.img":{"frame":{"x":1462,"y":1906,"w":138,"h":137},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":138,"h":137},"sourceSize":{"w":145,"h":145}},"map-stone-03tr.img":{"frame":{"x":1003,"y":582,"w":137,"h":136},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":137,"h":136},"sourceSize":{"w":137,"h":136}},"map-building-outhouse-ceiling.img":{"frame":{"x":1003,"y":719,"w":136,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":32,"y":0,"w":136,"h":112},"sourceSize":{"w":200,"h":158}},"map-building-bathhouse-basement-01d.img":{"frame":{"x":1003,"y":833,"w":129,"h":97},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":129,"h":97},"sourceSize":{"w":129,"h":97}},"map-building-bathhouse-sideroom-ceiling-01.img":{"frame":{"x":1021,"y":932,"w":128,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":112},"sourceSize":{"w":128,"h":112}},"map-sandbags-01.img":{"frame":{"x":271,"y":1169,"w":128,"h":73},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":128,"h":73},"sourceSize":{"w":128,"h":74}},"map-tree-07.img":{"frame":{"x":1031,"y":1046,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"map-tree-03.img":{"frame":{"x":1064,"y":1176,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"map-tree-07su.img":{"frame":{"x":1096,"y":1306,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"map-building-club-ceiling-01b.img":{"frame":{"x":1141,"y":719,"w":89,"h":121},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":89,"h":121},"sourceSize":{"w":89,"h":121}},"map-building-shack-ceiling-02.img":{"frame":{"x":1151,"y":842,"w":120,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":120,"h":96},"sourceSize":{"w":120,"h":120}},"map-hut-res-01.img":{"frame":{"x":1161,"y":940,"w":118,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":65,"y":68,"w":118,"h":118},"sourceSize":{"w":256,"h":256}},"map-pipes-02.img":{"frame":{"x":1161,"y":1060,"w":118,"h":86},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":118,"h":86},"sourceSize":{"w":119,"h":86}},"map-chute-01.img":{"frame":{"x":1194,"y":1148,"w":116,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":6,"w":116,"h":116},"sourceSize":{"w":128,"h":128}},"map-building-mansion-cellar-01b.img":{"frame":{"x":1226,"y":1266,"w":113,"h":115},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":113,"h":115},"sourceSize":{"w":113,"h":115}},"map-bunker-generic-ceiling-01.img":{"frame":{"x":1249,"y":1383,"w":97,"h":115},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":32,"y":0,"w":97,"h":115},"sourceSize":{"w":160,"h":144}},"map-bunker-generic-ceiling-02.img":{"frame":{"x":1047,"y":279,"w":80,"h":115},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":115},"sourceSize":{"w":80,"h":115}},"map-bunker-generic-floor-03.img":{"frame":{"x":1047,"y":396,"w":80,"h":115},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":115},"sourceSize":{"w":80,"h":115}},"map-building-mansion-floor-01c.img":{"frame":{"x":1060,"y":1,"w":113,"h":114},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":113,"h":114},"sourceSize":{"w":113,"h":114}},"map-building-club-floor-01a.img":{"frame":{"x":1060,"y":117,"w":113,"h":113},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":113,"h":113},"sourceSize":{"w":113,"h":113}},"map-shack-res-02.img":{"frame":{"x":1321,"y":1500,"w":110,"h":88},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":50,"y":35,"w":110,"h":88},"sourceSize":{"w":210,"h":170}},"map-shack-res-03.img":{"frame":{"x":1321,"y":1590,"w":110,"h":88},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":50,"y":35,"w":110,"h":88},"sourceSize":{"w":210,"h":170}},"map-bed-02.img":{"frame":{"x":1321,"y":1680,"w":88,"h":108},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":88,"h":108},"sourceSize":{"w":88,"h":108}},"map-crate-res-03.img":{"frame":{"x":1411,"y":1680,"w":108,"h":77},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":108,"h":77},"sourceSize":{"w":108,"h":78}},"map-stone-res-02.img":{"frame":{"x":1465,"y":1759,"w":100,"h":100},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":100,"h":100},"sourceSize":{"w":100,"h":100}},"map-vat-02.img":{"frame":{"x":1129,"y":232,"w":100,"h":100},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":100,"h":100},"sourceSize":{"w":100,"h":100}},"map-building-club-floor-01b.img":{"frame":{"x":1175,"y":1,"w":97,"h":97},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":97,"h":97},"sourceSize":{"w":97,"h":97}},"map-bunker-egg-chamber-floor-01b.img":{"frame":{"x":1175,"y":100,"w":96,"h":90},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":96,"h":90},"sourceSize":{"w":97,"h":90}},"map-bunker-storm-chamber-floor-01b.img":{"frame":{"x":1129,"y":334,"w":96,"h":89},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":96,"h":89},"sourceSize":{"w":97,"h":89}},"map-control-panel-06.img":{"frame":{"x":259,"y":1709,"w":96,"h":47},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":96,"h":47},"sourceSize":{"w":96,"h":47}},"map-couch-02.img":{"frame":{"x":357,"y":1709,"w":96,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":96,"h":48},"sourceSize":{"w":96,"h":48}},"map-hedgehog-01.img":{"frame":{"x":1129,"y":425,"w":96,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":96,"h":96},"sourceSize":{"w":96,"h":96}},"map-bush-06tr.img":{"frame":{"x":1142,"y":523,"w":93,"h":94},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":93,"h":94},"sourceSize":{"w":93,"h":94}},"map-smoke-res.img":{"frame":{"x":1142,"y":619,"w":85,"h":89},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":24,"y":20,"w":85,"h":89},"sourceSize":{"w":128,"h":128}},"map-building-club-vault-ceiling.img":{"frame":{"x":1229,"y":619,"w":80,"h":88},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":88},"sourceSize":{"w":80,"h":88}},"map-crate-mil-02.img":{"frame":{"x":1047,"y":523,"w":86,"h":45},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":86,"h":45},"sourceSize":{"w":86,"h":45}},"map-crate-mil-03.img":{"frame":{"x":1025,"y":1982,"w":86,"h":45},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":86,"h":45},"sourceSize":{"w":86,"h":45}},"map-crate-mil-04.img":{"frame":{"x":1113,"y":1982,"w":86,"h":45},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":86,"h":45},"sourceSize":{"w":86,"h":45}},"map-crate-mil-05.img":{"frame":{"x":1201,"y":1982,"w":86,"h":45},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":86,"h":45},"sourceSize":{"w":86,"h":45}},"map-crate-04.img":{"frame":{"x":1231,"y":709,"w":82,"h":82},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":82,"h":82},"sourceSize":{"w":82,"h":82}},"map-crate-06.img":{"frame":{"x":363,"y":1093,"w":82,"h":50},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":82,"h":50},"sourceSize":{"w":82,"h":50}},"map-building-dock-floor-01a.img":{"frame":{"x":1273,"y":793,"w":80,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":80,"h":80},"sourceSize":{"w":80,"h":81}},"map-airdrop-01.img":{"frame":{"x":1227,"y":334,"w":80,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":80},"sourceSize":{"w":80,"h":80}},"map-airdrop-02.img":{"frame":{"x":1227,"y":416,"w":80,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":80},"sourceSize":{"w":80,"h":80}},"map-drawers-01.img":{"frame":{"x":1273,"y":875,"w":80,"h":45},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":45},"sourceSize":{"w":80,"h":45}},"map-drawers-02.img":{"frame":{"x":801,"y":582,"w":80,"h":45},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":45},"sourceSize":{"w":80,"h":45}},"map-squash-02.img":{"frame":{"x":1237,"y":498,"w":80,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":80},"sourceSize":{"w":80,"h":80}},"map-stairs-broken-01.img":{"frame":{"x":883,"y":582,"w":80,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":64},"sourceSize":{"w":80,"h":64}},"map-table-01.img":{"frame":{"x":941,"y":1441,"w":80,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":64},"sourceSize":{"w":80,"h":64}},"map-table-03.img":{"frame":{"x":1311,"y":580,"w":80,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":80},"sourceSize":{"w":80,"h":80}},"map-case-chrys-01.img":{"frame":{"x":1315,"y":662,"w":78,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":78,"h":60},"sourceSize":{"w":78,"h":60}},"map-case-ring-01.img":{"frame":{"x":1315,"y":724,"w":78,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":78,"h":60},"sourceSize":{"w":78,"h":60}},"map-crate-14.img":{"frame":{"x":1231,"y":191,"w":78,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":78,"h":72},"sourceSize":{"w":78,"h":72}},"map-crate-14a.img":{"frame":{"x":1273,"y":100,"w":78,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":78,"h":72},"sourceSize":{"w":78,"h":72}},"map-outhouse-res.img":{"frame":{"x":1231,"y":265,"w":75,"h":66},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":63,"y":21,"w":75,"h":66},"sourceSize":{"w":200,"h":156}},"map-case-basement-01.img":{"frame":{"x":1095,"y":1539,"w":74,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":74,"h":56},"sourceSize":{"w":74,"h":56}},"map-crate-10.img":{"frame":{"x":1274,"y":1,"w":74,"h":74},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":74,"h":74},"sourceSize":{"w":74,"h":74}},"map-crate-11.img":{"frame":{"x":1350,"y":1,"w":74,"h":74},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":74,"h":74},"sourceSize":{"w":74,"h":74}},"map-sandbags-02.img":{"frame":{"x":1023,"y":1441,"w":57,"h":73},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":1,"w":57,"h":73},"sourceSize":{"w":74,"h":74}},"map-case-deagle-01.img":{"frame":{"x":1095,"y":1597,"w":72,"h":54},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":54},"sourceSize":{"w":72,"h":54}},"map-case-deagle-02.img":{"frame":{"x":1308,"y":265,"w":72,"h":54},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":54},"sourceSize":{"w":72,"h":54}},"map-control-panel-01.img":{"frame":{"x":1311,"y":174,"w":72,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":55},"sourceSize":{"w":72,"h":55}},"map-control-panel-02.img":{"frame":{"x":1353,"y":77,"w":72,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":55},"sourceSize":{"w":72,"h":55}},"map-control-panel-04.img":{"frame":{"x":1426,"y":1,"w":72,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":55},"sourceSize":{"w":72,"h":55}},"map-control-panel-05.img":{"frame":{"x":1309,"y":321,"w":72,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":55},"sourceSize":{"w":72,"h":55}},"map-crate-01.img":{"frame":{"x":1382,"y":231,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":72,"h":72}},"map-crate-02.img":{"frame":{"x":1385,"y":134,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":72,"h":72}},"map-crate-02sv.img":{"frame":{"x":1427,"y":58,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":72,"h":72}},"map-crate-03.img":{"frame":{"x":1309,"y":378,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":72,"h":72}},"map-crate-07.img":{"frame":{"x":1319,"y":452,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":72,"h":72}},"map-crate-08.img":{"frame":{"x":1383,"y":305,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":72,"h":72}},"map-crate-09.img":{"frame":{"x":1456,"y":208,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":72,"h":72}},"map-stone-04.img":{"frame":{"x":1459,"y":132,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":72,"h":72}},"map-stone-05.img":{"frame":{"x":1501,"y":1,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":72,"h":72}},"map-bush-07.img":{"frame":{"x":1383,"y":379,"w":68,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":0,"w":68,"h":72},"sourceSize":{"w":72,"h":72}},"map-barrel-01.img":{"frame":{"x":1393,"y":452,"w":71,"h":71},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":71,"h":71},"sourceSize":{"w":72,"h":72}},"map-barrel-02.img":{"frame":{"x":1453,"y":379,"w":71,"h":71},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":71,"h":71},"sourceSize":{"w":72,"h":72}},"map-stone-01.img":{"frame":{"x":1457,"y":282,"w":71,"h":71},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":71,"h":71},"sourceSize":{"w":72,"h":72}},"map-case-flare-01.img":{"frame":{"x":363,"y":404,"w":70,"h":51},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":70,"h":51},"sourceSize":{"w":70,"h":51}},"map-case-hatchet-01.img":{"frame":{"x":363,"y":457,"w":70,"h":51},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":70,"h":51},"sourceSize":{"w":70,"h":51}},"map-chest-01.img":{"frame":{"x":363,"y":510,"w":70,"h":51},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":70,"h":51},"sourceSize":{"w":70,"h":51}},"map-chest-02.img":{"frame":{"x":363,"y":563,"w":70,"h":51},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":70,"h":51},"sourceSize":{"w":70,"h":51}},"map-chest-03.img":{"frame":{"x":1319,"y":526,"w":70,"h":51},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":70,"h":51},"sourceSize":{"w":70,"h":51}},"map-chest-03tr.img":{"frame":{"x":1391,"y":526,"w":70,"h":51},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":70,"h":51},"sourceSize":{"w":70,"h":51}},"map-crate-res-01.img":{"frame":{"x":1393,"y":579,"w":69,"h":65},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":5,"w":69,"h":65},"sourceSize":{"w":72,"h":72}},"map-bunker-vent-02.img":{"frame":{"x":871,"y":1193,"w":66,"h":67},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":66,"h":67},"sourceSize":{"w":68,"h":68}},"map-bunker-vent-03.img":{"frame":{"x":1281,"y":922,"w":66,"h":67},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":66,"h":67},"sourceSize":{"w":68,"h":68}},"map-table-res.img":{"frame":{"x":1281,"y":991,"w":66,"h":66},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":3,"w":66,"h":66},"sourceSize":{"w":72,"h":72}},"map-barrel-res-02.img":{"frame":{"x":871,"y":1262,"w":65,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":3,"w":65,"h":64},"sourceSize":{"w":72,"h":72}},"map-bush-07x.img":{"frame":{"x":1281,"y":1059,"w":63,"h":65},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":63,"h":65},"sourceSize":{"w":72,"h":72}},"map-bathhouse-column-01.img":{"frame":{"x":1312,"y":1126,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"map-building-teahouse-floor-02.img":{"frame":{"x":1,"y":2003,"w":64,"h":44},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":44},"sourceSize":{"w":64,"h":44}},"map-case-flare-res-01.img":{"frame":{"x":1346,"y":1059,"w":64,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":5,"w":64,"h":58},"sourceSize":{"w":72,"h":72}},"map-case-hatchet-res-01.img":{"frame":{"x":1348,"y":991,"w":64,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":5,"w":64,"h":58},"sourceSize":{"w":72,"h":72}},"map-vat-01.img":{"frame":{"x":1349,"y":922,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":64,"h":64},"sourceSize":{"w":72,"h":72}},"map-crate-05.img":{"frame":{"x":1312,"y":1192,"w":62,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":62,"h":62},"sourceSize":{"w":62,"h":62}},"map-squash-03.img":{"frame":{"x":1340,"y":1256,"w":61,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":6,"w":61,"h":61},"sourceSize":{"w":72,"h":72}},"map-chimney-01.img":{"frame":{"x":1376,"y":1192,"w":60,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":60,"h":59},"sourceSize":{"w":60,"h":60}},"map-decal-initiative.img":{"frame":{"x":1340,"y":1318,"w":60,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":60,"h":60},"sourceSize":{"w":64,"h":64}},"map-grill-01.img":{"frame":{"x":1463,"y":525,"w":60,"h":51},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":7,"w":60,"h":51},"sourceSize":{"w":64,"h":64}},"map-stone-res-01.img":{"frame":{"x":1378,"y":1118,"w":59,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":59,"h":59},"sourceSize":{"w":60,"h":60}},"map-stone-res-04.img":{"frame":{"x":1412,"y":1050,"w":58,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":58,"h":58},"sourceSize":{"w":60,"h":60}},"map-bollard-01.img":{"frame":{"x":1501,"y":75,"w":56,"h":54},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":9,"w":56,"h":54},"sourceSize":{"w":72,"h":72}},"map-tree-04.img":{"frame":{"x":1414,"y":988,"w":56,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":56,"h":56},"sourceSize":{"w":56,"h":56}},"map-tree-09.img":{"frame":{"x":1466,"y":452,"w":56,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":56,"h":56},"sourceSize":{"w":56,"h":56}},"map-crate-20.img":{"frame":{"x":1524,"y":452,"w":54,"h":54},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":54,"h":54},"sourceSize":{"w":54,"h":54}},"map-oven-01.img":{"frame":{"x":1526,"y":355,"w":54,"h":47},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":54,"h":47},"sourceSize":{"w":54,"h":47}},"map-refrigerator-01.img":{"frame":{"x":1348,"y":1380,"w":54,"h":47},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":54,"h":47},"sourceSize":{"w":54,"h":47}},"map-toilet-res-01.img":{"frame":{"x":1411,"y":1759,"w":49,"h":54},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":4,"w":49,"h":54},"sourceSize":{"w":64,"h":64}},"map-vending-soda-01.img":{"frame":{"x":1402,"y":1318,"w":54,"h":47},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":54,"h":47},"sourceSize":{"w":54,"h":47}},"map-decal-club-01.img":{"frame":{"x":1403,"y":1253,"w":50,"h":53},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":58,"w":50,"h":53},"sourceSize":{"w":52,"h":180}},"map-stove-02.img":{"frame":{"x":1348,"y":1429,"w":49,"h":53},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":49,"h":53},"sourceSize":{"w":56,"h":56}},"map-decal-oil-02.img":{"frame":{"x":649,"y":887,"w":45,"h":50},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":7,"w":45,"h":50},"sourceSize":{"w":64,"h":64}},"map-bathrocks-01.img":{"frame":{"x":1399,"y":1429,"w":48,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":48,"h":48},"sourceSize":{"w":48,"h":48}},"map-control-panel-03.img":{"frame":{"x":1404,"y":1367,"w":48,"h":47},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":48,"h":47},"sourceSize":{"w":48,"h":47}},"map-couch-03.img":{"frame":{"x":1438,"y":1179,"w":48,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":48,"h":48},"sourceSize":{"w":48,"h":48}},"map-squash-res-02.img":{"frame":{"x":1439,"y":1110,"w":48,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":48,"h":48},"sourceSize":{"w":80,"h":80}},"map-tree-res-02.img":{"frame":{"x":1472,"y":1046,"w":48,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":48,"h":48},"sourceSize":{"w":48,"h":48}},"map-woodpile-01.img":{"frame":{"x":1455,"y":1229,"w":48,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":48,"h":48},"sourceSize":{"w":48,"h":48}},"map-pot-01.img":{"frame":{"x":1488,"y":1160,"w":47,"h":47},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":47,"h":47},"sourceSize":{"w":48,"h":48}},"map-pot-02.img":{"frame":{"x":1489,"y":1096,"w":47,"h":47},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":47,"h":47},"sourceSize":{"w":48,"h":48}},"map-pot-03.img":{"frame":{"x":1355,"y":786,"w":47,"h":47},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":47,"h":47},"sourceSize":{"w":48,"h":48}},"map-pot-04.img":{"frame":{"x":1355,"y":835,"w":47,"h":47},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":47,"h":47},"sourceSize":{"w":48,"h":48}},"map-pot-05.img":{"frame":{"x":1395,"y":646,"w":47,"h":47},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":47,"h":47},"sourceSize":{"w":48,"h":48}},"map-toilet-res-02.img":{"frame":{"x":1231,"y":793,"w":40,"h":47},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":9,"w":40,"h":47},"sourceSize":{"w":64,"h":64}},"map-decal-oil-03.img":{"frame":{"x":401,"y":1145,"w":44,"h":46},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":9,"w":44,"h":46},"sourceSize":{"w":64,"h":64}},"map-stand-01.img":{"frame":{"x":1060,"y":232,"w":40,"h":45},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":40,"h":45},"sourceSize":{"w":40,"h":45}}}}],"main":[{"meta":{"image":"assets/main-0-50-4964ede7.png","size":{"w":2048,"h":2048},"scale":0.5},"frames":{"map-bunker-crossing-chamber-floor-01a.img":{"frame":{"x":1,"y":1,"w":914,"h":176},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":914,"h":176},"sourceSize":{"w":915,"h":177}},"map-bunker-hydra-compartment-floor-02.img":{"frame":{"x":1,"y":179,"w":848,"h":724},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":0,"w":848,"h":724},"sourceSize":{"w":852,"h":724}},"map-bunker-crossing-compartment-floor-01.img":{"frame":{"x":917,"y":1,"w":752,"h":464},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":752,"h":464},"sourceSize":{"w":752,"h":464}},"map-bunker-crossing-chamber-ceiling-01.img":{"frame":{"x":851,"y":467,"w":568,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":568,"h":120},"sourceSize":{"w":568,"h":120}},"map-bunker-chrys-chamber-floor-01b.img":{"frame":{"x":1421,"y":467,"w":465,"h":313},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":465,"h":313},"sourceSize":{"w":466,"h":314}},"map-bunker-chrys-compartment-floor-03a.img":{"frame":{"x":851,"y":589,"w":384,"h":432},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":384,"h":432},"sourceSize":{"w":384,"h":432}},"map-bunker-hydra-floor-01.img":{"frame":{"x":1237,"y":782,"w":432,"h":304},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":432,"h":304},"sourceSize":{"w":432,"h":304}},"map-building-greenhouse-floor-01.img":{"frame":{"x":1,"y":905,"w":416,"h":321},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":416,"h":321},"sourceSize":{"w":417,"h":321}},"map-bunker-chrys-compartment-floor-01b.img":{"frame":{"x":419,"y":905,"w":400,"h":386},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":400,"h":386},"sourceSize":{"w":402,"h":402}},"map-bunker-hydra-compartment-ceiling-02.img":{"frame":{"x":821,"y":1023,"w":400,"h":328},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":400,"h":328},"sourceSize":{"w":408,"h":360}},"map-bunker-hydra-chamber-floor-03.img":{"frame":{"x":1671,"y":1,"w":352,"h":399},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":16,"w":352,"h":399},"sourceSize":{"w":352,"h":416}},"map-bunker-chrys-compartment-floor-02a.img":{"frame":{"x":1,"y":1228,"w":384,"h":314},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":384,"h":314},"sourceSize":{"w":386,"h":314}},"map-bunker-hydra-chamber-floor-02.img":{"frame":{"x":1,"y":1544,"w":169,"h":370},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":22,"y":0,"w":169,"h":370},"sourceSize":{"w":196,"h":372}},"map-bunker-hydra-chamber-floor-01b.img":{"frame":{"x":1670,"y":782,"w":353,"h":369},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":353,"h":369},"sourceSize":{"w":353,"h":369}},"map-bunker-crossing-compartment-ceiling-01b.img":{"frame":{"x":387,"y":1293,"w":360,"h":248},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":360,"h":248},"sourceSize":{"w":360,"h":248}},"map-bunker-crossing-chamber-floor-02.img":{"frame":{"x":1,"y":1916,"w":352,"h":127},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":160,"w":352,"h":127},"sourceSize":{"w":368,"h":288}},"map-bunker-crossing-chamber-floor-03.img":{"frame":{"x":1223,"y":1088,"w":352,"h":125},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":162,"w":352,"h":125},"sourceSize":{"w":368,"h":288}},"map-bunker-hydra-compartment-floor-01.img":{"frame":{"x":172,"y":1544,"w":352,"h":320},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":352,"h":320},"sourceSize":{"w":352,"h":320}},"map-bunker-hydra-compartment-floor-03.img":{"frame":{"x":1577,"y":1153,"w":352,"h":254},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":352,"h":254},"sourceSize":{"w":352,"h":256}},"map-bunker-chrys-compartment-floor-01a.img":{"frame":{"x":1931,"y":1153,"w":114,"h":304},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":17,"w":114,"h":304},"sourceSize":{"w":114,"h":322}},"map-bunker-crossing-compartment-floor-02.img":{"frame":{"x":1888,"y":402,"w":159,"h":304},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":159,"h":304},"sourceSize":{"w":160,"h":304}},"map-bunker-crossing-chamber-floor-01b.img":{"frame":{"x":1223,"y":1215,"w":287,"h":97},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":0,"w":287,"h":97},"sourceSize":{"w":305,"h":97}},"map-complex-warehouse-floor-02.img":{"frame":{"x":851,"y":179,"w":30,"h":264},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":30,"h":264},"sourceSize":{"w":30,"h":264}},"map-bunker-chrys-compartment-floor-02b.img":{"frame":{"x":355,"y":1866,"w":256,"h":90},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":0,"w":256,"h":90},"sourceSize":{"w":274,"h":90}},"map-tree-08sp.img":{"frame":{"x":526,"y":1543,"w":256,"h":255},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":256,"h":255},"sourceSize":{"w":256,"h":256}},"map-bunker-chrys-chamber-ceiling-01.img":{"frame":{"x":749,"y":1353,"w":224,"h":136},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":224,"h":136},"sourceSize":{"w":224,"h":136}},"map-bunker-hydra-ceiling-01.img":{"frame":{"x":613,"y":1800,"w":216,"h":152},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":216,"h":152},"sourceSize":{"w":216,"h":152}},"map-building-greenhouse-ceiling-01.img":{"frame":{"x":784,"y":1491,"w":201,"h":157},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":201,"h":157},"sourceSize":{"w":202,"h":158}},"map-bunker-hydra-chamber-ceiling-03.img":{"frame":{"x":975,"y":1353,"w":200,"h":136},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":200,"h":136},"sourceSize":{"w":200,"h":136}},"map-bunker-chrys-compartment-ceiling-01b.img":{"frame":{"x":1237,"y":589,"w":177,"h":184},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":177,"h":184},"sourceSize":{"w":178,"h":186}},"map-bunker-hydra-compartment-ceiling-01.img":{"frame":{"x":1223,"y":1314,"w":160,"h":180},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":180},"sourceSize":{"w":160,"h":180}},"map-bunker-chrys-compartment-ceiling-02b.img":{"frame":{"x":1385,"y":1314,"w":176,"h":129},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":176,"h":129},"sourceSize":{"w":178,"h":130}},"map-bunker-chrys-compartment-ceiling-03b.img":{"frame":{"x":986,"y":1491,"w":176,"h":153},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":176,"h":153},"sourceSize":{"w":178,"h":154}},"map-bunker-hydra-chamber-ceiling-02.img":{"frame":{"x":831,"y":1650,"w":96,"h":175},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":96,"h":175},"sourceSize":{"w":96,"h":175}},"map-bunker-hydra-chamber-ceiling-01.img":{"frame":{"x":831,"y":1827,"w":160,"h":172},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":172},"sourceSize":{"w":216,"h":176}},"map-bunker-crossing-floor-01.img":{"frame":{"x":929,"y":1650,"w":160,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":160},"sourceSize":{"w":160,"h":160}},"map-bunker-hydra-compartment-ceiling-03.img":{"frame":{"x":993,"y":1812,"w":160,"h":135},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":135},"sourceSize":{"w":160,"h":135}},"map-bunker-crossing-compartment-ceiling-01a.img":{"frame":{"x":1091,"y":1646,"w":64,"h":152},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":152},"sourceSize":{"w":64,"h":152}},"map-building-crossing-bathroom-ceiling.img":{"frame":{"x":993,"y":1949,"w":144,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":96},"sourceSize":{"w":144,"h":96}},"map-planter-01.img":{"frame":{"x":1155,"y":1800,"w":72,"h":136},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":136},"sourceSize":{"w":72,"h":136}},"map-planter-02.img":{"frame":{"x":1157,"y":1646,"w":72,"h":136},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":136},"sourceSize":{"w":72,"h":136}},"map-planter-03.img":{"frame":{"x":1164,"y":1496,"w":72,"h":136},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":136},"sourceSize":{"w":72,"h":136}},"map-tree-07sp.img":{"frame":{"x":1229,"y":1784,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"map-bunker-crossing-ceiling-01.img":{"frame":{"x":1229,"y":1914,"w":97,"h":115},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":32,"y":0,"w":97,"h":115},"sourceSize":{"w":160,"h":144}},"map-bunker-chrys-compartment-ceiling-02a.img":{"frame":{"x":172,"y":1866,"w":112,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":112,"h":48},"sourceSize":{"w":112,"h":48}},"map-bunker-chrys-compartment-ceiling-03a.img":{"frame":{"x":1671,"y":402,"w":112,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":112,"h":48},"sourceSize":{"w":112,"h":48}},"map-complex-warehouse-floor-01.img":{"frame":{"x":883,"y":179,"w":30,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":30,"h":112},"sourceSize":{"w":30,"h":112}},"map-complex-warehouse-floor-03.img":{"frame":{"x":883,"y":293,"w":30,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":30,"h":112},"sourceSize":{"w":30,"h":112}},"map-bunker-hydra-floor-04.img":{"frame":{"x":1328,"y":1914,"w":100,"h":100},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":100,"h":100},"sourceSize":{"w":100,"h":100}},"map-bunker-hydra-chamber-floor-01a.img":{"frame":{"x":1231,"y":1634,"w":97,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":97,"h":96},"sourceSize":{"w":97,"h":97}},"map-bunker-crossing-chamber-floor-01c.img":{"frame":{"x":1238,"y":1496,"w":96,"h":97},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":1,"w":96,"h":97},"sourceSize":{"w":115,"h":97}},"map-bunker-chrys-compartment-ceiling-01a.img":{"frame":{"x":1512,"y":1215,"w":56,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":56,"h":96},"sourceSize":{"w":56,"h":96}},"map-bunker-chrys-chamber-floor-01a.img":{"frame":{"x":1139,"y":1949,"w":80,"h":74},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":16,"w":80,"h":74},"sourceSize":{"w":80,"h":90}},"map-planter-res-01.img":{"frame":{"x":1888,"y":708,"w":38,"h":67},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":1,"w":38,"h":67},"sourceSize":{"w":43,"h":68}},"map-planter-04.img":{"frame":{"x":1231,"y":1732,"w":50,"h":50},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":50,"h":50},"sourceSize":{"w":50,"h":50}},"map-planter-05.img":{"frame":{"x":1283,"y":1732,"w":50,"h":50},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":50,"h":50},"sourceSize":{"w":50,"h":50}}}}],"desert":[{"meta":{"image":"assets/desert-0-50-9520c39c.png","size":{"w":2048,"h":2048},"scale":0.5},"frames":{"map-building-saloon-floor-01.img":{"frame":{"x":1,"y":1,"w":656,"h":656},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":656,"h":656},"sourceSize":{"w":656,"h":656}},"map-building-saloon-cellar-01.img":{"frame":{"x":1,"y":659,"w":528,"h":336},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":528,"h":336},"sourceSize":{"w":528,"h":336}},"map-complex-warehouse-floor-05.img":{"frame":{"x":659,"y":1,"w":261,"h":466},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":504,"w":261,"h":466},"sourceSize":{"w":648,"h":1024}},"map-bunker-chrys-chamber-floor-01b.img":{"frame":{"x":531,"y":659,"w":465,"h":313},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":465,"h":313},"sourceSize":{"w":466,"h":314}},"map-bunker-chrys-compartment-floor-03a.img":{"frame":{"x":922,"y":1,"w":384,"h":432},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":384,"h":432},"sourceSize":{"w":384,"h":432}},"map-building-greenhouse-floor-02.img":{"frame":{"x":1308,"y":1,"w":416,"h":321},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":416,"h":321},"sourceSize":{"w":417,"h":321}},"map-bunker-chrys-compartment-floor-01c.img":{"frame":{"x":1308,"y":324,"w":400,"h":386},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":400,"h":386},"sourceSize":{"w":402,"h":402}},"map-bunker-chrys-compartment-floor-02a.img":{"frame":{"x":998,"y":712,"w":384,"h":314},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":384,"h":314},"sourceSize":{"w":386,"h":314}},"map-building-archway-ceiling-01.img":{"frame":{"x":1710,"y":324,"w":336,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":336,"h":64},"sourceSize":{"w":336,"h":64}},"map-building-saloon-ceiling-01.img":{"frame":{"x":1726,"y":1,"w":313,"h":312},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":313,"h":312},"sourceSize":{"w":328,"h":328}},"map-building-greenhouse-ceiling-02.img":{"frame":{"x":1710,"y":390,"w":200,"h":312},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":200,"h":312},"sourceSize":{"w":200,"h":312}},"map-bunker-chrys-compartment-floor-01a.img":{"frame":{"x":1912,"y":390,"w":114,"h":304},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":17,"w":114,"h":304},"sourceSize":{"w":114,"h":322}},"map-bunker-statue-chamber-floor-01.img":{"frame":{"x":998,"y":435,"w":125,"h":271},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":16,"w":125,"h":271},"sourceSize":{"w":128,"h":288}},"map-bunker-chrys-compartment-floor-02c.img":{"frame":{"x":1710,"y":704,"w":256,"h":90},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":0,"w":256,"h":90},"sourceSize":{"w":274,"h":90}},"map-tree-05c.img":{"frame":{"x":1384,"y":712,"w":235,"h":246},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":5,"w":235,"h":246},"sourceSize":{"w":256,"h":256}},"map-bunker-chrys-chamber-ceiling-01.img":{"frame":{"x":659,"y":469,"w":224,"h":136},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":224,"h":136},"sourceSize":{"w":224,"h":136}},"map-bunker-chrys-compartment-ceiling-01b.img":{"frame":{"x":1125,"y":435,"w":177,"h":184},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":177,"h":184},"sourceSize":{"w":178,"h":186}},"map-archway-res-01.img":{"frame":{"x":1125,"y":621,"w":180,"h":46},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":180,"h":46},"sourceSize":{"w":180,"h":48}},"map-bunker-chrys-compartment-ceiling-02b.img":{"frame":{"x":1621,"y":796,"w":176,"h":129},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":176,"h":129},"sourceSize":{"w":178,"h":130}},"map-bunker-chrys-compartment-ceiling-03b.img":{"frame":{"x":1799,"y":796,"w":176,"h":153},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":176,"h":153},"sourceSize":{"w":178,"h":154}},"map-statue-03.img":{"frame":{"x":1621,"y":927,"w":144,"h":141},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":34,"y":34,"w":144,"h":141},"sourceSize":{"w":208,"h":208}},"map-statue-04.img":{"frame":{"x":1384,"y":960,"w":144,"h":141},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":34,"y":34,"w":144,"h":141},"sourceSize":{"w":208,"h":208}},"map-stone-06.img":{"frame":{"x":1767,"y":951,"w":144,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":64},"sourceSize":{"w":144,"h":64}},"map-stone-03b.img":{"frame":{"x":1767,"y":1017,"w":138,"h":136},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":138,"h":136},"sourceSize":{"w":144,"h":144}},"map-planter-06.img":{"frame":{"x":922,"y":435,"w":72,"h":136},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":136},"sourceSize":{"w":72,"h":136}},"map-tree-06.img":{"frame":{"x":1913,"y":951,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"map-bunker-chrys-compartment-ceiling-02a.img":{"frame":{"x":659,"y":607,"w":112,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":112,"h":48},"sourceSize":{"w":112,"h":48}},"map-bunker-chrys-compartment-ceiling-03a.img":{"frame":{"x":773,"y":607,"w":112,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":112,"h":48},"sourceSize":{"w":112,"h":48}},"map-building-saloon-ceiling-02.img":{"frame":{"x":887,"y":573,"w":96,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":96,"h":80},"sourceSize":{"w":96,"h":80}},"map-bunker-chrys-compartment-ceiling-01a.img":{"frame":{"x":1968,"y":696,"w":56,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":56,"h":96},"sourceSize":{"w":56,"h":96}},"map-bunker-chrys-chamber-floor-01a.img":{"frame":{"x":1621,"y":712,"w":80,"h":74},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":16,"w":80,"h":74},"sourceSize":{"w":80,"h":90}},"map-crate-18.img":{"frame":{"x":1530,"y":960,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":72,"h":72}},"map-crate-22.img":{"frame":{"x":1530,"y":1034,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":72,"h":72}},"map-crate-02f.img":{"frame":{"x":1907,"y":1081,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":72,"h":72}},"map-bush-05.img":{"frame":{"x":1977,"y":794,"w":70,"h":70},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":70,"h":70},"sourceSize":{"w":72,"h":72}},"map-chest-03d.img":{"frame":{"x":1977,"y":866,"w":70,"h":51},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":70,"h":51},"sourceSize":{"w":70,"h":51}},"map-case-meteor-01.img":{"frame":{"x":1604,"y":1070,"w":70,"h":51},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":70,"h":51},"sourceSize":{"w":70,"h":51}},"map-planter-res-02.img":{"frame":{"x":1981,"y":1081,"w":38,"h":67},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":1,"w":38,"h":67},"sourceSize":{"w":43,"h":68}},"map-case-meteor-res-01.img":{"frame":{"x":1981,"y":1150,"w":64,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":5,"w":64,"h":58},"sourceSize":{"w":72,"h":72}},"map-stone-res-01b.img":{"frame":{"x":1676,"y":1070,"w":59,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":59,"h":59},"sourceSize":{"w":60,"h":60}},"map-planter-07.img":{"frame":{"x":531,"y":974,"w":50,"h":50},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":50,"h":50},"sourceSize":{"w":50,"h":50}},"map-planter-res-03.img":{"frame":{"x":1125,"y":669,"w":41,"h":37},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":3,"w":41,"h":37},"sourceSize":{"w":43,"h":43}},"map-bush-res-05.img":{"frame":{"x":1737,"y":1070,"w":28,"h":25},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":22,"y":24,"w":28,"h":25},"sourceSize":{"w":72,"h":72}}}}],"faction":[{"meta":{"image":"assets/faction-0-50-c7c5eb4e.png","size":{"w":2048,"h":2048},"scale":0.5},"frames":{"map-building-bridge-xlg-floor.img":{"frame":{"x":1,"y":1,"w":1232,"h":480},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":1232,"h":480},"sourceSize":{"w":1232,"h":480}},"map-complex-warehouse-floor-04.img":{"frame":{"x":1235,"y":1,"w":648,"h":1024},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":648,"h":1024},"sourceSize":{"w":648,"h":1024}},"map-bunker-chrys-chamber-floor-01b.img":{"frame":{"x":1,"y":1027,"w":465,"h":313},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":465,"h":313},"sourceSize":{"w":466,"h":314}},"map-bunker-chrys-compartment-floor-03a.img":{"frame":{"x":1,"y":483,"w":384,"h":432},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":384,"h":432},"sourceSize":{"w":384,"h":432}},"map-building-greenhouse-floor-01.img":{"frame":{"x":387,"y":483,"w":416,"h":321},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":416,"h":321},"sourceSize":{"w":417,"h":321}},"map-bunker-chrys-compartment-floor-01b.img":{"frame":{"x":805,"y":483,"w":400,"h":386},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":400,"h":386},"sourceSize":{"w":402,"h":402}},"map-bunker-chrys-compartment-floor-02a.img":{"frame":{"x":468,"y":871,"w":384,"h":314},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":384,"h":314},"sourceSize":{"w":386,"h":314}},"map-bunker-chrys-compartment-floor-01a.img":{"frame":{"x":1885,"y":1,"w":114,"h":304},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":17,"w":114,"h":304},"sourceSize":{"w":114,"h":322}},"map-complex-warehouse-floor-02.img":{"frame":{"x":2001,"y":1,"w":30,"h":264},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":30,"h":264},"sourceSize":{"w":30,"h":264}},"map-bunker-chrys-compartment-floor-02b.img":{"frame":{"x":1,"y":917,"w":256,"h":90},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":0,"w":256,"h":90},"sourceSize":{"w":274,"h":90}},"map-tree-08f.img":{"frame":{"x":854,"y":871,"w":256,"h":255},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":256,"h":255},"sourceSize":{"w":256,"h":256}},"map-bunker-chrys-chamber-ceiling-01.img":{"frame":{"x":1,"y":1342,"w":224,"h":136},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":224,"h":136},"sourceSize":{"w":224,"h":136}},"map-building-greenhouse-ceiling-01.img":{"frame":{"x":1,"y":1480,"w":201,"h":157},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":201,"h":157},"sourceSize":{"w":202,"h":158}},"map-bunker-chrys-compartment-ceiling-01b.img":{"frame":{"x":1,"y":1639,"w":177,"h":184},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":177,"h":184},"sourceSize":{"w":178,"h":186}},"map-bunker-chrys-compartment-ceiling-02b.img":{"frame":{"x":1,"y":1825,"w":176,"h":129},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":176,"h":129},"sourceSize":{"w":178,"h":130}},"map-bunker-chrys-compartment-ceiling-03b.img":{"frame":{"x":179,"y":1825,"w":176,"h":153},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":176,"h":153},"sourceSize":{"w":178,"h":154}},"map-statue-01.img":{"frame":{"x":1885,"y":307,"w":141,"h":141},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":34,"y":34,"w":141,"h":141},"sourceSize":{"w":208,"h":208}},"map-statue-top-01.img":{"frame":{"x":1,"y":1956,"w":140,"h":71},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":66,"y":67,"w":140,"h":71},"sourceSize":{"w":208,"h":208}},"map-statue-top-02.img":{"frame":{"x":1885,"y":450,"w":140,"h":71},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":66,"y":67,"w":140,"h":71},"sourceSize":{"w":208,"h":208}},"map-stone-03f.img":{"frame":{"x":1885,"y":523,"w":138,"h":136},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":138,"h":136},"sourceSize":{"w":144,"h":144}},"map-planter-01.img":{"frame":{"x":387,"y":806,"w":72,"h":136},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":136},"sourceSize":{"w":72,"h":136}},"map-planter-02.img":{"frame":{"x":180,"y":1639,"w":72,"h":136},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":136},"sourceSize":{"w":72,"h":136}},"map-planter-03.img":{"frame":{"x":204,"y":1480,"w":72,"h":136},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":136},"sourceSize":{"w":72,"h":136}},"map-airdrop-03.img":{"frame":{"x":227,"y":1342,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"map-airdrop-04.img":{"frame":{"x":1885,"y":661,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"map-crate-12.img":{"frame":{"x":1112,"y":871,"w":120,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":120,"h":120},"sourceSize":{"w":120,"h":120}},"map-crate-13.img":{"frame":{"x":1112,"y":993,"w":120,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":120,"h":120},"sourceSize":{"w":120,"h":120}},"map-bunker-chrys-compartment-ceiling-02a.img":{"frame":{"x":259,"y":917,"w":112,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":112,"h":48},"sourceSize":{"w":112,"h":48}},"map-bunker-chrys-compartment-ceiling-03a.img":{"frame":{"x":259,"y":967,"w":112,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":112,"h":48},"sourceSize":{"w":112,"h":48}},"map-complex-warehouse-floor-01.img":{"frame":{"x":2015,"y":661,"w":30,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":30,"h":112},"sourceSize":{"w":30,"h":112}},"map-complex-warehouse-floor-03.img":{"frame":{"x":2015,"y":775,"w":30,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":30,"h":112},"sourceSize":{"w":30,"h":112}},"map-stone-res-02f.img":{"frame":{"x":1885,"y":791,"w":100,"h":100},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":100,"h":100},"sourceSize":{"w":100,"h":100}},"map-bunker-chrys-compartment-ceiling-01a.img":{"frame":{"x":1987,"y":889,"w":56,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":56,"h":96},"sourceSize":{"w":56,"h":96}},"map-bunker-chrys-chamber-floor-01a.img":{"frame":{"x":373,"y":944,"w":80,"h":74},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":16,"w":80,"h":74},"sourceSize":{"w":80,"h":90}},"map-crate-02f.img":{"frame":{"x":1885,"y":893,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":72,"h":72}},"map-crate-22.img":{"frame":{"x":1885,"y":967,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":72,"h":72}},"map-chest-03f.img":{"frame":{"x":461,"y":806,"w":70,"h":51},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":70,"h":51},"sourceSize":{"w":70,"h":51}},"map-planter-res-01.img":{"frame":{"x":143,"y":1980,"w":38,"h":67},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":1,"w":38,"h":67},"sourceSize":{"w":43,"h":68}},"map-bush-01f.img":{"frame":{"x":183,"y":1980,"w":63,"h":65},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":63,"h":65},"sourceSize":{"w":72,"h":72}},"map-planter-04.img":{"frame":{"x":533,"y":806,"w":50,"h":50},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":50,"h":50},"sourceSize":{"w":50,"h":50}},"map-planter-05.img":{"frame":{"x":585,"y":806,"w":50,"h":50},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":50,"h":50},"sourceSize":{"w":50,"h":50}}}}],"halloween":[{"meta":{"image":"assets/halloween-0-50-13513d1e.png","size":{"w":1024,"h":1024},"scale":0.5},"frames":{"map-bunker-eye-chamber-floor-01a.img":{"frame":{"x":1,"y":1,"w":352,"h":672},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":16,"w":352,"h":672},"sourceSize":{"w":352,"h":688}},"map-bunker-eye-compartment-floor-01.img":{"frame":{"x":355,"y":1,"w":352,"h":352},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":352,"h":352},"sourceSize":{"w":352,"h":352}},"map-bunker-eye-chamber-ceiling-01.img":{"frame":{"x":1,"y":675,"w":160,"h":272},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":272},"sourceSize":{"w":160,"h":272}},"map-tree-08.img":{"frame":{"x":709,"y":1,"w":256,"h":255},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":256,"h":255},"sourceSize":{"w":256,"h":256}},"map-tree-05.img":{"frame":{"x":709,"y":258,"w":245,"h":240},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":9,"w":245,"h":240},"sourceSize":{"w":256,"h":256}},"map-bunker-eye-compartment-ceiling-01.img":{"frame":{"x":163,"y":675,"w":160,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":160},"sourceSize":{"w":160,"h":160}},"map-bunker-eye-chamber-floor-01b.img":{"frame":{"x":163,"y":837,"w":96,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":96,"h":128},"sourceSize":{"w":96,"h":128}},"map-tree-07.img":{"frame":{"x":261,"y":837,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"map-bush-06.img":{"frame":{"x":325,"y":675,"w":95,"h":94},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":95,"h":94},"sourceSize":{"w":96,"h":96}},"map-airdrop-01h.img":{"frame":{"x":355,"y":500,"w":80,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":80},"sourceSize":{"w":80,"h":80}},"map-airdrop-02h.img":{"frame":{"x":355,"y":582,"w":80,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":80},"sourceSize":{"w":80,"h":80}},"map-web-01.img":{"frame":{"x":355,"y":355,"w":76,"h":79},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":76,"h":79},"sourceSize":{"w":76,"h":80}},"map-crate-11h.img":{"frame":{"x":1,"y":949,"w":73,"h":73},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":73,"h":73},"sourceSize":{"w":74,"h":74}},"map-bush-07sp.img":{"frame":{"x":76,"y":949,"w":68,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":0,"w":68,"h":72},"sourceSize":{"w":72,"h":72}},"map-pumpkin-01.img":{"frame":{"x":433,"y":355,"w":70,"h":70},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":70,"h":70},"sourceSize":{"w":72,"h":72}},"map-pumpkin-02.img":{"frame":{"x":433,"y":427,"w":70,"h":70},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":70,"h":70},"sourceSize":{"w":72,"h":72}},"map-pumpkin-res-01.img":{"frame":{"x":505,"y":355,"w":68,"h":66},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":4,"w":68,"h":66},"sourceSize":{"w":72,"h":72}},"map-tree-04h.img":{"frame":{"x":967,"y":1,"w":56,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":56,"h":56},"sourceSize":{"w":56,"h":56}},"map-pumpkin-04.img":{"frame":{"x":146,"y":967,"w":48,"h":49},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":13,"w":48,"h":49},"sourceSize":{"w":72,"h":72}},"part-airdrop-01h.img":{"frame":{"x":967,"y":59,"w":44,"h":44},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":44,"h":44},"sourceSize":{"w":48,"h":48}},"part-airdrop-02h.img":{"frame":{"x":195,"y":967,"w":40,"h":40},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":40,"h":40},"sourceSize":{"w":40,"h":40}},"map-pumpkin-res-04.img":{"frame":{"x":967,"y":105,"w":36,"h":36},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":11,"w":36,"h":36},"sourceSize":{"w":72,"h":72}},"map-bush-res-06.img":{"frame":{"x":237,"y":967,"w":33,"h":33},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":20,"y":20,"w":33,"h":33},"sourceSize":{"w":72,"h":72}}}}],"potato":[{"meta":{"image":"assets/potato-0-50-779bd909.png","size":{"w":1024,"h":1024},"scale":0.5},"frames":{"map-building-shilo-ceiling-01.img":{"frame":{"x":1,"y":1,"w":480,"h":384},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":480,"h":384},"sourceSize":{"w":480,"h":384}},"map-building-shilo-floor-01.img":{"frame":{"x":483,"y":1,"w":480,"h":384},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":480,"h":384},"sourceSize":{"w":480,"h":384}},"map-egg-01.img":{"frame":{"x":965,"y":1,"w":47,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":1,"w":47,"h":61},"sourceSize":{"w":62,"h":62}},"map-egg-02.img":{"frame":{"x":965,"y":64,"w":47,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":1,"w":47,"h":61},"sourceSize":{"w":62,"h":62}},"map-egg-03.img":{"frame":{"x":965,"y":127,"w":47,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":1,"w":47,"h":61},"sourceSize":{"w":62,"h":62}},"map-egg-04.img":{"frame":{"x":965,"y":190,"w":47,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":1,"w":47,"h":61},"sourceSize":{"w":62,"h":62}},"map-egg-res-01.img":{"frame":{"x":965,"y":253,"w":46,"h":44},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":3,"w":46,"h":44},"sourceSize":{"w":50,"h":50}},"map-potato-res-01.img":{"frame":{"x":965,"y":299,"w":43,"h":42},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":15,"y":18,"w":43,"h":42},"sourceSize":{"w":72,"h":72}},"map-potato-01.img":{"frame":{"x":965,"y":343,"w":36,"h":35},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":36,"h":35},"sourceSize":{"w":36,"h":36}},"map-potato-02.img":{"frame":{"x":965,"y":380,"w":36,"h":35},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":36,"h":35},"sourceSize":{"w":36,"h":36}},"map-potato-03.img":{"frame":{"x":1,"y":417,"w":36,"h":35},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":36,"h":35},"sourceSize":{"w":36,"h":36}}}}],"snow":[{"meta":{"image":"assets/snow-0-50-e83481bd.png","size":{"w":2048,"h":2048},"scale":0.5},"frames":{"map-bunker-hydra-compartment-floor-02.img":{"frame":{"x":1,"y":1,"w":848,"h":724},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":0,"w":848,"h":724},"sourceSize":{"w":852,"h":724}},"map-bunker-chrys-chamber-floor-01b.img":{"frame":{"x":851,"y":1,"w":465,"h":313},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":465,"h":313},"sourceSize":{"w":466,"h":314}},"map-bunker-chrys-compartment-floor-03a.img":{"frame":{"x":1318,"y":1,"w":384,"h":432},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":384,"h":432},"sourceSize":{"w":384,"h":432}},"map-bunker-hydra-floor-01.img":{"frame":{"x":851,"y":316,"w":432,"h":304},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":432,"h":304},"sourceSize":{"w":432,"h":304}},"map-building-greenhouse-floor-02.img":{"frame":{"x":1284,"y":435,"w":416,"h":321},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":416,"h":321},"sourceSize":{"w":417,"h":321}},"map-bunker-hydra-compartment-ceiling-02.img":{"frame":{"x":851,"y":622,"w":400,"h":328},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":400,"h":328},"sourceSize":{"w":408,"h":360}},"map-bunker-chrys-compartment-floor-01c.img":{"frame":{"x":1253,"y":758,"w":400,"h":386},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":400,"h":386},"sourceSize":{"w":402,"h":402}},"map-bunker-hydra-chamber-floor-03.img":{"frame":{"x":1655,"y":758,"w":352,"h":399},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":16,"w":352,"h":399},"sourceSize":{"w":352,"h":416}},"map-bunker-chrys-compartment-floor-02a.img":{"frame":{"x":1,"y":727,"w":384,"h":314},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":384,"h":314},"sourceSize":{"w":386,"h":314}},"map-bunker-hydra-chamber-floor-02.img":{"frame":{"x":1704,"y":1,"w":169,"h":370},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":22,"y":0,"w":169,"h":370},"sourceSize":{"w":196,"h":372}},"map-bunker-hydra-chamber-floor-01b.img":{"frame":{"x":387,"y":727,"w":353,"h":369},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":353,"h":369},"sourceSize":{"w":353,"h":369}},"map-bunker-hydra-compartment-floor-01.img":{"frame":{"x":1,"y":1043,"w":352,"h":320},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":352,"h":320},"sourceSize":{"w":352,"h":320}},"map-bunker-hydra-compartment-floor-03.img":{"frame":{"x":742,"y":952,"w":352,"h":254},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":352,"h":254},"sourceSize":{"w":352,"h":256}},"map-building-greenhouse-ceiling-02.img":{"frame":{"x":1702,"y":435,"w":200,"h":312},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":200,"h":312},"sourceSize":{"w":200,"h":312}},"map-bunker-chrys-compartment-floor-01a.img":{"frame":{"x":1904,"y":1,"w":114,"h":304},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":17,"w":114,"h":304},"sourceSize":{"w":114,"h":322}},"map-complex-warehouse-floor-02.img":{"frame":{"x":355,"y":1043,"w":30,"h":264},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":30,"h":264},"sourceSize":{"w":30,"h":264}},"map-bunker-chrys-compartment-floor-02c.img":{"frame":{"x":387,"y":1098,"w":256,"h":90},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":0,"w":256,"h":90},"sourceSize":{"w":274,"h":90}},"map-bunker-chrys-chamber-ceiling-01.img":{"frame":{"x":387,"y":1190,"w":224,"h":136},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":224,"h":136},"sourceSize":{"w":224,"h":136}},"map-bunker-hydra-ceiling-01.img":{"frame":{"x":1096,"y":1146,"w":216,"h":152},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":216,"h":152},"sourceSize":{"w":216,"h":152}},"map-bunker-hydra-chamber-ceiling-03.img":{"frame":{"x":1314,"y":1146,"w":200,"h":136},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":200,"h":136},"sourceSize":{"w":200,"h":136}},"map-bunker-chrys-compartment-ceiling-01b.img":{"frame":{"x":613,"y":1208,"w":177,"h":184},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":177,"h":184},"sourceSize":{"w":178,"h":186}},"map-bunker-hydra-compartment-ceiling-01.img":{"frame":{"x":355,"y":1328,"w":160,"h":180},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":180},"sourceSize":{"w":160,"h":180}},"map-bunker-chrys-compartment-ceiling-02b.img":{"frame":{"x":792,"y":1208,"w":176,"h":129},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":176,"h":129},"sourceSize":{"w":178,"h":130}},"map-bunker-chrys-compartment-ceiling-03b.img":{"frame":{"x":1,"y":1365,"w":176,"h":153},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":176,"h":153},"sourceSize":{"w":178,"h":154}},"map-bunker-hydra-chamber-ceiling-02.img":{"frame":{"x":742,"y":727,"w":96,"h":175},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":96,"h":175},"sourceSize":{"w":96,"h":175}},"map-bunker-hydra-chamber-ceiling-01.img":{"frame":{"x":179,"y":1365,"w":160,"h":172},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":172},"sourceSize":{"w":216,"h":176}},"map-bunker-hydra-compartment-ceiling-03.img":{"frame":{"x":1,"y":1520,"w":160,"h":135},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":135},"sourceSize":{"w":160,"h":135}},"map-snow-03.img":{"frame":{"x":1874,"y":307,"w":156,"h":89},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":4,"w":156,"h":89},"sourceSize":{"w":180,"h":96}},"map-table-02x.img":{"frame":{"x":1096,"y":952,"w":144,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":80},"sourceSize":{"w":144,"h":80}},"map-stone-03x.img":{"frame":{"x":1904,"y":398,"w":138,"h":136},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":138,"h":136},"sourceSize":{"w":144,"h":144}},"map-planter-06.img":{"frame":{"x":517,"y":1328,"w":72,"h":136},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":136},"sourceSize":{"w":72,"h":136}},"map-tree-10.img":{"frame":{"x":1516,"y":1146,"w":127,"h":127},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":127,"h":127},"sourceSize":{"w":128,"h":128}},"map-tree-11.img":{"frame":{"x":1904,"y":536,"w":125,"h":125},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":125,"h":125},"sourceSize":{"w":128,"h":128}},"map-chute-01x.img":{"frame":{"x":970,"y":1208,"w":116,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":6,"w":116,"h":116},"sourceSize":{"w":128,"h":128}},"map-complex-warehouse-floor-01.img":{"frame":{"x":1284,"y":316,"w":30,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":30,"h":112},"sourceSize":{"w":30,"h":112}},"map-complex-warehouse-floor-03.img":{"frame":{"x":2009,"y":663,"w":30,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":30,"h":112},"sourceSize":{"w":30,"h":112}},"map-bunker-chrys-compartment-ceiling-02a.img":{"frame":{"x":1704,"y":373,"w":112,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":112,"h":48},"sourceSize":{"w":112,"h":48}},"map-bunker-chrys-compartment-ceiling-03a.img":{"frame":{"x":1096,"y":1034,"w":112,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":112,"h":48},"sourceSize":{"w":112,"h":48}},"map-snow-01.img":{"frame":{"x":1645,"y":1159,"w":106,"h":87},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":21,"w":106,"h":87},"sourceSize":{"w":128,"h":128}},"map-snow-02.img":{"frame":{"x":1753,"y":1159,"w":104,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":12,"w":104,"h":104},"sourceSize":{"w":128,"h":128}},"map-bunker-hydra-floor-04.img":{"frame":{"x":1645,"y":1248,"w":100,"h":100},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":100,"h":100},"sourceSize":{"w":100,"h":100}},"map-stone-res-02x.img":{"frame":{"x":1516,"y":1275,"w":100,"h":100},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":100,"h":100},"sourceSize":{"w":100,"h":100}},"map-bunker-hydra-chamber-floor-01a.img":{"frame":{"x":1859,"y":1159,"w":97,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":97,"h":96},"sourceSize":{"w":97,"h":97}},"map-bunker-chrys-compartment-ceiling-01a.img":{"frame":{"x":645,"y":1098,"w":56,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":56,"h":96},"sourceSize":{"w":56,"h":96}},"map-snow-06.img":{"frame":{"x":1958,"y":1159,"w":89,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":89,"h":56},"sourceSize":{"w":96,"h":64}},"map-airdrop-01x.img":{"frame":{"x":1958,"y":1217,"w":80,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":80},"sourceSize":{"w":80,"h":80}},"map-airdrop-02x.img":{"frame":{"x":1904,"y":663,"w":80,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":80},"sourceSize":{"w":80,"h":80}},"map-table-01x.img":{"frame":{"x":1859,"y":1257,"w":80,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":64},"sourceSize":{"w":80,"h":64}},"map-table-03x.img":{"frame":{"x":1941,"y":1299,"w":80,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":80},"sourceSize":{"w":80,"h":80}},"map-bunker-chrys-chamber-floor-01a.img":{"frame":{"x":1747,"y":1265,"w":80,"h":74},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":16,"w":80,"h":74},"sourceSize":{"w":80,"h":90}},"map-crate-01x.img":{"frame":{"x":1829,"y":1323,"w":76,"h":76},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":76,"h":76},"sourceSize":{"w":80,"h":80}},"map-stone-01x.img":{"frame":{"x":1747,"y":1341,"w":76,"h":75},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":76,"h":75},"sourceSize":{"w":80,"h":80}},"map-crate-03x.img":{"frame":{"x":1618,"y":1350,"w":74,"h":74},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":74,"h":74},"sourceSize":{"w":74,"h":74}},"map-crate-02x.img":{"frame":{"x":1907,"y":1381,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":72,"h":72}},"map-chest-03x.img":{"frame":{"x":1096,"y":1084,"w":70,"h":51},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":70,"h":51},"sourceSize":{"w":70,"h":51}},"map-planter-res-02.img":{"frame":{"x":2009,"y":777,"w":38,"h":67},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":1,"w":38,"h":67},"sourceSize":{"w":43,"h":68}},"map-bush-01x.img":{"frame":{"x":1981,"y":1381,"w":63,"h":65},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":63,"h":65},"sourceSize":{"w":72,"h":72}},"map-stone-res-01x.img":{"frame":{"x":1168,"y":1084,"w":59,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":59,"h":59},"sourceSize":{"w":60,"h":60}},"map-snow-05.img":{"frame":{"x":1694,"y":1350,"w":45,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":6,"w":45,"h":52},"sourceSize":{"w":64,"h":64}},"map-planter-07.img":{"frame":{"x":1694,"y":1404,"w":50,"h":50},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":50,"h":50},"sourceSize":{"w":50,"h":50}},"map-snow-04.img":{"frame":{"x":1818,"y":373,"w":50,"h":49},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":8,"w":50,"h":49},"sourceSize":{"w":64,"h":64}},"map-planter-res-03.img":{"frame":{"x":742,"y":904,"w":41,"h":37},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":3,"w":41,"h":37},"sourceSize":{"w":43,"h":43}},"map-snowball-res.img":{"frame":{"x":1907,"y":1323,"w":32,"h":36},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":6,"w":32,"h":36},"sourceSize":{"w":48,"h":48}}}}],"woods":[{"meta":{"image":"assets/woods-0-50-615f2e66.png","size":{"w":2048,"h":2048},"scale":0.5},"frames":{"map-bunker-eye-chamber-floor-01a.img":{"frame":{"x":1,"y":1,"w":352,"h":672},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":16,"w":352,"h":672},"sourceSize":{"w":352,"h":688}},"map-bunker-hatchet-compartment-floor-01.img":{"frame":{"x":355,"y":1,"w":592,"h":463},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":592,"h":463},"sourceSize":{"w":592,"h":464}},"map-bunker-hatchet-compartment-floor-02a.img":{"frame":{"x":1,"y":675,"w":449,"h":295},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":449,"h":295},"sourceSize":{"w":449,"h":297}},"map-bunker-hatchet-compartment-floor-03b.img":{"frame":{"x":452,"y":466,"w":366,"h":254},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":366,"h":254},"sourceSize":{"w":369,"h":257}},"map-bunker-hatchet-chamber-floor-01a.img":{"frame":{"x":1,"y":972,"w":365,"h":349},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":365,"h":349},"sourceSize":{"w":369,"h":353}},"map-bunker-eye-compartment-floor-01.img":{"frame":{"x":1,"y":1323,"w":352,"h":352},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":352,"h":352},"sourceSize":{"w":352,"h":352}},"map-bunker-hatchet-compartment-floor-02b.img":{"frame":{"x":1,"y":1677,"w":335,"h":161},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":335,"h":161},"sourceSize":{"w":345,"h":161}},"map-bunker-hatchet-compartment-floor-02c.img":{"frame":{"x":338,"y":1677,"w":127,"h":327},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":0,"w":127,"h":327},"sourceSize":{"w":129,"h":337}},"map-building-pavilion-ceiling-01.img":{"frame":{"x":355,"y":1323,"w":312,"h":304},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":8,"w":312,"h":304},"sourceSize":{"w":320,"h":320}},"map-bunker-hatchet-compartment-ceiling-03.img":{"frame":{"x":1,"y":1840,"w":304,"h":152},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":304,"h":152},"sourceSize":{"w":304,"h":152}},"map-building-pavilion-floor-01.img":{"frame":{"x":368,"y":972,"w":288,"h":288},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":288,"h":288},"sourceSize":{"w":288,"h":288}},"map-bunker-eye-chamber-ceiling-01.img":{"frame":{"x":467,"y":1629,"w":160,"h":272},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":272},"sourceSize":{"w":160,"h":272}},"map-bunker-hatchet-compartment-ceiling-01.img":{"frame":{"x":452,"y":722,"w":256,"h":200},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":256,"h":200},"sourceSize":{"w":256,"h":200}},"map-bunker-hatchet-compartment-ceiling-02.img":{"frame":{"x":658,"y":924,"w":256,"h":248},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":256,"h":248},"sourceSize":{"w":256,"h":248}},"map-tree-08sp.img":{"frame":{"x":629,"y":1629,"w":256,"h":255},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":256,"h":255},"sourceSize":{"w":256,"h":256}},"map-bunker-hatchet-compartment-floor-03d.img":{"frame":{"x":669,"y":1174,"w":190,"h":254},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":11,"w":190,"h":254},"sourceSize":{"w":193,"h":265}},"map-tree-05.img":{"frame":{"x":861,"y":1174,"w":245,"h":240},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":9,"w":245,"h":240},"sourceSize":{"w":256,"h":256}},"map-bunker-hatchet-chamber-ceiling-01.img":{"frame":{"x":629,"y":1886,"w":208,"h":152},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":208,"h":152},"sourceSize":{"w":208,"h":152}},"map-bunker-hatchet-compartment-floor-02d.img":{"frame":{"x":839,"y":1886,"w":189,"h":105},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":0,"w":189,"h":105},"sourceSize":{"w":201,"h":105}},"map-bunker-hatchet-compartment-floor-03a.img":{"frame":{"x":669,"y":1430,"w":187,"h":113},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":0,"w":187,"h":113},"sourceSize":{"w":193,"h":113}},"map-bunker-hatchet-chamber-floor-01c.img":{"frame":{"x":858,"y":1430,"w":113,"h":184},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":5,"w":113,"h":184},"sourceSize":{"w":113,"h":193}},"map-bunker-eye-compartment-ceiling-01.img":{"frame":{"x":710,"y":722,"w":160,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":160},"sourceSize":{"w":160,"h":160}},"map-table-02x.img":{"frame":{"x":669,"y":1545,"w":144,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":80},"sourceSize":{"w":144,"h":80}},"map-bunker-hatchet-compartment-floor-03c.img":{"frame":{"x":467,"y":1903,"w":97,"h":138},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":12,"w":97,"h":138},"sourceSize":{"w":97,"h":153}},"map-stone-03x.img":{"frame":{"x":820,"y":466,"w":138,"h":136},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":138,"h":136},"sourceSize":{"w":144,"h":144}},"map-bunker-eye-chamber-floor-01b.img":{"frame":{"x":887,"y":1616,"w":96,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":96,"h":128},"sourceSize":{"w":96,"h":128}},"map-tree-07sp.img":{"frame":{"x":887,"y":1746,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"map-tree-10.img":{"frame":{"x":973,"y":1416,"w":127,"h":127},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":127,"h":127},"sourceSize":{"w":128,"h":128}},"map-tree-11.img":{"frame":{"x":985,"y":1545,"w":125,"h":125},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":125,"h":125},"sourceSize":{"w":128,"h":128}},"map-stone-res-02x.img":{"frame":{"x":820,"y":604,"w":100,"h":100},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":100,"h":100},"sourceSize":{"w":100,"h":100}},"map-bunker-hatchet-chamber-floor-01b.img":{"frame":{"x":1102,"y":1416,"w":96,"h":88},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":96,"h":88},"sourceSize":{"w":97,"h":89}},"map-bush-06.img":{"frame":{"x":355,"y":466,"w":95,"h":94},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":95,"h":94},"sourceSize":{"w":96,"h":96}},"map-building-pavilion-res-01.img":{"frame":{"x":355,"y":562,"w":89,"h":94},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":84,"y":81,"w":89,"h":94},"sourceSize":{"w":256,"h":256}},"map-table-01x.img":{"frame":{"x":985,"y":1672,"w":80,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":64},"sourceSize":{"w":80,"h":64}},"map-table-03x.img":{"frame":{"x":1017,"y":1738,"w":80,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":80},"sourceSize":{"w":80,"h":80}},"map-crate-01x.img":{"frame":{"x":872,"y":706,"w":76,"h":76},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":76,"h":76},"sourceSize":{"w":80,"h":80}},"map-stone-01x.img":{"frame":{"x":922,"y":604,"w":76,"h":75},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":76,"h":75},"sourceSize":{"w":80,"h":80}},"map-crate-03x.img":{"frame":{"x":872,"y":784,"w":74,"h":74},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":74,"h":74},"sourceSize":{"w":74,"h":74}},"map-crate-02x.img":{"frame":{"x":1030,"y":1820,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":72,"h":72}},"map-crate-19.img":{"frame":{"x":1099,"y":1672,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":72,"h":72}},"map-bush-07sp.img":{"frame":{"x":1099,"y":1746,"w":68,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":0,"w":68,"h":72},"sourceSize":{"w":72,"h":72}},"map-chest-03x.img":{"frame":{"x":1,"y":1994,"w":70,"h":51},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":70,"h":51},"sourceSize":{"w":70,"h":51}},"map-bush-01x.img":{"frame":{"x":1030,"y":1894,"w":63,"h":65},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":63,"h":65},"sourceSize":{"w":72,"h":72}},"map-stone-res-01x.img":{"frame":{"x":566,"y":1903,"w":59,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":59,"h":59},"sourceSize":{"w":60,"h":60}},"map-snowball-res.img":{"frame":{"x":1102,"y":1506,"w":32,"h":36},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":6,"w":32,"h":36},"sourceSize":{"w":48,"h":48}}}}],"cobalt":[{"meta":{"image":"assets/cobalt-0-50-4499fae6.png","size":{"w":2048,"h":2048},"scale":0.5},"frames":{"map-bunker-crossing-chamber-floor-01a.img":{"frame":{"x":1,"y":1,"w":914,"h":176},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":914,"h":176},"sourceSize":{"w":915,"h":177}},"map-bunker-hydra-compartment-floor-02.img":{"frame":{"x":1,"y":179,"w":848,"h":724},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":0,"w":848,"h":724},"sourceSize":{"w":852,"h":724}},"map-bunker-crossing-compartment-floor-01.img":{"frame":{"x":917,"y":1,"w":752,"h":464},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":752,"h":464},"sourceSize":{"w":752,"h":464}},"map-bunker-twins-chamber-floor-01.img":{"frame":{"x":851,"y":467,"w":736,"h":577},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":48,"y":64,"w":736,"h":577},"sourceSize":{"w":832,"h":704}},"map-bunker-crossing-chamber-ceiling-01.img":{"frame":{"x":1,"y":905,"w":568,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":568,"h":120},"sourceSize":{"w":568,"h":120}},"map-bunker-hydra-floor-01.img":{"frame":{"x":1589,"y":467,"w":432,"h":304},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":432,"h":304},"sourceSize":{"w":432,"h":304}},"map-bunker-hydra-compartment-ceiling-02.img":{"frame":{"x":1589,"y":773,"w":400,"h":328},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":400,"h":328},"sourceSize":{"w":408,"h":360}},"map-bunker-hydra-chamber-floor-03.img":{"frame":{"x":1671,"y":1,"w":352,"h":399},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":16,"w":352,"h":399},"sourceSize":{"w":352,"h":416}},"map-bunker-hydra-chamber-floor-02.img":{"frame":{"x":571,"y":905,"w":169,"h":370},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":22,"y":0,"w":169,"h":370},"sourceSize":{"w":196,"h":372}},"map-bunker-hydra-chamber-floor-01b.img":{"frame":{"x":1,"y":1027,"w":353,"h":369},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":353,"h":369},"sourceSize":{"w":353,"h":369}},"map-bunker-crossing-compartment-ceiling-01b.img":{"frame":{"x":1,"y":1398,"w":360,"h":248},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":360,"h":248},"sourceSize":{"w":360,"h":248}},"map-bunker-crossing-chamber-floor-02.img":{"frame":{"x":1,"y":1648,"w":352,"h":127},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":160,"w":352,"h":127},"sourceSize":{"w":368,"h":288}},"map-bunker-crossing-chamber-floor-03.img":{"frame":{"x":1,"y":1777,"w":352,"h":125},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":162,"w":352,"h":125},"sourceSize":{"w":368,"h":288}},"map-bunker-hydra-compartment-floor-01.img":{"frame":{"x":355,"y":1648,"w":352,"h":320},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":352,"h":320},"sourceSize":{"w":352,"h":320}},"map-bunker-hydra-compartment-floor-03.img":{"frame":{"x":363,"y":1277,"w":352,"h":254},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":352,"h":254},"sourceSize":{"w":352,"h":256}},"map-bunker-crossing-compartment-floor-02.img":{"frame":{"x":709,"y":1533,"w":159,"h":304},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":159,"h":304},"sourceSize":{"w":160,"h":304}},"map-bunker-crossing-chamber-floor-01b.img":{"frame":{"x":363,"y":1533,"w":287,"h":97},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":0,"w":287,"h":97},"sourceSize":{"w":305,"h":97}},"map-complex-warehouse-floor-02.img":{"frame":{"x":851,"y":179,"w":30,"h":264},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":30,"h":264},"sourceSize":{"w":30,"h":264}},"map-bunker-twins-chamber-ceiling-01.img":{"frame":{"x":709,"y":1839,"w":256,"h":176},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":256,"h":176},"sourceSize":{"w":256,"h":176}},"map-bunker-hydra-ceiling-01.img":{"frame":{"x":717,"y":1277,"w":216,"h":152},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":216,"h":152},"sourceSize":{"w":216,"h":152}},"map-bunker-hydra-chamber-ceiling-03.img":{"frame":{"x":1,"y":1904,"w":200,"h":136},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":200,"h":136},"sourceSize":{"w":200,"h":136}},"map-bunker-hydra-compartment-ceiling-01.img":{"frame":{"x":742,"y":1046,"w":160,"h":180},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":180},"sourceSize":{"w":160,"h":180}},"map-bunker-hydra-chamber-ceiling-02.img":{"frame":{"x":904,"y":1046,"w":96,"h":175},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":96,"h":175},"sourceSize":{"w":96,"h":175}},"map-bunker-hydra-chamber-ceiling-01.img":{"frame":{"x":356,"y":1027,"w":160,"h":172},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":172},"sourceSize":{"w":216,"h":176}},"map-bunker-crossing-floor-01.img":{"frame":{"x":870,"y":1431,"w":160,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":160},"sourceSize":{"w":160,"h":160}},"map-bunker-hydra-compartment-ceiling-03.img":{"frame":{"x":935,"y":1223,"w":160,"h":135},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":135},"sourceSize":{"w":160,"h":135}},"map-bunker-crossing-compartment-ceiling-01a.img":{"frame":{"x":1002,"y":1046,"w":64,"h":152},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":152},"sourceSize":{"w":64,"h":152}},"map-building-crossing-bathroom-ceiling.img":{"frame":{"x":717,"y":1431,"w":144,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":96},"sourceSize":{"w":144,"h":96}},"map-stone-03cb.img":{"frame":{"x":203,"y":1904,"w":139,"h":139},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":139,"h":139},"sourceSize":{"w":144,"h":144}},"map-tree-03cb.img":{"frame":{"x":1068,"y":1046,"w":127,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":127,"h":126},"sourceSize":{"w":128,"h":128}},"map-bunker-crossing-ceiling-01.img":{"frame":{"x":742,"y":905,"w":97,"h":115},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":32,"y":0,"w":97,"h":115},"sourceSize":{"w":160,"h":144}},"map-bunker-twins-ceiling-01.img":{"frame":{"x":870,"y":1593,"w":97,"h":115},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":32,"y":0,"w":97,"h":115},"sourceSize":{"w":160,"h":144}},"map-complex-warehouse-floor-01.img":{"frame":{"x":652,"y":1533,"w":30,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":30,"h":112},"sourceSize":{"w":30,"h":112}},"map-complex-warehouse-floor-03.img":{"frame":{"x":883,"y":179,"w":30,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":30,"h":112},"sourceSize":{"w":30,"h":112}},"map-bunker-hydra-floor-04.img":{"frame":{"x":870,"y":1710,"w":100,"h":100},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":100,"h":100},"sourceSize":{"w":100,"h":100}},"map-stone-res-02cb.img":{"frame":{"x":969,"y":1593,"w":100,"h":100},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":100,"h":100},"sourceSize":{"w":100,"h":100}},"map-bunker-hydra-chamber-floor-01a.img":{"frame":{"x":1032,"y":1360,"w":97,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":97,"h":96},"sourceSize":{"w":97,"h":97}},"map-bunker-crossing-chamber-floor-01c.img":{"frame":{"x":1032,"y":1458,"w":96,"h":97},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":1,"w":96,"h":97},"sourceSize":{"w":115,"h":97}},"map-class-shell-01a.img":{"frame":{"x":356,"y":1201,"w":73,"h":73},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":73,"h":73},"sourceSize":{"w":80,"h":80}},"map-class-shell-01b.img":{"frame":{"x":431,"y":1201,"w":73,"h":73},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":73,"h":73},"sourceSize":{"w":80,"h":80}},"map-class-shell-02a.img":{"frame":{"x":344,"y":1970,"w":73,"h":73},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":73,"h":73},"sourceSize":{"w":80,"h":80}},"map-class-shell-02b.img":{"frame":{"x":419,"y":1970,"w":73,"h":73},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":73,"h":73},"sourceSize":{"w":80,"h":80}},"map-class-shell-03a.img":{"frame":{"x":494,"y":1970,"w":73,"h":73},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":73,"h":73},"sourceSize":{"w":80,"h":80}},"map-class-shell-03b.img":{"frame":{"x":569,"y":1970,"w":73,"h":73},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":73,"h":73},"sourceSize":{"w":80,"h":80}},"map-stone-01cb.img":{"frame":{"x":1097,"y":1174,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":72,"h":72}},"map-class-crate-assault.img":{"frame":{"x":1097,"y":1248,"w":71,"h":71},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":71,"h":71},"sourceSize":{"w":74,"h":74}},"map-class-crate-demo.img":{"frame":{"x":967,"y":1812,"w":71,"h":71},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":71,"h":71},"sourceSize":{"w":74,"h":74}},"map-class-crate-healer.img":{"frame":{"x":972,"y":1695,"w":71,"h":71},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":71,"h":71},"sourceSize":{"w":74,"h":74}},"map-class-crate-scout.img":{"frame":{"x":967,"y":1885,"w":71,"h":71},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":71,"h":71},"sourceSize":{"w":74,"h":74}},"map-class-crate-sniper.img":{"frame":{"x":967,"y":1958,"w":71,"h":71},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":71,"h":71},"sourceSize":{"w":74,"h":74}},"map-class-crate-tank.img":{"frame":{"x":1040,"y":1768,"w":71,"h":71},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":71,"h":71},"sourceSize":{"w":74,"h":74}},"map-class-crate-03.img":{"frame":{"x":935,"y":1360,"w":67,"h":67},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":67,"h":67},"sourceSize":{"w":74,"h":74}},"map-class-crate-res-01.img":{"frame":{"x":506,"y":1201,"w":63,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":63,"h":64},"sourceSize":{"w":74,"h":74}},"map-stone-res-01cb.img":{"frame":{"x":1671,"y":402,"w":59,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":59,"h":59},"sourceSize":{"w":60,"h":60}},"part-class-shell-01a.img":{"frame":{"x":742,"y":1228,"w":44,"h":44},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":44,"h":44},"sourceSize":{"w":48,"h":48}},"part-class-shell-02a.img":{"frame":{"x":788,"y":1228,"w":44,"h":44},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":44,"h":44},"sourceSize":{"w":48,"h":48}},"part-class-shell-03a.img":{"frame":{"x":834,"y":1228,"w":44,"h":44},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":44,"h":44},"sourceSize":{"w":48,"h":48}},"part-class-shell-01b.img":{"frame":{"x":1004,"y":1360,"w":26,"h":32},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":26,"h":32},"sourceSize":{"w":26,"h":32}},"part-class-shell-02b.img":{"frame":{"x":1004,"y":1394,"w":26,"h":32},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":26,"h":32},"sourceSize":{"w":26,"h":32}},"part-class-shell-03b.img":{"frame":{"x":1068,"y":1174,"w":26,"h":32},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":26,"h":32},"sourceSize":{"w":26,"h":32}}}}],"savannah":[{"meta":{"image":"assets/savannah-0-50-7a975b0c.png","size":{"w":1024,"h":1024},"scale":0.5},"frames":{"map-tree-12.img":{"frame":{"x":1,"y":1,"w":254,"h":254},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":254,"h":254},"sourceSize":{"w":256,"h":256}},"map-stone-07.img":{"frame":{"x":1,"y":257,"w":252,"h":253},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":252,"h":253},"sourceSize":{"w":256,"h":256}},"map-stone-res-07.img":{"frame":{"x":255,"y":257,"w":205,"h":206},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":2,"w":205,"h":206},"sourceSize":{"w":210,"h":210}},"map-building-perch-floor.img":{"frame":{"x":257,"y":1,"w":200,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":200,"h":160},"sourceSize":{"w":200,"h":160}},"map-building-perch-ceiling.img":{"frame":{"x":459,"y":1,"w":182,"h":173},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":12,"w":182,"h":173},"sourceSize":{"w":200,"h":192}},"map-tree-03sv.img":{"frame":{"x":643,"y":1,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"map-wall-08-grassy.img":{"frame":{"x":773,"y":1,"w":23,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":0,"w":23,"h":128},"sourceSize":{"w":32,"h":128}},"map-wall-08-grassy-res.img":{"frame":{"x":797,"y":1,"w":10,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":1,"w":10,"h":126},"sourceSize":{"w":32,"h":128}},"map-brush-01sv.img":{"frame":{"x":257,"y":163,"w":93,"h":92},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":93,"h":92},"sourceSize":{"w":96,"h":96}},"map-brush-02sv.img":{"frame":{"x":352,"y":163,"w":91,"h":92},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":2,"w":91,"h":92},"sourceSize":{"w":96,"h":96}},"map-perch-res-01.img":{"frame":{"x":445,"y":176,"w":88,"h":79},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":20,"y":25,"w":88,"h":79},"sourceSize":{"w":128,"h":128}},"map-crate-21.img":{"frame":{"x":809,"y":1,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":72,"h":72}},"map-bush-01sv.img":{"frame":{"x":883,"y":1,"w":70,"h":70},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":70,"h":70},"sourceSize":{"w":72,"h":72}},"map-propane-01.img":{"frame":{"x":955,"y":1,"w":48,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":48,"h":48},"sourceSize":{"w":48,"h":48}},"map-wall-03-grassy.img":{"frame":{"x":1005,"y":1,"w":17,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":0,"w":17,"h":48},"sourceSize":{"w":32,"h":48}},"map-wall-03-grassy-res.img":{"frame":{"x":955,"y":51,"w":10,"h":46},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":1,"w":10,"h":46},"sourceSize":{"w":32,"h":48}},"map-tree-res-12.img":{"frame":{"x":967,"y":51,"w":40,"h":36},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":7,"w":40,"h":36},"sourceSize":{"w":48,"h":48}},"map-brush-res-02sv.img":{"frame":{"x":967,"y":89,"w":31,"h":31},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":9,"w":31,"h":31},"sourceSize":{"w":48,"h":48}},"map-bush-res-01sv.img":{"frame":{"x":1000,"y":89,"w":22,"h":17},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":25,"y":28,"w":22,"h":17},"sourceSize":{"w":72,"h":72}}}}]}')
  , yr = {
    low: Go,
    high: Fo
};
function No(o, e) {
    const i = X.from(e).baseTexture;
    let r = 0;
    return i.valid || (i.on("loaded", s => {
        console.log("Loaded texture", e),
        o.prepare.upload(s)
    }
    ),
    i.on("error", s => {
        console.log("BaseTex load error, retrying", e),
        r++ <= 3 && setTimeout( () => {
            s.source && (s.updateSourceImage(""),
            s.updateSourceImage(e.substring(5, e.length)))
        }
        , (r - 1) * 1e3)
    }
    )),
    i
}
function Wo(o, e) {
    const t = No(o, e.meta.image)
      , i = new cs(t,e);
    return i.resolution = t.resolution,
    i.parse(),
    i
}
function Uo(o, e) {
    let t = Math.min(window.screen.width, window.screen.height)
      , i = Math.max(window.screen.width, window.screen.height);
    t *= window.devicePixelRatio,
    i *= window.devicePixelRatio;
    const r = i < 1366 && t < 768;
    let s = e.get("highResTex") ? "high" : "low";
    if ((r || D.mobile && !D.tablet || o.type == qt.CANVAS) && (s = "low"),
    o.type == qt.WEBGL) {
        const a = o.gl;
        a.getParameter(a.MAX_TEXTURE_SIZE) < 4096 && (s = "low")
    }
    return console.log("TextureRes", s, "screenDims", window.screen.width, window.screen.height),
    s
}
class qo {
    constructor(e, t, i) {
        this.renderer = e,
        this.audioManager = t,
        this.config = i,
        this.textureRes = Uo(this.renderer, this.config),
        hs.uploadsPerFrame = 1
    }
    atlases = {};
    loadTicker = 0;
    loaded = !1;
    textureRes;
    mapName;
    preloadMap;
    isAtlasLoaded(e) {
        return this.atlases[e]?.loaded
    }
    atlasTexturesLoaded(e) {
        if (!this.isAtlasLoaded(e))
            return !1;
        const t = this.atlases[e];
        for (let i = 0; i < t.spritesheets.length; i++)
            if (!t.spritesheets[i].baseTexture.valid)
                return !1;
        return !0
    }
    loadAtlas(e) {
        if (this.isAtlasLoaded(e))
            return;
        console.log("Load atlas", e),
        this.atlases[e] = this.atlases[e] || {
            loaded: !1,
            spritesheets: []
        };
        const i = (yr[this.textureRes] || yr.low)[e];
        for (let r = 0; r < i.length; r++) {
            const s = Wo(this.renderer, i[r]);
            this.atlases[e].spritesheets.push(s)
        }
        this.atlases[e].loaded = !0
    }
    unloadAtlas(e) {
        if (!this.isAtlasLoaded(e))
            return;
        console.log("Unload atlas", e);
        const t = this.atlases[e];
        for (let i = 0; i < t.spritesheets.length; i++)
            t.spritesheets[i].destroy(!0);
        t.loaded = !1,
        t.spritesheets = []
    }
    loadMapAssets(e) {
        console.log("Load map", e);
        const t = Pt[e];
        if (!t)
            throw new Error(`Failed loading mapDef ${this.mapName}`);
        const i = t.assets.atlases
          , r = Object.keys(this.atlases);
        for (let s = 0; s < r.length; s++) {
            const a = r[s];
            i.includes(a) || this.unloadAtlas(a)
        }
        for (let s = 0; s < i.length; s++) {
            const a = i[s];
            this.isAtlasLoaded(a) || this.loadAtlas(a)
        }
        setTimeout( () => {
            this.audioManager.preloadSounds();
            const s = t.assets.audio;
            for (let a = 0; a < s.length; a++) {
                const l = s[a];
                let h = De.Sounds[l.channel];
                if (!h) {
                    const d = De.Channels[l.channel];
                    h = De.Sounds[d.list]
                }
                const p = h[l.name]
                  , c = {
                    canCoalesce: p.canCoalesce,
                    channels: p.maxInstances,
                    volume: p.volume
                };
                this.audioManager.loadSound({
                    name: l.name,
                    channel: l.channel,
                    path: p.path,
                    options: c
                })
            }
        }
        , 0)
    }
    update(e) {
        if (!this.loaded) {
            this.loadTicker += e;
            let t = !this.preloadMap;
            const i = Object.keys(this.atlases);
            for (let r = 0; r < i.length; r++) {
                const s = i[r];
                this.atlasTexturesLoaded(s) || (t = !1)
            }
            this.audioManager.allLoaded() || (t = !1),
            t && (console.log("Resource load complete", this.loadTicker.toFixed(2)),
            this.loaded = !0)
        }
    }
}
var xr = {
    na: {
        https: !0,
        address: "usr.mathsiscoolfun.com:8001",
        l10n: "index-north-america"
    },
    eu: {
        https: !0,
        address: "eur.mathsiscoolfun.com:8001",
        l10n: "index-europe"
    },
    ru: {
        https: !0,
        address: "russia.mathsiscoolfun.com:8001",
        l10n: "index-russia"
    },
    asia: {
        https: !0,
        address: "asr.mathsiscoolfun.com:8001",
        l10n: "index-asia"
    },
    sa: {
        https: !0,
        address: "sa.mathsiscoolfun.com:8001",
        l10n: "index-south-america"
    }
};
class Vo {
    constructor(e, t) {
        this.config = e,
        this.localization = t,
        this.config = e,
        this.localization = t
    }
    info = {};
    loaded = !1;
    load() {
        const e = this.localization.getLocale()
          , t = Xe.resolveUrl(`/api/site_info?language=${e}`)
          , i = u("#server-opts")
          , r = u("#team-server-opts");
        for (const s in xr) {
            const a = xr[s]
              , l = this.localization.translate(a.l10n)
              , h = `<option value='${s}' data-l10n='${a.l10n}' data-label='${l}'>${l}</option>`;
            i.append(h),
            r.append(h)
        }
        u.ajax(t).done(s => {
            this.info = s || {},
            this.loaded = !0,
            this.updatePageFromInfo()
        }
        )
    }
    getGameModeStyles() {
        const e = []
          , t = this.info.modes || [];
        for (let i = 0; i < t.length; i++) {
            const r = t[i]
              , s = (Pt[r.mapName] || Pt.main).desc
              , a = s.buttonText ? s.buttonText : us[r.teamMode];
            e.push({
                icon: s.icon,
                buttonCss: s.buttonCss,
                buttonText: a,
                enabled: r.enabled
            })
        }
        return e
    }
    updatePageFromInfo() {
        if (this.loaded) {
            const e = this.getGameModeStyles();
            for (let c = 0; c < e.length; c++) {
                const d = e[c]
                  , w = `index-play-${d.buttonText}`
                  , f = u(`#btn-start-mode-${c}`);
                f.data("l10n", w),
                f.html(this.localization.translate(w)),
                (d.icon || d.buttonCss) && (c == 0 ? f.addClass("btn-custom-mode-no-indent") : f.addClass("btn-custom-mode-main"),
                f.addClass(d.buttonCss),
                f.css({
                    "background-image": `url(${d.icon})`
                }));
                const S = u(`#btn-team-queue-mode-${c}`);
                if (S.length) {
                    const g = `index-${d.buttonText}`;
                    S.data("l10n", g),
                    S.html(this.localization.translate(g)),
                    d.icon && (S.addClass("btn-custom-mode-select"),
                    S.css({
                        "background-image": `url(${d.icon})`
                    }))
                }
                f.toggle(d.enabled)
            }
            const t = this.info.modes.some(c => c.enabled && c.teamMode > 1);
            u("#btn-join-team, #btn-create-team").toggle(t);
            const i = this.info.pops;
            if (i) {
                const c = Object.keys(i);
                for (let d = 0; d < c.length; d++) {
                    const w = c[d]
                      , f = i[w]
                      , S = u("#server-opts").children(`option[value="${w}"]`)
                      , g = this.localization.translate("index-players");
                    S.text(`${S.data("label")} [${f.playerCount} ${g}]`)
                }
            }
            let r = !1;
            const s = u("#featured-streamers")
              , a = u(".streamer-list");
            if (!D.mobile && this.info.twitch) {
                a.empty();
                for (let c = 0; c < this.info.twitch.length; c++) {
                    const d = this.info.twitch[c]
                      , w = u("#featured-streamer-template").clone();
                    w.attr("class", "featured-streamer streamer-tooltip").attr("id", "");
                    const f = w.find("a")
                      , S = this.localization.translate(d.viewers == 1 ? "index-viewer" : "index-viewers");
                    f.html(`${d.name} <span>${d.viewers} ${S}</span>`),
                    f.css("background-image", `url(${d.img})`),
                    f.attr("href", d.url),
                    a.append(w),
                    r = !0
                }
            }
            s.css("visibility", r ? "visible" : "hidden");
            const l = u("#featured-youtuber")
              , h = this.info.youtube;
            h && u(".btn-youtuber").attr("href", this.info.youtube.link).html(this.info.youtube.name),
            l.css("display", h ? "block" : "none");
            const p = Pt[this.info.clientTheme];
            if (p) {
                this.config.set("cachedBgImg", p.desc.backgroundImg);
                const c = document.getElementById("background");
                c && (c.style.backgroundImage = `url(${p.desc.backgroundImg})`)
            }
        }
    }
}
var zr = {};
/*!
 * ==========================================================
 *  COLOR PICKER PLUGIN 1.4.2
 * ==========================================================
 * Author: Taufik Nurrohman <https://github.com/tovic>
 * License: MIT
 * ----------------------------------------------------------
 */
var br;
function jo() {
    return br || (br = 1,
    (function(o, e, t) {
        var i = "__instance__"
          , r = "firstChild"
          , s = setTimeout;
        function a(z) {
            return typeof z < "u"
        }
        function l(z) {
            return typeof z == "string"
        }
        function h(z) {
            return typeof z == "object"
        }
        function p(z) {
            return Object.keys(z).length
        }
        function c(z, P, _) {
            return z < P ? P : z > _ ? _ : z
        }
        function d(z, P) {
            return parseInt(z, P)
        }
        function w(z) {
            return Math.round(z)
        }
        function f(z) {
            var P = +z[0], _ = +z[1], T = +z[2], N, A, G, W, E, R, Y, Q;
            switch (W = Math.floor(P * 6),
            E = P * 6 - W,
            R = T * (1 - _),
            Y = T * (1 - E * _),
            Q = T * (1 - (1 - E) * _),
            W = W || 0,
            Y = Y || 0,
            Q = Q || 0,
            W % 6) {
            case 0:
                N = T,
                A = Q,
                G = R;
                break;
            case 1:
                N = Y,
                A = T,
                G = R;
                break;
            case 2:
                N = R,
                A = T,
                G = Q;
                break;
            case 3:
                N = R,
                A = Y,
                G = T;
                break;
            case 4:
                N = Q,
                A = R,
                G = T;
                break;
            case 5:
                N = T,
                A = R,
                G = Y;
                break
            }
            return [w(N * 255), w(A * 255), w(G * 255)]
        }
        function S(z) {
            return x(f(z))
        }
        function g(z) {
            var P = +z[0], _ = +z[1], T = +z[2], N = Math.max(P, _, T), A = Math.min(P, _, T), G = N - A, W, E = N === 0 ? 0 : G / N, R = N / 255;
            switch (N) {
            case A:
                W = 0;
                break;
            case P:
                W = _ - T + G * (_ < T ? 6 : 0),
                W /= 6 * G;
                break;
            case _:
                W = T - P + G * 2,
                W /= 6 * G;
                break;
            case T:
                W = P - _ + G * 4,
                W /= 6 * G;
                break
            }
            return [W, E, R]
        }
        function x(z) {
            var P = +z[2] | +z[1] << 8 | +z[0] << 16;
            return P = "000000" + P.toString(16),
            P.slice(-6)
        }
        function C(z) {
            return g(v(z))
        }
        function v(z) {
            return z.length === 3 && (z = z.replace(/./g, "$&$&")),
            [d(z[0] + z[1], 16), d(z[2] + z[3], 16), d(z[4] + z[5], 16)]
        }
        function b(z) {
            return [+z[0] / 360, +z[1] / 100, +z[2] / 100]
        }
        function M(z) {
            return [w(+z[0] * 360), w(+z[1] * 100), w(+z[2] * 100)]
        }
        function I(z) {
            return [+z[0] / 255, +z[1] / 255, +z[2] / 255]
        }
        function B(z) {
            if (h(z))
                return z;
            var P = /\s*rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)\s*$/i.exec(z)
              , _ = /\s*hsv\s*\(\s*(\d+)\s*,\s*(\d+)%\s*,\s*(\d+)%\s*\)\s*$/i.exec(z)
              , T = z[0] === "#" && z.match(/^#([\da-f]{3}|[\da-f]{6})$/i);
            return T ? C(z.slice(1)) : _ ? b([+_[1], +_[2], +_[3]]) : P ? g([+P[1], +P[2], +P[3]]) : [0, 1, 1]
        }
        (function(z) {
            z.version = "1.4.2",
            z[i] = {},
            z.each = function(P, _) {
                return s(function() {
                    var T = z[i], N;
                    for (N in T)
                        P.call(T[N], N, T)
                }, _ === 0 ? 0 : _ || 1),
                z
            }
            ,
            z.parse = B,
            z._HSV2RGB = f,
            z._HSV2HEX = S,
            z._RGB2HSV = g,
            z._HEX2HSV = C,
            z._HEX2RGB = function(P) {
                return I(v(P))
            }
            ,
            z.HSV2RGB = function(P) {
                return f(b(P))
            }
            ,
            z.HSV2HEX = function(P) {
                return S(b(P))
            }
            ,
            z.RGB2HSV = function(P) {
                return M(g(P))
            }
            ,
            z.RGB2HEX = x,
            z.HEX2HSV = function(P) {
                return M(C(P))
            }
            ,
            z.HEX2RGB = v
        }
        )(o[t] = function(z, P, _) {
            var T = e.body
              , N = e.documentElement
              , A = this
              , G = o[t]
              , W = !1
              , E = {}
              , R = e.createElement("div")
              , Y = "touchstart mousedown"
              , Q = "touchmove mousemove"
              , ne = "touchend mouseup"
              , Ce = "orientationchange resize";
            if (!(A instanceof G))
                return new G(z,P);
            G[i][z.id || z.name || p(G[i])] = A,
            (!a(P) || P === !0) && (P = Y);
            function We(q, ee, me) {
                q = q.split(/\s+/);
                for (var fe = 0, Le = q.length; fe < Le; ++fe)
                    ee.addEventListener(q[fe], me, !1)
            }
            function Ue(q, ee, me) {
                q = q.split(/\s+/);
                for (var fe = 0, Le = q.length; fe < Le; ++fe)
                    ee.removeEventListener(q[fe], me)
            }
            function Ke(q, ee) {
                var me = "touches"
                  , fe = "clientX"
                  , Le = "clientY"
                  , Te = ee[me] ? ee[me][0][fe] : ee[fe]
                  , Fe = ee[me] ? ee[me][0][Le] : ee[Le]
                  , tt = lt(q);
                return {
                    x: Te - tt.l,
                    y: Fe - tt.t
                }
            }
            function lt(q) {
                var ee, me, fe;
                return q === o ? (ee = o.pageXOffset || N.scrollLeft,
                me = o.pageYOffset || N.scrollTop) : (fe = q.getBoundingClientRect(),
                ee = fe.left,
                me = fe.top),
                {
                    l: ee,
                    t: me
                }
            }
            function nt(q, ee) {
                for (; (q = q.parentElement) && q !== ee; )
                    ;
                return q
            }
            function mt(q) {
                q && q.preventDefault()
            }
            function Ee(q) {
                return q === o ? {
                    w: o.innerWidth,
                    h: o.innerHeight
                } : {
                    w: q.offsetWidth,
                    h: q.offsetHeight
                }
            }
            function je(q) {
                return W || (a(q) ? q : !1)
            }
            function Je(q) {
                W = q
            }
            function ht(q, ee, me) {
                return a(q) ? a(ee) ? (a(E[q]) || (E[q] = {}),
                a(me) || (me = p(E[q])),
                E[q][me] = ee,
                A) : E[q] : E
            }
            function ts(q, ee) {
                return a(q) ? a(ee) ? (delete E[q][ee],
                A) : (E[q] = {},
                A) : (E = {},
                A)
            }
            function pe(q, ee, me) {
                if (!a(E[q]))
                    return A;
                if (a(me))
                    a(E[q][me]) && E[q][me].apply(A, ee);
                else
                    for (var fe in E[q])
                        E[q][fe].apply(A, ee);
                return A
            }
            Je(G.parse(z.getAttribute("data-color") || z.value || [0, 1, 1])),
            R.className = "color-picker",
            R.innerHTML = '<div class="color-picker-container"><span class="color-picker-h"><i></i></span><span class="color-picker-sv"><i></i></span></div>';
            var Ti = R[r].children, ke = je([0, 1, 1]), yt = Ti[0], ct = Ti[1], $t = yt[r], xt = ct[r], Xt = 0, Zt = 0, Bt = 0, Qt = 0, zt = 0, bt = 0, Ci = 0, Pi = 0, Pe = [S(ke)], Kt;
            function et(q, ee) {
                (!q || q === "h") && pe("change:h", ee),
                (!q || q === "sv") && pe("change:sv", ee),
                pe("change", ee)
            }
            function Jt() {
                return R.parentNode
            }
            function Et(q, ee) {
                q || ((_ || ee || T).appendChild(R),
                A.visible = !0),
                Ci = Ee(R).w,
                Pi = Ee(R).h;
                var me = Ee(ct)
                  , fe = Ee(xt)
                  , Le = Ee(yt).h
                  , Te = me.w
                  , Fe = me.h
                  , tt = Ee($t).h
                  , Rt = fe.w
                  , Ot = fe.h;
                if (q) {
                    let de = function(ze) {
                        var Ye = ze.target
                          , qe = Ye === z || nt(Ye, z) === z;
                        qe ? !Jt() && (Et(),
                        pe("enter")) : A.exit()
                    };
                    R.style.left = R.style.top = "-9999px",
                    P !== !1 && We(P, z, de),
                    A.create = function() {
                        return Et(1),
                        pe("create"),
                        A
                    }
                    ,
                    A.destroy = function() {
                        return P !== !1 && Ue(P, z, de),
                        A.exit(),
                        Je(!1),
                        pe("destroy"),
                        A
                    }
                } else
                    ei();
                Kt = function() {
                    ke = je(ke),
                    kt(),
                    $t.style.top = Le - tt / 2 - Le * +ke[0] + "px",
                    xt.style.right = Te - Rt / 2 - Te * +ke[1] + "px",
                    xt.style.top = Fe - Ot / 2 - Fe * +ke[2] + "px"
                }
                ,
                A.exit = function(de) {
                    var ze = Jt();
                    return ze && (ze.removeChild(R),
                    A.visible = !1),
                    Ue(Y, yt, Di),
                    Ue(Y, ct, Ai),
                    Ue(Q, e, Ft),
                    Ue(ne, e, Li),
                    Ue(Ce, o, ei),
                    pe("exit"),
                    A
                }
                ;
                function kt(de) {
                    f(ke);
                    var ze = f([ke[0], 1, 1]);
                    ct.style.backgroundColor = "rgb(" + ze.join(",") + ")",
                    Je(ke),
                    mt(de)
                }
                Kt();
                function is(de) {
                    var ze = c(Ke(yt, de).y, 0, Le);
                    ke[0] = (Le - ze) / Le,
                    $t.style.top = ze - tt / 2 + "px",
                    kt(de)
                }
                function rs(de) {
                    var ze = Ke(ct, de)
                      , Ye = c(ze.x, 0, Te)
                      , qe = c(ze.y, 0, Fe);
                    ke[1] = 1 - (Te - Ye) / Te,
                    ke[2] = (Fe - qe) / Fe,
                    xt.style.right = Te - Ye - Rt / 2 + "px",
                    xt.style.top = qe - Ot / 2 + "px",
                    kt(de)
                }
                function Ft(de) {
                    Bt && (is(de),
                    Pe = [S(ke)],
                    Xt || (pe("drag:h", Pe),
                    pe("drag", Pe),
                    et("h", Pe))),
                    Qt && (rs(de),
                    Pe = [S(ke)],
                    Zt || (pe("drag:sv", Pe),
                    pe("drag", Pe),
                    et("sv", Pe))),
                    Xt = 0,
                    Zt = 0
                }
                function Li(de) {
                    var ze = de.target
                      , Ye = Bt ? "h" : "sv"
                      , qe = [S(ke), A]
                      , ss = ze === z || nt(ze, z) === z
                      , Bi = ze === R || nt(ze, R) === R;
                    !ss && !Bi ? Jt() && P !== !1 && (A.exit(),
                    et(0, qe)) : Bi && (pe("stop:" + Ye, qe),
                    pe("stop", qe),
                    et(Ye, qe)),
                    Bt = 0,
                    Qt = 0
                }
                function Di(de) {
                    Xt = 1,
                    Bt = 1,
                    Ft(de),
                    mt(de),
                    pe("start:h", Pe),
                    pe("start", Pe),
                    et("h", Pe)
                }
                function Ai(de) {
                    Zt = 1,
                    Qt = 1,
                    Ft(de),
                    mt(de),
                    pe("start:sv", Pe),
                    pe("start", Pe),
                    et("sv", Pe)
                }
                q || (We(Y, yt, Di),
                We(Y, ct, Ai),
                We(Q, e, Ft),
                We(ne, e, Li),
                We(Ce, o, ei))
            }
            Et(1),
            s(function() {
                var q = [S(ke)];
                pe("create", q),
                et(0, q)
            }, 0),
            A.fit = function(q) {
                var ee = Ee(o)
                  , me = Ee(N)
                  , fe = ee.w - me.w
                  , Le = ee.h - N.clientHeight
                  , Te = lt(o)
                  , Fe = lt(z);
                if (zt = Fe.l + Te.l,
                bt = Fe.t + Te.t + Ee(z).h,
                h(q))
                    a(q[0]) && (zt = q[0]),
                    a(q[1]) && (bt = q[1]);
                else {
                    var tt = Te.l
                      , Rt = Te.t
                      , Ot = Te.l + ee.w - Ci - fe
                      , kt = Te.t + ee.h - Pi - Le;
                    zt = c(zt, tt, Ot) >> 0,
                    bt = c(bt, Rt, kt) >> 0
                }
                return R.style.left = zt + "px",
                R.style.top = bt + "px",
                pe("fit"),
                A
            }
            ;
            function ei() {
                return A.fit()
            }
            return A.set = function(q) {
                return a(q) ? (l(q) && (q = G.parse(q)),
                Je(q),
                Kt(),
                A) : je()
            }
            ,
            A.get = function(q) {
                return je(q)
            }
            ,
            A.source = z,
            A.self = R,
            A.visible = !1,
            A.on = ht,
            A.off = ts,
            A.fire = pe,
            A.hooks = E,
            A.enter = function(q) {
                return Et(0, q),
                pe("enter"),
                A
            }
            ,
            A
        }
        )
    }
    )(window, document, "CP")),
    zr
}
jo();
function Qr(o) {
    const e = {
        width: 64,
        height: 64
    };
    return {
        width: Math.round(e.width * Number(o.size) / 4) * 4,
        height: Math.round(e.height * Number(o.size) / 4) * 4
    }
}
function Kr(o) {
    const e = fi[o.type]
      , t = Qr(o)
      , i = y.rgbToHex(y.intToRgb(o.color))
      , r = o.stroke;
    let s = e.code.replace(/white/g, i);
    return s = s.replace(/stroke-width=".5"/g, `stroke-width="${r}"`),
    s = s.replace(/width="64"/g, `width="${t.width}"`),
    s = s.replace(/height="64"/g, `height="${t.height}"`),
    `url('data:image/svg+xml;utf8,${s = s.replace(/#/g, "%23")}')`
}
function Yo(o) {
    const e = Qr(o);
    return `${Kr(o)} ${e.width / 2} ${e.height / 2}, crosshair`
}
const Ct = {
    getCursorURL: function(o) {
        return Kr(o)
    },
    setElemCrosshair: function(o, e) {
        let t = "crosshair";
        const i = fi[e.type];
        i && (t = i.cursor ? i.cursor : Yo(e)),
        o.css({
            cursor: t
        })
    },
    setGameCrosshair: function(o) {
        Ct.setElemCrosshair(u("#game-area-wrapper"), o);
        const e = fi[o.type]
          , t = !e || e.cursor ? "pointer" : "inherit";
        u(".ui-zoom, .ui-medical, .ui-settings-button, .ui-weapon-switch").css({
            cursor: t
        })
    }
};
class _e {
    constructor(e) {
        this.selector = e,
        e.find(".close").on("click", t => {
            this.hide(t)
        }
        ),
        this.modalCloseListener = t => {
            u(t.target).closest(".modal-close").length == 0 && (u(t.target).is(this.selector) || !this.checkSelector) && (t.stopPropagation(),
            this.hide())
        }
    }
    checkSelector = !0;
    skipFade = !1;
    visible = !1;
    onShowFn = function() {}
    ;
    onHideFn = function(e) {}
    ;
    modalCloseListener;
    onShow(e) {
        this.onShowFn = e
    }
    onHide(e) {
        this.onHideFn = e
    }
    isVisible() {
        return this.visible
    }
    show(e) {
        this.visible || (this.visible = !0,
        this.selector.finish(),
        this.selector.css("display", "block"),
        this.onShowFn(),
        e || u(document).on("click touchend", this.modalCloseListener))
    }
    hide(e) {
        this.visible && (this.visible = !1,
        this.skipFade ? this.selector.css("display", "none") : this.selector.fadeOut(200),
        this.onHideFn(e),
        u(document).off("click touchend", this.modalCloseListener))
    }
}
function kr(o) {
    const e = {
        [ve.Top]: "customize-emote-top",
        [ve.Right]: "customize-emote-right",
        [ve.Bottom]: "customize-emote-bottom",
        [ve.Left]: "customize-emote-left",
        [ve.Win]: "customize-emote-win",
        [ve.Death]: "customize-emote-death"
    }
      , t = e[o] || e[ve.Top];
    return u(`#${t}`)
}
function Ut(o) {
    return function(e, t) {
        const i = U[e.type].rarity || Oe.Stock
          , r = U[t.type].rarity || Oe.Stock;
        return i == Oe.Stock && r == Oe.Stock ? Ht(e, t) : i == Oe.Stock ? -1 : r == Oe.Stock ? 1 : o(e, t)
    }
}
function Ho(o, e) {
    return e.timeAcquired == o.timeAcquired ? Jr(o, e) : e.timeAcquired - o.timeAcquired
}
function Ht(o, e) {
    const t = U[o.type]
      , i = U[e.type];
    return t.name < i.name ? -1 : t.name > i.name ? 1 : 0
}
function $o(o, e) {
    const t = U[o.type].rarity || Oe.Stock
      , i = U[e.type].rarity || Oe.Stock;
    return t == i ? Ht(o, e) : i - t
}
function Jr(o, e) {
    const t = U[o.type]
      , i = U[e.type];
    return !t.category || !i.category || t.category == i.category ? Ht(o, e) : t.category - i.category
}
const vr = {
    newest: Ut(Ho),
    alpha: Ut(Ht),
    rarity: Ut($o),
    subcat: Ut(Jr)
};
class Xo {
    constructor(e, t) {
        this.account = e,
        this.localization = t,
        D.touch || this.categories.push({
            loadoutType: "crosshair",
            gameType: "crosshair",
            categoryImage: "img/gui/loadout-crosshair.svg"
        }),
        this.categories.push({
            loadoutType: "player_icon",
            gameType: "emote",
            categoryImage: "img/gui/loadout-emote.svg"
        }),
        this.modalCustomize = u("#modal-customize"),
        this.modalCustomizeList = u("#modal-customize-list"),
        this.modalCustomizeItemRarity = u("#modal-customize-item-rarity"),
        this.modalCustomizeItemName = u("#modal-customize-item-name"),
        this.modalCustomizeItemLore = u("#modal-customize-item-lore"),
        this.modalCustomizeItemSource = u("#modal-customize-item-source"),
        this.modal = new _e(this.modalCustomize),
        this.modal.onShow( () => {
            this.onShow()
        }
        ),
        this.modal.onHide( () => {
            this.onHide()
        }
        );
        const i = function() {
            u("#modal-screen-block").fadeIn(200)
        };
        this.confirmItemModal = new _e(u("#modal-item-confirm")),
        this.confirmItemModal.onShow(i),
        this.confirmItemModal.onHide(r => {
            if (r?.target?.dataset?.confirmAll) {
                this.confirmAllItems();
                return
            }
            this.confirmNextItem()
        }
        ),
        e.addEventListener("request", this.onRequest.bind(this)),
        e.addEventListener("loadout", this.onLoadout.bind(this)),
        e.addEventListener("items", this.onItems.bind(this)),
        e.addEventListener("pass", this.onPass.bind(this))
    }
    initialized = !1;
    active = !1;
    items = [];
    loadoutDisplay = null;
    loadout = we.defaultLoadout();
    localPendingConfirm = [];
    localConfirmed = [];
    confirmingItems = !1;
    localAckItems = [];
    categories = [{
        loadoutType: "outfit",
        gameType: "outfit",
        categoryImage: "img/gui/loadout-outfit.svg"
    }, {
        loadoutType: "melee",
        gameType: "melee",
        categoryImage: "img/gui/loadout-melee.svg"
    }, {
        loadoutType: "emote",
        gameType: "emote",
        categoryImage: "img/gui/loadout-emote.svg"
    }, {
        loadoutType: "heal",
        gameType: "heal_effect",
        categoryImage: "img/gui/loadout-heal.svg"
    }, {
        loadoutType: "boost",
        gameType: "boost_effect",
        categoryImage: "img/gui/loadout-boost.svg"
    }];
    selectedItem = {
        prevSlot: null,
        img: "",
        type: ""
    };
    emotesLoaded = !1;
    selectedCatIdx = 0;
    selectedCatItems = [];
    equippedItems = [];
    modalCustomize;
    modalCustomizeList;
    modalCustomizeItemRarity;
    modalCustomizeItemName;
    modalCustomizeItemLore;
    modalCustomizeItemSource;
    picker;
    modal;
    confirmItemModal;
    itemSort;
    selectableCats;
    selectableCatConnects;
    selectableCatImages;
    selectableSlots;
    droppableSlots;
    highlightedSlots;
    itemSelected;
    highlightOpacityMin;
    init() {
        if (!this.initialized) {
            for (let r = 0; r < this.categories.length; r++) {
                const s = u("<div/>", {
                    class: "modal-customize-cat",
                    "data-idx": r
                });
                r == this.categories.length - 1 && s.attr("id", "modal-customize-cat-standalone"),
                s.append(u("<div/>", {
                    class: "modal-customize-cat-image",
                    css: {
                        "background-image": `url(${this.categories[r].categoryImage})`
                    }
                })),
                s.append(u("<div/>", {
                    class: "modal-customize-cat-connect"
                })),
                s.append(u("<div/>", {
                    class: "account-alert account-alert-cat"
                })),
                u("#modal-customize-header").append(s)
            }
            this.selectableCats = u(".modal-customize-cat"),
            this.selectableCatConnects = u(".modal-customize-cat-connect"),
            this.selectableCatImages = u(".modal-customize-cat-image"),
            this.selectableCats.on("mouseup", r => {
                const a = u(r.currentTarget).data("idx");
                this.selectedCatIdx != a && this.selectCat(a)
            }
            ),
            this.itemSort = u("#modal-customize-sort"),
            this.itemSort.on("change", r => {
                this.sortItems(r.target.value)
            }
            ),
            this.modalCustomizeItemName.on("click", () => {
                const r = document.getElementsByClassName("customize-list-item-selected");
                r.length > 0 && window.self === window.top && r[0].scrollIntoView({
                    behavior: "smooth",
                    block: "start",
                    inline: "nearest"
                })
            }
            ),
            u("#crosshair-size").on("input", () => {
                this.updateLoadoutFromDOM()
            }
            ),
            u("#crosshair-stroke").on("input", () => {
                this.updateLoadoutFromDOM()
            }
            );
            const e = document.getElementById("color-picker");
            this.picker = new window.CP(e,!1,e),
            this.picker.self.classList.add("static"),
            this.picker.on("change", r => {
                u("#color-picker-hex").val(r),
                this.loadout?.crosshair && this.updateLoadoutFromDOM()
            }
            );
            const t = document.querySelector("#color-picker-hex")
              , i = () => {
                const r = t.value;
                if (r.length)
                    if (r.length == 6)
                        this.picker.set(`#${r}`),
                        this.picker.fire("change", [r]);
                    else if (r.length == 7 && r[0] == "#")
                        this.picker.set(r),
                        this.picker.fire("change", [r.slice(1)]);
                    else
                        return
            }
            ;
            t.oncut = i,
            t.onpaste = i,
            t.onkeyup = i,
            t.oninput = i,
            this.initialized = !0
        }
    }
    show() {
        this.init(),
        this.modal.show()
    }
    hide() {
        this.modal.hide()
    }
    onShow() {
        this.active = !0,
        this.localAckItems = [];
        for (let e = 0; e < this.items.length; e++) {
            const t = this.items[e];
            t.status < we.ItemStatus.Ackd && this.localAckItems.push(t)
        }
        this.selectCat(0),
        this.tryBeginConfirmingItems(),
        u("#start-bottom-right, #start-main").fadeOut(200),
        u("#background").hide()
    }
    onHide() {
        this.active = !1,
        we.modified(this.loadout, this.account.loadout) && this.account.setLoadout(this.loadout),
        this.clearConfirmItemModal(),
        this.modalCustomize.css({
            cursor: "initial"
        }),
        u("#start-bottom-right, #start-main").fadeIn(200),
        u("#background").show()
    }
    onResize() {
        D.mobile && (this.categories[this.selectedCatIdx].loadoutType == "emote" ? u("#modal-customize-list").attr("style", "") : u("#modal-customize-list").attr("style", D.isLandscape ? "" : "height: 380px"))
    }
    onRequest() {
        u("#modal-customize-loading").css("opacity", this.account.requestsInFlight > 0 ? 1 : 0)
    }
    onLoadout(e) {
        this.loadout = we.validate(e),
        Ct.setGameCrosshair(e.crosshair),
        this.active && this.selectCat(this.selectedCatIdx)
    }
    onItems(e) {
        this.items = we.getUserAvailableItems(e);
        for (let t = 0; t < this.items.length; t++) {
            const i = this.items[t];
            i.status < we.ItemStatus.Confirmed && !this.localPendingConfirm.find(r => r.type == i.type) && !this.localConfirmed.find(r => r.type == i.type) && this.localPendingConfirm.push(i),
            i.status < we.ItemStatus.Ackd && !this.localAckItems.find(r => r.type == i.type) && this.localAckItems.push(i)
        }
        this.active && (this.tryBeginConfirmingItems(),
        this.selectCat(this.selectedCatIdx))
    }
    onPass(e) {
        const t = ["facebook", "instagram", "youtube", "twitter"];
        for (let i = 0; i < t.length; i++) {
            const r = t[i]
              , s = !!e.unlocks[r]
              , a = u(`.customize-social-unlock[data-lock-reason='${r}']`);
            a.css({
                display: s ? "none" : "inline-block"
            }),
            a.off("click").on("click", () => {
                this.account.setPassUnlock(r)
            }
            )
        }
    }
    getCategory(e) {
        for (let t = 0; t < this.categories.length; t++) {
            const i = this.categories[t];
            if (i.gameType == e)
                return i
        }
        return null
    }
    clearConfirmItemModal() {
        this.localPendingConfirm = [],
        this.localConfirmed = [],
        this.confirmingItems = !1,
        this.confirmItemModal.hide()
    }
    setItemsConfirmed() {
        const e = [];
        for (let t = 0; t < this.items.length; t++) {
            const i = this.items[t];
            i.status < we.ItemStatus.Confirmed && e.push(i.type)
        }
        e.length > 0 && this.account.setItemStatus(we.ItemStatus.Confirmed, e)
    }
    setItemsAckd(e) {
        const t = this.categories[e]
          , i = [];
        for (let r = 0; r < this.items.length; r++) {
            const s = this.items[r]
              , a = U[s.type];
            a && a.type == t.gameType && s?.status < we.ItemStatus.Ackd && i.push(s.type)
        }
        i.length > 0 && this.account.setItemStatus(we.ItemStatus.Ackd, i)
    }
    tryBeginConfirmingItems() {
        this.active && !this.confirmingItems && (this.confirmingItems = !0,
        this.confirmNextItem())
    }
    confirmAllItems() {
        this.clearConfirmItemModal(),
        u("#modal-screen-block").fadeOut(300)
    }
    confirmNextItem() {
        this.setItemsConfirmed();
        const e = this.localPendingConfirm.shift();
        if (e) {
            this.localConfirmed.push(e);
            const t = U[e.type]
              , i = {
                type: e.type,
                rarity: t.rarity || Oe.Stock,
                displayName: this.localization.translate(t.name) || t.name,
                category: t.type
            }
              , s = `url(${Z.getSvgFromGameType(e.type)})`
              , a = Z.getCssTransformFromGameType(e.type);
            setTimeout( () => {
                u("#modal-item-confirm-name").html(i.displayName),
                u("#modal-item-confirm-image-inner").css({
                    "background-image": s,
                    transform: a
                }),
                this.confirmItemModal.show()
            }
            , 200)
        } else
            this.confirmingItems = !1,
            u("#modal-screen-block").fadeOut(300)
    }
    sortItems(e) {
        this.selectedCatItems.sort(vr[e]);
        const t = this.categories[this.selectedCatIdx]
          , i = u("<div/>");
        for (let r = 0; r < this.selectedCatItems.length; r++) {
            const s = this.selectedCatItems[r];
            s.outerDiv?.data("idx", r),
            i.append(s.outerDiv)
        }
        this.modalCustomizeList.html(""),
        this.modalCustomizeList.append(i),
        this.selectableSlots.off("mouseup"),
        this.setItemListeners(t.loadoutType)
    }
    setItemListeners(e) {
        if (this.selectableSlots.on("mouseup", t => {
            const i = t.currentTarget;
            if (!u(i).hasClass("customize-list-item-locked")) {
                if (this.itemSelected && !u(i).hasClass("customize-list-item")) {
                    this.itemSelected = !1;
                    return
                }
                this.selectItem(u(i)),
                this.updateLoadoutFromDOM()
            }
        }
        ),
        e == "emote")
            this.setEmoteDraggable(this.selectableSlots, this),
            this.emotesLoaded || (this.setEmoteDraggable(this.droppableSlots, this),
            this.droppableSlots.on("mouseup", t => {
                const i = t.currentTarget;
                if (!u(i).hasClass("customize-list-item-locked")) {
                    if (this.itemSelected && !u(i).hasClass("customize-list-item")) {
                        this.deselectItem();
                        return
                    }
                    this.selectItem(u(i)),
                    this.updateLoadoutFromDOM()
                }
            }
            ),
            this.droppableSlots.on("drop", t => {
                t.originalEvent?.preventDefault();
                const i = t.currentTarget
                  , r = u(i).parent();
                this.updateSlot(r, this.selectedItem.img, this.selectedItem.type),
                this.updateLoadoutFromDOM(),
                this.deselectItem()
            }
            ),
            this.droppableSlots.on("mousedown", t => {
                if (this.itemSelected) {
                    t.stopPropagation();
                    const i = u(t.currentTarget).parent();
                    this.updateSlot(i, this.selectedItem.img, this.selectedItem.type),
                    this.updateLoadoutFromDOM()
                }
            }
            ),
            this.droppableSlots.on("dragover", function(t) {
                t.originalEvent?.preventDefault(),
                u(this).parent().find(".ui-emote-hl").css("opacity", 1)
            }),
            this.droppableSlots.on("dragleave", t => {
                t.originalEvent?.preventDefault(),
                u(t.currentTarget).parent().find(".ui-emote-hl").css("opacity", this.highlightOpacityMin)
            }
            ),
            this.droppableSlots.on("dragend", t => {
                t.originalEvent?.preventDefault(),
                this.deselectItem()
            }
            ),
            u(".ui-emote-auto-trash").on("click", t => {
                const i = u(t.currentTarget).parent();
                this.updateSlot(i, "", ""),
                this.updateLoadoutFromDOM()
            }
            ),
            this.emotesLoaded = !0);
        else if (e == "crosshair") {
            const t = y.intToHex(this.loadout.crosshair.color)
              , i = [t.slice(1)];
            this.picker.set(t),
            u("#color-picker-hex").val(i),
            u("#crosshair-size").val(this.loadout.crosshair.size),
            u("#crosshair-stroke").val(this.loadout.crosshair.stroke)
        }
    }
    updateLoadoutFromDOM() {
        const e = this.categories[this.selectedCatIdx].loadoutType;
        if (e == "emote")
            for (let t = 0; t < ve.Count; t++) {
                const r = kr(t).data("idx")
                  , s = this.equippedItems[r];
                s?.type ? this.loadout.emotes[t] = s.type : this.loadout.emotes[t] = ""
            }
        else if (e == "crosshair") {
            const t = parseFloat(u("#crosshair-size").val())
              , i = u("#color-picker-hex").val()
              , r = parseFloat(u("#crosshair-stroke").val());
            this.loadout.crosshair = {
                type: this.selectedItem.type,
                color: y.hexToInt(i),
                size: t.toFixed(2),
                stroke: r.toFixed(2)
            }
        } else
            this.loadout[e] = this.selectedItem.type;
        this.loadout = we.validate(this.loadout),
        this.loadoutDisplay?.initialized && this.loadoutDisplay.setLoadout(this.loadout),
        this.selectedItem.loadoutType == "crosshair" && this.setSelectedCrosshair()
    }
    selectItem(e, t=!0) {
        const i = e.hasClass("customize-list-item")
          , r = i ? e : e.parent()
          , s = r.find(".customize-item-image")
          , a = r.data("idx")
          , l = r.data("slot") ? this.equippedItems[a] : this.selectedCatItems[a];
        if (!l) {
            this.itemSelected = !1,
            this.selectedItem = {
                prevSlot: null,
                img: "",
                type: ""
            };
            return
        }
        if (l.type == this.selectedItem.type && l.loadoutType == "emote" && this.selectedItem.loadoutType == "emote" && t) {
            this.deselectItem();
            return
        }
        this.itemSelected = !0,
        this.selectedItem = {
            prevSlot: i ? null : r,
            img: s.data("img"),
            type: l.type,
            rarity: l.rarity,
            displayName: l.displayName || "",
            displaySource: l.displaySource || "Unknown",
            displayLore: l.displayLore || "",
            loadoutType: l.loadoutType,
            subcat: l.subcat
        },
        this.modalCustomizeItemName.html(this.selectedItem.displayName);
        const h = this.localization.translate(`loadout-${l.displaySource}`) || this.localization.translate(`${l.displaySource}`) || this.selectedItem.displaySource
          , p = `${this.localization.translate("loadout-acquired")}: ${h}`;
        this.modalCustomizeItemSource.html(p);
        const c = {
            [He.Locked]: this.localization.translate("emote-subcat-locked"),
            [He.Faces]: this.localization.translate("emote-subcat-faces"),
            [He.Food]: this.localization.translate("emote-subcat-food"),
            [He.Animals]: this.localization.translate("emote-subcat-animals"),
            [He.Logos]: this.localization.translate("emote-subcat-logos"),
            [He.Other]: this.localization.translate("emote-subcat-other"),
            [He.Flags]: this.localization.translate("emote-subcat-flags"),
            [He.Default]: this.localization.translate("emote-subcat-default")
        }
          , d = l.loadoutType == "emote" ? `${this.localization.translate("loadout-category")}: ${c[l.subcat]}` : this.selectedItem.displayLore;
        this.modalCustomizeItemLore.html(d);
        const w = ["stock", "common", "uncommon", "rare", "epic", "mythic"]
          , f = ["#c5c5c5", "#c5c5c5", "#12ff00", "#00deff", "#f600ff", "#d96100"]
          , S = this.localization.translate(`loadout-${w[this.selectedItem.rarity]}`);
        if (this.modalCustomizeItemRarity.html(S),
        this.modalCustomizeItemRarity.css({
            color: f[this.selectedItem.rarity]
        }),
        this.selectedItem.loadoutType == "emote" && this.highlightedSlots.css({
            display: "block",
            opacity: this.highlightOpacityMin
        }),
        this.selectableSlots.removeClass("customize-list-item-selected"),
        i ? e.addClass("customize-list-item-selected") : r.find(".ui-emote-hl").css("opacity", 1),
        this.selectedItem.loadoutType == "crosshair") {
            const x = U[this.selectedItem.type];
            x && x.type == "crosshair" && x.cursor ? u("#modal-content-right-crosshair").css("display", "none") : (u("#modal-content-right-crosshair").css("display", "block"),
            this.picker.exit(),
            this.picker.enter())
        }
        const g = this.localAckItems.findIndex(x => x.type == this.selectedItem.type);
        g !== -1 && (e.find(".account-alert").removeClass("account-alert account-alert-cat"),
        this.localAckItems.splice(g, 1),
        this.setCategoryAlerts())
    }
    updateSlot(e, t, i) {
        const r = this.selectedItem.prevSlot;
        if (this.selectedItem = {},
        r) {
            const s = e.find(".customize-item-image")
              , a = e.data("idx")
              , l = this.equippedItems[a];
            let h = "";
            l.type && (h = l.type),
            this.updateSlot(r, s.data("img"), h)
        }
        this.updateSlotData(e, t, i)
    }
    deselectItem() {
        this.itemSelected = !1,
        this.selectedItem = {},
        this.selectableSlots.removeClass("customize-list-item-selected"),
        this.highlightedSlots.css({
            display: "none",
            opacity: 0
        }),
        this.modalCustomizeItemName.html(""),
        this.modalCustomizeItemSource.html(""),
        this.modalCustomizeItemLore.html(""),
        this.modalCustomizeItemRarity.html("")
    }
    updateSlotData(e, t, i) {
        const r = e.find(".customize-emote-slot");
        r.css("background-image", t || "none"),
        r.data("img", t || "none");
        const s = U[i]
          , a = e.data("idx");
        if (s) {
            const l = {
                loadoutType: "emote",
                type: i,
                rarity: s.rarity || Oe.Stock,
                displayName: this.localization.translate(s.name || "") || s.name,
                displayLore: this.localization.translate(s.lore || "") || s.lore,
                subcat: s.category
            };
            this.equippedItems[a] = l
        } else
            this.equippedItems[a] = {}
    }
    selectCat(e) {
        const t = this.selectedCatIdx;
        if (this.selectedCatIdx = e,
        this.setItemsAckd(this.selectedCatIdx),
        t != this.selectedCatIdx) {
            const g = this.categories[t];
            for (let x = this.localAckItems.length - 1; x >= 0; x--) {
                const C = this.localAckItems[x];
                U[C.type].type == g.gameType && this.localAckItems.splice(x, 1)
            }
        }
        const i = this.categories[this.selectedCatIdx]
          , r = this.items.filter(g => {
            const x = U[g.type];
            return x && x.type == i.gameType
        }
        )
          , s = i.loadoutType == "emote" || i.loadoutType == "player_icon";
        u("#customize-sort-subcat").css("display", s ? "block" : "none");
        let a = this.itemSort.val();
        !s && a == "subcat" && (a = "newest",
        this.itemSort.val(a)),
        r.sort(vr[a]);
        const l = i.loadoutType == "emote"
          , h = i.loadoutType == "crosshair"
          , p = i.loadoutType == "emote";
        this.loadoutDisplay?.setView(i.loadoutType);
        const c = u(`.modal-customize-cat[data-idx='${this.selectedCatIdx}']`);
        this.selectableCats.removeClass("modal-customize-cat-selected"),
        this.selectableCatConnects.removeClass("modal-customize-cat-connect-selected"),
        this.selectableCatImages.removeClass("modal-customize-cat-image-selected"),
        c.addClass("modal-customize-cat-selected"),
        c.find(".modal-customize-cat-connect").addClass("modal-customize-cat-connect-selected"),
        c.find(".modal-customize-cat-image").addClass("modal-customize-cat-image-selected");
        const d = this.localization.translate(`loadout-title-${i.loadoutType}`).toUpperCase();
        u("#modal-customize-cat-title").html(d),
        u("#modal-content-right-crosshair").css("display", i.loadoutType == "crosshair" ? "block" : "none"),
        u("#modal-content-right-emote").css("display", i.loadoutType == "emote" ? "block" : "none"),
        u("#customize-emote-parent").css("display", l ? "block" : "none"),
        u("#customize-crosshair-parent").css("display", h ? "block" : "none"),
        this.modalCustomizeItemName.html(""),
        this.modalCustomizeItemSource.html(""),
        this.modalCustomizeItemLore.html(""),
        this.modalCustomizeItemRarity.html("");
        const w = function(g) {
            const x = U[g];
            return x?.name ? x.name : g
        };
        this.selectedCatItems = [];
        let f = "";
        const S = u("<div/>");
        for (let g = 0; g < r.length; g++) {
            const x = r[g]
              , C = U[x.type]
              , v = {
                loadoutType: i.loadoutType,
                type: x.type,
                rarity: C.rarity || Oe.Stock,
                displayName: this.localization.translate(C.name || "") || C.name,
                displayLore: this.localization.translate(C.lore || "") || C.lore,
                displaySource: w(x.source),
                timeAcquired: x.timeAcquired,
                idx: g,
                subcat: C.category,
                outerDiv: null
            }
              , b = u("<div/>", {
                class: "customize-list-item customize-list-item-unlocked",
                "data-idx": g
            })
              , M = Z.getSvgFromGameType(x.type)
              , I = Z.getCssTransformFromGameType(x.type)
              , B = u("<div/>", {
                class: "customize-item-image",
                css: {
                    "background-image": `url(${M})`,
                    transform: I
                },
                "data-img": `url(${M})`,
                draggable: p
            });
            if (b.append(B),
            this.localAckItems.findIndex(z => z.type == x.type) !== -1) {
                const z = u("<div/>", {
                    class: "account-alert account-alert-cat",
                    css: {
                        display: "block"
                    }
                });
                b.append(z)
            }
            if (i.gameType == "crosshair") {
                const z = {
                    type: v.type,
                    color: 16777215,
                    size: 1,
                    stroke: 0
                };
                Ct.setElemCrosshair(b, z)
            }
            S.append(b),
            v.outerDiv = b,
            this.selectedCatItems.push(v),
            f || (i.loadoutType == "crosshair" && v.type == this.loadout.crosshair.type || i.loadoutType != "emote" && v.type == this.loadout[i.loadoutType]) && (f = v.outerDiv)
        }
        if (this.modalCustomizeList.html(""),
        this.modalCustomizeList.append(S),
        window.self === window.top && this.modalCustomizeList.scrollTop(0),
        i.loadoutType == "emote") {
            this.equippedItems = [];
            for (let g = 0; g < this.loadout.emotes.length; g++) {
                this.equippedItems.push({});
                const x = this.loadout.emotes[g];
                if (U[x]) {
                    const v = `url(${Z.getSvgFromGameType(x)})`
                      , b = kr(g);
                    this.updateSlotData(b, v, x)
                }
            }
        }
        if (this.selectableSlots = u(".customize-list-item"),
        this.droppableSlots = u(".customize-col"),
        this.highlightedSlots = this.droppableSlots.siblings(".ui-emote-hl"),
        this.highlightOpacityMin = .4,
        this.itemSelected = !1,
        this.setItemListeners(i.loadoutType),
        this.setCategoryAlerts(),
        this.deselectItem(),
        f != "" && (this.selectItem(f),
        i.loadoutType == "crosshair" && this.setSelectedCrosshair(),
        this.modalCustomizeItemName.trigger("click")),
        D.browser == "edge")
            if (i.loadoutType == "crosshair") {
                const g = function(x, C) {
                    const v = x.height() + parseInt(x.css("padding-top")) + parseInt(x.css("padding-bottom"));
                    C.css("height", v)
                };
                g(u("#modal-customize-body"), u("#modal-content-left").find(".modal-disabled")),
                g(u("#modal-content-right-crosshair"), u("#modal-content-right-crosshair").find(".modal-disabled")),
                u(".modal-disabled").css("display", "block")
            } else
                u(".modal-disabled").css("display", "none");
        this.onResize()
    }
    setCategoryAlerts() {
        for (let e = 0; e < this.categories.length; e++) {
            const t = this.categories[e]
              , i = this.localAckItems.filter(r => {
                const s = U[r.type];
                return s && s.type == t.gameType
            }
            );
            u(`.modal-customize-cat[data-idx='${e}']`).find(".account-alert-cat").css("display", i.length > 0 ? "block" : "none")
        }
    }
    setEmoteDraggable(e, t) {
        e.on("dragstart", function(i) {
            if (!u(this).hasClass("customize-list-item-locked") && (t.selectItem(u(this), !1),
            D.browser != "edge")) {
                const r = document.createElement("img");
                r.src = t.selectedItem.img ? t.selectedItem.img.replace("url(", "").replace(")", "").replace(/\'/gi, "") : "",
                i.originalEvent?.dataTransfer?.setDragImage(r, 64, 64)
            }
        })
    }
    setSelectedCrosshair() {
        const e = this.loadout.crosshair;
        u("#customize-crosshair-selected").find(".customize-item-image").css({
            "background-image": Ct.getCursorURL(e)
        }),
        Ct.setElemCrosshair(u("#customize-crosshair-selected"), e)
    }
}
function _r(o, e, t, i) {
    const r = u("<div/>", {
        class: "copy-toast",
        html: o
    });
    e.append(r),
    r.css({
        left: i.pageX - parseInt(r.css("width")) / 2,
        top: t.offset().top
    }),
    r.animate({
        top: "-=25",
        opacity: 1
    }, {
        queue: !1,
        duration: 300,
        complete: function() {
            u(this).fadeOut(250, function() {
                u(this).remove()
            })
        }
    })
}
function Zo(o, e) {
    const t = u("#start-menu");
    u("#btn-help").on("click", () => {
        const g = u("#start-help");
        t.addClass("display-help");
        const x = t.css("height");
        return g.css("display", "block"),
        t.animate({
            scrollTop: x
        }, 1e3),
        !1
    }
    );
    const i = u("#team-mobile-link")
      , r = u("#team-mobile-link-desc")
      , s = u("#team-mobile-link-warning")
      , a = u("#team-link-input")
      , l = u("#social-share-block")
      , h = u("#news-block");
    u("#btn-join-team").on("click", () => (u("#server-warning").css("display", "none"),
    a.val(""),
    i.css("display", "block"),
    r.css("display", "block"),
    s.css("display", "none"),
    t.css("display", "none"),
    h.css("display", "none"),
    l.css("display", "none"),
    u("#right-column").css("display", "none"),
    !1)),
    u("#btn-team-mobile-link-leave").on("click", () => (i.css("display", "none"),
    a.val(""),
    t.css("display", "block"),
    h.css("display", "block"),
    l.css("display", "block"),
    u("#right-column").css("display", "block"),
    !1)),
    u("#team-link-input").on("keypress", g => {
        g.key === "Enter" && (u("#btn-team-mobile-link-join").trigger("click"),
        g.target.blur())
    }
    ),
    u("#player-name-input-solo").on("keypress", g => {
        g.key === "Enter" && g.target.blur()
    }
    ),
    D.mobile && D.os != "ios" && (u("#player-name-input-solo").on("focus", function() {
        if (D.isLandscape) {
            const x = D.screenHeight <= 282 ? 18 : 36;
            document.body.scrollTop = u(this).offset().top - x
        }
    }),
    u("#player-name-input-solo").on("blur", () => {
        document.body.scrollTop = 0
    }
    ));
    const p = u("#start-bottom-right")
      , c = u("#start-top-left")
      , d = u("#start-top-right")
      , w = new _e(u("#ui-modal-keybind"));
    w.onShow( () => {
        p.fadeOut(200),
        d.fadeOut(200),
        u("#ui-modal-keybind-share").css("display", "none"),
        u("#keybind-warning").css("display", "none"),
        u("#ui-modal-keybind-list").css("height", "420px"),
        u("#keybind-code-input").html(""),
        e.refresh()
    }
    ),
    w.onHide( () => {
        p.fadeIn(200),
        d.fadeIn(200),
        e.cancelBind()
    }
    ),
    u(".btn-keybind").on("click", () => (w.show(),
    !1)),
    u(".js-btn-keybind-share").on("click", () => {
        u("#ui-modal-keybind-share").css("display") == "block" ? (u("#ui-modal-keybind-share").css("display", "none"),
        u("#ui-modal-keybind-list").css("height", "420px")) : (u("#ui-modal-keybind-share").css("display", "block"),
        u("#ui-modal-keybind-list").css("height", "275px"))
    }
    ),
    u("#keybind-link, #keybind-copy").on("click", g => {
        _r("Copied!", w.selector, u("#keybind-link"), g);
        const x = u("#keybind-link").html();
        Z.copyTextToClipboard(x)
    }
    ),
    u("#btn-keybind-code-load").on("click", g => {
        const x = u("#keybind-code-input").val();
        u("#keybind-code-input").val("");
        const C = o.fromBase64(String(x));
        u("#keybind-warning").css("display", C ? "none" : "block"),
        C && (_r("Loaded!", w.selector, u("#btn-keybind-code-load"), g),
        o.saveBinds()),
        e.refresh()
    }
    );
    const f = new _e(u("#modal-settings"));
    f.onShow( () => {
        p.fadeOut(200),
        d.fadeOut(200)
    }
    ),
    f.onHide( () => {
        p.fadeIn(200),
        d.fadeIn(200)
    }
    ),
    u(".btn-settings").on("click", () => (f.show(),
    !1)),
    u(".modal-settings-text").on("click", function(g) {
        const x = u(this).siblings("input:checkbox");
        x.prop("checked", !x.is(":checked")),
        x.trigger("change")
    });
    const S = new _e(u("#modal-hamburger"));
    S.onShow( () => {
        c.fadeOut(200)
    }
    ),
    S.onHide( () => {
        c.fadeIn(200)
    }
    ),
    u("#btn-hamburger").on("click", () => (S.show(),
    !1)),
    u(".modal-body-text").on("click", function() {
        const g = u(this).siblings("input:checkbox");
        g.prop("checked", !g.is(":checked")),
        g.trigger("change")
    }),
    u("#force-refresh").on("click", () => {
        window.location.href = `/?t=${Date.now()}`
    }
    )
}
function Qo() {
    D.os == "ios" && (D.model == "iphonex" ? D.isLandscape ? u(".main-volume-slider").css("width", "90%") : u(".main-volume-slider").css("width", "") : window.navigator.standalone || (D.isLandscape ? (u("#start-main-center").attr("style", ""),
    u("#modal-customize .modal-content").attr("style", "")) : u("#modal-customize .modal-content").css({
        transform: "translate(-50%, -50%) scale(0.45)",
        top: "38%"
    }))),
    D.tablet && (u("#featured-youtuber").remove(),
    u(".btn-youtube").remove()),
    D.touch ? u(".btn-start-fullscreen").css("display", "none") : u(".btn-start-fullscreen").css("display", "block"),
    u(".btn-keybind").css("display", D.mobile ? "none" : "inline-block")
}
function Ko(o) {
    u("#team-hide-url").css("display", "none"),
    o && u("#start-bottom-middle").addClass("start-bottom-middle-tablet")
}
const ci = {
    setupModals: Zo,
    onResize: Qo,
    applyMobileBrowserStyling: Ko
};
class Jo {
    constructor(e, t, i, r, s) {
        this.pixi = e,
        this.audioManager = t,
        this.config = i,
        this.inputBinds = r,
        this.account = s
    }
    active = !1;
    initialized = !1;
    canvasMode;
    camera;
    renderer;
    particleBarn;
    decalBarn;
    map;
    playerBarn;
    smokeBarn;
    objectCreator;
    debugDisplay;
    loadout;
    view;
    viewOld;
    cameraOffset = m.create(0, 0);
    q = 1;
    debugZoom = 1;
    useDebugZoom = !1;
    outfitOld;
    animIdleTicker;
    animSeq;
    actionSeq;
    activeId = 98;
    activePlayer;
    init() {
        this.canvasMode = this.pixi.renderer.type == qt.CANVAS,
        this.camera = new Br,
        this.renderer = new Hr(this,this.canvasMode),
        this.particleBarn = new Nr(this.renderer),
        this.decalBarn = new Gr,
        this.map = new Fr(this.decalBarn),
        this.playerBarn = new jr,
        this.smokeBarn = new Yr;
        const e = {
            [ye.Player]: this.playerBarn.playerPool,
            [ye.Obstacle]: this.map.WUiyA,
            [ye.Building]: this.map.nnNJE,
            [ye.Structure]: this.map.ZIeX,
            [ye.Decal]: this.decalBarn.decalPool,
            [ye.Smoke]: this.smokeBarn.zSaLA
        };
        this.objectCreator = new Or;
        for (const i in e)
            e.hasOwnProperty(i) && this.objectCreator.zOgn(i, e[i]);
        this.debugDisplay = new Me;
        const t = [this.map.display.ground, this.renderer.layers[0], this.renderer.ground, this.renderer.layers[1], this.renderer.layers[2], this.renderer.layers[3], this.debugDisplay];
        for (let i = 0; i < t.length; i++) {
            const r = t[i];
            r && (r.interactiveChildren = !1,
            this.pixi.stage.addChild(r))
        }
        this.loadout = we.defaultLoadout(),
        this.setLoadout(this.loadout),
        this.view = "outfit",
        this.viewOld = this.view,
        this.outfitOld = this.loadout.outfit,
        this.map.loadMap({
            grassInset: 18,
            groundPatches: [],
            height: 720,
            mapName: "main",
            objects: [],
            places: [],
            rivers: [],
            seed: 218051654,
            shoreInset: 48,
            width: 720,
            serialize() {},
            deserialize() {}
        }, this.camera, this.canvasMode, this.particleBarn),
        this.activePlayer = this.playerBarn.getPlayerById(this.activeId),
        this.activePlayer.OHmFdh({
            boost: 100,
            boostDirty: !0,
            actionDirty: !1,
            action: {
                time: 0,
                duration: 0,
                targetId: 0
            },
            health: 100,
            healthDirty: !0,
            inventoryDirty: !1,
            spectatorCountDirty: !1,
            spectatorCount: 0,
            zoomDirty: !1,
            zoom: 0,
            scope: "1xscope",
            inventory: {},
            weapsDirty: !0,
            curWeapIdx: 2,
            weapons: [{
                type: "",
                ammo: 0
            }, {
                type: "",
                ammo: 0
            }, {
                type: "bayonet_rugged",
                ammo: 0
            }, {
                type: "",
                ammo: 0
            }]
        }),
        this.activePlayer.layer = this.activePlayer.GoI.ioiPGC,
        this.activePlayer.isLoadoutAvatar = !0,
        this.renderer.setActiveLayer(this.activePlayer.layer),
        this.audioManager.activeLayer = this.activePlayer.layer,
        this.animIdleTicker = 3,
        this.animSeq = 0,
        this.actionSeq = 0,
        this.hide(),
        this.account.addEventListener("loadout", i => {
            this.setLoadout(i, !0)
        }
        ),
        this.setLoadout(this.account.loadout, !0),
        this.initialized = !0,
        this.resize()
    }
    free() {
        if (this.initialized)
            for (this.map.TNCQd(),
            this.particleBarn.TNCQd(),
            this.renderer.TNCQd(); this.pixi.stage.children.length > 0; ) {
                const e = this.pixi.stage.children[0];
                this.pixi.stage.removeChild(e),
                e.destroy({
                    children: !0
                })
            }
        this.initialized = !1
    }
    setLoadout(e, t) {
        this.loadout = we.validate(e),
        this.updateCharDisplay(),
        t && (this.outfitOld = this.loadout.outfit),
        this.activePlayer && (this.activePlayer.playActionStartSfx = !0),
        this.animIdleTicker = 0
    }
    setView(e) {
        this.viewOld = this.view,
        this.view = e
    }
    updateCharDisplay(e={}) {
        const t = {
            audioManager: this.audioManager,
            renderer: this.renderer,
            particleBarn: this.particleBarn,
            map: this.map,
            smokeBarn: this.smokeBarn,
            decalBarn: this.decalBarn
        };
        this.activePlayer?.useItemEmitter && (this.activePlayer.useItemEmitter.stop(),
        this.activePlayer.useItemEmitter = null,
        this.animIdleTicker = 0);
        const i = {
            outfit: this.loadout.outfit,
            backpack: "backpack02",
            helmet: "helmet01",
            chest: "chest03",
            activeWeapon: this.loadout.melee,
            layer: 0,
            dead: !1,
            downed: !1,
            animType: e.animType || 0,
            animSeq: e.animSeq || 0,
            actionSeq: e.actionSeq || 0,
            actionType: e.actionType || 0,
            actionItem: e.actionItem || "",
            wearingPan: !1,
            healEffect: !1,
            frozen: !1,
            frozenOri: 0,
            hasteType: 0,
            hasteSeq: 0,
            scale: 1,
            role: "",
            perks: [],
            pos: m.create(50, 50),
            dir: m.create(0, -1)
        };
        this.objectCreator.XRD(ye.Player, 98, i, t),
        this.playerBarn.setPlayerInfo({
            playerId: 98,
            teamId: 0,
            groupId: 0,
            name: "",
            loadout: {
                heal: this.loadout.heal,
                boost: this.loadout.boost
            }
        })
    }
    getCameraTargetZoom() {
        return document.getElementById("modal-content-left").getBoundingClientRect().height / this.camera.rkdRrQ * .2 * this.camera.rkdRrQ * .5 / this.camera.oPtaok
    }
    getCameraLoadoutOffset() {
        const e = this.camera.abrnAk
          , t = this.getCameraTargetZoom();
        this.camera.abrnAk = t;
        const r = document.getElementById("modal-content-left").getBoundingClientRect()
          , s = j.createAabb(this.camera.igoa(m.create(r.left, r.top + r.height)), this.camera.igoa(m.create(r.left + r.width, r.top)))
          , a = m.mul(m.sub(s.max, s.min), .5)
          , l = m.add(s.min, a)
          , h = j.createAabb(this.camera.igoa(m.create(0, this.camera.rkdRrQ)), this.camera.igoa(m.create(this.camera.eXqeW, 0)))
          , p = m.mul(m.sub(h.max, h.min), .5)
          , c = m.add(h.min, p)
          , d = m.sub(l, c)
          , w = p.x - d.x - a.x
          , f = k.clamp(w * .5, 2.5, 6)
          , g = m.create(d.x + a.x + f, d.y + .33);
        return this.camera.abrnAk = e,
        g
    }
    show() {
        this.active || (this.active = !0,
        this.resize())
    }
    hide() {
        this.active && (this.active = !1,
        this.camera.abrnAk = 2)
    }
    update(e, t) {
        const i = {};
        if (this.camera.CYoYrL = m.sub(this.activePlayer.CYoYrL, this.cameraOffset),
        this.camera.abrnAk = k.lerp(e * 5, this.camera.abrnAk, this.camera.SWly),
        this.audioManager.cameraPos = m.copy(this.camera.CYoYrL),
        t && (this.view == this.viewOld || this.view != "heal" && this.view != "boost" || (this.animIdleTicker = 0),
        this.viewOld = this.view,
        this.animIdleTicker -= e,
        this.animIdleTicker < 0)) {
            if (this.view == "heal") {
                this.actionSeq = (this.actionSeq + 1) % 8;
                const s = {
                    actionType: O.Action.UseItem,
                    actionItem: "bandage",
                    actionSeq: this.actionSeq
                };
                this.updateCharDisplay(s),
                this.animIdleTicker = 2 + Math.random()
            } else if (this.view == "boost") {
                this.actionSeq = (this.actionSeq + 1) % 8;
                const s = {
                    actionType: O.Action.UseItem,
                    actionItem: "soda",
                    actionSeq: this.actionSeq
                };
                this.updateCharDisplay(s),
                this.animIdleTicker = 2 + Math.random()
            } else if (this.view != "emote" && this.view != "crosshair") {
                this.animSeq = (this.animSeq + 1) % 8;
                const s = {
                    animType: O.Anim.Melee,
                    animSeq: this.animSeq
                };
                this.updateCharDisplay(s),
                this.animIdleTicker = 1.5 + Math.random()
            }
        }
        const r = this.loadout.outfit != this.outfitOld;
        if (this.outfitOld = this.loadout.outfit,
        t && r) {
            const s = U[this.loadout.outfit];
            s && this.audioManager.playSound(s.sound.pickup, {
                channel: "ui"
            })
        }
        this.playerBarn.pprlB(e, this.activeId, this.renderer, this.particleBarn, this.camera, this.map, this.inputBinds, this.audioManager, void 0, !1, !1),
        this.smokeBarn.pprlB(e, this.camera, this.activePlayer, this.map, this.renderer),
        this.particleBarn.pprlB(e, this.camera),
        this.decalBarn.pprlB(e, this.camera, this.renderer),
        this.renderer.pprlB(e, this.camera, this.map),
        this.activePlayer.playActionStartSfx = !1,
        this.render(e, i)
    }
    render(e, t) {
        const i = this.map.mapLoaded ? this.map.getMapDef().biome.colors.grass : 8433481;
        this.pixi.renderer.background.color = i,
        this.playerBarn.YOuM(this.camera, t),
        this.map.YOuM(this.camera),
        Si.YOuM(this.camera, this.debugDisplay),
        Si.flush()
    }
    resize() {
        this.initialized && (this.camera.eXqeW = D.screenWidth,
        this.camera.rkdRrQ = D.screenHeight,
        this.map.resize(this.pixi.renderer, this.canvasMode),
        this.renderer.resize(this.map, this.camera),
        this.camera.SWly = this.getCameraTargetZoom(),
        this.cameraOffset = this.getCameraLoadoutOffset())
    }
}
const Ir = 99
  , wt = {
    getPassMaxLevel: function() {
        return Ir
    },
    getPassLevelXp: function(o, e) {
        const t = _i[o]
          , i = e - 1;
        return i < t.xp.length ? t.xp[i] : t.xp[t.xp.length - 1]
    },
    getPassLevelAndXp: function(o, e) {
        let t = e
          , i = 1;
        for (; i < Ir; ) {
            const r = wt.getPassLevelXp(o, i);
            if (t < r)
                break;
            t -= r,
            i++
        }
        return {
            level: i,
            xp: t,
            nextLevelXp: wt.getPassLevelXp(o, i)
        }
    },
    timeUntilQuestRefresh: function(o) {
        return Math.floor((o - 252e5 + 864e5 - 1) / 864e5) * 864e5 + 252e5 - Date.now()
    }
};
function Mr(o, e) {
    for (let t = _i[o], i = 0; i < t.items.length; i++)
        if (t.items[i].level == e + 1)
            return t.items[i].item;
    return ""
}
function ui(o, e=!1) {
    const t = Math.floor(Math.ceil(o / 60) / 60)
      , i = e ? Math.floor(o / 60) % 60 : Math.ceil(o / 60) % 60;
    let r = "";
    return t > 0 && (r += `${t}h `),
    r += `${i}m`
}
class el {
    constructor(e, t, i) {
        this.account = e,
        this.loadoutMenu = t,
        this.localization = i,
        this.account = e,
        this.loadoutMenu = t,
        this.localization = i,
        this.account.addEventListener("request", this.onRequest.bind(this)),
        this.account.addEventListener("pass", this.onPass.bind(this)),
        this.loadPlaceholders(),
        u("#pass-progress-unlock-wrapper").on("mouseenter", () => {
            u("#pass-unlock-tooltip").fadeIn(50)
        }
        ).on("mouseleave", () => {
            u("#pass-unlock-tooltip").fadeOut(50)
        }
        )
    }
    pass = {
        data: {
            type: "pass_survivr1"
        },
        currentXp: 0,
        currentLevel: 1,
        levelXp: 0,
        ticker: 0,
        animSteps: [],
        elems: {}
    };
    quests = [];
    loaded = !1;
    lockDisplayed = !1;
    updatePass = !1;
    updatePassTicker = 0;
    onPass(e, t, i) {
        const s = [];
        let a = 0;
        for (let f = 0; f < t.length; f++)
            (S => {
                const g = t[S]
                  , x = {
                    data: g,
                    start: 0,
                    current: 0,
                    ticker: 0,
                    delay: a * .5,
                    playCompleteAnim: !1,
                    progressAnimFinished: !1,
                    completeAnimFinished: !1,
                    shouldRequestRefresh: i,
                    refreshTime: Date.now() + g.timeToRefresh + 5e3,
                    refreshSet: !1,
                    refreshEnabled: !1,
                    timer: {
                        enabled: !1,
                        str: ""
                    }
                }
                  , C = this.quests.find(z => z.data.idx == x.data.idx && z.data.type == x.data.type);
                C && (x.start = C.current,
                x.current = C.current,
                !C.data.complete && x.data.complete && (x.playCompleteAnim = !0)),
                x.data.progress = k.min(x.data.progress, x.data.target),
                x.data.progress > x.current && a++;
                const v = u(`#pass-quest-${x.data.idx}`);
                x.elems = {
                    main: v,
                    xp: v.find(".pass-quest-xp"),
                    info: v.find(".pass-quest-info"),
                    desc: v.find(".pass-quest-desc"),
                    cur: v.find(".pass-quest-counter-current"),
                    target: v.find(".pass-quest-counter-target"),
                    refresh: v.find(".pass-quest-refresh"),
                    refreshPrompt: v.find(".pass-quest-refresh-prompt"),
                    refreshConfirm: v.find(".pass-quest-refresh-confirm"),
                    refreshCancel: v.find(".pass-quest-refresh-cancel"),
                    counter: v.find(".pass-quest-counter"),
                    barFill: v.find(".pass-quest-bar-fill"),
                    timer: v.find(".pass-quest-timer"),
                    loading: v.find(".pass-quest-spinner")
                },
                x.elems.barFill.clearQueue(),
                x.elems.main.removeClass("pass-bg-pulse"),
                x.elems.main.stop().css({
                    opacity: 1
                }),
                x.elems.xp.removeClass("pass-text-pulse"),
                x.elems.refresh.stop().css({
                    opacity: 1
                }),
                x.elems.counter.stop().css({
                    opacity: 1
                });
                const b = Oi[x.data.type]
                  , M = this.localization.translate(`${x.data.type}`) || x.data.type
                  , I = x.current / x.data.target * 100;
                x.elems.main.css("display", "block"),
                x.elems.desc.html(M),
                x.elems.cur.html(Math.round(x.current)),
                x.elems.xp.html(`${b.xp} XP`),
                x.elems.barFill.css({
                    width: `${I}%`
                }),
                x.elems.loading.css("display", "none");
                let B = x.data.target;
                b.timed && (B = ui(B)),
                x.elems.target.html(B),
                b.icon ? (x.elems.desc.addClass("pass-quest-desc-icon"),
                x.elems.desc.css({
                    "background-image": `url(${b.icon})`
                })) : (x.elems.desc.removeClass("pass-quest-desc-icon"),
                x.elems.desc.attr("style", "")),
                this.setQuestRefreshEnabled(x),
                s.push(x)
            }
            )(f);
        if (this.quests = s,
        this.pass.data = e,
        this.pass.animSteps = [],
        this.pass.currentXp = Math.round(this.pass.currentXp),
        this.pass.levelXp = wt.getPassLevelXp(e.type, this.pass.currentLevel),
        !this.loaded) {
            const f = wt.getPassLevelXp(e.type, e.level);
            this.pass.currentXp = 0,
            this.pass.currentLevel = e.level,
            this.pass.levelXp = f,
            this.pass.ticker = 0
        }
        let l = this.pass.currentLevel
          , h = this.pass.currentXp;
        if (this.loaded) {
            for (; l < e.level; ) {
                const S = wt.getPassLevelXp(e.type, l);
                this.pass.animSteps.push({
                    startXp: h,
                    targetXp: S,
                    levelXp: S,
                    targetLevel: l + 1
                }),
                l++,
                h = 0
            }
            const f = a > 0 ? 2 : 0;
            this.pass.ticker = -f
        }
        const p = wt.getPassLevelXp(e.type, l);
        this.pass.animSteps.push({
            startXp: h,
            targetXp: e.xp,
            levelXp: p,
            targetLevel: l
        }),
        u("#pass-block").css("z-index", "1"),
        u("#pass-locked").css("display", "none"),
        u("#pass-loading").css("display", "none");
        const c = Mr(this.pass.data.type, this.pass.currentLevel);
        this.setPassUnlockImage(c);
        const d = this.localization.translate(e.type).toUpperCase();
        u("#pass-name-text").html(d),
        u("#pass-progress-level").html(this.pass.currentLevel),
        u("#pass-progress-xp-current").html(this.pass.currentXp),
        u("#pass-progress-xp-target").html(this.pass.levelXp);
        const w = this.pass.currentXp / this.pass.levelXp * 100;
        u("#pass-progress-bar-fill").css({
            width: `${w}%`
        }),
        this.loaded = !0
    }
    onRequest(e) {
        u("#pass-loading").css("display", e.loggingIn ? "block" : "none")
    }
    scheduleUpdatePass(e) {
        this.updatePass = !0,
        this.updatePassTicker = e
    }
    setQuestRefreshEnabled(e) {
        const t = !e.data.rerolled && !e.data.complete || e.refreshTime - Date.now() < 0;
        (t != e.refreshEnabled || !e.refreshSet) && (e.refreshEnabled = t,
        e.refreshSet = !0,
        e.elems.refresh.off("click"),
        e.elems.refreshConfirm.off("click"),
        e.elems.refreshCancel.off("click"),
        e.refreshEnabled ? (e.elems.refreshConfirm.on("click", () => {
            e.elems.loading.css("display", "block"),
            e.elems.refreshPrompt.css("display", "none"),
            this.account.refreshQuest(e.data.idx)
        }
        ),
        e.elems.refreshCancel.on("click", () => {
            e.elems.refreshPrompt.css("display", "none"),
            e.elems.info.css("display", "block")
        }
        ),
        e.elems.refresh.on("click", () => {
            e.elems.refreshPrompt.css("display", "block"),
            e.elems.info.css("display", "none")
        }
        ),
        e.elems.refresh.removeClass("pass-quest-refresh-disabled")) : e.elems.refresh.addClass("pass-quest-refresh-disabled"))
    }
    setPassUnlockImage(e) {
        const t = U[e]
          , r = `url(${t ? Z.getSvgFromGameType(e) : "img/emotes/surviv.svg"})`
          , s = Z.getCssTransformFromGameType(e);
        u("#pass-progress-unlock").css({
            opacity: t ? 1 : .15,
            transform: `translate(-50%, -50%) ${s}`
        }),
        u("#pass-progress-unlock-image").css({
            "background-image": r
        });
        const a = t ? this.localization.translate(`loadout-title-${this.loadoutMenu.getCategory(t.type).loadoutType}`).toUpperCase() : ""
          , l = u("#pass-unlock-tooltip");
        l.css("opacity", t ? 1 : 0),
        l.find(".tooltip-pass-title").html(a),
        l.find(".tooltip-pass-desc").html(t ? t.name : "");
        const h = t ? `url(${this.loadoutMenu.getCategory(t.type).categoryImage})` : "";
        u("#pass-progress-unlock-type-image").css({
            "background-image": h
        }),
        u("#pass-progress-unlock-type-wrapper").css({
            display: t ? "block" : "none"
        })
    }
    animatePassLevelUp() {
        const e = u("#pass-progress-bar-fill")
          , t = u("#pass-progress-level")
          , i = u("#pass-progress-unlock-wrapper")
          , r = u("#pass-progress-unlock-image")
          , s = u("#pass-progress-unlock-type-image");
        t.html(this.pass.currentLevel),
        e.queue(a => {
            i.addClass("pass-unlock-pulse"),
            u(a).dequeue()
        }
        ).delay(750).queue(a => {
            r.animate({
                opacity: 0
            }, 250),
            s.animate({
                opacity: 0
            }, 250),
            u(a).dequeue()
        }
        ).delay(250).queue(a => {
            const l = Mr(this.pass.data.type, this.pass.currentLevel);
            this.setPassUnlockImage(l),
            i.removeClass("pass-unlock-pulse"),
            r.animate({
                opacity: 1
            }, 250),
            s.animate({
                opacity: 1
            }, 250),
            u(a).dequeue()
        }
        )
    }
    animateQuestComplete(e) {
        e.elems.barFill.queue(t => {
            e.elems.main.addClass("pass-bg-pulse"),
            e.elems.xp.addClass("pass-text-pulse"),
            e.elems.refresh.animate({
                opacity: .25
            }, 250),
            e.elems.refresh.removeClass("pass-quest-refresh-disabled"),
            e.elems.refresh.animate({
                opacity: 0
            }, 250),
            e.elems.counter.animate({
                opacity: 0
            }, 250),
            e.elems.desc.html("QUEST COMPLETE!"),
            u(t).dequeue()
        }
        ).delay(1e3).queue(t => {
            e.elems.main.animate({
                opacity: 0
            }, 750),
            u(t).dequeue()
        }
        )
    }
    update(e) {
        this.updatePassTicker -= e,
        this.updatePass && this.updatePassTicker < 0 && (this.updatePass = !1,
        this.account.getPass(!1));
        for (let t = 0; t < this.quests.length; t++) {
            const i = this.quests[t];
            if (this.setQuestRefreshEnabled(i),
            i.ticker += e,
            !i.progressAnimFinished) {
                const a = k.clamp((i.ticker - i.delay) / 1, 0, 1);
                i.current = k.lerp(k.easeOutExpo(a), i.start, i.data.progress);
                const l = i.current / i.data.target * 100
                  , h = Oi[i.data.type];
                let p = Math.round(i.current);
                h.timed && (p = ui(p, !0)),
                i.elems.cur.html(p),
                i.elems.barFill.css({
                    width: `${l}%`
                }),
                a >= 1 && (i.progressAnimFinished = !0)
            }
            i.playCompleteAnim && !i.completeAnimFinished && i.ticker - i.delay > 1.25 && (this.animateQuestComplete(i),
            i.completeAnimFinished = !0);
            const r = !i.playCompleteAnim || i.completeAnimFinished && i.ticker - i.delay > 4.25;
            i.data.complete && r && i.refreshEnabled && i.shouldRequestRefresh && (i.shouldRequestRefresh = !1,
            this.account.refreshQuest(i.data.idx));
            const s = i.data.complete && r;
            if (s != i.timer.displayed) {
                i.timer.displayed = s,
                i.elems.main.removeClass("pass-bg-pulse"),
                i.elems.main.stop().animate({
                    opacity: 1
                }, 250);
                const a = i.elems.refreshPrompt.css("display") == "block";
                i.elems.info.css("display", s || a ? "none" : "block"),
                i.elems.timer.css("display", s ? "block" : "none")
            }
            if (s) {
                const a = Math.max(i.refreshTime - Date.now(), 0)
                  , l = ui(a / 1e3);
                l != i.timer.str && (i.timer.str = l,
                i.elems.timer.html(l))
            }
        }
        if (this.pass.ticker += e,
        this.pass.animSteps.length > 0 && this.pass.ticker >= 0) {
            const t = this.pass.animSteps[0]
              , i = k.clamp(this.pass.ticker / 1.5, 0, 1);
            this.pass.currentXp = k.lerp(k.easeOutExpo(i), t.startXp, t.targetXp),
            this.pass.levelXp = t.levelXp;
            const r = this.pass.currentXp / t.levelXp * 100;
            u("#pass-progress-xp-current").html(Math.round(this.pass.currentXp)),
            u("#pass-progress-xp-target").html(this.pass.levelXp),
            u("#pass-progress-bar-fill").css({
                width: `${r}%`
            }),
            i >= 1 && (t.targetLevel > this.pass.currentLevel && (this.pass.currentLevel = t.targetLevel,
            this.animatePassLevelUp()),
            this.pass.animSteps.shift(),
            this.pass.ticker -= 3)
        }
        !this.account.loggingIn && !this.account.loggedIn && !this.lockDisplayed && (u("#pass-block").css("z-index", "1"),
        u("#pass-loading").css("display", "none"),
        u("#pass-locked").css("display", "block"),
        this.lockDisplayed = !0)
    }
    onResize() {}
    loadPlaceholders() {
        const e = _i.pass_survivr1
          , t = this.localization.translate("pass_survivr1").toUpperCase();
        u("#pass-name-text").html(t),
        u("#pass-progress-level").html(1),
        u("#pass-progress-xp-current").html(0),
        u("#pass-progress-xp-target").html(e.xp[0]),
        this.setPassUnlockImage(e.items[0].item)
    }
}
function tl(o, e, t, i) {
    const r = o.find(".login-options-content");
    r.empty(),
    e && r.append(u("<div/>", {
        class: "account-login-desc"
    }).append(u("<p/>", {
        html: i.translate("index-link-account-to")
    })));
    const s = u("<div/>", {
        class: "account-buttons"
    });
    r.append(s);
    const a = function(l, h, p) {
        const c = u("<div/>", {
            class: `menu-option btn-darken btn-standard btn-login-${l}`
        });
        c.append(u("<span/>", {
            class: "login-button-name"
        }).append(u("<span/>", {
            html: i.translate(`index-${l}`)
        })).append(u("<div/>", {
            class: "icon"
        }))),
        e && h ? (c.addClass("btn-login-linked"),
        c.find("span.login-button-name").html('<div class="icon"></div>')) : c.on("click", d => {
            p()
        }
        ),
        s.append(c)
    };
    St.loginSupported("google") && a("google", t.profile.linkedGoogle, () => {
        window.location.href = Xe.resolveUrl("/api/auth/google")
    }
    ),
    St.loginSupported("discord") && a("discord", t.profile.linkedDiscord, () => {
        window.location.href = Xe.resolveUrl("/api/auth/discord")
    }
    ),
    St.loginSupported("mock") && a("mock", !1, () => {
        window.location.href = Xe.resolveUrl("/api/auth/mock")
    }
    )
}
class il {
    constructor(e, t, i, r) {
        this.account = e,
        this.localization = t,
        this.loadoutMenu = i,
        this.errorModal = r,
        this.account = e,
        this.localization = t,
        this.loadoutMenu = i,
        this.errorModal = r,
        e.addEventListener("error", this.onError.bind(this)),
        e.addEventListener("login", this.onLogin.bind(this)),
        e.addEventListener("loadout", this.onLoadoutUpdated.bind(this)),
        e.addEventListener("items", this.onItemsUpdated.bind(this)),
        e.addEventListener("request", this.render.bind(this)),
        this.initUi(),
        this.render()
    }
    setNameModal = null;
    resetStatsModal = null;
    deleteAccountModal = null;
    userSettingsModal = null;
    loginOptionsModal = null;
    createAccountModal = null;
    loginOptionsModalMobile;
    modalMobileAccount;
    initUi() {
        const e = function() {
            u("#modal-body-warning").css("display", "none"),
            u("#modal-account-name-input").val("")
        };
        this.setNameModal = new _e(u("#modal-account-name-change")),
        this.setNameModal.onShow(e),
        this.setNameModal.onHide(e),
        u("#modal-account-name-finish").on("click", i => {
            i.stopPropagation();
            const r = u("#modal-account-name-input").val();
            this.account.setUsername(r, s => {
                if (s) {
                    const a = {
                        failed: "Failed setting username.",
                        invalid: "Invalid username.",
                        taken: "Name already taken!",
                        change_time_not_expired: "Username has already been set recently."
                    }
                      , l = a[s] || a.failed;
                    u("#modal-body-warning").hide(),
                    u("#modal-body-warning").html(l),
                    u("#modal-body-warning").fadeIn()
                } else
                    this.setNameModal.hide()
            }
            )
        }
        ),
        u("#modal-account-name-input").on("keypress", i => {
            i.key === "Enter" && u("#modal-account-name-finish").trigger("click")
        }
        ),
        this.resetStatsModal = new _e(u("#modal-account-reset-stats")),
        this.resetStatsModal.onShow( () => {
            u("#modal-account-reset-stats-input").val(""),
            this.modalMobileAccount.hide()
        }
        ),
        u("#modal-account-reset-stats-finish").on("click", i => {
            i.stopPropagation(),
            u("#modal-account-reset-stats-input").val() == "RESET STATS" && (this.account.resetStats(),
            this.resetStatsModal.hide())
        }
        ),
        u("#modal-account-reset-stats-input").on("keypress", i => {
            i.key === "Enter" && u("#modal-account-reset-stats-finish").trigger("click")
        }
        ),
        this.deleteAccountModal = new _e(u("#modal-account-delete")),
        this.deleteAccountModal.onShow( () => {
            u("#modal-account-delete-input").val(""),
            this.modalMobileAccount.hide()
        }
        ),
        u("#modal-account-delete-finish").on("click", i => {
            i.stopPropagation(),
            u("#modal-account-delete-input").val() == "DELETE" && (this.account.deleteAccount(),
            this.deleteAccountModal.hide())
        }
        ),
        u("#modal-account-delete-input").on("keypress", i => {
            i.key === "Enter" && u("#modal-account-delete-finish").trigger("click")
        }
        ),
        this.userSettingsModal = new _e(u(".account-buttons-settings")),
        this.userSettingsModal.checkSelector = !1,
        this.userSettingsModal.skipFade = !0,
        this.userSettingsModal.onShow( () => {
            u(".account-details-top").css("display", "none")
        }
        ),
        this.userSettingsModal.onHide( () => {
            u(".account-details-top").css("display", "block")
        }
        ),
        this.loginOptionsModal = new _e(u("#account-login-options")),
        this.loginOptionsModal.checkSelector = !1,
        this.loginOptionsModal.skipFade = !0,
        this.loginOptionsModal.onShow( () => {
            u(".account-details-top").css("display", "none")
        }
        ),
        this.loginOptionsModal.onHide( () => {
            u(".account-details-top").css("display", "block")
        }
        ),
        this.loginOptionsModalMobile = new _e(u("#account-login-options-mobile")),
        this.loginOptionsModalMobile.checkSelector = !1,
        this.loginOptionsModalMobile.skipFade = !0,
        this.loginOptionsModalMobile.onShow( () => {
            u(".account-details-top").css("display", "none")
        }
        ),
        this.loginOptionsModalMobile.onHide( () => {
            u(".account-details-top").css("display", "block")
        }
        ),
        this.createAccountModal = new _e(u("#modal-create-account")),
        this.createAccountModal.onHide( () => {
            this.loadoutMenu.hide()
        }
        ),
        this.modalMobileAccount = new _e(u("#modal-mobile-account")),
        this.modalMobileAccount.onShow( () => {
            u("#start-top-right").css("display", "none"),
            u(".account-details-top").css("display", "none")
        }
        ),
        this.modalMobileAccount.onHide( () => {
            u("#start-top-right").css("display", "block"),
            u(".account-details-top").css("display", "block"),
            this.userSettingsModal.hide()
        }
        ),
        u(".account-leaderboard-link").on("click", i => (window.open("/stats", "_blank"),
        !1)),
        u(".account-stats-link").on("click", () => (this.waitOnLogin( () => {
            if (this.account.loggedIn)
                if (this.account.profile.usernameSet) {
                    const i = this.account.profile.slug || "";
                    window.open(`/stats/?slug=${i}`, "_blank")
                } else
                    this.setNameModal.show(!0);
            else
                this.showLoginMenu({
                    modal: !0
                })
        }
        ),
        !1)),
        u(".account-loadout-link, #btn-customize").on("click", () => (this.loadoutMenu.show(),
        !1)),
        u(".account-details-user").on("click", () => (this.userSettingsModal.isVisible() || this.loginOptionsModal.isVisible() ? (this.userSettingsModal.hide(),
        this.loginOptionsModal.hide()) : this.waitOnLogin( () => {
            D.mobile && this.modalMobileAccount.show(),
            this.account.loggedIn ? (this.loginOptionsModal.hide(),
            this.userSettingsModal.show()) : this.showLoginMenu({
                modal: !1
            })
        }
        ),
        !1)),
        u(".btn-account-link").on("click", () => (this.userSettingsModal.hide(),
        this.showLoginMenu({
            modal: !1,
            link: !0
        }),
        !1)),
        u(".btn-account-change-name").on("click", () => (this.account.profile.usernameChangeTime <= 0 && (this.userSettingsModal.hide(),
        this.modalMobileAccount.hide(),
        u("#modal-account-name-title").html(this.localization.translate("index-change-account-name")),
        this.setNameModal.show()),
        !1)),
        u(".btn-account-reset-stats").on("click", () => (this.userSettingsModal.hide(),
        this.resetStatsModal.show(),
        !1)),
        u(".btn-account-delete").on("click", () => (this.userSettingsModal.hide(),
        this.deleteAccountModal.show(),
        !1)),
        u(".btn-account-logout").on("click", () => (this.account.logout(),
        !1)),
        u("#btn-pass-locked").on("click", () => (this.showLoginMenu({
            modal: !0
        }),
        !1));
        const t = !oe.isAnySDK && St.anyLoginSupported();
        u(".account-block").toggle(t)
    }
    onError(e, t) {
        const r = {
            server_error: "Operation failed, please try again later.",
            facebook_account_in_use: "Failed linking Facebook account.<br/>Account already in use!",
            google_account_in_use: "Failed linking Google account.<br/>Account already in use!",
            twitch_account_in_use: "Failed linking Twitch account.<br/>Account already in use!",
            discord_account_in_use: "Failed linking Discord account.<br/>Account already in use!",
            account_banned: `Account banned: ${t}`,
            login_failed: "Login failed."
        }[e];
        r && (this.errorModal.selector.find(".modal-body-text").html(r),
        this.errorModal.show())
    }
    onLogin() {
        this.createAccountModal.hide(),
        this.loginOptionsModalMobile.hide(),
        this.loginOptionsModal.hide(),
        this.account.profile.usernameSet || this.setNameModal.show(!0)
    }
    onLoadoutUpdated() {
        this.updateUserIcon()
    }
    onItemsUpdated(e) {
        let t = 0
          , i = 0;
        for (let s = 0; s < e.length; s++) {
            const a = e[s];
            a.status < we.ItemStatus.Confirmed && t++,
            a.status < we.ItemStatus.Ackd && i++
        }
        e.filter(s => s.status < we.ItemStatus.Confirmed),
        e.filter(s => s.status < we.ItemStatus.Ackd);
        const r = t > 0 || i > 0;
        u("#loadout-alert-main").css({
            display: r ? "block" : "none"
        })
    }
    waitOnLogin(e) {
        if (this.account.loggingIn && !this.account.loggedIn) {
            const t = () => {
                e(),
                this.account.removeEventListener("requestsComplete", t)
            }
            ;
            this.account.addEventListener("requestsComplete", t)
        } else
            e()
    }
    showLoginMenu(e) {
        e = {
            modal: !1,
            link: !1,
            ...e
        };
        const t = e.modal ? this.createAccountModal : D.mobile ? this.loginOptionsModalMobile : this.loginOptionsModal;
        tl(t.selector, e.link, this.account, this.localization),
        t.show()
    }
    updateUserIcon() {
        const e = Z.getSvgFromGameType(this.account.loadout.player_icon) || "img/gui/player-gui.svg";
        u(".account-details-user .account-avatar").css("background-image", `url(${e})`)
    }
    render() {
        const e = this.account.requestsInFlight > 0;
        u(".account-loading").css("opacity", e ? 1 : 0);
        let t = Z.htmlEscape(this.account.profile.username || "");
        this.account.loggedIn || (t = this.account.loggingIn ? `${this.localization.translate("index-logging-in")}...` : this.localization.translate("index-log-in-desc")),
        u("#account-player-name").html(t),
        u("#account-player-name").css("display", this.account.loggedIn ? "block" : "none"),
        u("#account-login").css("display", this.account.loggedIn ? "none" : "block"),
        this.updateUserIcon(),
        this.account.profile.usernameChangeTime <= 0 ? u(".btn-account-change-name").removeClass("btn-account-disabled") : u(".btn-account-change-name").addClass("btn-account-disabled")
    }
}
function Tr(o, e) {
    const t = {
        join_full: e.translate("index-team-is-full"),
        join_not_found: e.translate("index-failed-joining-team"),
        create_failed: e.translate("index-failed-creating-team"),
        join_failed: e.translate("index-failed-joining-team"),
        join_game_failed: e.translate("index-failed-joining-game"),
        lost_conn: e.translate("index-lost-connection"),
        find_game_error: e.translate("index-failed-finding-game"),
        find_game_full: e.translate("index-failed-finding-game"),
        find_game_invalid_protocol: e.translate("index-invalid-protocol"),
        find_game_invalid_captcha: e.translate("index-invalid-captcha"),
        kicked: e.translate("index-team-kicked"),
        banned: e.translate("index-ip-banned"),
        behind_proxy: "behind_proxy"
    };
    return t[o] || t.lost_conn
}
class rl {
    constructor(e, t, i, r, s, a, l) {
        this.config = e,
        this.pingTest = t,
        this.siteInfo = i,
        this.localization = r,
        this.audioManager = s,
        this.joinGameCb = a,
        this.leaveCb = l,
        this.serverSelect.on("change", () => {
            const h = this.serverSelect.find(":selected").val();
            this.pingTest.start([h]),
            this.setRoomProperty("region", h)
        }
        ),
        this.queueMode1.on("click", () => {
            this.setRoomProperty("gameModeIdx", 1)
        }
        ),
        this.queueMode2.on("click", () => {
            this.setRoomProperty("gameModeIdx", 2)
        }
        ),
        this.fillAuto.on("click", () => {
            this.setRoomProperty("autoFill", !0)
        }
        ),
        this.fillNone.on("click", () => {
            this.setRoomProperty("autoFill", !1)
        }
        ),
        this.playBtn.on("click", () => {
            oe.requestMidGameAd( () => {
                this.tryStartGame()
            }
            )
        }
        ),
        u("#team-copy-url, #team-desc-text").on("click", h => {
            const p = u("<div/>", {
                class: "copy-toast",
                html: "Copied!"
            });
            u("#start-menu-wrapper").append(p),
            p.css({
                left: h.pageX - parseInt(p.css("width")) / 2,
                top: u("#team-copy-url").offset().top
            }),
            p.animate({
                top: "-=20",
                opacity: 1
            }, {
                queue: !1,
                duration: 300,
                complete: function() {
                    u(this).fadeOut(250, function() {
                        u(this).remove()
                    })
                }
            });
            let c = u("#team-url").text();
            window !== window.top && (c = this.roomData.roomUrl.substring(1)),
            Z.copyTextToClipboard(c)
        }
        ),
        window !== window.top && u("#team-desc-text").hide(),
        D.mobile || (this.hideUrl = !1,
        u("#team-hide-url").on("click", h => {
            const p = h.currentTarget;
            this.hideUrl = !this.hideUrl,
            u("#team-desc-text, #team-code-text").css({
                opacity: this.hideUrl ? 0 : 1
            }),
            u(p).css({
                "background-image": this.hideUrl ? "url(../img/gui/hide.svg)" : "url(../img/gui/eye.svg)"
            })
        }
        )),
        setInterval( () => {
            this.joined && this.sendMessage("keepAlive", {})
        }
        , 10 * 1e3)
    }
    playBtn = u("#btn-start-team");
    serverWarning = u("#server-warning");
    teamOptions = u("#btn-team-queue-mode-1, #btn-team-queue-mode-2, #btn-team-fill-auto, #btn-team-fill-none");
    serverSelect = u("#team-server-select");
    queueMode1 = u("#btn-team-queue-mode-1");
    queueMode2 = u("#btn-team-queue-mode-2");
    fillAuto = u("#btn-team-fill-auto");
    fillNone = u("#btn-team-fill-none");
    active = !1;
    joined = !1;
    create = !1;
    joiningGame = !1;
    ws = null;
    keepAliveTimeout = 0;
    playerData = {};
    roomData = {};
    players = [];
    prevPlayerCount = 0;
    localPlayerId = 0;
    isLeader = !0;
    editingName = !1;
    displayedInvalidProtocolModal = !1;
    hideUrl;
    getPlayerById(e) {
        return this.players.find(t => t.playerId == e)
    }
    connect(e, t) {
        if (!this.active || t !== this.roomData.roomUrl) {
            const i = Xe.resolveRoomHost()
              , r = `w${window.location.protocol === "https:" ? "ss" : "s"}://${i}/team_v2`;
            this.active = !0,
            this.joined = !1,
            this.create = e,
            this.joiningGame = !1,
            this.editingName = !1,
            this.playerData = {
                name: this.config.get("playerName")
            },
            this.roomData = {
                roomUrl: t,
                region: this.config.get("region"),
                gameModeIdx: this.config.get("gameModeIdx"),
                autoFill: this.config.get("teamAutoFill"),
                findingGame: !1,
                lastError: ""
            },
            this.displayedInvalidProtocolModal = !1,
            this.refreshUi(),
            this.ws && (this.ws.onclose = function() {}
            ,
            this.ws.close(),
            this.ws = null);
            try {
                this.ws = new WebSocket(r),
                this.ws.onerror = s => {
                    this.ws?.close()
                }
                ,
                this.ws.onclose = () => {
                    let s = "";
                    this.joiningGame || (s = this.joined ? "lost_conn" : this.create ? "create_failed" : "join_failed"),
                    this.leave(s)
                }
                ,
                this.ws.onopen = () => {
                    this.create ? this.sendMessage("create", {
                        roomData: this.roomData,
                        playerData: this.playerData
                    }) : this.sendMessage("join", {
                        roomUrl: this.roomData.roomUrl,
                        playerData: this.playerData
                    })
                }
                ,
                this.ws.onmessage = s => {
                    if (this.active) {
                        const a = JSON.parse(s.data);
                        this.onMessage(a.type, a.data)
                    }
                }
            } catch {
                this.leave(this.create ? "create_failed" : "join_failed")
            }
        }
    }
    leave(e="") {
        if (this.active) {
            this.ws?.close(),
            this.ws = null,
            this.active = !1,
            this.joined = !1,
            this.joiningGame = !1,
            this.refreshUi(),
            this.config.set("gameModeIdx", this.roomData.gameModeIdx),
            this.config.set("teamAutoFill", this.roomData.autoFill),
            this.isLeader && this.config.set("region", this.roomData.region);
            let t = "";
            e && e != "" && (t = Tr(e, this.localization)),
            this.leaveCb(t),
            oe.hideInviteButton()
        }
    }
    onGameComplete() {
        this.active && (this.joiningGame = !1,
        this.sendMessage("gameComplete"))
    }
    onMessage(e, t) {
        switch (e) {
        case "state":
            {
                let i = t;
                this.joined = !0;
                const r = this.roomData;
                this.roomData = i.room,
                this.players = i.players,
                this.localPlayerId = i.localPlayerId,
                this.isLeader = this.getPlayerById(this.localPlayerId).isLeader,
                this.isLeader && (this.roomData.region = r.region,
                this.roomData.autoFill = r.autoFill),
                this.refreshUi(),
                oe.showInviteButton(i.room.roomUrl.replace("#", ""));
                break
            }
        case "joinGame":
            this.joiningGame = !0,
            this.joinGameCb(t);
            break;
        case "keepAlive":
            break;
        case "kicked":
            this.leave("kicked");
            break;
        case "error":
            this.leave(t.type)
        }
    }
    sendMessage(e, t) {
        if (this.ws)
            if (this.ws.readyState === this.ws.OPEN) {
                const i = JSON.stringify({
                    type: e,
                    data: t
                });
                this.ws.send(i)
            } else
                this.ws.close()
    }
    setRoomProperty(e, t) {
        this.isLeader && this.roomData[e] != t && (this.roomData[e] = t,
        this.sendMessage("setRoomProps", this.roomData))
    }
    tryStartGame() {
        if (this.isLeader && !this.roomData.findingGame) {
            const e = O.protocolVersion;
            let t = this.roomData.region;
            const i = Z.getParameterByName("region");
            i !== void 0 && i.length > 0 && (t = i);
            let r = this.pingTest.getZones(t);
            const s = Z.getParameterByName("zone");
            s !== void 0 && s.length > 0 && (r = [s]);
            const a = {
                version: e,
                region: t,
                zones: r
            };
            Z.verifyTurnstile(this.roomData.captchaEnabled, l => {
                a.turnstileToken = l,
                this.sendMessage("playGame", a)
            }
            ),
            this.roomData.findingGame = !0,
            this.refreshUi()
        }
    }
    refreshUi() {
        const e = function(r, s, a) {
            r.removeClass("btn-darken btn-disabled btn-opaque btn-hollow-selected"),
            a ? r.addClass("btn-darken") : (r.addClass("btn-disabled"),
            s || r.addClass("btn-opaque")),
            s && r.addClass("btn-hollow-selected"),
            r.prop("disabled", !a)
        };
        u("#team-menu").css("display", this.active ? "block" : "none"),
        u("#start-menu").css("display", this.active ? "none" : "block"),
        u("#right-column").css("display", this.active ? "none" : "block"),
        u("#social-share-block").css("display", this.active ? "none" : "block");
        const t = this.roomData.lastError != ""
          , i = Tr(this.roomData.lastError, this.localization);
        if (this.serverWarning.css("opacity", t ? 1 : 0),
        this.serverWarning.html(i),
        this.roomData.lastError == "find_game_invalid_protocol" && !this.displayedInvalidProtocolModal && (u("#modal-refresh").fadeIn(200),
        this.displayedInvalidProtocolModal = !0),
        this.roomData.lastError === "find_game_invalid_captcha" && (this.siteInfo.info.captchaEnabled = !0),
        this.active && (u("#team-menu-joining-text").css("display", this.create ? "none" : "block"),
        u("#team-menu-creating-text").css("display", this.create ? "block" : "none"),
        u("#team-menu-connecting").css("display", this.joined ? "none" : "block"),
        u("#team-menu-contents").css("display", this.joined ? "block" : "none"),
        u("#btn-team-leave").css("display", this.joined ? "block" : "none")),
        this.joined) {
            const r = this.siteInfo.info.pops || {}
              , s = Object.keys(r);
            for (let f = 0; f < s.length; f++) {
                const S = s[f]
                  , g = r[S].playerCount
                  , x = this.localization.translate("index-players")
                  , C = u("#team-server-opts").children(`option[value="${S}"]`);
                C.html(`${C.attr("data-label")} [${g} ${x}]`)
            }
            if (this.serverSelect.find("option").each( (f, S) => {
                S.selected = S.value == this.roomData.region
            }
            ),
            e(this.queueMode1, this.roomData.gameModeIdx == 1, this.isLeader && this.roomData.enabledGameModeIdxs.includes(1)),
            e(this.queueMode2, this.roomData.gameModeIdx == 2, this.isLeader && this.roomData.enabledGameModeIdxs.includes(2)),
            e(this.fillAuto, this.roomData.autoFill, this.isLeader),
            e(this.fillNone, !this.roomData.autoFill, this.isLeader),
            this.serverSelect.prop("disabled", !this.isLeader),
            this.roomData.roomUrl) {
                const f = this.roomData.roomUrl.substring(1);
                if (u("#team-code").text(f),
                oe.supportsInviteLink())
                    oe.getInviteLink(f).then(S => {
                        u("#team-url").text(S)
                    }
                    );
                else {
                    const S = new URL(window.location.href);
                    S.search = "",
                    S.hash = this.roomData.roomUrl;
                    const g = new URL(window.location.href);
                    g.search = "",
                    g.hash = this.roomData.roomUrl,
                    u("#team-url").text(g.toString()),
                    window.history && window.history.replaceState("", "", this.roomData.roomUrl)
                }
            }
            this.playBtn.html(this.roomData.findingGame || this.joiningGame ? '<div class="ui-spinner"></div>' : this.playBtn.attr("data-label"));
            const a = this.siteInfo.getGameModeStyles();
            for (let f = 0; f < a.length; f++)
                this.playBtn.removeClass(a[f].buttonCss);
            const l = a[this.roomData.gameModeIdx];
            l ? (this.playBtn.addClass("btn-custom-mode-no-indent"),
            this.playBtn.addClass(l.buttonCss),
            this.playBtn.css({
                "background-image": `url(${l.icon})`
            })) : this.playBtn.css({
                "background-image": ""
            });
            let h = !1;
            for (let f = 0; f < this.players.length; f++)
                h = h || this.players[f].inGame;
            const p = u("#msg-wait-reason");
            if (this.isLeader) {
                p.html(`${this.localization.translate("index-game-in-progress")}<span> ...</span>`);
                const f = h && !this.joiningGame;
                p.css("display", f ? "block" : "none"),
                this.playBtn.css("display", f ? "none" : "block")
            } else
                this.roomData.findingGame || this.joiningGame ? p.html(`<div class="ui-spinner" style="margin-right:16px"></div>${this.localization.translate("index-joining-game")}<span> ...</span>`) : h ? p.html(`${this.localization.translate("index-game-in-progress")}<span> ...</span>`) : p.html(`${this.localization.translate("index-waiting-for-leader")}<span> ...</span>`),
                p.css("display", "block"),
                this.playBtn.css("display", "none");
            const c = u("#team-menu-member-list");
            c.empty();
            for (let f = 0; f < this.roomData.maxPlayers; f++) {
                let S = {
                    name: "",
                    playerId: 0,
                    isLeader: !1,
                    inGame: !1,
                    self: !1
                };
                if (f < this.players.length) {
                    const b = this.players[f];
                    S = {
                        name: b.name,
                        playerId: b.playerId,
                        isLeader: b.isLeader,
                        inGame: b.inGame,
                        self: b.playerId == this.localPlayerId
                    }
                }
                const g = u("<div/>", {
                    class: "team-menu-member"
                });
                let x = "";
                S.isLeader ? x = " icon-leader" : this.isLeader && S.playerId != 0 && (x = " icon-kick"),
                g.append(u("<div/>", {
                    class: `icon${x}`,
                    "data-playerid": S.playerId
                }));
                let C = null
                  , v = null;
                if (this.editingName && S.self) {
                    C = u("<input/>", {
                        type: "text",
                        tabindex: 0,
                        class: "name menu-option name-text name-self-input",
                        maxLength: K.PlayerNameMaxLen
                    }),
                    C.val(S.name);
                    const b = () => {
                        const I = Z.sanitizeNameInput(C?.val());
                        S.name = I,
                        this.config.set("playerName", I),
                        this.sendMessage("changeName", {
                            name: I
                        }),
                        this.editingName = !1,
                        this.refreshUi()
                    }
                      , M = () => {
                        this.editingName = !1,
                        this.refreshUi()
                    }
                    ;
                    C.on("keydown", I => {
                        if (I.which === 13)
                            return b(),
                            !1
                    }
                    ),
                    C.on("blur", M),
                    g.append(C),
                    v = u("<div/>", {
                        class: "icon icon-submit-name-change"
                    }),
                    v.on("click", b),
                    v.on("mousedown", I => {
                        I.preventDefault(),
                        I.stopPropagation()
                    }
                    )
                } else {
                    let b = "name-text";
                    S.self && (b += " name-self"),
                    S.inGame && (b += " name-in-game");
                    const M = u("<div/>", {
                        class: `name menu-option ${b}`,
                        html: Z.htmlEscape(S.name)
                    });
                    S.self && M.on("click", () => {
                        this.editingName = !0,
                        this.refreshUi()
                    }
                    ),
                    g.append(M)
                }
                v ? g.append(v) : g.append(u("<div/>", {
                    class: `icon ${S.inGame ? "icon-in-game" : ""}`
                })),
                c.append(g),
                C?.trigger("focus")
            }
            u(".icon-kick", c).on("click", f => {
                const S = Number(u(f.currentTarget).attr("data-playerid"));
                this.sendMessage("kick", {
                    playerId: S
                })
            }
            );
            const d = this.players.find(f => f.playerId == this.localPlayerId)
              , w = d && !d.inGame;
            !document.hasFocus() && this.prevPlayerCount < this.players.length && this.players.length > 1 && w && this.audioManager.playSound("notification_join_01", {
                channel: "ui"
            }),
            this.prevPlayerCount = this.players.length
        }
    }
}
class sl {
    nameInput = u("#player-name-input-solo");
    serverSelect = u("#server-select-main");
    playMode0Btn = u("#btn-start-mode-0");
    playMode1Btn = u("#btn-start-mode-1");
    playMode2Btn = u("#btn-start-mode-2");
    muteBtns = u(".btn-sound-toggle");
    aimLineBtn = u("#btn-game-aim-line");
    masterSliders = u(".sl-master-volume");
    soundSliders = u(".sl-sound-volume");
    musicSliders = u(".sl-music-volume");
    serverWarning = u("#server-warning");
    languageSelect = u(".language-select");
    startMenuWrapper = u("#start-menu-wrapper");
    gameAreaWrapper = u("#game-area-wrapper");
    playButtons = u(".play-button-container");
    playLoading = u(".play-loading-outer");
    errorModal = new _e(u("#modal-notification"));
    refreshModal = new _e(u("#modal-refresh"));
    ipBanModal = new _e(u("#modal-ip-banned"));
    config = new ds;
    localization = new ps;
    account;
    loadoutMenu;
    pass;
    profileUi;
    pingTest = new Oo;
    audioManager = new la;
    ambience = new Js;
    siteInfo;
    teamMenu;
    pixi = null;
    resourceManager = null;
    input = null;
    inputBinds = null;
    inputBindUi = null;
    game = null;
    loadoutDisplay = null;
    domContentLoaded = !1;
    configLoaded = !1;
    initialized = !1;
    active = !1;
    sessionId = Z.random64();
    contextListener = function(e) {
        e.preventDefault()
    }
    ;
    errorMessage = "";
    quickPlayPendingModeIdx = -1;
    findGameAttempts = 0;
    findGameTime = 0;
    pauseTime = 0;
    wasPlayingVideo = !1;
    checkedPingTest = !1;
    hasFocus = !0;
    newsDisplayed = !0;
    updateLogoBasedOnLanguage(e) {
        const t = u("#start-row-header");
        t.length && t.toggleClass("lang-ru", e === "ru")
    }
    constructor() {
        this.account = new Ks(this.config),
        this.loadoutMenu = new Xo(this.account,this.localization),
        this.pass = new el(this.account,this.loadoutMenu,this.localization),
        this.profileUi = new il(this.account,this.localization,this.loadoutMenu,this.errorModal),
        this.siteInfo = new Vo(this.config,this.localization),
        this.teamMenu = new rl(this.config,this.pingTest,this.siteInfo,this.localization,this.audioManager,this.onTeamMenuJoinGame.bind(this),this.onTeamMenuLeave.bind(this));
        const e = () => {
            this.config.load( () => {
                this.configLoaded = !0,
                this.tryLoad()
            }
            )
        }
        ;
        this.loadBrowserDeps(e)
    }
    async loadBrowserDeps(e) {
        await oe.init(),
        e()
    }
    tryLoad() {
        if (this.domContentLoaded && this.configLoaded && !this.initialized) {
            if (this.initialized = !0,
            D.mobile && ci.applyMobileBrowserStyling(D.tablet),
            oe.isSpellSync)
                this.localization.setLocale(window.spellSync.language),
                this.updateLogoBasedOnLanguage(window.spellSync.language);
            else {
                const c = this.config.get("language") || this.localization.detectLocale();
                this.config.set("language", c),
                this.localization.setLocale(c),
                this.updateLogoBasedOnLanguage(c)
            }
            this.localization.populateLanguageSelect(),
            this.startPingTest(),
            this.siteInfo.load(),
            this.localization.localizeIndex(),
            this.account.init(),
            this.nameInput.attr("maxLength", K.PlayerNameMaxLen),
            this.playMode0Btn.on("click", () => {
                oe.requestMidGameAd( () => {
                    this.tryQuickStartGame(0)
                }
                )
            }
            ),
            this.playMode1Btn.on("click", () => {
                oe.requestMidGameAd( () => {
                    this.tryQuickStartGame(1)
                }
                )
            }
            ),
            this.playMode2Btn.on("click", () => {
                oe.requestMidGameAd( () => {
                    this.tryQuickStartGame(2)
                }
                )
            }
            ),
            this.serverSelect.on("change", () => {
                const c = this.serverSelect.find(":selected").val();
                this.config.set("region", c)
            }
            ),
            this.nameInput.on("blur", c => {
                this.setConfigFromDOM()
            }
            ),
            this.muteBtns.on("click", c => {
                this.config.set("muteAudio", !this.config.get("muteAudio"))
            }
            ),
            this.muteBtns.on("mousedown", c => {
                c.stopPropagation()
            }
            ),
            u(this.masterSliders).on("mousedown", c => {
                c.stopPropagation()
            }
            ),
            u(this.soundSliders).on("mousedown", c => {
                c.stopPropagation()
            }
            ),
            u(this.musicSliders).on("mousedown", c => {
                c.stopPropagation()
            }
            ),
            this.masterSliders.on("input", c => {
                const d = Number(u(c.target).val()) / 100;
                this.audioManager.setMasterVolume(d),
                this.config.set("masterVolume", d)
            }
            ),
            this.soundSliders.on("input", c => {
                const d = Number(u(c.target).val()) / 100;
                this.audioManager.setSoundVolume(d),
                this.config.set("soundVolume", d)
            }
            ),
            this.musicSliders.on("input", c => {
                const d = Number(u(c.target).val()) / 100;
                this.audioManager.setMusicVolume(d),
                this.config.set("musicVolume", d)
            }
            ),
            u(".modal-settings-item").children("input").each( (c, d) => {
                const w = u(d);
                w.prop("checked", this.config.get(w.prop("id")))
            }
            ),
            u(".modal-settings-item > input:checkbox").on("change", c => {
                const d = u(c.target);
                this.config.set(d.prop("id"), d.is(":checked"))
            }
            ),
            u(".btn-fullscreen-toggle").on("click", () => {
                Z.toggleFullScreen()
            }
            ),
            this.languageSelect.on("change", c => {
                const d = c.target.value;
                d && (this.config.set("language", d),
                oe.isSpellSync && window.spellSync && window.spellSync.changeLanguage(d),
                this.updateLogoBasedOnLanguage(d))
            }
            ),
            u("#btn-create-team").on("click", () => {
                this.tryJoinTeam(!0)
            }
            ),
            u("#btn-team-mobile-link-join").on("click", () => {
                let c = u("#team-link-input").val()?.trim();
                const d = c.indexOf("#");
                d >= 0 && (c = c.slice(d + 1)),
                c.length > 0 ? (u("#team-mobile-link").css("display", "none"),
                this.tryJoinTeam(!1, c)) : (u("#team-mobile-link-desc").css("display", "none"),
                u("#team-mobile-link-warning").css("display", "none").fadeIn(100))
            }
            ),
            u("#btn-team-leave").on("click", () => {
                window.history && window.history.replaceState("", "", "/"),
                u("#news-block").css("display", "block"),
                this.game?.free(),
                this.teamMenu.leave()
            }
            );
            const e = u("#news-current").data("date")
              , t = new Date(e).getTime();
            u(".right-column-toggle").on("click", () => {
                this.newsDisplayed ? (u("#news-wrapper").fadeOut(250),
                u("#pass-wrapper").fadeIn(250)) : (this.config.set("lastNewsTimestamp", t),
                u(".news-toggle").find(".account-alert").css("display", "none"),
                u("#news-wrapper").fadeIn(250),
                u("#pass-wrapper").fadeOut(250)),
                this.newsDisplayed = !this.newsDisplayed
            }
            );
            const i = this.config.get("lastNewsTimestamp");
            t > i && u(".news-toggle").find(".account-alert").css("display", "block"),
            this.setDOMFromConfig(),
            this.setAppActive(!0);
            const r = document.querySelector("#cvs")
              , s = window.devicePixelRatio > 1 ? 2 : 1;
            D.os == "ios" && (ws.PRECISION_FRAGMENT = fs.HIGH);
            const a = c => new Ss({
                width: window.innerWidth,
                height: window.innerHeight,
                view: r,
                antialias: !1,
                resolution: s,
                hello: !0,
                forceCanvas: c
            });
            let l = null;
            try {
                l = a(!1)
            } catch {
                l = a(!0)
            }
            this.pixi = l,
            this.pixi.renderer.events.destroy(),
            this.pixi.ticker.add(this.update, this),
            this.pixi.renderer.background.color = 7378501,
            this.resourceManager = new qo(this.pixi.renderer,this.audioManager,this.config),
            this.resourceManager.loadMapAssets("main"),
            this.input = new ga(document.getElementById("game-touch-area")),
            this.inputBinds = new Eo(this.input,this.config),
            this.inputBindUi = new Ro(this.input,this.inputBinds,this.localization);
            const h = () => {
                this.loadoutDisplay.free(),
                this.game.init(),
                this.onResize(),
                this.findGameAttempts = 0,
                this.ambience.onGameStart()
            }
              , p = c => {
                this.game.CPcPu && this.pass.scheduleUpdatePass(this.game.WyTcZ),
                this.game.free(),
                this.errorMessage = this.localization.translate(c || ""),
                this.teamMenu.onGameComplete(),
                this.ambience.onGameComplete(this.audioManager),
                this.setAppActive(!0),
                this.setPlayLockout(!1),
                c == "index-invalid-protocol" && this.showInvalidProtocolModal(),
                c == "rate_limited" && this.onJoinGameError(c),
                c && this.showErrorModal(c),
                console.error("Quitting", c),
                oe.gamePlayStop()
            }
            ;
            this.game = new Co(this.pixi,this.audioManager,this.localization,this.config,this.input,this.inputBinds,this.inputBindUi,this.ambience,this.resourceManager,h,p),
            this.loadoutDisplay = new Jo(this.pixi,this.audioManager,this.config,this.inputBinds,this.account),
            this.loadoutMenu.loadoutDisplay = this.loadoutDisplay,
            this.onResize(),
            this.tryJoinTeam(!1),
            ci.setupModals(this.inputBinds, this.inputBindUi),
            this.onConfigModified(),
            this.config.addModifiedListener(this.onConfigModified.bind(this)),
            To(),
            oe.gameLoadComplete()
        }
    }
    onUnload() {
        this.teamMenu.leave()
    }
    onResize() {
        D.onResize(),
        ci.onResize(),
        this.loadoutMenu.onResize(),
        this.pixi?.renderer.resize(D.screenWidth, D.screenHeight),
        this.game?.initialized && this.game.resize(),
        this.loadoutDisplay?.initialized && this.loadoutDisplay.resize(),
        this.refreshUi()
    }
    startPingTest() {
        const e = this.config.get("regionSelected") ? [this.config.get("region")] : this.pingTest.getRegionList();
        this.pingTest.start(e)
    }
    setAppActive(e) {
        this.active = e,
        this.quickPlayPendingModeIdx = -1,
        this.refreshUi(),
        e && this.errorModal.hide()
    }
    setPlayLockout(e) {
        const t = e ? 0 : 1e3;
        this.playButtons.stop().delay(t).animate({
            opacity: e ? .5 : 1
        }, 250),
        this.playLoading.stop().delay(t).animate({
            opacity: e ? 1 : 0
        }, {
            duration: 250,
            start: () => {
                this.playLoading.css({
                    "pointer-events": e ? "initial" : "none"
                })
            }
        })
    }
    onTeamMenuJoinGame(e) {
        this.waitOnAccount( () => {
            this.joinGame(e)
        }
        )
    }
    onTeamMenuLeave(e="") {
        e && e != "" && window.history && window.history.replaceState("", "", "/"),
        this.showErrorModal(e),
        this.errorMessage = e,
        this.setDOMFromConfig(),
        this.refreshUi()
    }
    setConfigFromDOM() {
        const e = Z.sanitizeNameInput(this.nameInput.val());
        this.config.set("playerName", e);
        const t = this.serverSelect.find(":selected").val();
        this.config.set("region", t)
    }
    setDOMFromConfig() {
        oe.isAnySDK && !this.config.get("playerName") && oe.getPlayerName().then(e => {
            e && (this.config.set("playerName", e),
            this.nameInput.val(e))
        }
        ),
        this.nameInput.val(this.config.get("playerName")),
        this.serverSelect.find("option").each( (e, t) => {
            const i = oe.isSpellSync && window.spellSync.language
              , r = this.config.get("region");
            t.selected = i ? t.value === i : t.value === r
        }
        ),
        this.languageSelect.val(this.localization.getLocale())
    }
    onConfigModified(e) {
        const t = this.config.get("muteAudio");
        t != this.audioManager.mute && (this.muteBtns.removeClass(t ? "audio-on-icon" : "audio-off-icon"),
        this.muteBtns.addClass(t ? "audio-off-icon" : "audio-on-icon"),
        this.audioManager.setMute(t));
        const i = this.config.get("masterVolume");
        this.masterSliders.val(i * 100),
        this.audioManager.setMasterVolume(i);
        const r = this.config.get("soundVolume");
        this.soundSliders.val(r * 100),
        this.audioManager.setSoundVolume(r);
        const s = this.config.get("musicVolume");
        if (this.musicSliders.val(s * 100),
        this.audioManager.setMusicVolume(s),
        e == "language") {
            const a = this.config.get("language");
            this.localization.setLocale(a),
            this.updateLogoBasedOnLanguage(a)
        }
        e == "region" && (this.config.set("regionSelected", !0),
        this.startPingTest()),
        e == "highResTex" && location.reload(),
        e === "debugHUD" && this.game?.debugHUD?.onConfigModified()
    }
    refreshUi() {
        this.startMenuWrapper.css("display", this.active ? "flex" : "none"),
        this.gameAreaWrapper.css({
            display: this.active ? "none" : "block",
            opacity: this.active ? 0 : 1
        }),
        this.active ? (u("body").removeClass("user-select-none"),
        document.removeEventListener("contextmenu", this.contextListener)) : (u("body").addClass("user-select-none"),
        u("#start-main").stop(!0),
        document.addEventListener("contextmenu", this.contextListener)),
        u("#ad-block-left").css("display", !D.isLandscape && this.teamMenu.active ? "none" : "block");
        const e = this.active && this.errorMessage != "";
        this.serverWarning.css({
            display: "block",
            opacity: e ? 1 : 0
        }),
        this.serverWarning.html(this.errorMessage);
        const t = (i, r) => {
            i.html(this.quickPlayPendingModeIdx === r ? '<div class="ui-spinner"></div>' : this.localization.translate(i.data("l10n")))
        }
        ;
        t(this.playMode0Btn, 0),
        t(this.playMode1Btn, 1),
        t(this.playMode2Btn, 2)
    }
    waitOnAccount(e) {
        if (this.account.requestsInFlight == 0)
            e();
        else {
            const t = setTimeout( () => {
                i(),
                xe.storeGeneric("account", "wait_timeout")
            }
            , 2500)
              , i = () => {
                e(),
                clearTimeout(t),
                this.account.removeEventListener("requestsComplete", i)
            }
            ;
            this.account.addEventListener("requestsComplete", i)
        }
    }
    tryJoinTeam(e, t) {
        if (this.active && this.quickPlayPendingModeIdx === -1) {
            let i = t || window.location.hash.slice(1);
            const r = oe.getRoomInviteParam();
            r && (i = r,
            e = !1),
            (e || i != "") && (this.setConfigFromDOM(),
            this.teamMenu.connect(e, i),
            this.refreshUi())
        }
    }
    tryQuickStartGame(e) {
        if (this.quickPlayPendingModeIdx === -1) {
            this.errorMessage = "",
            this.quickPlayPendingModeIdx = e,
            this.setConfigFromDOM(),
            this.refreshUi();
            let t = 0;
            this.findGameAttempts > 0 && Date.now() - this.findGameTime < 3e4 ? t = Math.min(this.findGameAttempts * 2.5 * 1e3, 7500) : this.findGameAttempts = 0,
            this.findGameTime = Date.now(),
            this.findGameAttempts++;
            const i = O.protocolVersion;
            let r = this.config.get("region");
            const s = Z.getParameterByName("region");
            s !== void 0 && s.length > 0 && (r = s);
            let a = this.pingTest.getZones(r);
            const l = Z.getParameterByName("zone");
            l !== void 0 && l.length > 0 && (a = [l]);
            const h = {
                version: i,
                region: r,
                zones: a,
                playerCount: 1,
                autoFill: !0,
                gameModeIdx: e
            }
              , p = () => {
                this.waitOnAccount( () => {
                    this.findGame(h, (c, d, w) => {
                        if (c) {
                            this.onJoinGameError(c);
                            return
                        }
                        if (w) {
                            this.showIpBanModal(w);
                            return
                        }
                        this.joinGame(d)
                    }
                    )
                }
                )
            }
            ;
            t == 0 ? p() : setTimeout( () => {
                p()
            }
            , t)
        }
    }
    findGame(e, t) {
        const i = (r, s, a) => {
            if (r >= s) {
                t("full");
                return
            }
            const l = () => {
                setTimeout( () => {
                    Z.verifyTurnstile(this.siteInfo.info.captchaEnabled && !this.account.loggedIn, h => {
                        i(r + 1, s, h)
                    }
                    )
                }
                , 500)
            }
            ;
            e.turnstileToken = a,
            u.ajax({
                type: "POST",
                url: Xe.resolveUrl("/api/find_game"),
                data: JSON.stringify(e),
                contentType: "application/json; charset=utf-8",
                timeout: 1e4,
                xhrFields: {
                    withCredentials: St.anyLoginSupported()
                },
                success: h => {
                    if (h.error === "invalid_captcha") {
                        this.siteInfo.info.captchaEnabled = !0,
                        l();
                        return
                    }
                    if (h.error && h.error != "full") {
                        t(h.error);
                        return
                    }
                    if (h.banned) {
                        t(null, void 0, h);
                        return
                    }
                    const p = h.res ? h.res[0] : null;
                    p?.hosts && p.addrs ? t(null, p) : l()
                }
                ,
                error: function(h) {
                    l()
                }
            })
        }
        ;
        Z.verifyTurnstile(this.siteInfo.info.captchaEnabled && !this.account.loggedIn, r => {
            i(0, 2, r)
        }
        )
    }
    joinGame(e) {
        if (!this.game) {
            setTimeout( () => {
                this.joinGame(e)
            }
            , 250);
            return
        }
        const t = e.hosts || []
          , i = [];
        for (let s = 0; s < t.length; s++)
            i.push(`ws${e.useHttps ? "s" : ""}://${t[s]}/play?gameId=${e.gameId}`);
        const r = (s, a) => {
            const l = s.shift();
            if (!l) {
                this.onJoinGameError("join_game_failed");
                return
            }
            const h = function() {
                r(s, a)
            };
            this.game.tryJoinGame(l, a.data, this.account.questPriv, h)
        }
        ;
        r(i, e)
    }
    onJoinGameError(e) {
        const t = {
            full: this.localization.translate("index-failed-finding-game"),
            invalid_protocol: this.localization.translate("index-invalid-protocol"),
            invalid_captcha: this.localization.translate("index-invalid-captcha"),
            join_game_failed: this.localization.translate("index-failed-joining-game"),
            rate_limited: this.localization.translate("index-rate-limited")
        };
        e == "invalid_protocol" && this.showInvalidProtocolModal(),
        e === "invalid_captcha" && (this.siteInfo.info.captchaEnabled = !0),
        this.showErrorModal(e),
        this.errorMessage = t[e] || t.full,
        this.quickPlayPendingModeIdx = -1,
        this.teamMenu.leave("join_game_failed"),
        this.refreshUi()
    }
    showInvalidProtocolModal() {
        this.refreshModal.show(!0)
    }
    showIpBanModal(e) {
        u("#modal-ip-banned-reason").text(`Reason: ${e.reason}`);
        let t = "Duration: indefinite";
        if (!e.permanent) {
            const r = new Date(e.expiresIn).getTime() - Date.now()
              , s = Math.round(r / (1e3 * 60 * 60 * 24))
              , a = Math.round(r / (1e3 * 60 * 60));
            s > 1 ? t = `Expires in: ${s} days` : a > 1 ? t = `Expires in: ${a} hours` : t = "Expires in: less than an hour"
        }
        u("#modal-ip-banned-expiration").text(t),
        this.ipBanModal.show(!0),
        this.quickPlayPendingModeIdx = -1,
        this.teamMenu.leave("banned"),
        this.refreshUi()
    }
    showErrorModal(e) {
        const i = {
            behind_proxy: this.localization.translate("index-behind-proxy"),
            ip_banned: this.localization.translate("index-ip-banned")
        }[e];
        i && (this.errorModal.selector.find(".modal-body-text").html(i),
        this.errorModal.show())
    }
    update() {
        const e = k.clamp(this.pixi.ticker.elapsedMS / 1e3, .001, .125);
        if (this.pingTest.update(e),
        !this.checkedPingTest && this.pingTest.isComplete()) {
            if (!this.config.get("regionSelected")) {
                const t = this.pingTest.getRegion();
                t && (this.config.set("region", t),
                this.setDOMFromConfig())
            }
            this.checkedPingTest = !0
        }
        this.resourceManager.update(e),
        this.audioManager.update(e),
        this.ambience.update(e, this.audioManager, !this.active),
        this.game?.initialized && this.game.HwI && (this.active && (this.setAppActive(!1),
        this.setPlayLockout(!0)),
        this.game.update(e)),
        this.active && this.loadoutDisplay && this.game && !this.game.initialized && (this.loadoutMenu.active ? (this.loadoutDisplay.initialized || this.loadoutDisplay.init(),
        this.loadoutDisplay.show(),
        this.loadoutDisplay.update(e, this.hasFocus)) : this.loadoutDisplay.hide()),
        !this.active && this.loadoutMenu.active && this.loadoutMenu.hide(),
        this.active && this.pass?.update(e),
        this.input.flush()
    }
}
const Ie = new sl;
function es() {
    Ie.domContentLoaded = !0,
    Ie.tryLoad()
}
document.addEventListener("DOMContentLoaded", es);
window.addEventListener("load", es);
window.addEventListener("unload", o => {
    Ie.onUnload()
}
);
window.location.hash == "#_=_" && (window.location.hash = "",
history.pushState("", document.title, window.location.pathname));
window.addEventListener("resize", () => {
    Ie.onResize()
}
);
window.addEventListener("orientationchange", () => {
    Ie.onResize()
}
);
window.addEventListener("hashchange", () => {
    Ie.tryJoinTeam(!1)
}
);
window.addEventListener("beforeunload", o => {
    if (Ie.game?.warnPageReload()) {
        const e = "Do you want to reload the game?";
        return o.returnValue = e,
        e
    }
}
);
window.addEventListener("focus", () => {
    Ie.hasFocus = !0
}
);
window.addEventListener("blur", () => {
    Ie.hasFocus = !1
}
);
const Cr = [];
window.onerror = function(o, e, t, i, r) {
    o = o || "undefined_error_msg";
    const s = r ? r.stack : "";
    if (!e && !t && !i)
        return;
    const a = {
        msg: o,
        id: Ie.sessionId,
        url: e,
        line: t,
        column: i,
        stacktrace: s,
        browser: navigator.userAgent,
        protocol: O.protocolVersion,
        clientGitVersion: "0ce67d022d00d547c4f519be6e26a6b6e5b87e79",
        serverGitVersion: Ie.siteInfo.info.gitRevision
    }
      , l = JSON.stringify(a);
    Cr.includes(l) || (Cr.push(l),
    xe.logWindowOnError(a))
}
;
navigator.serviceWorker?.getRegistrations().then(o => {
    for (const e of o)
        e.unregister()
}
);
